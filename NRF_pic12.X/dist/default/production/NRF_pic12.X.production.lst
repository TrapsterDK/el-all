

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Apr 19 11:26:45 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x5E,2
    25     0000                     
    26                           ; Version 2.40
    27                           ; Generated 04/07/2022 GMT
    28                           ; 
    29                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC12F675 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61     0000                     	;# 
    62     0001                     	;# 
    63     0002                     	;# 
    64     0003                     	;# 
    65     0004                     	;# 
    66     0005                     	;# 
    67     000A                     	;# 
    68     000B                     	;# 
    69     000C                     	;# 
    70     000E                     	;# 
    71     000E                     	;# 
    72     000F                     	;# 
    73     0010                     	;# 
    74     0019                     	;# 
    75     001E                     	;# 
    76     001F                     	;# 
    77     0081                     	;# 
    78     0085                     	;# 
    79     008C                     	;# 
    80     008E                     	;# 
    81     0090                     	;# 
    82     0095                     	;# 
    83     0096                     	;# 
    84     0096                     	;# 
    85     0099                     	;# 
    86     009A                     	;# 
    87     009A                     	;# 
    88     009B                     	;# 
    89     009C                     	;# 
    90     009D                     	;# 
    91     009E                     	;# 
    92     009F                     	;# 
    93     0000                     	;# 
    94     0001                     	;# 
    95     0002                     	;# 
    96     0003                     	;# 
    97     0004                     	;# 
    98     0005                     	;# 
    99     000A                     	;# 
   100     000B                     	;# 
   101     000C                     	;# 
   102     000E                     	;# 
   103     000E                     	;# 
   104     000F                     	;# 
   105     0010                     	;# 
   106     0019                     	;# 
   107     001E                     	;# 
   108     001F                     	;# 
   109     0081                     	;# 
   110     0085                     	;# 
   111     008C                     	;# 
   112     008E                     	;# 
   113     0090                     	;# 
   114     0095                     	;# 
   115     0096                     	;# 
   116     0096                     	;# 
   117     0099                     	;# 
   118     009A                     	;# 
   119     009A                     	;# 
   120     009B                     	;# 
   121     009C                     	;# 
   122     009D                     	;# 
   123     009E                     	;# 
   124     009F                     	;# 
   125                           
   126                           	psect	idataBANK0
   127     0222                     __pidataBANK0:
   128                           
   129                           ;initializer for main@F646
   130     0222  3445               	retlw	69
   131     0223  3445               	retlw	69
   132     0224  3400               	retlw	0
   133                           
   134                           ;initializer for _RADIO_ADDR
   135     0225  3401               	retlw	1
   136     0226  3404               	retlw	4
   137     0227  3406               	retlw	6
   138     0228  3404               	retlw	4
   139     0229  3405               	retlw	5
   140     0005                     _GPIO	set	5
   141     0019                     _CMCON	set	25
   142     001F                     _ADCON0	set	31
   143     002A                     _GPIO2	set	42
   144     0028                     _GPIO0	set	40
   145     002D                     _GPIO5	set	45
   146     002B                     _GPIO3	set	43
   147     002C                     _GPIO4	set	44
   148     0029                     _GPIO1	set	41
   149     0085                     _TRISIO	set	133
   150     0099                     _VRCON	set	153
   151     009F                     _ANSEL	set	159
   152     0428                     _TRISIO0	set	1064
   153     042D                     _TRISIO5	set	1069
   154     042B                     _TRISIO3	set	1067
   155     042C                     _TRISIO4	set	1068
   156     0429                     _TRISIO1	set	1065
   157                           
   158                           	psect	cinit
   159     03ED                     start_initialization:	
   160                           ; #config settings
   161                           
   162     03ED                     __initialization:
   163                           
   164                           ; Initialize objects allocated to BANK0
   165     03ED  2222               	fcall	__pidataBANK0	;fetch initializer
   166     03EE  00BD               	movwf	__pdataBANK0& (0+127)
   167     03EF  2223               	fcall	__pidataBANK0+1	;fetch initializer
   168     03F0  00BE               	movwf	(__pdataBANK0+1)& (0+127)
   169     03F1  2224               	fcall	__pidataBANK0+2	;fetch initializer
   170     03F2  00BF               	movwf	(__pdataBANK0+2)& (0+127)
   171     03F3  2225               	fcall	__pidataBANK0+3	;fetch initializer
   172     03F4  00C0               	movwf	(__pdataBANK0+3)& (0+127)
   173     03F5  2226               	fcall	__pidataBANK0+4	;fetch initializer
   174     03F6  00C1               	movwf	(__pdataBANK0+4)& (0+127)
   175     03F7  2227               	fcall	__pidataBANK0+5	;fetch initializer
   176     03F8  00C2               	movwf	(__pdataBANK0+5)& (0+127)
   177     03F9  2228               	fcall	__pidataBANK0+6	;fetch initializer
   178     03FA  00C3               	movwf	(__pdataBANK0+6)& (0+127)
   179     03FB  2229               	fcall	__pidataBANK0+7	;fetch initializer
   180     03FC  00C4               	movwf	(__pdataBANK0+7)& (0+127)
   181     03FD                     end_of_initialization:	
   182                           ;End of C runtime variable initialization code
   183                           
   184     03FD                     __end_of__initialization:
   185     03FD  0183               	clrf	3
   186     03FE  2B26               	ljmp	_main	;jump to C main() function
   187                           
   188                           	psect	dataBANK0
   189     003D                     __pdataBANK0:
   190     003D                     main@F646:
   191     003D                     	ds	3
   192     0040                     _RADIO_ADDR:
   193     0040                     	ds	5
   194                           
   195                           	psect	cstackCOMMON
   196     0000                     __pcstackCOMMON:
   197     0000                     ??_SPI_init_master:
   198     0000                     ??_nrf_write_register:	
   199                           ; 1 bytes @ 0x0
   200                           
   201     0000                     ??_nrf_read_register:	
   202                           ; 1 bytes @ 0x0
   203                           
   204     0000                     ??_nrf_write_command:	
   205                           ; 1 bytes @ 0x0
   206                           
   207     0000                     ??_nrf_flush_rxtx:	
   208                           ; 1 bytes @ 0x0
   209                           
   210     0000                     ??_nrf_send:	
   211                           ; 1 bytes @ 0x0
   212                           
   213                           
   214                           	psect	cstackBANK0
   215     0020                     __pcstackBANK0:	
   216                           ; 1 bytes @ 0x0
   217                           
   218     0020                     ?_SPI_init_master:
   219     0020                     ?_SPI_write:	
   220                           ; 1 bytes @ 0x0
   221                           
   222     0020                     ??_SPI_write:	
   223                           ; 1 bytes @ 0x0
   224                           
   225     0020                     ?_arrcpy:	
   226                           ; 1 bytes @ 0x0
   227                           
   228     0020                     ?_nrf_write_command:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     0020                     ?_nrf_flush_rxtx:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0020                     ?_nrf_set_tx_mode:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0020                     ?_main:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0020                     arrcpy@src:	
   241                           ; 1 bytes @ 0x0
   242                           
   243                           
   244                           ; 1 bytes @ 0x0
   245     0020                     	ds	1
   246     0021                     SPI_write@data:
   247     0021                     arrcpy@len:	
   248                           ; 1 bytes @ 0x1
   249                           
   250                           
   251                           ; 1 bytes @ 0x1
   252     0021                     	ds	1
   253     0022                     ??_arrcpy:
   254     0022                     SPI_write@read:	
   255                           ; 1 bytes @ 0x2
   256                           
   257                           
   258                           ; 1 bytes @ 0x2
   259     0022                     	ds	1
   260     0023                     SPI_write@i:
   261                           
   262                           ; 1 bytes @ 0x3
   263     0023                     	ds	1
   264     0024                     ?_nrf_command_with_data_overwrite:
   265     0024                     ?_nrf_command_with_data:	
   266                           ; 1 bytes @ 0x4
   267                           
   268     0024                     nrf_command_with_data_overwrite@data:	
   269                           ; 1 bytes @ 0x4
   270                           
   271     0024                     nrf_command_with_data@data:	
   272                           ; 1 bytes @ 0x4
   273                           
   274     0024                     nrf_write_command@command:	
   275                           ; 1 bytes @ 0x4
   276                           
   277                           
   278                           ; 1 bytes @ 0x4
   279     0024                     	ds	1
   280     0025                     arrcpy@dst:
   281     0025                     nrf_command_with_data_overwrite@len:	
   282                           ; 1 bytes @ 0x5
   283                           
   284     0025                     nrf_command_with_data@len:	
   285                           ; 1 bytes @ 0x5
   286                           
   287     0025                     nrf_write_command@status:	
   288                           ; 1 bytes @ 0x5
   289                           
   290                           
   291                           ; 1 bytes @ 0x5
   292     0025                     	ds	1
   293     0026                     ??_nrf_command_with_data_overwrite:
   294     0026                     ??_nrf_command_with_data:	
   295                           ; 1 bytes @ 0x6
   296                           
   297     0026                     arrcpy@i:	
   298                           ; 1 bytes @ 0x6
   299                           
   300                           
   301                           ; 1 bytes @ 0x6
   302     0026                     	ds	1
   303     0027                     nrf_command_with_data@command:
   304                           
   305                           ; 1 bytes @ 0x7
   306     0027                     	ds	1
   307     0028                     nrf_command_with_data@status:
   308                           
   309                           ; 1 bytes @ 0x8
   310     0028                     	ds	1
   311     0029                     nrf_command_with_data_overwrite@command:
   312     0029                     nrf_command_with_data@i:	
   313                           ; 1 bytes @ 0x9
   314                           
   315                           
   316                           ; 1 bytes @ 0x9
   317     0029                     	ds	1
   318     002A                     ?_nrf_write_register:
   319     002A                     nrf_command_with_data_overwrite@status:	
   320                           ; 1 bytes @ 0xA
   321                           
   322     002A                     nrf_write_register@data:	
   323                           ; 1 bytes @ 0xA
   324                           
   325                           
   326                           ; 1 bytes @ 0xA
   327     002A                     	ds	1
   328     002B                     nrf_command_with_data_overwrite@i:
   329     002B                     nrf_write_register@len:	
   330                           ; 1 bytes @ 0xB
   331                           
   332                           
   333                           ; 1 bytes @ 0xB
   334     002B                     	ds	1
   335     002C                     ?_nrf_read_register:
   336     002C                     nrf_write_register@reg:	
   337                           ; 1 bytes @ 0xC
   338                           
   339     002C                     nrf_read_register@data:	
   340                           ; 1 bytes @ 0xC
   341                           
   342                           
   343                           ; 1 bytes @ 0xC
   344     002C                     	ds	1
   345     002D                     ?_nrf_write_payload:
   346     002D                     nrf_read_register@len:	
   347                           ; 1 bytes @ 0xD
   348                           
   349     002D                     nrf_write_payload@len:	
   350                           ; 1 bytes @ 0xD
   351                           
   352     002D                     nrf_flush_rxtx@data:	
   353                           ; 1 bytes @ 0xD
   354                           
   355                           
   356                           ; 1 bytes @ 0xD
   357     002D                     	ds	1
   358     002E                     ??_nrf_write_payload:
   359     002E                     ?_nrf_setup:	
   360                           ; 1 bytes @ 0xE
   361                           
   362     002E                     nrf_read_register@reg:	
   363                           ; 1 bytes @ 0xE
   364                           
   365     002E                     nrf_setup@addr_size:	
   366                           ; 1 bytes @ 0xE
   367                           
   368                           
   369                           ; 1 bytes @ 0xE
   370     002E                     	ds	1
   371     002F                     ??_nrf_set_tx_mode:
   372     002F                     nrf_write_payload@data:	
   373                           ; 1 bytes @ 0xF
   374                           
   375     002F                     nrf_setup@payload_size:	
   376                           ; 1 bytes @ 0xF
   377                           
   378                           
   379                           ; 1 bytes @ 0xF
   380     002F                     	ds	1
   381     0030                     ??_nrf_setup:
   382     0030                     nrf_set_tx_mode@config:	
   383                           ; 1 bytes @ 0x10
   384                           
   385                           
   386                           ; 1 bytes @ 0x10
   387     0030                     	ds	1
   388     0031                     ?_nrf_send:
   389     0031                     nrf_send@len:	
   390                           ; 1 bytes @ 0x11
   391                           
   392                           
   393                           ; 1 bytes @ 0x11
   394     0031                     	ds	1
   395     0032                     nrf_setup@addr:
   396     0032                     nrf_send@stat:	
   397                           ; 1 bytes @ 0x12
   398                           
   399                           
   400                           ; 1 bytes @ 0x12
   401     0032                     	ds	1
   402     0033                     nrf_send@data:
   403     0033                     nrf_setup@data:	
   404                           ; 1 bytes @ 0x13
   405                           
   406                           
   407                           ; 5 bytes @ 0x13
   408     0033                     	ds	1
   409     0034                     nrf_send@clear:
   410                           
   411                           ; 1 bytes @ 0x14
   412     0034                     	ds	4
   413     0038                     ??_main:
   414                           
   415                           ; 1 bytes @ 0x18
   416     0038                     	ds	2
   417     003A                     main@data:
   418                           
   419                           ; 3 bytes @ 0x1A
   420     003A                     	ds	3
   421                           
   422                           	psect	maintext
   423     0326                     __pmaintext:	
   424 ;;
   425 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   426 ;;
   427 ;; *************** function _main *****************
   428 ;; Defined at:
   429 ;;		line 35 in file "main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;  data            3   26[BANK0 ] unsigned char [3]
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : B00/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMMON   BANK0
   443 ;;      Params:         0       0
   444 ;;      Locals:         0       3
   445 ;;      Temps:          0       2
   446 ;;      Totals:         0       5
   447 ;;Total ram usage:        5 bytes
   448 ;; Hardware stack levels required when called: 5
   449 ;; This function calls:
   450 ;;		_SPI_init_master
   451 ;;		_nrf_send
   452 ;;		_nrf_set_tx_mode
   453 ;;		_nrf_setup
   454 ;; This function is called by:
   455 ;;		Startup code after reset
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459     0326                     _main:	
   460                           ;psect for function _main
   461                           
   462     0326                     l1187:	
   463                           ;incstack = 0
   464                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   465                           
   466                           
   467                           ;main.c: 37:     ANSEL = 0;
   468     0326  1683               	bsf	3,5	;RP0=1, select bank1
   469     0327  019F               	clrf	31	;volatile
   470                           
   471                           ;main.c: 38:     ADCON0 = 0;
   472     0328  1283               	bcf	3,5	;RP0=0, select bank0
   473     0329  019F               	clrf	31	;volatile
   474     032A                     l1189:
   475                           
   476                           ;main.c: 39:     CMCON = 0x07;
   477     032A  3007               	movlw	7
   478     032B  0099               	movwf	25	;volatile
   479     032C                     l1191:
   480                           
   481                           ;main.c: 40:     VRCON = 0;
   482     032C  1683               	bsf	3,5	;RP0=1, select bank1
   483     032D  0199               	clrf	25	;volatile
   484     032E                     l1193:
   485                           
   486                           ;main.c: 42:     TRISIO = 0;
   487     032E  0185               	clrf	5	;volatile
   488     032F                     l1195:
   489                           
   490                           ;main.c: 43:     GPIO = 0;
   491     032F  1283               	bcf	3,5	;RP0=0, select bank0
   492     0330  0185               	clrf	5	;volatile
   493     0331                     l1197:
   494                           
   495                           ;main.c: 46:     SPI_init_master();
   496     0331  221A               	fcall	_SPI_init_master
   497     0332                     l1199:
   498                           
   499                           ;main.c: 49:     nrf_setup(RADIO_ADDR, 5, 3);
   500     0332  3005               	movlw	5
   501     0333  1283               	bcf	3,5	;RP0=0, select bank0
   502     0334  00AE               	movwf	nrf_setup@addr_size
   503     0335  3003               	movlw	3
   504     0336  00AF               	movwf	nrf_setup@payload_size
   505     0337  3040               	movlw	(low (_RADIO_ADDR| 0))& (0+255)
   506     0338  235D               	fcall	_nrf_setup
   507     0339                     l1201:
   508                           
   509                           ;main.c: 51:     nrf_set_tx_mode();
   510     0339  2280               	fcall	_nrf_set_tx_mode
   511     033A                     l1203:
   512                           
   513                           ;main.c: 54:     {;main.c: 55:         GPIO2 = 1;
   514     033A  1283               	bcf	3,5	;RP0=0, select bank0
   515     033B  1505               	bsf	5,2	;volatile
   516     033C                     l1205:
   517                           
   518                           ;main.c: 56:         uint8_t data[3] = "EE";
   519     033C  083D               	movf	main@F646,w
   520     033D  00BA               	movwf	main@data
   521     033E  083E               	movf	main@F646+1,w
   522     033F  00BB               	movwf	main@data+1
   523     0340  083F               	movf	main@F646+2,w
   524     0341  00BC               	movwf	main@data+2
   525     0342                     l1207:
   526                           
   527                           ;main.c: 57:         nrf_send(data, 3);
   528     0342  3003               	movlw	3
   529     0343  00B1               	movwf	nrf_send@len
   530     0344  303A               	movlw	(low (main@data| 0))& (0+255)
   531     0345  2267               	fcall	_nrf_send
   532     0346                     l1209:
   533                           
   534                           ;main.c: 58:         _delay((unsigned long)((100)*(4000000UL/4000.0)));
   535     0346  3082               	movlw	130
   536     0347  1283               	bcf	3,5	;RP0=0, select bank0
   537     0348  00B9               	movwf	??_main+1
   538     0349  30DD               	movlw	221
   539     034A  00B8               	movwf	??_main
   540     034B                     u217:
   541     034B  0BB8               	decfsz	??_main,f
   542     034C  2B4B               	goto	u217
   543     034D  0BB9               	decfsz	??_main+1,f
   544     034E  2B4B               	goto	u217
   545     034F  2B50               	nop2
   546     0350                     l1211:
   547                           
   548                           ;main.c: 59:         GPIO2 = 0;
   549     0350  1283               	bcf	3,5	;RP0=0, select bank0
   550     0351  1105               	bcf	5,2	;volatile
   551     0352                     l1213:
   552                           
   553                           ;main.c: 60:         _delay((unsigned long)((100)*(4000000UL/4000.0)));
   554     0352  3082               	movlw	130
   555     0353  00B9               	movwf	??_main+1
   556     0354  30DD               	movlw	221
   557     0355  00B8               	movwf	??_main
   558     0356                     u227:
   559     0356  0BB8               	decfsz	??_main,f
   560     0357  2B56               	goto	u227
   561     0358  0BB9               	decfsz	??_main+1,f
   562     0359  2B56               	goto	u227
   563     035A  2B5B               	nop2
   564     035B  2B3A               	goto	l1203
   565     035C  2800               	ljmp	start
   566     035D                     __end_of_main:
   567                           
   568                           	psect	text1
   569     035D                     __ptext1:	
   570 ;; *************** function _nrf_setup *****************
   571 ;; Defined at:
   572 ;;		line 175 in file "./nrf24l01.h"
   573 ;; Parameters:    Size  Location     Type
   574 ;;  addr            1    wreg     PTR unsigned char 
   575 ;;		 -> RADIO_ADDR(5), 
   576 ;;  addr_size       1   14[BANK0 ] unsigned char 
   577 ;;  payload_size    1   15[BANK0 ] unsigned char 
   578 ;; Auto vars:     Size  Location     Type
   579 ;;  addr            1   18[BANK0 ] PTR unsigned char 
   580 ;;		 -> RADIO_ADDR(5), 
   581 ;;  data            5   19[BANK0 ] unsigned char [5]
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      void 
   584 ;; Registers used:
   585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMMON   BANK0
   591 ;;      Params:         0       2
   592 ;;      Locals:         0       6
   593 ;;      Temps:          0       2
   594 ;;      Totals:         0      10
   595 ;;Total ram usage:       10 bytes
   596 ;; Hardware stack levels used: 1
   597 ;; Hardware stack levels required when called: 4
   598 ;; This function calls:
   599 ;;		_arrcpy
   600 ;;		_nrf_flush_rxtx
   601 ;;		_nrf_write_register
   602 ;; This function is called by:
   603 ;;		_main
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607     035D                     _nrf_setup:	
   608                           ;psect for function _nrf_setup
   609                           
   610                           
   611                           ;incstack = 0
   612                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   613                           ;nrf_setup@addr stored from wreg
   614     035D  1283               	bcf	3,5	;RP0=0, select bank0
   615     035E  00B2               	movwf	nrf_setup@addr
   616     035F                     l1099:
   617                           
   618                           ;./nrf24l01.h: 175:     void nrf_setup(uint8_t *addr, uint8_t addr_size, uint8_t payload
      +                          _size);./nrf24l01.h: 176:     {;./nrf24l01.h: 177:         TRISIO5 = 0;
   619     035F  1683               	bsf	3,5	;RP0=1, select bank1
   620     0360  1285               	bcf	5,5	;volatile
   621                           
   622                           ;./nrf24l01.h: 178:         TRISIO0 = 0;
   623     0361  1005               	bcf	5,0	;volatile
   624                           
   625                           ;./nrf24l01.h: 180:         GPIO5 = 1;
   626     0362  1283               	bcf	3,5	;RP0=0, select bank0
   627     0363  1685               	bsf	5,5	;volatile
   628                           
   629                           ;./nrf24l01.h: 181:         GPIO0 = 0;
   630     0364  1005               	bcf	5,0	;volatile
   631     0365                     l1101:
   632                           
   633                           ;./nrf24l01.h: 183:         _delay((unsigned long)((100)*(4000000UL/4000.0)));
   634     0365  3082               	movlw	130
   635     0366  00B1               	movwf	??_nrf_setup+1
   636     0367  30DD               	movlw	221
   637     0368  00B0               	movwf	??_nrf_setup
   638     0369                     u237:
   639     0369  0BB0               	decfsz	??_nrf_setup,f
   640     036A  2B69               	goto	u237
   641     036B  0BB1               	decfsz	??_nrf_setup+1,f
   642     036C  2B69               	goto	u237
   643     036D  2B6E               	nop2
   644                           
   645                           ;./nrf24l01.h: 185:         uint8_t data[5];;./nrf24l01.h: 187:         data[0] = 0x0B;
   646     036E  300B               	movlw	11
   647     036F  1283               	bcf	3,5	;RP0=0, select bank0
   648     0370  00B3               	movwf	nrf_setup@data
   649     0371                     l1103:
   650                           
   651                           ;./nrf24l01.h: 188:         nrf_write_register(0x00, (uint8_t *)&data, 1);
   652     0371  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   653     0372  00AA               	movwf	nrf_write_register@data
   654     0373  01AB               	clrf	nrf_write_register@len
   655     0374  0AAB               	incf	nrf_write_register@len,f
   656     0375  3000               	movlw	0
   657     0376  2233               	fcall	_nrf_write_register
   658     0377                     l1105:
   659                           
   660                           ;./nrf24l01.h: 189:         data[0] = 0x00;
   661     0377  1283               	bcf	3,5	;RP0=0, select bank0
   662     0378  01B3               	clrf	nrf_setup@data
   663     0379                     l1107:
   664                           
   665                           ;./nrf24l01.h: 190:         nrf_write_register(0x01, (uint8_t *)&data, 1);
   666     0379  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   667     037A  00AA               	movwf	nrf_write_register@data
   668     037B  01AB               	clrf	nrf_write_register@len
   669     037C  0AAB               	incf	nrf_write_register@len,f
   670     037D  3001               	movlw	1
   671     037E  2233               	fcall	_nrf_write_register
   672     037F                     l1109:
   673                           
   674                           ;./nrf24l01.h: 191:         data[0] = 0x01;
   675     037F  1283               	bcf	3,5	;RP0=0, select bank0
   676     0380  01B3               	clrf	nrf_setup@data
   677     0381  0AB3               	incf	nrf_setup@data,f
   678     0382                     l1111:
   679                           
   680                           ;./nrf24l01.h: 192:         nrf_write_register(0x02, (uint8_t *)&data, 1);
   681     0382  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   682     0383  00AA               	movwf	nrf_write_register@data
   683     0384  01AB               	clrf	nrf_write_register@len
   684     0385  0AAB               	incf	nrf_write_register@len,f
   685     0386  3002               	movlw	2
   686     0387  2233               	fcall	_nrf_write_register
   687                           
   688                           ;./nrf24l01.h: 194:         switch (addr_size){
   689     0388  2B92               	goto	l1119
   690     0389                     l83:	
   691                           ;./nrf24l01.h: 195:             case 3:
   692                           
   693                           
   694                           ;./nrf24l01.h: 196:                 data[0] = 0x01;
   695     0389  01B3               	clrf	nrf_setup@data
   696     038A  0AB3               	incf	nrf_setup@data,f
   697                           
   698                           ;./nrf24l01.h: 197:                 break;
   699     038B  2BA6               	goto	l1121
   700     038C                     l1113:
   701                           
   702                           ;./nrf24l01.h: 199:                 data[0] = 0x02;
   703     038C  3002               	movlw	2
   704     038D  00B3               	movwf	nrf_setup@data
   705                           
   706                           ;./nrf24l01.h: 200:                 break;
   707     038E  2BA6               	goto	l1121
   708     038F                     l1115:
   709                           
   710                           ;./nrf24l01.h: 202:                 data[0] = 0x03;
   711     038F  3003               	movlw	3
   712     0390  00B3               	movwf	nrf_setup@data
   713                           
   714                           ;./nrf24l01.h: 203:                 break;
   715     0391  2BA6               	goto	l1121
   716     0392                     l1119:
   717     0392  1283               	bcf	3,5	;RP0=0, select bank0
   718     0393  082E               	movf	nrf_setup@addr_size,w
   719     0394  00B0               	movwf	??_nrf_setup
   720     0395  01B1               	clrf	??_nrf_setup+1
   721                           
   722                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   723                           ; Switch size 1, requested type "simple"
   724                           ; Number of cases is 1, Range of values is 0 to 0
   725                           ; switch strategies available:
   726                           ; Name         Instructions Cycles
   727                           ; simple_byte            4     3 (average)
   728                           ; direct_byte            7     6 (fixed)
   729                           ; jumptable            260     6 (fixed)
   730                           ;	Chosen strategy is simple_byte
   731     0396  0831               	movf	??_nrf_setup+1,w
   732     0397  3A00               	xorlw	0	; case 0
   733     0398  1903               	skipnz
   734     0399  2B9B               	goto	l1235
   735     039A  2BA6               	goto	l1121
   736     039B                     l1235:
   737                           
   738                           ; Switch size 1, requested type "simple"
   739                           ; Number of cases is 3, Range of values is 3 to 5
   740                           ; switch strategies available:
   741                           ; Name         Instructions Cycles
   742                           ; simple_byte           10     6 (average)
   743                           ; direct_byte           12     9 (fixed)
   744                           ; jumptable            263     9 (fixed)
   745                           ;	Chosen strategy is simple_byte
   746     039B  0830               	movf	??_nrf_setup,w
   747     039C  3A03               	xorlw	3	; case 3
   748     039D  1903               	skipnz
   749     039E  2B89               	goto	l83
   750     039F  3A07               	xorlw	7	; case 4
   751     03A0  1903               	skipnz
   752     03A1  2B8C               	goto	l1113
   753     03A2  3A01               	xorlw	1	; case 5
   754     03A3  1903               	skipnz
   755     03A4  2B8F               	goto	l1115
   756     03A5  2BA6               	goto	l1121
   757     03A6                     l1121:
   758                           
   759                           ;./nrf24l01.h: 206:         nrf_write_register(0x03, (uint8_t *)&data, 1);
   760     03A6  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   761     03A7  00AA               	movwf	nrf_write_register@data
   762     03A8  01AB               	clrf	nrf_write_register@len
   763     03A9  0AAB               	incf	nrf_write_register@len,f
   764     03AA  3003               	movlw	3
   765     03AB  2233               	fcall	_nrf_write_register
   766     03AC                     l1123:
   767                           
   768                           ;./nrf24l01.h: 207:         data[0] = 0x00;
   769     03AC  1283               	bcf	3,5	;RP0=0, select bank0
   770     03AD  01B3               	clrf	nrf_setup@data
   771     03AE                     l1125:
   772                           
   773                           ;./nrf24l01.h: 208:         nrf_write_register(0x04, (uint8_t *)&data, 1);
   774     03AE  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   775     03AF  00AA               	movwf	nrf_write_register@data
   776     03B0  01AB               	clrf	nrf_write_register@len
   777     03B1  0AAB               	incf	nrf_write_register@len,f
   778     03B2  3004               	movlw	4
   779     03B3  2233               	fcall	_nrf_write_register
   780     03B4                     l1127:
   781                           
   782                           ;./nrf24l01.h: 209:         data[0] = 0x01;
   783     03B4  1283               	bcf	3,5	;RP0=0, select bank0
   784     03B5  01B3               	clrf	nrf_setup@data
   785     03B6  0AB3               	incf	nrf_setup@data,f
   786     03B7                     l1129:
   787                           
   788                           ;./nrf24l01.h: 210:         nrf_write_register(0x05, (uint8_t *)&data, 1);
   789     03B7  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   790     03B8  00AA               	movwf	nrf_write_register@data
   791     03B9  01AB               	clrf	nrf_write_register@len
   792     03BA  0AAB               	incf	nrf_write_register@len,f
   793     03BB  3005               	movlw	5
   794     03BC  2233               	fcall	_nrf_write_register
   795     03BD                     l1131:
   796                           
   797                           ;./nrf24l01.h: 211:         data[0] = 0x26;
   798     03BD  3026               	movlw	38
   799     03BE  1283               	bcf	3,5	;RP0=0, select bank0
   800     03BF  00B3               	movwf	nrf_setup@data
   801     03C0                     l1133:
   802                           
   803                           ;./nrf24l01.h: 212:         nrf_write_register(0x06, (uint8_t *)&data, 1);
   804     03C0  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   805     03C1  00AA               	movwf	nrf_write_register@data
   806     03C2  01AB               	clrf	nrf_write_register@len
   807     03C3  0AAB               	incf	nrf_write_register@len,f
   808     03C4  3006               	movlw	6
   809     03C5  2233               	fcall	_nrf_write_register
   810     03C6                     l1135:
   811                           
   812                           ;./nrf24l01.h: 213:         data[0] = payload_size;
   813     03C6  1283               	bcf	3,5	;RP0=0, select bank0
   814     03C7  082F               	movf	nrf_setup@payload_size,w
   815     03C8  00B3               	movwf	nrf_setup@data
   816     03C9                     l1137:
   817                           
   818                           ;./nrf24l01.h: 214:         nrf_write_register(0x11, (uint8_t *)&data, 1);
   819     03C9  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   820     03CA  00AA               	movwf	nrf_write_register@data
   821     03CB  01AB               	clrf	nrf_write_register@len
   822     03CC  0AAB               	incf	nrf_write_register@len,f
   823     03CD  3011               	movlw	17
   824     03CE  2233               	fcall	_nrf_write_register
   825     03CF                     l1139:
   826                           
   827                           ;./nrf24l01.h: 216:         arrcpy(data, addr, addr_size);
   828     03CF  1283               	bcf	3,5	;RP0=0, select bank0
   829     03D0  0832               	movf	nrf_setup@addr,w
   830     03D1  00A0               	movwf	arrcpy@src
   831     03D2  082E               	movf	nrf_setup@addr_size,w
   832     03D3  00A1               	movwf	arrcpy@len
   833     03D4  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   834     03D5  229B               	fcall	_arrcpy
   835     03D6                     l1141:
   836                           
   837                           ;./nrf24l01.h: 217:         nrf_write_register(0x0A, data, addr_size);
   838     03D6  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   839     03D7  1283               	bcf	3,5	;RP0=0, select bank0
   840     03D8  00AA               	movwf	nrf_write_register@data
   841     03D9  082E               	movf	nrf_setup@addr_size,w
   842     03DA  00AB               	movwf	nrf_write_register@len
   843     03DB  300A               	movlw	10
   844     03DC  2233               	fcall	_nrf_write_register
   845     03DD                     l1143:
   846                           
   847                           ;./nrf24l01.h: 219:         arrcpy(data, addr, addr_size);
   848     03DD  1283               	bcf	3,5	;RP0=0, select bank0
   849     03DE  0832               	movf	nrf_setup@addr,w
   850     03DF  00A0               	movwf	arrcpy@src
   851     03E0  082E               	movf	nrf_setup@addr_size,w
   852     03E1  00A1               	movwf	arrcpy@len
   853     03E2  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   854     03E3  229B               	fcall	_arrcpy
   855     03E4                     l1145:
   856                           
   857                           ;./nrf24l01.h: 220:         nrf_write_register(0x10, data, addr_size);
   858     03E4  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   859     03E5  1283               	bcf	3,5	;RP0=0, select bank0
   860     03E6  00AA               	movwf	nrf_write_register@data
   861     03E7  082E               	movf	nrf_setup@addr_size,w
   862     03E8  00AB               	movwf	nrf_write_register@len
   863     03E9  3010               	movlw	16
   864     03EA  2233               	fcall	_nrf_write_register
   865     03EB                     l1147:
   866                           
   867                           ;./nrf24l01.h: 222:         nrf_flush_rxtx();
   868     03EB  2247               	fcall	_nrf_flush_rxtx
   869     03EC                     l87:
   870     03EC  0008               	return
   871     03ED                     __end_of_nrf_setup:
   872                           
   873                           	psect	text2
   874     0247                     __ptext2:	
   875 ;; *************** function _nrf_flush_rxtx *****************
   876 ;; Defined at:
   877 ;;		line 165 in file "./nrf24l01.h"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;  data            1   13[BANK0 ] unsigned char 
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMMON   BANK0
   891 ;;      Params:         0       0
   892 ;;      Locals:         0       1
   893 ;;      Temps:          0       0
   894 ;;      Totals:         0       1
   895 ;;Total ram usage:        1 bytes
   896 ;; Hardware stack levels used: 1
   897 ;; Hardware stack levels required when called: 3
   898 ;; This function calls:
   899 ;;		_nrf_write_command
   900 ;;		_nrf_write_register
   901 ;; This function is called by:
   902 ;;		_nrf_setup
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906     0247                     _nrf_flush_rxtx:	
   907                           ;psect for function _nrf_flush_rxtx
   908                           
   909     0247                     l1075:	
   910                           ;incstack = 0
   911                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   912                           
   913                           
   914                           ;./nrf24l01.h: 167:         uint8_t data = 0b01110000;
   915     0247  3070               	movlw	112
   916     0248  1283               	bcf	3,5	;RP0=0, select bank0
   917     0249  00AD               	movwf	nrf_flush_rxtx@data
   918     024A                     l1077:
   919                           
   920                           ;./nrf24l01.h: 168:         nrf_write_register(0x07, &data, 1);
   921     024A  302D               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
   922     024B  00AA               	movwf	nrf_write_register@data
   923     024C  01AB               	clrf	nrf_write_register@len
   924     024D  0AAB               	incf	nrf_write_register@len,f
   925     024E  3007               	movlw	7
   926     024F  2233               	fcall	_nrf_write_register
   927     0250                     l1079:
   928                           
   929                           ;./nrf24l01.h: 169:         nrf_write_command(0b11100001);
   930     0250  30E1               	movlw	225
   931     0251  223D               	fcall	_nrf_write_command
   932     0252                     l1081:
   933                           
   934                           ;./nrf24l01.h: 170:         nrf_write_command(0b11100010);
   935     0252  30E2               	movlw	226
   936     0253  223D               	fcall	_nrf_write_command
   937     0254                     l79:
   938     0254  0008               	return
   939     0255                     __end_of_nrf_flush_rxtx:
   940                           
   941                           	psect	text3
   942     029B                     __ptext3:	
   943 ;; *************** function _arrcpy *****************
   944 ;; Defined at:
   945 ;;		line 97 in file "./nrf24l01.h"
   946 ;; Parameters:    Size  Location     Type
   947 ;;  dst             1    wreg     PTR unsigned char 
   948 ;;		 -> nrf_setup@data(5), 
   949 ;;  src             1    0[BANK0 ] PTR unsigned char 
   950 ;;		 -> RADIO_ADDR(5), 
   951 ;;  len             1    1[BANK0 ] unsigned char 
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  dst             1    5[BANK0 ] PTR unsigned char 
   954 ;;		 -> nrf_setup@data(5), 
   955 ;;  i               1    6[BANK0 ] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  1    wreg      void 
   958 ;; Registers used:
   959 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMMON   BANK0
   965 ;;      Params:         0       2
   966 ;;      Locals:         0       2
   967 ;;      Temps:          0       3
   968 ;;      Totals:         0       7
   969 ;;Total ram usage:        7 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_nrf_setup
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978     029B                     _arrcpy:	
   979                           ;psect for function _arrcpy
   980                           
   981                           
   982                           ;incstack = 0
   983                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0]
   984                           ;arrcpy@dst stored from wreg
   985     029B  1283               	bcf	3,5	;RP0=0, select bank0
   986     029C  00A5               	movwf	arrcpy@dst
   987     029D                     l1057:
   988                           
   989                           ;./nrf24l01.h: 97:     void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);./nrf24l01.h
      +                          : 98:     {;./nrf24l01.h: 99:         for (uint8_t i = 0; i < len; i++)
   990     029D  01A6               	clrf	arrcpy@i
   991     029E  2AB2               	goto	l1063
   992     029F                     l1059:
   993                           
   994                           ;./nrf24l01.h: 100:         {;./nrf24l01.h: 101:             dst[i] = src[i];
   995     029F  0826               	movf	arrcpy@i,w
   996     02A0  0720               	addwf	arrcpy@src,w
   997     02A1  00A2               	movwf	??_arrcpy
   998     02A2  0822               	movf	??_arrcpy,w
   999     02A3  0084               	movwf	4
  1000     02A4  1383               	bcf	3,7	;select IRP bank0
  1001     02A5  0800               	movf	0,w
  1002     02A6  00A3               	movwf	??_arrcpy+1
  1003     02A7  0826               	movf	arrcpy@i,w
  1004     02A8  0725               	addwf	arrcpy@dst,w
  1005     02A9  00A4               	movwf	??_arrcpy+2
  1006     02AA  0824               	movf	??_arrcpy+2,w
  1007     02AB  0084               	movwf	4
  1008     02AC  0823               	movf	??_arrcpy+1,w
  1009     02AD  0080               	movwf	0
  1010     02AE                     l1061:
  1011                           
  1012                           ;./nrf24l01.h: 102:         }
  1013     02AE  3001               	movlw	1
  1014     02AF  00A2               	movwf	??_arrcpy
  1015     02B0  0822               	movf	??_arrcpy,w
  1016     02B1  07A6               	addwf	arrcpy@i,f
  1017     02B2                     l1063:
  1018     02B2  0821               	movf	arrcpy@len,w
  1019     02B3  0226               	subwf	arrcpy@i,w
  1020     02B4  1C03               	skipc
  1021     02B5  2AB7               	goto	u171
  1022     02B6  2AB8               	goto	u170
  1023     02B7                     u171:
  1024     02B7  2A9F               	goto	l1059
  1025     02B8                     u170:
  1026     02B8                     l52:
  1027     02B8  0008               	return
  1028     02B9                     __end_of_arrcpy:
  1029                           
  1030                           	psect	text4
  1031     0267                     __ptext4:	
  1032 ;; *************** function _nrf_send *****************
  1033 ;; Defined at:
  1034 ;;		line 265 in file "./nrf24l01.h"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;  data            1    wreg     PTR unsigned char 
  1037 ;;		 -> main@data(3), 
  1038 ;;  len             1   17[BANK0 ] unsigned char 
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;  data            1   19[BANK0 ] PTR unsigned char 
  1041 ;;		 -> main@data(3), 
  1042 ;;  clear           1   20[BANK0 ] unsigned char 
  1043 ;;  stat            1   18[BANK0 ] unsigned char 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMMON   BANK0
  1053 ;;      Params:         0       1
  1054 ;;      Locals:         0       3
  1055 ;;      Temps:          0       0
  1056 ;;      Totals:         0       4
  1057 ;;Total ram usage:        4 bytes
  1058 ;; Hardware stack levels used: 1
  1059 ;; Hardware stack levels required when called: 4
  1060 ;; This function calls:
  1061 ;;		_nrf_set_tx_mode
  1062 ;;		_nrf_write_command
  1063 ;;		_nrf_write_payload
  1064 ;;		_nrf_write_register
  1065 ;; This function is called by:
  1066 ;;		_main
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070     0267                     _nrf_send:	
  1071                           ;psect for function _nrf_send
  1072                           
  1073                           
  1074                           ;incstack = 0
  1075                           ; Regs used in _nrf_send: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1076                           ;nrf_send@data stored from wreg
  1077     0267  1283               	bcf	3,5	;RP0=0, select bank0
  1078     0268  00B3               	movwf	nrf_send@data
  1079     0269                     l1153:
  1080                           
  1081                           ;./nrf24l01.h: 265:     void nrf_send(uint8_t *data, uint8_t len);./nrf24l01.h: 266:    
      +                           {;./nrf24l01.h: 267:         nrf_set_tx_mode();
  1082     0269  2280               	fcall	_nrf_set_tx_mode
  1083                           
  1084                           ;./nrf24l01.h: 268:         nrf_write_payload(data, len);
  1085     026A  1283               	bcf	3,5	;RP0=0, select bank0
  1086     026B  0831               	movf	nrf_send@len,w
  1087     026C  00AD               	movwf	nrf_write_payload@len
  1088     026D  0833               	movf	nrf_send@data,w
  1089     026E  2255               	fcall	_nrf_write_payload
  1090     026F                     l1155:
  1091                           
  1092                           ;./nrf24l01.h: 273:         {;./nrf24l01.h: 274:             stat = nrf_write_command(0b
      +                          11111111);
  1093     026F  30FF               	movlw	255
  1094     0270  223D               	fcall	_nrf_write_command
  1095     0271  1283               	bcf	3,5	;RP0=0, select bank0
  1096     0272  00B2               	movwf	nrf_send@stat
  1097     0273                     l1157:
  1098                           
  1099                           ;./nrf24l01.h: 275:         } while ((stat & 0x20) == 0);
  1100     0273  1EB2               	btfss	nrf_send@stat,5
  1101     0274  2A76               	goto	u191
  1102     0275  2A77               	goto	u190
  1103     0276                     u191:
  1104     0276  2A6F               	goto	l1155
  1105     0277                     u190:
  1106     0277                     l1159:
  1107                           
  1108                           ;./nrf24l01.h: 278:         uint8_t clear = 0x20;
  1109     0277  3020               	movlw	32
  1110     0278  00B4               	movwf	nrf_send@clear
  1111     0279                     l1161:
  1112                           
  1113                           ;./nrf24l01.h: 279:         nrf_write_register(0x07, &clear, 1);
  1114     0279  3034               	movlw	(low (nrf_send@clear| 0))& (0+255)
  1115     027A  00AA               	movwf	nrf_write_register@data
  1116     027B  01AB               	clrf	nrf_write_register@len
  1117     027C  0AAB               	incf	nrf_write_register@len,f
  1118     027D  3007               	movlw	7
  1119     027E  2233               	fcall	_nrf_write_register
  1120     027F                     l103:
  1121     027F  0008               	return
  1122     0280                     __end_of_nrf_send:
  1123                           
  1124                           	psect	text5
  1125     0255                     __ptext5:	
  1126 ;; *************** function _nrf_write_payload *****************
  1127 ;; Defined at:
  1128 ;;		line 143 in file "./nrf24l01.h"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;  data            1    wreg     PTR unsigned char 
  1131 ;;		 -> main@data(3), 
  1132 ;;  len             1   13[BANK0 ] unsigned char 
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  data            1   15[BANK0 ] PTR unsigned char 
  1135 ;;		 -> main@data(3), 
  1136 ;;  status          1    0        unsigned char 
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      unsigned char 
  1139 ;; Registers used:
  1140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0
  1146 ;;      Params:         0       1
  1147 ;;      Locals:         0       1
  1148 ;;      Temps:          0       1
  1149 ;;      Totals:         0       3
  1150 ;;Total ram usage:        3 bytes
  1151 ;; Hardware stack levels used: 1
  1152 ;; Hardware stack levels required when called: 3
  1153 ;; This function calls:
  1154 ;;		_nrf_write_register
  1155 ;; This function is called by:
  1156 ;;		_nrf_send
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160     0255                     _nrf_write_payload:	
  1161                           ;psect for function _nrf_write_payload
  1162                           
  1163                           
  1164                           ;incstack = 0
  1165                           ; Regs used in _nrf_write_payload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1166                           ;nrf_write_payload@data stored from wreg
  1167     0255  1283               	bcf	3,5	;RP0=0, select bank0
  1168     0256  00AF               	movwf	nrf_write_payload@data
  1169     0257                     l1065:
  1170     0257  082F               	movf	nrf_write_payload@data,w
  1171     0258  00AA               	movwf	nrf_write_register@data
  1172     0259  082D               	movf	nrf_write_payload@len,w
  1173     025A  00AB               	movwf	nrf_write_register@len
  1174     025B  30A0               	movlw	160
  1175     025C  2233               	fcall	_nrf_write_register
  1176     025D                     l1067:
  1177                           
  1178                           ;./nrf24l01.h: 146:         GPIO0 = 1;
  1179     025D  1283               	bcf	3,5	;RP0=0, select bank0
  1180     025E  1405               	bsf	5,0	;volatile
  1181     025F                     l1069:
  1182                           
  1183                           ;./nrf24l01.h: 147:         _delay((unsigned long)((20)*(4000000UL/4000000.0)));
  1184     025F  3006               	movlw	6
  1185     0260  00AE               	movwf	??_nrf_write_payload
  1186     0261                     u247:
  1187     0261  0BAE               	decfsz	??_nrf_write_payload,f
  1188     0262  2A61               	goto	u247
  1189     0263  0000               	nop
  1190     0264                     l1071:
  1191                           
  1192                           ;./nrf24l01.h: 148:         GPIO0 = 0;
  1193     0264  1283               	bcf	3,5	;RP0=0, select bank0
  1194     0265  1005               	bcf	5,0	;volatile
  1195     0266                     l73:
  1196     0266  0008               	return
  1197     0267                     __end_of_nrf_write_payload:
  1198                           
  1199                           	psect	text6
  1200     023D                     __ptext6:	
  1201 ;; *************** function _nrf_write_command *****************
  1202 ;; Defined at:
  1203 ;;		line 153 in file "./nrf24l01.h"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;  command         1    wreg     unsigned char 
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;  command         1    4[BANK0 ] unsigned char 
  1208 ;;  status          1    5[BANK0 ] unsigned char 
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      unsigned char 
  1211 ;; Registers used:
  1212 ;;		wreg, status,2, status,0, pclath, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMMON   BANK0
  1218 ;;      Params:         0       0
  1219 ;;      Locals:         0       2
  1220 ;;      Temps:          0       0
  1221 ;;      Totals:         0       2
  1222 ;;Total ram usage:        2 bytes
  1223 ;; Hardware stack levels used: 1
  1224 ;; Hardware stack levels required when called: 1
  1225 ;; This function calls:
  1226 ;;		_SPI_write
  1227 ;; This function is called by:
  1228 ;;		_nrf_flush_rxtx
  1229 ;;		_nrf_send
  1230 ;;		_nrf_data_available
  1231 ;;		_nrf_read
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235     023D                     _nrf_write_command:	
  1236                           ;psect for function _nrf_write_command
  1237                           
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in _nrf_write_command: [wreg+status,2+status,0+pclath+cstack]
  1241                           ;nrf_write_command@command stored from wreg
  1242     023D  1283               	bcf	3,5	;RP0=0, select bank0
  1243     023E  00A4               	movwf	nrf_write_command@command
  1244     023F                     l1047:
  1245                           
  1246                           ;./nrf24l01.h: 153:     uint8_t nrf_write_command(uint8_t command);./nrf24l01.h: 154:   
      +                            {;./nrf24l01.h: 155:         GPIO5 = 0;
  1247     023F  1285               	bcf	5,5	;volatile
  1248     0240                     l1049:
  1249                           
  1250                           ;./nrf24l01.h: 156:         uint8_t status = SPI_write(command);
  1251     0240  0824               	movf	nrf_write_command@command,w
  1252     0241  22D8               	fcall	_SPI_write
  1253     0242  1283               	bcf	3,5	;RP0=0, select bank0
  1254     0243  00A5               	movwf	nrf_write_command@status
  1255     0244                     l1051:
  1256                           
  1257                           ;./nrf24l01.h: 157:         GPIO5 = 1;
  1258     0244  1685               	bsf	5,5	;volatile
  1259     0245                     l1053:
  1260                           
  1261                           ;./nrf24l01.h: 158:         return status;
  1262     0245  0825               	movf	nrf_write_command@status,w
  1263     0246                     l76:
  1264     0246  0008               	return
  1265     0247                     __end_of_nrf_write_command:
  1266                           
  1267                           	psect	text7
  1268     0280                     __ptext7:	
  1269 ;; *************** function _nrf_set_tx_mode *****************
  1270 ;; Defined at:
  1271 ;;		line 241 in file "./nrf24l01.h"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  config          1   16[BANK0 ] unsigned char 
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMMON   BANK0
  1285 ;;      Params:         0       0
  1286 ;;      Locals:         0       1
  1287 ;;      Temps:          0       1
  1288 ;;      Totals:         0       2
  1289 ;;Total ram usage:        2 bytes
  1290 ;; Hardware stack levels used: 1
  1291 ;; Hardware stack levels required when called: 3
  1292 ;; This function calls:
  1293 ;;		_nrf_read_register
  1294 ;;		_nrf_write_register
  1295 ;; This function is called by:
  1296 ;;		_nrf_send
  1297 ;;		_main
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301     0280                     _nrf_set_tx_mode:	
  1302                           ;psect for function _nrf_set_tx_mode
  1303                           
  1304     0280                     l1083:	
  1305                           ;incstack = 0
  1306                           ; Regs used in _nrf_set_tx_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1307                           
  1308                           
  1309                           ;./nrf24l01.h: 243:         uint8_t config;;./nrf24l01.h: 244:         nrf_read_register
      +                          (0x00, &config, 1);
  1310     0280  3030               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1311     0281  1283               	bcf	3,5	;RP0=0, select bank0
  1312     0282  00AC               	movwf	nrf_read_register@data
  1313     0283  01AD               	clrf	nrf_read_register@len
  1314     0284  0AAD               	incf	nrf_read_register@len,f
  1315     0285  3000               	movlw	0
  1316     0286  222A               	fcall	_nrf_read_register
  1317     0287                     l1085:
  1318                           
  1319                           ;./nrf24l01.h: 246:         GPIO0 = 0;
  1320     0287  1283               	bcf	3,5	;RP0=0, select bank0
  1321     0288  1005               	bcf	5,0	;volatile
  1322     0289                     l1087:
  1323                           
  1324                           ;./nrf24l01.h: 248:         if (!(config & 0x01))
  1325     0289  1830               	btfsc	nrf_set_tx_mode@config,0
  1326     028A  2A8C               	goto	u181
  1327     028B  2A8D               	goto	u180
  1328     028C                     u181:
  1329     028C  2A8E               	goto	l1091
  1330     028D                     u180:
  1331     028D  2A9A               	goto	l95
  1332     028E                     l1091:
  1333                           
  1334                           ;./nrf24l01.h: 251:         config &= ~0x01;
  1335     028E  30FE               	movlw	254
  1336     028F  00AF               	movwf	??_nrf_set_tx_mode
  1337     0290  082F               	movf	??_nrf_set_tx_mode,w
  1338     0291  05B0               	andwf	nrf_set_tx_mode@config,f
  1339     0292                     l1093:
  1340                           
  1341                           ;./nrf24l01.h: 252:         nrf_write_register(0x00, &config, 1);
  1342     0292  3030               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1343     0293  00AA               	movwf	nrf_write_register@data
  1344     0294  01AB               	clrf	nrf_write_register@len
  1345     0295  0AAB               	incf	nrf_write_register@len,f
  1346     0296  3000               	movlw	0
  1347     0297  2233               	fcall	_nrf_write_register
  1348     0298                     l1095:
  1349                           
  1350                           ;./nrf24l01.h: 254:         GPIO0 = 0;
  1351     0298  1283               	bcf	3,5	;RP0=0, select bank0
  1352     0299  1005               	bcf	5,0	;volatile
  1353     029A                     l95:
  1354     029A  0008               	return
  1355     029B                     __end_of_nrf_set_tx_mode:
  1356                           
  1357                           	psect	text8
  1358     0233                     __ptext8:	
  1359 ;; *************** function _nrf_write_register *****************
  1360 ;; Defined at:
  1361 ;;		line 131 in file "./nrf24l01.h"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  reg             1    wreg     unsigned char 
  1364 ;;  data            1   10[BANK0 ] PTR unsigned char 
  1365 ;;		 -> main@data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1366 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1367 ;;  len             1   11[BANK0 ] unsigned char 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  reg             1   12[BANK0 ] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      unsigned char 
  1372 ;; Registers used:
  1373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMMON   BANK0
  1379 ;;      Params:         0       2
  1380 ;;      Locals:         0       1
  1381 ;;      Temps:          0       0
  1382 ;;      Totals:         0       3
  1383 ;;Total ram usage:        3 bytes
  1384 ;; Hardware stack levels used: 1
  1385 ;; Hardware stack levels required when called: 2
  1386 ;; This function calls:
  1387 ;;		_nrf_command_with_data
  1388 ;; This function is called by:
  1389 ;;		_nrf_write_payload
  1390 ;;		_nrf_flush_rxtx
  1391 ;;		_nrf_setup
  1392 ;;		_nrf_set_tx_mode
  1393 ;;		_nrf_send
  1394 ;;		_nrf_set_rx_mode
  1395 ;;		_nrf_read
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399     0233                     _nrf_write_register:	
  1400                           ;psect for function _nrf_write_register
  1401                           
  1402                           
  1403                           ;incstack = 0
  1404                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1405                           ;nrf_write_register@reg stored from wreg
  1406     0233  1283               	bcf	3,5	;RP0=0, select bank0
  1407     0234  00AC               	movwf	nrf_write_register@reg
  1408     0235                     l1039:
  1409                           
  1410                           ;./nrf24l01.h: 131:     uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t l
      +                          en);./nrf24l01.h: 132:     {;./nrf24l01.h: 133:         return nrf_command_with_data(reg
      +                           | 0b00100000, data, len);
  1411     0235  082A               	movf	nrf_write_register@data,w
  1412     0236  00A4               	movwf	nrf_command_with_data@data
  1413     0237  082B               	movf	nrf_write_register@len,w
  1414     0238  00A5               	movwf	nrf_command_with_data@len
  1415     0239  082C               	movf	nrf_write_register@reg,w
  1416     023A  3820               	iorlw	32
  1417     023B  22B9               	fcall	_nrf_command_with_data
  1418     023C                     l67:
  1419     023C  0008               	return
  1420     023D                     __end_of_nrf_write_register:
  1421                           
  1422                           	psect	text9
  1423     02B9                     __ptext9:	
  1424 ;; *************** function _nrf_command_with_data *****************
  1425 ;; Defined at:
  1426 ;;		line 124 in file "./nrf24l01.h"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  command         1    wreg     unsigned char 
  1429 ;;  data            1    4[BANK0 ] PTR unsigned char 
  1430 ;;		 -> main@data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1431 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1432 ;;  len             1    5[BANK0 ] unsigned char 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;  command         1    7[BANK0 ] unsigned char 
  1435 ;;  i               1    9[BANK0 ] unsigned char 
  1436 ;;  status          1    8[BANK0 ] unsigned char 
  1437 ;; Return value:  Size  Location     Type
  1438 ;;                  1    wreg      unsigned char 
  1439 ;; Registers used:
  1440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMMON   BANK0
  1446 ;;      Params:         0       2
  1447 ;;      Locals:         0       3
  1448 ;;      Temps:          0       1
  1449 ;;      Totals:         0       6
  1450 ;;Total ram usage:        6 bytes
  1451 ;; Hardware stack levels used: 1
  1452 ;; Hardware stack levels required when called: 1
  1453 ;; This function calls:
  1454 ;;		_SPI_write
  1455 ;; This function is called by:
  1456 ;;		_nrf_write_register
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460     02B9                     _nrf_command_with_data:	
  1461                           ;psect for function _nrf_command_with_data
  1462                           
  1463                           
  1464                           ;incstack = 0
  1465                           ; Regs used in _nrf_command_with_data: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1466                           ;nrf_command_with_data@command stored from wreg
  1467     02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1468     02BA  00A7               	movwf	nrf_command_with_data@command
  1469     02BB                     l1023:
  1470                           
  1471                           ;./nrf24l01.h: 124:     uint8_t nrf_command_with_data(uint8_t command, uint8_t *data, ui
      +                          nt8_t len);./nrf24l01.h: 125:     {;./nrf24l01.h: 126:         GPIO5 = 0; uint8_t status
      +                           = SPI_write(command); for (uint8_t i = 0; i < len; i++) { SPI_write(data[i]); } GPIO5 =
      +                           1; return status;
  1472     02BB  1285               	bcf	5,5	;volatile
  1473     02BC                     l1025:
  1474     02BC  0827               	movf	nrf_command_with_data@command,w
  1475     02BD  22D8               	fcall	_SPI_write
  1476     02BE  1283               	bcf	3,5	;RP0=0, select bank0
  1477     02BF  00A8               	movwf	nrf_command_with_data@status
  1478     02C0                     l1027:
  1479     02C0  01A9               	clrf	nrf_command_with_data@i
  1480     02C1  2ACF               	goto	l1033
  1481     02C2                     l1029:
  1482     02C2  0829               	movf	nrf_command_with_data@i,w
  1483     02C3  0724               	addwf	nrf_command_with_data@data,w
  1484     02C4  00A6               	movwf	??_nrf_command_with_data
  1485     02C5  0826               	movf	??_nrf_command_with_data,w
  1486     02C6  0084               	movwf	4
  1487     02C7  1383               	bcf	3,7	;select IRP bank0
  1488     02C8  0800               	movf	0,w
  1489     02C9  22D8               	fcall	_SPI_write
  1490     02CA                     l1031:
  1491     02CA  3001               	movlw	1
  1492     02CB  1283               	bcf	3,5	;RP0=0, select bank0
  1493     02CC  00A6               	movwf	??_nrf_command_with_data
  1494     02CD  0826               	movf	??_nrf_command_with_data,w
  1495     02CE  07A9               	addwf	nrf_command_with_data@i,f
  1496     02CF                     l1033:
  1497     02CF  0825               	movf	nrf_command_with_data@len,w
  1498     02D0  0229               	subwf	nrf_command_with_data@i,w
  1499     02D1  1C03               	skipc
  1500     02D2  2AD4               	goto	u161
  1501     02D3  2AD5               	goto	u160
  1502     02D4                     u161:
  1503     02D4  2AC2               	goto	l1029
  1504     02D5                     u160:
  1505     02D5                     l63:
  1506     02D5  1685               	bsf	5,5	;volatile
  1507     02D6                     l1035:
  1508     02D6  0828               	movf	nrf_command_with_data@status,w
  1509     02D7                     l64:
  1510     02D7  0008               	return
  1511     02D8                     __end_of_nrf_command_with_data:
  1512                           
  1513                           	psect	text10
  1514     022A                     __ptext10:	
  1515 ;; *************** function _nrf_read_register *****************
  1516 ;; Defined at:
  1517 ;;		line 137 in file "./nrf24l01.h"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  reg             1    wreg     unsigned char 
  1520 ;;  data            1   12[BANK0 ] PTR unsigned char 
  1521 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1522 ;;  len             1   13[BANK0 ] unsigned char 
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;  reg             1   14[BANK0 ] unsigned char 
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      unsigned char 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMMON   BANK0
  1534 ;;      Params:         0       2
  1535 ;;      Locals:         0       1
  1536 ;;      Temps:          0       0
  1537 ;;      Totals:         0       3
  1538 ;;Total ram usage:        3 bytes
  1539 ;; Hardware stack levels used: 1
  1540 ;; Hardware stack levels required when called: 2
  1541 ;; This function calls:
  1542 ;;		_nrf_command_with_data_overwrite
  1543 ;; This function is called by:
  1544 ;;		_nrf_set_tx_mode
  1545 ;;		_nrf_set_rx_mode
  1546 ;;		_nrf_read
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550     022A                     _nrf_read_register:	
  1551                           ;psect for function _nrf_read_register
  1552                           
  1553                           
  1554                           ;incstack = 0
  1555                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1556                           ;nrf_read_register@reg stored from wreg
  1557     022A  1283               	bcf	3,5	;RP0=0, select bank0
  1558     022B  00AE               	movwf	nrf_read_register@reg
  1559     022C                     l1043:
  1560                           
  1561                           ;./nrf24l01.h: 137:     uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t le
      +                          n);./nrf24l01.h: 138:     {;./nrf24l01.h: 139:         return nrf_command_with_data_over
      +                          write(reg | 0b00000000, data, len);
  1562     022C  082C               	movf	nrf_read_register@data,w
  1563     022D  00A4               	movwf	nrf_command_with_data_overwrite@data
  1564     022E  082D               	movf	nrf_read_register@len,w
  1565     022F  00A5               	movwf	nrf_command_with_data_overwrite@len
  1566     0230  082E               	movf	nrf_read_register@reg,w
  1567     0231  22FE               	fcall	_nrf_command_with_data_overwrite
  1568     0232                     l70:
  1569     0232  0008               	return
  1570     0233                     __end_of_nrf_read_register:
  1571                           
  1572                           	psect	text11
  1573     02FE                     __ptext11:	
  1574 ;; *************** function _nrf_command_with_data_overwrite *****************
  1575 ;; Defined at:
  1576 ;;		line 118 in file "./nrf24l01.h"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  command         1    wreg     unsigned char 
  1579 ;;  data            1    4[BANK0 ] PTR unsigned char 
  1580 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1581 ;;  len             1    5[BANK0 ] unsigned char 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  command         1    9[BANK0 ] unsigned char 
  1584 ;;  i               1   11[BANK0 ] unsigned char 
  1585 ;;  status          1   10[BANK0 ] unsigned char 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  1    wreg      unsigned char 
  1588 ;; Registers used:
  1589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMMON   BANK0
  1595 ;;      Params:         0       2
  1596 ;;      Locals:         0       3
  1597 ;;      Temps:          0       3
  1598 ;;      Totals:         0       8
  1599 ;;Total ram usage:        8 bytes
  1600 ;; Hardware stack levels used: 1
  1601 ;; Hardware stack levels required when called: 1
  1602 ;; This function calls:
  1603 ;;		_SPI_write
  1604 ;; This function is called by:
  1605 ;;		_nrf_read_register
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609     02FE                     _nrf_command_with_data_overwrite:	
  1610                           ;psect for function _nrf_command_with_data_overwrite
  1611                           
  1612                           
  1613                           ;incstack = 0
  1614                           ; Regs used in _nrf_command_with_data_overwrite: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  1615                           ;nrf_command_with_data_overwrite@command stored from wreg
  1616     02FE  1283               	bcf	3,5	;RP0=0, select bank0
  1617     02FF  00A9               	movwf	nrf_command_with_data_overwrite@command
  1618     0300                     l1007:
  1619                           
  1620                           ;./nrf24l01.h: 118:     uint8_t nrf_command_with_data_overwrite(uint8_t command, uint8_t
      +                           *data, uint8_t len);./nrf24l01.h: 119:     {;./nrf24l01.h: 120:         GPIO5 = 0; uint
      +                          8_t status = SPI_write(command); for (uint8_t i = 0; i < len; i++) { data[i] = SPI_write
      +                          (data[i]); } GPIO5 = 1; return status;
  1621     0300  1285               	bcf	5,5	;volatile
  1622     0301                     l1009:
  1623     0301  0829               	movf	nrf_command_with_data_overwrite@command,w
  1624     0302  22D8               	fcall	_SPI_write
  1625     0303  1283               	bcf	3,5	;RP0=0, select bank0
  1626     0304  00AA               	movwf	nrf_command_with_data_overwrite@status
  1627     0305                     l1011:
  1628     0305  01AB               	clrf	nrf_command_with_data_overwrite@i
  1629     0306  2B1D               	goto	l1017
  1630     0307                     l1013:
  1631     0307  082B               	movf	nrf_command_with_data_overwrite@i,w
  1632     0308  0724               	addwf	nrf_command_with_data_overwrite@data,w
  1633     0309  00A6               	movwf	??_nrf_command_with_data_overwrite
  1634     030A  0826               	movf	??_nrf_command_with_data_overwrite,w
  1635     030B  0084               	movwf	4
  1636     030C  1383               	bcf	3,7	;select IRP bank0
  1637     030D  0800               	movf	0,w
  1638     030E  22D8               	fcall	_SPI_write
  1639     030F  1283               	bcf	3,5	;RP0=0, select bank0
  1640     0310  00A7               	movwf	??_nrf_command_with_data_overwrite+1
  1641     0311  082B               	movf	nrf_command_with_data_overwrite@i,w
  1642     0312  0724               	addwf	nrf_command_with_data_overwrite@data,w
  1643     0313  00A8               	movwf	??_nrf_command_with_data_overwrite+2
  1644     0314  0828               	movf	??_nrf_command_with_data_overwrite+2,w
  1645     0315  0084               	movwf	4
  1646     0316  0827               	movf	??_nrf_command_with_data_overwrite+1,w
  1647     0317  1383               	bcf	3,7	;select IRP bank0
  1648     0318  0080               	movwf	0
  1649     0319                     l1015:
  1650     0319  3001               	movlw	1
  1651     031A  00A6               	movwf	??_nrf_command_with_data_overwrite
  1652     031B  0826               	movf	??_nrf_command_with_data_overwrite,w
  1653     031C  07AB               	addwf	nrf_command_with_data_overwrite@i,f
  1654     031D                     l1017:
  1655     031D  0825               	movf	nrf_command_with_data_overwrite@len,w
  1656     031E  022B               	subwf	nrf_command_with_data_overwrite@i,w
  1657     031F  1C03               	skipc
  1658     0320  2B22               	goto	u151
  1659     0321  2B23               	goto	u150
  1660     0322                     u151:
  1661     0322  2B07               	goto	l1013
  1662     0323                     u150:
  1663     0323                     l57:
  1664     0323  1685               	bsf	5,5	;volatile
  1665     0324                     l1019:
  1666     0324  082A               	movf	nrf_command_with_data_overwrite@status,w
  1667     0325                     l58:
  1668     0325  0008               	return
  1669     0326                     __end_of_nrf_command_with_data_overwrite:
  1670                           
  1671                           	psect	text12
  1672     02D8                     __ptext12:	
  1673 ;; *************** function _SPI_write *****************
  1674 ;; Defined at:
  1675 ;;		line 39 in file "./softwarespi.h"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;  data            1    wreg     unsigned char 
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;  data            1    1[BANK0 ] unsigned char 
  1680 ;;  i               1    3[BANK0 ] unsigned char 
  1681 ;;  read            1    2[BANK0 ] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      unsigned char 
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, status,0
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMMON   BANK0
  1691 ;;      Params:         0       0
  1692 ;;      Locals:         0       3
  1693 ;;      Temps:          0       1
  1694 ;;      Totals:         0       4
  1695 ;;Total ram usage:        4 bytes
  1696 ;; Hardware stack levels used: 1
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_nrf_command_with_data_overwrite
  1701 ;;		_nrf_command_with_data
  1702 ;;		_nrf_write_command
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706     02D8                     _SPI_write:	
  1707                           ;psect for function _SPI_write
  1708                           
  1709                           
  1710                           ;incstack = 0
  1711                           ; Regs used in _SPI_write: [wreg+status,2+status,0]
  1712                           ;SPI_write@data stored from wreg
  1713     02D8  1283               	bcf	3,5	;RP0=0, select bank0
  1714     02D9  00A1               	movwf	SPI_write@data
  1715     02DA                     l985:
  1716                           
  1717                           ;./softwarespi.h: 40:         uint8_t read = 0;
  1718     02DA  01A2               	clrf	SPI_write@read
  1719     02DB                     l987:
  1720                           
  1721                           ;./softwarespi.h: 41:         GPIO1 = 0;
  1722     02DB  1085               	bcf	5,1	;volatile
  1723                           
  1724                           ;./softwarespi.h: 44:         for(uint8_t i = 0; i < 8; i++){
  1725     02DC  01A3               	clrf	SPI_write@i
  1726     02DD                     l42:
  1727                           
  1728                           ;./softwarespi.h: 45:             if(data & 0x80){
  1729     02DD  1FA1               	btfss	SPI_write@data,7
  1730     02DE  2AE0               	goto	u131
  1731     02DF  2AE1               	goto	u130
  1732     02E0                     u131:
  1733     02E0  2AE3               	goto	l44
  1734     02E1                     u130:
  1735     02E1                     l993:
  1736                           
  1737                           ;./softwarespi.h: 46:                 GPIO4 = 1;
  1738     02E1  1605               	bsf	5,4	;volatile
  1739                           
  1740                           ;./softwarespi.h: 47:             }else{
  1741     02E2  2AE4               	goto	l45
  1742     02E3                     l44:
  1743                           
  1744                           ;./softwarespi.h: 48:                 GPIO4 = 0;
  1745     02E3  1205               	bcf	5,4	;volatile
  1746     02E4                     l45:	
  1747                           ;./softwarespi.h: 49:             }
  1748                           
  1749                           
  1750                           ;./softwarespi.h: 50:             GPIO1 = 1;
  1751     02E4  1485               	bsf	5,1	;volatile
  1752                           
  1753                           ;./softwarespi.h: 51:             GPIO1 = 0;
  1754     02E5  1085               	bcf	5,1	;volatile
  1755     02E6                     l995:
  1756                           
  1757                           ;./softwarespi.h: 53:             read <<= 1;
  1758     02E6  1003               	clrc
  1759     02E7  0DA2               	rlf	SPI_write@read,f
  1760     02E8                     l997:
  1761                           
  1762                           ;./softwarespi.h: 54:             read |= GPIO3;
  1763     02E8  3000               	movlw	0
  1764     02E9  1985               	btfsc	5,3	;volatile
  1765     02EA  3001               	movlw	1
  1766     02EB  00A0               	movwf	??_SPI_write
  1767     02EC  0820               	movf	??_SPI_write,w
  1768     02ED  04A2               	iorwf	SPI_write@read,f
  1769     02EE                     l999:
  1770                           
  1771                           ;./softwarespi.h: 55:             data <<= 1;
  1772     02EE  1003               	clrc
  1773     02EF  0DA1               	rlf	SPI_write@data,f
  1774                           
  1775                           ;./softwarespi.h: 56:         }
  1776     02F0  3001               	movlw	1
  1777     02F1  00A0               	movwf	??_SPI_write
  1778     02F2  0820               	movf	??_SPI_write,w
  1779     02F3  07A3               	addwf	SPI_write@i,f
  1780     02F4                     l1001:
  1781     02F4  3008               	movlw	8
  1782     02F5  0223               	subwf	SPI_write@i,w
  1783     02F6  1C03               	skipc
  1784     02F7  2AF9               	goto	u141
  1785     02F8  2AFA               	goto	u140
  1786     02F9                     u141:
  1787     02F9  2ADD               	goto	l42
  1788     02FA                     u140:
  1789     02FA                     l1003:
  1790                           
  1791                           ;./softwarespi.h: 57:         read >>= 1;
  1792     02FA  1003               	clrc
  1793     02FB  0CA2               	rrf	SPI_write@read,f
  1794                           
  1795                           ;./softwarespi.h: 59:         return read;
  1796     02FC  0822               	movf	SPI_write@read,w
  1797     02FD                     l46:
  1798     02FD  0008               	return
  1799     02FE                     __end_of_SPI_write:
  1800                           
  1801                           	psect	text13
  1802     021A                     __ptext13:	
  1803 ;; *************** function _SPI_init_master *****************
  1804 ;; Defined at:
  1805 ;;		line 28 in file "./softwarespi.h"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;		None
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;		None
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  1    wreg      void 
  1812 ;; Registers used:
  1813 ;;		None
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMMON   BANK0
  1819 ;;      Params:         0       0
  1820 ;;      Locals:         0       0
  1821 ;;      Temps:          0       0
  1822 ;;      Totals:         0       0
  1823 ;;Total ram usage:        0 bytes
  1824 ;; Hardware stack levels used: 1
  1825 ;; This function calls:
  1826 ;;		Nothing
  1827 ;; This function is called by:
  1828 ;;		_main
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832     021A                     _SPI_init_master:	
  1833                           ;psect for function _SPI_init_master
  1834                           
  1835     021A                     l1097:	
  1836                           ;incstack = 0
  1837                           ; Regs used in _SPI_init_master: []
  1838                           
  1839                           
  1840                           ;./softwarespi.h: 30:         TRISIO1 = 0;
  1841     021A  1683               	bsf	3,5	;RP0=1, select bank1
  1842     021B  1085               	bcf	5,1	;volatile
  1843                           
  1844                           ;./softwarespi.h: 31:         TRISIO4 = 0;
  1845     021C  1205               	bcf	5,4	;volatile
  1846                           
  1847                           ;./softwarespi.h: 32:         TRISIO3 = 1;
  1848     021D  1585               	bsf	5,3	;volatile
  1849                           
  1850                           ;./softwarespi.h: 35:         GPIO1 = 0;
  1851     021E  1283               	bcf	3,5	;RP0=0, select bank0
  1852     021F  1085               	bcf	5,1	;volatile
  1853                           
  1854                           ;./softwarespi.h: 36:         GPIO4 = 0;
  1855     0220  1205               	bcf	5,4	;volatile
  1856     0221                     l39:
  1857     0221  0008               	return
  1858     0222                     __end_of_SPI_init_master:
  1859     005E                     btemp	set	94	;btemp
  1860     005E                     wtemp0	set	94
  1861                           
  1862                           	psect	config
  1863                           
  1864                           ;Config register CONFIG @ 0x2007
  1865                           ;	Oscillator Selection bits
  1866                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  1867                           ;	Watchdog Timer Enable bit
  1868                           ;	WDTE = OFF, WDT disabled
  1869                           ;	Power-Up Timer Enable bit
  1870                           ;	PWRTE = ON, PWRT enabled
  1871                           ;	GP3/MCLR pin function select
  1872                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
  1873                           ;	Brown-out Detect Enable bit
  1874                           ;	BOREN = ON, BOD enabled
  1875                           ;	Code Protection bit
  1876                           ;	CP = OFF, Program Memory code protection is disabled
  1877                           ;	Data Code Protection bit
  1878                           ;	CPD = OFF, Data memory code protection is disabled
  1879     2007                     	org	8199
  1880     2007  31C4               	dw	12740

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     29      37

Pointer List with Targets:

    nrf_send@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_setup@addr	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK0[5]), 

    nrf_write_payload@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_set_tx_mode@config(BANK0[1]), nrf_set_rx_mode@config(BANK0[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[3]), nrf_read@clear(BANK0[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(BANK0[1]), 
		 -> nrf_set_rx_mode@config(BANK0[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(BANK0[1]), 

    nrf_command_with_data@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[3]), nrf_read@clear(BANK0[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(BANK0[1]), 
		 -> nrf_set_rx_mode@config(BANK0[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(BANK0[1]), 

    nrf_command_with_data_overwrite@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_set_tx_mode@config(BANK0[1]), nrf_set_rx_mode@config(BANK0[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK0[5]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_setup@data(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_nrf_setup
    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_send->_nrf_set_tx_mode
    _nrf_write_payload->_nrf_write_register
    _nrf_write_command->_SPI_write
    _nrf_set_tx_mode->_nrf_read_register
    _nrf_write_register->_nrf_command_with_data
    _nrf_command_with_data->_SPI_write
    _nrf_read_register->_nrf_command_with_data_overwrite
    _nrf_command_with_data_overwrite->_SPI_write

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   21148
                                             24 BANK0      5     5      0
                    _SPI_init_master
                           _nrf_send
                    _nrf_set_tx_mode
                          _nrf_setup
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                           10     8      2    7066
                                             14 BANK0     10     8      2
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3044
                                             13 BANK0      1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               7     5      2     504
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _nrf_send                                             4     3      1   10159
                                             17 BANK0      4     3      1
                    _nrf_set_tx_mode
                  _nrf_write_command
                  _nrf_write_payload
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_payload                                    4     3      1    3040
                                             13 BANK0      3     2      1
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0     140
                                              4 BANK0      2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_set_tx_mode                                      2     2      0    3899
                                             15 BANK0      2     2      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    2880
                                             10 BANK0      3     1      2
              _nrf_command_with_data
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data                                6     4      2     382
                                              4 BANK0      6     4      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2     948
                                             12 BANK0      3     1      2
    _nrf_command_with_data_overwrite
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data_overwrite                      8     6      2     426
                                              4 BANK0      8     6      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            4     4      0      95
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _nrf_send
     _nrf_set_tx_mode
       _nrf_read_register
         _nrf_command_with_data_overwrite
           _SPI_write
       _nrf_write_register
         _nrf_command_with_data
           _SPI_write
     _nrf_write_command
       _SPI_write
     _nrf_write_payload
       _nrf_write_register
     _nrf_write_register
   _nrf_set_tx_mode
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E     1D      25       4       59.7%
BITBANK0            3E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      25       6        0.0%
ABS                  0      0      25       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Apr 19 11:26:45 2023

                                     l42 02DD                                       l44 02E3  
                                     l52 02B8                                       l45 02E4  
                                     l46 02FD                                       l70 0232  
                                     l39 0221                                       l63 02D5  
                                     l64 02D7                                       l57 0323  
                                     l73 0266                                       l58 0325  
                                     l67 023C                                       l83 0389  
                                     l76 0246                                       l95 029A  
                                     l79 0254                                       l87 03EC  
                  nrf_set_tx_mode@config 0030                                      l103 027F  
                                    l993 02E1                                      l985 02DA  
                                    l995 02E6                                      l987 02DB  
                                    l997 02E8                                      l999 02EE  
                                    u130 02E1                                      u131 02E0  
                                    u140 02FA                                      u141 02F9  
                                    u150 0323                                      u151 0322  
                                    u160 02D5                                      u161 02D4  
                                    u217 034B                                      u170 02B8  
                                    u171 02B7                                      u227 0356  
                                    u180 028D                                      u181 028C  
                                    u237 0369                                      u190 0277  
                                    u247 0261                                      u191 0276  
                                    fsr0 0004                                      indf 0000  
                 nrf_command_with_data@i 0029                                     l1001 02F4  
                                   l1003 02FA                                     l1011 0305  
                                   l1013 0307                                     l1101 0365  
                                   l1015 0319                                     l1007 0300  
                                   l1031 02CA                                     l1023 02BB  
                                   l1111 0382                                     l1103 0371  
                                   l1017 031D                                     l1009 0301  
                                   l1033 02CF                                     l1025 02BC  
                                   l1113 038C                                     l1121 03A6  
                                   l1105 0377                                     l1201 0339  
                                   l1019 0324                                     l1043 022C  
                                   l1035 02D6                                     l1027 02C0  
                                   l1051 0244                                     l1131 03BD  
                                   l1123 03AC                                     l1115 038F  
                                   l1107 0379                                     l1211 0350  
                                   l1203 033A                                     l1029 02C2  
                                   l1053 0245                                     l1061 02AE  
                                   l1141 03D6                                     l1133 03C0  
                                   l1125 03AE                                     l1109 037F  
                                   l1213 0352                                     l1205 033C  
                                   l1039 0235                                     l1047 023F  
                                   l1071 0264                                     l1063 02B2  
                                   l1143 03DD                                     l1135 03C6  
                                   l1127 03B4                                     l1119 0392  
                                   l1207 0342                                     l1049 0240  
                                   l1065 0257                                     l1161 0279  
                                   l1153 0269                                     l1057 029D  
                                   l1081 0252                                     l1145 03E4  
                                   l1137 03C9                                     l1129 03B7  
                                   l1209 0346                                     l1091 028E  
                                   l1083 0280                                     l1067 025D  
                                   l1155 026F                                     l1059 029F  
                                   l1075 0247                                     l1147 03EB  
                                   l1139 03CF                                     l1235 039B  
                                   l1093 0292                                     l1085 0287  
                                   l1069 025F                                     l1157 0273  
                                   l1077 024A                                     l1095 0298  
                                   l1087 0289                                     l1159 0277  
                                   l1079 0250                                     l1191 032C  
                                   l1097 021A                                     l1193 032E  
                                   l1099 035F                                     l1195 032F  
                                   l1187 0326                                     l1197 0331  
                                   l1189 032A                                     l1199 0332  
                                   _GPIO 0005                                     _main 0326  
                                   btemp 005E                                     start 0000  
__end_of_nrf_command_with_data_overwrite 0326        ??_nrf_command_with_data_overwrite 0026  
       ?_nrf_command_with_data_overwrite 0024          _nrf_command_with_data_overwrite 02FE  
                                  ?_main 0020         nrf_command_with_data_overwrite@i 002B  
                                  _CMCON 0019                                    _ANSEL 009F  
                                  _GPIO0 0028                                    _GPIO1 0029  
                                  _GPIO2 002A                                    _GPIO3 002B  
                                  _GPIO4 002C                                    _GPIO5 002D  
                                  _VRCON 0099            __end_of_nrf_command_with_data 02D8  
                                  status 0003                                    wtemp0 005E  
                        __initialization 03ED                             __end_of_main 035D  
                                 ??_main 0038                     nrf_write_payload@len 002D  
               nrf_command_with_data@len 0025                                   _ADCON0 001F  
                  nrf_setup@payload_size 002F                                   _TRISIO 0085  
                         _nrf_flush_rxtx 0247                                   _arrcpy 029B  
           nrf_command_with_data@command 0027                         __end_of_nrf_send 0280  
                      __end_of_SPI_write 02FE                       nrf_flush_rxtx@data 002D  
                __end_of__initialization 03FD                   __end_of_nrf_flush_rxtx 0255  
                         __pcstackCOMMON 0000                             __pidataBANK0 0222  
             __end_of_nrf_write_register 023D                        ??_SPI_init_master 0000  
                      ??_nrf_set_tx_mode 002F                    nrf_write_payload@data 002F  
                  nrf_write_register@len 002B                    nrf_write_register@reg 002C  
                        ?_nrf_flush_rxtx 0020                               __pmaintext 0326  
                                ?_arrcpy 0020                                  _TRISIO0 0428  
                                _TRISIO1 0429                                  _TRISIO3 042B  
                                _TRISIO4 042C                                  _TRISIO5 042D  
                            nrf_send@len 0031                                ?_nrf_send 0031  
                                __ptext1 035D                                  __ptext2 0247  
                                __ptext3 029B                                  __ptext4 0267  
                                __ptext5 0255                                  __ptext6 023D  
                                __ptext7 0280                                  __ptext8 0233  
                                __ptext9 02B9                     nrf_read_register@len 002D  
                   nrf_read_register@reg 002E                    _nrf_command_with_data 02B9  
                                arrcpy@i 0026                     end_of_initialization 03FD  
                      __end_of_nrf_setup 03ED                               ??_nrf_send 0000  
    nrf_command_with_data_overwrite@data 0024                            nrf_send@clear 0034  
                              _SPI_write 02D8                          _SPI_init_master 021A  
                        _nrf_set_tx_mode 0280                            nrf_setup@addr 0032  
                          nrf_setup@data 0033                           __end_of_arrcpy 02B9  
                    start_initialization 03ED                   ?_nrf_command_with_data 0024  
                     nrf_setup@addr_size 002E                       _nrf_write_register 0233  
                             ?_SPI_write 0020                         ??_nrf_flush_rxtx 0000  
                    ?_nrf_write_register 002A                                 ??_arrcpy 0022  
                            __pdataBANK0 003D                     ??_nrf_write_register 0000  
                 nrf_write_register@data 002A                                ___latbits 0000  
                          __pcstackBANK0 0020                  __end_of_SPI_init_master 0222  
                __end_of_nrf_set_tx_mode 029B                            SPI_write@data 0021  
                          SPI_write@read 0022                              ??_SPI_write 0020  
                              _nrf_setup 035D                        _nrf_read_register 022A  
                     ?_nrf_read_register 002C                             nrf_send@data 0033  
                           nrf_send@stat 0032   nrf_command_with_data_overwrite@command 0029  
                              arrcpy@len 0021                                arrcpy@dst 0025  
                              arrcpy@src 0020                      ??_nrf_read_register 0000  
                      _nrf_write_command 023D                       ?_nrf_write_command 0020  
                      _nrf_write_payload 0255                               ?_nrf_setup 002E  
                     ?_nrf_write_payload 002D                         ?_SPI_init_master 0020  
                       ?_nrf_set_tx_mode 0020                __end_of_nrf_read_register 0233  
                    ??_nrf_write_command 0000                      ??_nrf_write_payload 002E  
            nrf_command_with_data@status 0028                  ??_nrf_command_with_data 0026  
                             SPI_write@i 0023                __end_of_nrf_write_command 0247  
                               __ptext10 022A                                 __ptext11 02FE  
                               __ptext12 02D8                                 __ptext13 021A  
                  nrf_read_register@data 002C                __end_of_nrf_write_payload 0267  
                               _nrf_send 0267                                 main@F646 003D  
                               main@data 003A                               _RADIO_ADDR 0040  
  nrf_command_with_data_overwrite@status 002A                nrf_command_with_data@data 0024  
               nrf_write_command@command 0024                              ??_nrf_setup 0030  
     nrf_command_with_data_overwrite@len 0025                  nrf_write_command@status 0025  
