

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Apr 21 16:19:33 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x5E,2
    25     0000                     
    26                           ; Version 2.40
    27                           ; Generated 04/07/2022 GMT
    28                           ; 
    29                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC12F675 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61     0000                     	;# 
    62     0001                     	;# 
    63     0002                     	;# 
    64     0003                     	;# 
    65     0004                     	;# 
    66     0005                     	;# 
    67     000A                     	;# 
    68     000B                     	;# 
    69     000C                     	;# 
    70     000E                     	;# 
    71     000E                     	;# 
    72     000F                     	;# 
    73     0010                     	;# 
    74     0019                     	;# 
    75     001E                     	;# 
    76     001F                     	;# 
    77     0081                     	;# 
    78     0085                     	;# 
    79     008C                     	;# 
    80     008E                     	;# 
    81     0090                     	;# 
    82     0095                     	;# 
    83     0096                     	;# 
    84     0096                     	;# 
    85     0099                     	;# 
    86     009A                     	;# 
    87     009A                     	;# 
    88     009B                     	;# 
    89     009C                     	;# 
    90     009D                     	;# 
    91     009E                     	;# 
    92     009F                     	;# 
    93     0000                     	;# 
    94     0001                     	;# 
    95     0002                     	;# 
    96     0003                     	;# 
    97     0004                     	;# 
    98     0005                     	;# 
    99     000A                     	;# 
   100     000B                     	;# 
   101     000C                     	;# 
   102     000E                     	;# 
   103     000E                     	;# 
   104     000F                     	;# 
   105     0010                     	;# 
   106     0019                     	;# 
   107     001E                     	;# 
   108     001F                     	;# 
   109     0081                     	;# 
   110     0085                     	;# 
   111     008C                     	;# 
   112     008E                     	;# 
   113     0090                     	;# 
   114     0095                     	;# 
   115     0096                     	;# 
   116     0096                     	;# 
   117     0099                     	;# 
   118     009A                     	;# 
   119     009A                     	;# 
   120     009B                     	;# 
   121     009C                     	;# 
   122     009D                     	;# 
   123     009E                     	;# 
   124     009F                     	;# 
   125                           
   126                           	psect	idataBANK0
   127     021C                     __pidataBANK0:
   128                           
   129                           ;initializer for main@F646
   130     021C  3453               	retlw	83
   131     021D  3453               	retlw	83
   132     021E  3400               	retlw	0
   133                           
   134                           ;initializer for _RADIO_ADDR
   135     021F  3401               	retlw	1
   136     0220  3404               	retlw	4
   137     0221  3406               	retlw	6
   138     0222  3404               	retlw	4
   139     0223  3405               	retlw	5
   140     0005                     _GPIO	set	5
   141     0019                     _CMCON	set	25
   142     001F                     _ADCON0	set	31
   143     002A                     _GPIO2	set	42
   144     0028                     _GPIO0	set	40
   145     002D                     _GPIO5	set	45
   146     002B                     _GPIO3	set	43
   147     002C                     _GPIO4	set	44
   148     0029                     _GPIO1	set	41
   149     0085                     _TRISIO	set	133
   150     0099                     _VRCON	set	153
   151     009F                     _ANSEL	set	159
   152     0428                     _TRISIO0	set	1064
   153     042D                     _TRISIO5	set	1069
   154     042B                     _TRISIO3	set	1067
   155     042C                     _TRISIO4	set	1068
   156     0429                     _TRISIO1	set	1065
   157                           
   158                           	psect	cinit
   159     03ED                     start_initialization:	
   160                           ; #config settings
   161                           
   162     03ED                     __initialization:
   163                           
   164                           ; Initialize objects allocated to BANK0
   165     03ED  221C               	fcall	__pidataBANK0	;fetch initializer
   166     03EE  00BE               	movwf	__pdataBANK0& (0+127)
   167     03EF  221D               	fcall	__pidataBANK0+1	;fetch initializer
   168     03F0  00BF               	movwf	(__pdataBANK0+1)& (0+127)
   169     03F1  221E               	fcall	__pidataBANK0+2	;fetch initializer
   170     03F2  00C0               	movwf	(__pdataBANK0+2)& (0+127)
   171     03F3  221F               	fcall	__pidataBANK0+3	;fetch initializer
   172     03F4  00C1               	movwf	(__pdataBANK0+3)& (0+127)
   173     03F5  2220               	fcall	__pidataBANK0+4	;fetch initializer
   174     03F6  00C2               	movwf	(__pdataBANK0+4)& (0+127)
   175     03F7  2221               	fcall	__pidataBANK0+5	;fetch initializer
   176     03F8  00C3               	movwf	(__pdataBANK0+5)& (0+127)
   177     03F9  2222               	fcall	__pidataBANK0+6	;fetch initializer
   178     03FA  00C4               	movwf	(__pdataBANK0+6)& (0+127)
   179     03FB  2223               	fcall	__pidataBANK0+7	;fetch initializer
   180     03FC  00C5               	movwf	(__pdataBANK0+7)& (0+127)
   181     03FD                     end_of_initialization:	
   182                           ;End of C runtime variable initialization code
   183                           
   184     03FD                     __end_of__initialization:
   185     03FD  0183               	clrf	3
   186     03FE  2B20               	ljmp	_main	;jump to C main() function
   187                           
   188                           	psect	dataBANK0
   189     003E                     __pdataBANK0:
   190     003E                     main@F646:
   191     003E                     	ds	3
   192     0041                     _RADIO_ADDR:
   193     0041                     	ds	5
   194                           
   195                           	psect	cstackCOMMON
   196     0000                     __pcstackCOMMON:
   197     0000                     ??_SPI_init_master:
   198     0000                     ??_nrf_write_register:	
   199                           ; 1 bytes @ 0x0
   200                           
   201     0000                     ??_nrf_read_register:	
   202                           ; 1 bytes @ 0x0
   203                           
   204     0000                     ??_nrf_write_command:	
   205                           ; 1 bytes @ 0x0
   206                           
   207     0000                     ??_nrf_flush_rxtx:	
   208                           ; 1 bytes @ 0x0
   209                           
   210     0000                     ??_nrf_send:	
   211                           ; 1 bytes @ 0x0
   212                           
   213                           
   214                           	psect	cstackBANK0
   215     0020                     __pcstackBANK0:	
   216                           ; 1 bytes @ 0x0
   217                           
   218     0020                     ?_SPI_init_master:
   219     0020                     ?_SPI_write:	
   220                           ; 1 bytes @ 0x0
   221                           
   222     0020                     ??_SPI_write:	
   223                           ; 1 bytes @ 0x0
   224                           
   225     0020                     ?_arrcpy:	
   226                           ; 1 bytes @ 0x0
   227                           
   228     0020                     ?_nrf_write_command:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     0020                     ?_nrf_flush_rxtx:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0020                     ?_nrf_set_tx_mode:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0020                     ?_main:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0020                     arrcpy@src:	
   241                           ; 1 bytes @ 0x0
   242                           
   243                           
   244                           ; 1 bytes @ 0x0
   245     0020                     	ds	1
   246     0021                     SPI_write@data:
   247     0021                     arrcpy@len:	
   248                           ; 1 bytes @ 0x1
   249                           
   250                           
   251                           ; 1 bytes @ 0x1
   252     0021                     	ds	1
   253     0022                     ??_arrcpy:
   254     0022                     SPI_write@read:	
   255                           ; 1 bytes @ 0x2
   256                           
   257                           
   258                           ; 1 bytes @ 0x2
   259     0022                     	ds	1
   260     0023                     SPI_write@i:
   261                           
   262                           ; 1 bytes @ 0x3
   263     0023                     	ds	1
   264     0024                     ?_nrf_command_with_data_overwrite:
   265     0024                     ?_nrf_command_with_data:	
   266                           ; 1 bytes @ 0x4
   267                           
   268     0024                     nrf_command_with_data_overwrite@data:	
   269                           ; 1 bytes @ 0x4
   270                           
   271     0024                     nrf_command_with_data@data:	
   272                           ; 1 bytes @ 0x4
   273                           
   274     0024                     nrf_write_command@command:	
   275                           ; 1 bytes @ 0x4
   276                           
   277                           
   278                           ; 1 bytes @ 0x4
   279     0024                     	ds	1
   280     0025                     arrcpy@dst:
   281     0025                     nrf_command_with_data_overwrite@len:	
   282                           ; 1 bytes @ 0x5
   283                           
   284     0025                     nrf_command_with_data@len:	
   285                           ; 1 bytes @ 0x5
   286                           
   287     0025                     nrf_write_command@status:	
   288                           ; 1 bytes @ 0x5
   289                           
   290                           
   291                           ; 1 bytes @ 0x5
   292     0025                     	ds	1
   293     0026                     ??_nrf_command_with_data_overwrite:
   294     0026                     ??_nrf_command_with_data:	
   295                           ; 1 bytes @ 0x6
   296                           
   297     0026                     arrcpy@i:	
   298                           ; 1 bytes @ 0x6
   299                           
   300                           
   301                           ; 1 bytes @ 0x6
   302     0026                     	ds	1
   303     0027                     nrf_command_with_data@command:
   304                           
   305                           ; 1 bytes @ 0x7
   306     0027                     	ds	1
   307     0028                     nrf_command_with_data@status:
   308                           
   309                           ; 1 bytes @ 0x8
   310     0028                     	ds	1
   311     0029                     nrf_command_with_data_overwrite@command:
   312     0029                     nrf_command_with_data@i:	
   313                           ; 1 bytes @ 0x9
   314                           
   315                           
   316                           ; 1 bytes @ 0x9
   317     0029                     	ds	1
   318     002A                     ?_nrf_write_register:
   319     002A                     nrf_command_with_data_overwrite@status:	
   320                           ; 1 bytes @ 0xA
   321                           
   322     002A                     nrf_write_register@data:	
   323                           ; 1 bytes @ 0xA
   324                           
   325                           
   326                           ; 1 bytes @ 0xA
   327     002A                     	ds	1
   328     002B                     nrf_command_with_data_overwrite@i:
   329     002B                     nrf_write_register@len:	
   330                           ; 1 bytes @ 0xB
   331                           
   332                           
   333                           ; 1 bytes @ 0xB
   334     002B                     	ds	1
   335     002C                     ?_nrf_read_register:
   336     002C                     nrf_write_register@reg:	
   337                           ; 1 bytes @ 0xC
   338                           
   339     002C                     nrf_read_register@data:	
   340                           ; 1 bytes @ 0xC
   341                           
   342                           
   343                           ; 1 bytes @ 0xC
   344     002C                     	ds	1
   345     002D                     ?_nrf_write_payload:
   346     002D                     nrf_read_register@len:	
   347                           ; 1 bytes @ 0xD
   348                           
   349     002D                     nrf_write_payload@len:	
   350                           ; 1 bytes @ 0xD
   351                           
   352     002D                     nrf_flush_rxtx@data:	
   353                           ; 1 bytes @ 0xD
   354                           
   355                           
   356                           ; 1 bytes @ 0xD
   357     002D                     	ds	1
   358     002E                     ??_nrf_write_payload:
   359     002E                     ?_nrf_setup:	
   360                           ; 1 bytes @ 0xE
   361                           
   362     002E                     nrf_read_register@reg:	
   363                           ; 1 bytes @ 0xE
   364                           
   365     002E                     nrf_setup@addr_size:	
   366                           ; 1 bytes @ 0xE
   367                           
   368                           
   369                           ; 1 bytes @ 0xE
   370     002E                     	ds	1
   371     002F                     ??_nrf_set_tx_mode:
   372     002F                     nrf_write_payload@data:	
   373                           ; 1 bytes @ 0xF
   374                           
   375     002F                     nrf_setup@payload_size:	
   376                           ; 1 bytes @ 0xF
   377                           
   378                           
   379                           ; 1 bytes @ 0xF
   380     002F                     	ds	1
   381     0030                     ??_nrf_setup:
   382     0030                     nrf_set_tx_mode@config:	
   383                           ; 1 bytes @ 0x10
   384                           
   385                           
   386                           ; 1 bytes @ 0x10
   387     0030                     	ds	1
   388     0031                     ?_nrf_send:
   389     0031                     nrf_send@len:	
   390                           ; 1 bytes @ 0x11
   391                           
   392                           
   393                           ; 1 bytes @ 0x11
   394     0031                     	ds	1
   395     0032                     nrf_setup@addr:
   396     0032                     nrf_send@stat:	
   397                           ; 1 bytes @ 0x12
   398                           
   399                           
   400                           ; 1 bytes @ 0x12
   401     0032                     	ds	1
   402     0033                     nrf_send@data:
   403     0033                     nrf_setup@data:	
   404                           ; 1 bytes @ 0x13
   405                           
   406                           
   407                           ; 5 bytes @ 0x13
   408     0033                     	ds	1
   409     0034                     nrf_send@clear:
   410                           
   411                           ; 1 bytes @ 0x14
   412     0034                     	ds	4
   413     0038                     ??_main:
   414                           
   415                           ; 1 bytes @ 0x18
   416     0038                     	ds	3
   417     003B                     main@data:
   418                           
   419                           ; 3 bytes @ 0x1B
   420     003B                     	ds	3
   421                           
   422                           	psect	maintext
   423     0320                     __pmaintext:	
   424 ;;
   425 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   426 ;;
   427 ;; *************** function _main *****************
   428 ;; Defined at:
   429 ;;		line 35 in file "main.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;  data            3   27[BANK0 ] unsigned char [3]
   434 ;; Return value:  Size  Location     Type
   435 ;;                  1    wreg      void 
   436 ;; Registers used:
   437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : B00/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMMON   BANK0
   443 ;;      Params:         0       0
   444 ;;      Locals:         0       3
   445 ;;      Temps:          0       3
   446 ;;      Totals:         0       6
   447 ;;Total ram usage:        6 bytes
   448 ;; Hardware stack levels required when called: 5
   449 ;; This function calls:
   450 ;;		_SPI_init_master
   451 ;;		_nrf_send
   452 ;;		_nrf_set_tx_mode
   453 ;;		_nrf_setup
   454 ;; This function is called by:
   455 ;;		Startup code after reset
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459     0320                     _main:	
   460                           ;psect for function _main
   461                           
   462     0320                     l1187:	
   463                           ;incstack = 0
   464                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   465                           
   466                           
   467                           ;main.c: 37:     ANSEL = 0;
   468     0320  1683               	bsf	3,5	;RP0=1, select bank1
   469     0321  019F               	clrf	31	;volatile
   470                           
   471                           ;main.c: 38:     ADCON0 = 0;
   472     0322  1283               	bcf	3,5	;RP0=0, select bank0
   473     0323  019F               	clrf	31	;volatile
   474     0324                     l1189:
   475                           
   476                           ;main.c: 39:     CMCON = 0x07;
   477     0324  3007               	movlw	7
   478     0325  0099               	movwf	25	;volatile
   479     0326                     l1191:
   480                           
   481                           ;main.c: 40:     VRCON = 0;
   482     0326  1683               	bsf	3,5	;RP0=1, select bank1
   483     0327  0199               	clrf	25	;volatile
   484     0328                     l1193:
   485                           
   486                           ;main.c: 42:     TRISIO = 0;
   487     0328  0185               	clrf	5	;volatile
   488     0329                     l1195:
   489                           
   490                           ;main.c: 43:     GPIO = 0;
   491     0329  1283               	bcf	3,5	;RP0=0, select bank0
   492     032A  0185               	clrf	5	;volatile
   493     032B                     l1197:
   494                           
   495                           ;main.c: 46:     SPI_init_master();
   496     032B  2214               	fcall	_SPI_init_master
   497     032C                     l1199:
   498                           
   499                           ;main.c: 49:     nrf_setup(RADIO_ADDR, 5, 3);
   500     032C  3005               	movlw	5
   501     032D  1283               	bcf	3,5	;RP0=0, select bank0
   502     032E  00AE               	movwf	nrf_setup@addr_size
   503     032F  3003               	movlw	3
   504     0330  00AF               	movwf	nrf_setup@payload_size
   505     0331  3041               	movlw	(low (_RADIO_ADDR| 0))& (0+255)
   506     0332  235D               	fcall	_nrf_setup
   507     0333                     l1201:
   508                           
   509                           ;main.c: 51:     nrf_set_tx_mode();
   510     0333  227A               	fcall	_nrf_set_tx_mode
   511     0334                     l1203:
   512                           
   513                           ;main.c: 54:     {;main.c: 55:         GPIO2 = 1;
   514     0334  1283               	bcf	3,5	;RP0=0, select bank0
   515     0335  1505               	bsf	5,2	;volatile
   516     0336                     l1205:
   517                           
   518                           ;main.c: 56:         uint8_t data[3] = "SS";
   519     0336  083E               	movf	main@F646,w
   520     0337  00BB               	movwf	main@data
   521     0338  083F               	movf	main@F646+1,w
   522     0339  00BC               	movwf	main@data+1
   523     033A  0840               	movf	main@F646+2,w
   524     033B  00BD               	movwf	main@data+2
   525     033C                     l1207:
   526                           
   527                           ;main.c: 57:         nrf_send(data, 3);
   528     033C  3003               	movlw	3
   529     033D  00B1               	movwf	nrf_send@len
   530     033E  303B               	movlw	(low (main@data| 0))& (0+255)
   531     033F  2261               	fcall	_nrf_send
   532     0340                     l1209:
   533                           
   534                           ;main.c: 58:         _delay((unsigned long)((400)*(4000000UL/4000.0)));
   535     0340  3003               	movlw	3
   536     0341  1283               	bcf	3,5	;RP0=0, select bank0
   537     0342  00BA               	movwf	??_main+2
   538     0343  3008               	movlw	8
   539     0344  00B9               	movwf	??_main+1
   540     0345  3077               	movlw	119
   541     0346  00B8               	movwf	??_main
   542     0347                     u217:
   543     0347  0BB8               	decfsz	??_main,f
   544     0348  2B47               	goto	u217
   545     0349  0BB9               	decfsz	??_main+1,f
   546     034A  2B47               	goto	u217
   547     034B  0BBA               	decfsz	??_main+2,f
   548     034C  2B47               	goto	u217
   549     034D                     l1211:
   550                           
   551                           ;main.c: 59:         GPIO2 = 0;
   552     034D  1283               	bcf	3,5	;RP0=0, select bank0
   553     034E  1105               	bcf	5,2	;volatile
   554     034F                     l1213:
   555                           
   556                           ;main.c: 60:         _delay((unsigned long)((400)*(4000000UL/4000.0)));
   557     034F  3003               	movlw	3
   558     0350  00BA               	movwf	??_main+2
   559     0351  3008               	movlw	8
   560     0352  00B9               	movwf	??_main+1
   561     0353  3077               	movlw	119
   562     0354  00B8               	movwf	??_main
   563     0355                     u227:
   564     0355  0BB8               	decfsz	??_main,f
   565     0356  2B55               	goto	u227
   566     0357  0BB9               	decfsz	??_main+1,f
   567     0358  2B55               	goto	u227
   568     0359  0BBA               	decfsz	??_main+2,f
   569     035A  2B55               	goto	u227
   570     035B  2B34               	goto	l1203
   571     035C  2800               	ljmp	start
   572     035D                     __end_of_main:
   573                           
   574                           	psect	text1
   575     035D                     __ptext1:	
   576 ;; *************** function _nrf_setup *****************
   577 ;; Defined at:
   578 ;;		line 175 in file "./nrf24l01.h"
   579 ;; Parameters:    Size  Location     Type
   580 ;;  addr            1    wreg     PTR unsigned char 
   581 ;;		 -> RADIO_ADDR(5), 
   582 ;;  addr_size       1   14[BANK0 ] unsigned char 
   583 ;;  payload_size    1   15[BANK0 ] unsigned char 
   584 ;; Auto vars:     Size  Location     Type
   585 ;;  addr            1   18[BANK0 ] PTR unsigned char 
   586 ;;		 -> RADIO_ADDR(5), 
   587 ;;  data            5   19[BANK0 ] unsigned char [5]
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMMON   BANK0
   597 ;;      Params:         0       2
   598 ;;      Locals:         0       6
   599 ;;      Temps:          0       2
   600 ;;      Totals:         0      10
   601 ;;Total ram usage:       10 bytes
   602 ;; Hardware stack levels used: 1
   603 ;; Hardware stack levels required when called: 4
   604 ;; This function calls:
   605 ;;		_arrcpy
   606 ;;		_nrf_flush_rxtx
   607 ;;		_nrf_write_register
   608 ;; This function is called by:
   609 ;;		_main
   610 ;; This function uses a non-reentrant model
   611 ;;
   612                           
   613     035D                     _nrf_setup:	
   614                           ;psect for function _nrf_setup
   615                           
   616                           
   617                           ;incstack = 0
   618                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   619                           ;nrf_setup@addr stored from wreg
   620     035D  1283               	bcf	3,5	;RP0=0, select bank0
   621     035E  00B2               	movwf	nrf_setup@addr
   622     035F                     l1099:
   623                           
   624                           ;./nrf24l01.h: 175:     void nrf_setup(uint8_t *addr, uint8_t addr_size, uint8_t payload
      +                          _size);./nrf24l01.h: 176:     {;./nrf24l01.h: 177:         TRISIO5 = 0;
   625     035F  1683               	bsf	3,5	;RP0=1, select bank1
   626     0360  1285               	bcf	5,5	;volatile
   627                           
   628                           ;./nrf24l01.h: 178:         TRISIO0 = 0;
   629     0361  1005               	bcf	5,0	;volatile
   630                           
   631                           ;./nrf24l01.h: 180:         GPIO5 = 1;
   632     0362  1283               	bcf	3,5	;RP0=0, select bank0
   633     0363  1685               	bsf	5,5	;volatile
   634                           
   635                           ;./nrf24l01.h: 181:         GPIO0 = 0;
   636     0364  1005               	bcf	5,0	;volatile
   637     0365                     l1101:
   638                           
   639                           ;./nrf24l01.h: 183:         _delay((unsigned long)((100)*(4000000UL/4000.0)));
   640     0365  3082               	movlw	130
   641     0366  00B1               	movwf	??_nrf_setup+1
   642     0367  30DD               	movlw	221
   643     0368  00B0               	movwf	??_nrf_setup
   644     0369                     u237:
   645     0369  0BB0               	decfsz	??_nrf_setup,f
   646     036A  2B69               	goto	u237
   647     036B  0BB1               	decfsz	??_nrf_setup+1,f
   648     036C  2B69               	goto	u237
   649     036D  2B6E               	nop2
   650                           
   651                           ;./nrf24l01.h: 185:         uint8_t data[5];;./nrf24l01.h: 187:         data[0] = 0x0B;
   652     036E  300B               	movlw	11
   653     036F  1283               	bcf	3,5	;RP0=0, select bank0
   654     0370  00B3               	movwf	nrf_setup@data
   655     0371                     l1103:
   656                           
   657                           ;./nrf24l01.h: 188:         nrf_write_register(0x00, (uint8_t *)&data, 1);
   658     0371  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   659     0372  00AA               	movwf	nrf_write_register@data
   660     0373  01AB               	clrf	nrf_write_register@len
   661     0374  0AAB               	incf	nrf_write_register@len,f
   662     0375  3000               	movlw	0
   663     0376  222D               	fcall	_nrf_write_register
   664     0377                     l1105:
   665                           
   666                           ;./nrf24l01.h: 189:         data[0] = 0x00;
   667     0377  1283               	bcf	3,5	;RP0=0, select bank0
   668     0378  01B3               	clrf	nrf_setup@data
   669     0379                     l1107:
   670                           
   671                           ;./nrf24l01.h: 190:         nrf_write_register(0x01, (uint8_t *)&data, 1);
   672     0379  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   673     037A  00AA               	movwf	nrf_write_register@data
   674     037B  01AB               	clrf	nrf_write_register@len
   675     037C  0AAB               	incf	nrf_write_register@len,f
   676     037D  3001               	movlw	1
   677     037E  222D               	fcall	_nrf_write_register
   678     037F                     l1109:
   679                           
   680                           ;./nrf24l01.h: 191:         data[0] = 0x01;
   681     037F  1283               	bcf	3,5	;RP0=0, select bank0
   682     0380  01B3               	clrf	nrf_setup@data
   683     0381  0AB3               	incf	nrf_setup@data,f
   684     0382                     l1111:
   685                           
   686                           ;./nrf24l01.h: 192:         nrf_write_register(0x02, (uint8_t *)&data, 1);
   687     0382  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   688     0383  00AA               	movwf	nrf_write_register@data
   689     0384  01AB               	clrf	nrf_write_register@len
   690     0385  0AAB               	incf	nrf_write_register@len,f
   691     0386  3002               	movlw	2
   692     0387  222D               	fcall	_nrf_write_register
   693                           
   694                           ;./nrf24l01.h: 194:         switch (addr_size){
   695     0388  2B92               	goto	l1119
   696     0389                     l83:	
   697                           ;./nrf24l01.h: 195:             case 3:
   698                           
   699                           
   700                           ;./nrf24l01.h: 196:                 data[0] = 0x01;
   701     0389  01B3               	clrf	nrf_setup@data
   702     038A  0AB3               	incf	nrf_setup@data,f
   703                           
   704                           ;./nrf24l01.h: 197:                 break;
   705     038B  2BA6               	goto	l1121
   706     038C                     l1113:
   707                           
   708                           ;./nrf24l01.h: 199:                 data[0] = 0x02;
   709     038C  3002               	movlw	2
   710     038D  00B3               	movwf	nrf_setup@data
   711                           
   712                           ;./nrf24l01.h: 200:                 break;
   713     038E  2BA6               	goto	l1121
   714     038F                     l1115:
   715                           
   716                           ;./nrf24l01.h: 202:                 data[0] = 0x03;
   717     038F  3003               	movlw	3
   718     0390  00B3               	movwf	nrf_setup@data
   719                           
   720                           ;./nrf24l01.h: 203:                 break;
   721     0391  2BA6               	goto	l1121
   722     0392                     l1119:
   723     0392  1283               	bcf	3,5	;RP0=0, select bank0
   724     0393  082E               	movf	nrf_setup@addr_size,w
   725     0394  00B0               	movwf	??_nrf_setup
   726     0395  01B1               	clrf	??_nrf_setup+1
   727                           
   728                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   729                           ; Switch size 1, requested type "simple"
   730                           ; Number of cases is 1, Range of values is 0 to 0
   731                           ; switch strategies available:
   732                           ; Name         Instructions Cycles
   733                           ; simple_byte            4     3 (average)
   734                           ; direct_byte            7     6 (fixed)
   735                           ; jumptable            260     6 (fixed)
   736                           ;	Chosen strategy is simple_byte
   737     0396  0831               	movf	??_nrf_setup+1,w
   738     0397  3A00               	xorlw	0	; case 0
   739     0398  1903               	skipnz
   740     0399  2B9B               	goto	l1235
   741     039A  2BA6               	goto	l1121
   742     039B                     l1235:
   743                           
   744                           ; Switch size 1, requested type "simple"
   745                           ; Number of cases is 3, Range of values is 3 to 5
   746                           ; switch strategies available:
   747                           ; Name         Instructions Cycles
   748                           ; simple_byte           10     6 (average)
   749                           ; direct_byte           12     9 (fixed)
   750                           ; jumptable            263     9 (fixed)
   751                           ;	Chosen strategy is simple_byte
   752     039B  0830               	movf	??_nrf_setup,w
   753     039C  3A03               	xorlw	3	; case 3
   754     039D  1903               	skipnz
   755     039E  2B89               	goto	l83
   756     039F  3A07               	xorlw	7	; case 4
   757     03A0  1903               	skipnz
   758     03A1  2B8C               	goto	l1113
   759     03A2  3A01               	xorlw	1	; case 5
   760     03A3  1903               	skipnz
   761     03A4  2B8F               	goto	l1115
   762     03A5  2BA6               	goto	l1121
   763     03A6                     l1121:
   764                           
   765                           ;./nrf24l01.h: 206:         nrf_write_register(0x03, (uint8_t *)&data, 1);
   766     03A6  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   767     03A7  00AA               	movwf	nrf_write_register@data
   768     03A8  01AB               	clrf	nrf_write_register@len
   769     03A9  0AAB               	incf	nrf_write_register@len,f
   770     03AA  3003               	movlw	3
   771     03AB  222D               	fcall	_nrf_write_register
   772     03AC                     l1123:
   773                           
   774                           ;./nrf24l01.h: 207:         data[0] = 0x00;
   775     03AC  1283               	bcf	3,5	;RP0=0, select bank0
   776     03AD  01B3               	clrf	nrf_setup@data
   777     03AE                     l1125:
   778                           
   779                           ;./nrf24l01.h: 208:         nrf_write_register(0x04, (uint8_t *)&data, 1);
   780     03AE  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   781     03AF  00AA               	movwf	nrf_write_register@data
   782     03B0  01AB               	clrf	nrf_write_register@len
   783     03B1  0AAB               	incf	nrf_write_register@len,f
   784     03B2  3004               	movlw	4
   785     03B3  222D               	fcall	_nrf_write_register
   786     03B4                     l1127:
   787                           
   788                           ;./nrf24l01.h: 209:         data[0] = 0x01;
   789     03B4  1283               	bcf	3,5	;RP0=0, select bank0
   790     03B5  01B3               	clrf	nrf_setup@data
   791     03B6  0AB3               	incf	nrf_setup@data,f
   792     03B7                     l1129:
   793                           
   794                           ;./nrf24l01.h: 210:         nrf_write_register(0x05, (uint8_t *)&data, 1);
   795     03B7  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   796     03B8  00AA               	movwf	nrf_write_register@data
   797     03B9  01AB               	clrf	nrf_write_register@len
   798     03BA  0AAB               	incf	nrf_write_register@len,f
   799     03BB  3005               	movlw	5
   800     03BC  222D               	fcall	_nrf_write_register
   801     03BD                     l1131:
   802                           
   803                           ;./nrf24l01.h: 211:         data[0] = 0x26;
   804     03BD  3026               	movlw	38
   805     03BE  1283               	bcf	3,5	;RP0=0, select bank0
   806     03BF  00B3               	movwf	nrf_setup@data
   807     03C0                     l1133:
   808                           
   809                           ;./nrf24l01.h: 212:         nrf_write_register(0x06, (uint8_t *)&data, 1);
   810     03C0  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   811     03C1  00AA               	movwf	nrf_write_register@data
   812     03C2  01AB               	clrf	nrf_write_register@len
   813     03C3  0AAB               	incf	nrf_write_register@len,f
   814     03C4  3006               	movlw	6
   815     03C5  222D               	fcall	_nrf_write_register
   816     03C6                     l1135:
   817                           
   818                           ;./nrf24l01.h: 213:         data[0] = payload_size;
   819     03C6  1283               	bcf	3,5	;RP0=0, select bank0
   820     03C7  082F               	movf	nrf_setup@payload_size,w
   821     03C8  00B3               	movwf	nrf_setup@data
   822     03C9                     l1137:
   823                           
   824                           ;./nrf24l01.h: 214:         nrf_write_register(0x11, (uint8_t *)&data, 1);
   825     03C9  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   826     03CA  00AA               	movwf	nrf_write_register@data
   827     03CB  01AB               	clrf	nrf_write_register@len
   828     03CC  0AAB               	incf	nrf_write_register@len,f
   829     03CD  3011               	movlw	17
   830     03CE  222D               	fcall	_nrf_write_register
   831     03CF                     l1139:
   832                           
   833                           ;./nrf24l01.h: 216:         arrcpy(data, addr, addr_size);
   834     03CF  1283               	bcf	3,5	;RP0=0, select bank0
   835     03D0  0832               	movf	nrf_setup@addr,w
   836     03D1  00A0               	movwf	arrcpy@src
   837     03D2  082E               	movf	nrf_setup@addr_size,w
   838     03D3  00A1               	movwf	arrcpy@len
   839     03D4  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   840     03D5  2295               	fcall	_arrcpy
   841     03D6                     l1141:
   842                           
   843                           ;./nrf24l01.h: 217:         nrf_write_register(0x0A, data, addr_size);
   844     03D6  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   845     03D7  1283               	bcf	3,5	;RP0=0, select bank0
   846     03D8  00AA               	movwf	nrf_write_register@data
   847     03D9  082E               	movf	nrf_setup@addr_size,w
   848     03DA  00AB               	movwf	nrf_write_register@len
   849     03DB  300A               	movlw	10
   850     03DC  222D               	fcall	_nrf_write_register
   851     03DD                     l1143:
   852                           
   853                           ;./nrf24l01.h: 219:         arrcpy(data, addr, addr_size);
   854     03DD  1283               	bcf	3,5	;RP0=0, select bank0
   855     03DE  0832               	movf	nrf_setup@addr,w
   856     03DF  00A0               	movwf	arrcpy@src
   857     03E0  082E               	movf	nrf_setup@addr_size,w
   858     03E1  00A1               	movwf	arrcpy@len
   859     03E2  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   860     03E3  2295               	fcall	_arrcpy
   861     03E4                     l1145:
   862                           
   863                           ;./nrf24l01.h: 220:         nrf_write_register(0x10, data, addr_size);
   864     03E4  3033               	movlw	(low (nrf_setup@data| 0))& (0+255)
   865     03E5  1283               	bcf	3,5	;RP0=0, select bank0
   866     03E6  00AA               	movwf	nrf_write_register@data
   867     03E7  082E               	movf	nrf_setup@addr_size,w
   868     03E8  00AB               	movwf	nrf_write_register@len
   869     03E9  3010               	movlw	16
   870     03EA  222D               	fcall	_nrf_write_register
   871     03EB                     l1147:
   872                           
   873                           ;./nrf24l01.h: 222:         nrf_flush_rxtx();
   874     03EB  2241               	fcall	_nrf_flush_rxtx
   875     03EC                     l87:
   876     03EC  0008               	return
   877     03ED                     __end_of_nrf_setup:
   878                           
   879                           	psect	text2
   880     0241                     __ptext2:	
   881 ;; *************** function _nrf_flush_rxtx *****************
   882 ;; Defined at:
   883 ;;		line 165 in file "./nrf24l01.h"
   884 ;; Parameters:    Size  Location     Type
   885 ;;		None
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  data            1   13[BANK0 ] unsigned char 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMMON   BANK0
   897 ;;      Params:         0       0
   898 ;;      Locals:         0       1
   899 ;;      Temps:          0       0
   900 ;;      Totals:         0       1
   901 ;;Total ram usage:        1 bytes
   902 ;; Hardware stack levels used: 1
   903 ;; Hardware stack levels required when called: 3
   904 ;; This function calls:
   905 ;;		_nrf_write_command
   906 ;;		_nrf_write_register
   907 ;; This function is called by:
   908 ;;		_nrf_setup
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912     0241                     _nrf_flush_rxtx:	
   913                           ;psect for function _nrf_flush_rxtx
   914                           
   915     0241                     l1075:	
   916                           ;incstack = 0
   917                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   918                           
   919                           
   920                           ;./nrf24l01.h: 167:         uint8_t data = 0b01110000;
   921     0241  3070               	movlw	112
   922     0242  1283               	bcf	3,5	;RP0=0, select bank0
   923     0243  00AD               	movwf	nrf_flush_rxtx@data
   924     0244                     l1077:
   925                           
   926                           ;./nrf24l01.h: 168:         nrf_write_register(0x07, &data, 1);
   927     0244  302D               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
   928     0245  00AA               	movwf	nrf_write_register@data
   929     0246  01AB               	clrf	nrf_write_register@len
   930     0247  0AAB               	incf	nrf_write_register@len,f
   931     0248  3007               	movlw	7
   932     0249  222D               	fcall	_nrf_write_register
   933     024A                     l1079:
   934                           
   935                           ;./nrf24l01.h: 169:         nrf_write_command(0b11100001);
   936     024A  30E1               	movlw	225
   937     024B  2237               	fcall	_nrf_write_command
   938     024C                     l1081:
   939                           
   940                           ;./nrf24l01.h: 170:         nrf_write_command(0b11100010);
   941     024C  30E2               	movlw	226
   942     024D  2237               	fcall	_nrf_write_command
   943     024E                     l79:
   944     024E  0008               	return
   945     024F                     __end_of_nrf_flush_rxtx:
   946                           
   947                           	psect	text3
   948     0295                     __ptext3:	
   949 ;; *************** function _arrcpy *****************
   950 ;; Defined at:
   951 ;;		line 97 in file "./nrf24l01.h"
   952 ;; Parameters:    Size  Location     Type
   953 ;;  dst             1    wreg     PTR unsigned char 
   954 ;;		 -> nrf_setup@data(5), 
   955 ;;  src             1    0[BANK0 ] PTR unsigned char 
   956 ;;		 -> RADIO_ADDR(5), 
   957 ;;  len             1    1[BANK0 ] unsigned char 
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  dst             1    5[BANK0 ] PTR unsigned char 
   960 ;;		 -> nrf_setup@data(5), 
   961 ;;  i               1    6[BANK0 ] unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMMON   BANK0
   971 ;;      Params:         0       2
   972 ;;      Locals:         0       2
   973 ;;      Temps:          0       3
   974 ;;      Totals:         0       7
   975 ;;Total ram usage:        7 bytes
   976 ;; Hardware stack levels used: 1
   977 ;; This function calls:
   978 ;;		Nothing
   979 ;; This function is called by:
   980 ;;		_nrf_setup
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984     0295                     _arrcpy:	
   985                           ;psect for function _arrcpy
   986                           
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0]
   990                           ;arrcpy@dst stored from wreg
   991     0295  1283               	bcf	3,5	;RP0=0, select bank0
   992     0296  00A5               	movwf	arrcpy@dst
   993     0297                     l1057:
   994                           
   995                           ;./nrf24l01.h: 97:     void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);./nrf24l01.h
      +                          : 98:     {;./nrf24l01.h: 99:         for (uint8_t i = 0; i < len; i++)
   996     0297  01A6               	clrf	arrcpy@i
   997     0298  2AAC               	goto	l1063
   998     0299                     l1059:
   999                           
  1000                           ;./nrf24l01.h: 100:         {;./nrf24l01.h: 101:             dst[i] = src[i];
  1001     0299  0826               	movf	arrcpy@i,w
  1002     029A  0720               	addwf	arrcpy@src,w
  1003     029B  00A2               	movwf	??_arrcpy
  1004     029C  0822               	movf	??_arrcpy,w
  1005     029D  0084               	movwf	4
  1006     029E  1383               	bcf	3,7	;select IRP bank0
  1007     029F  0800               	movf	0,w
  1008     02A0  00A3               	movwf	??_arrcpy+1
  1009     02A1  0826               	movf	arrcpy@i,w
  1010     02A2  0725               	addwf	arrcpy@dst,w
  1011     02A3  00A4               	movwf	??_arrcpy+2
  1012     02A4  0824               	movf	??_arrcpy+2,w
  1013     02A5  0084               	movwf	4
  1014     02A6  0823               	movf	??_arrcpy+1,w
  1015     02A7  0080               	movwf	0
  1016     02A8                     l1061:
  1017                           
  1018                           ;./nrf24l01.h: 102:         }
  1019     02A8  3001               	movlw	1
  1020     02A9  00A2               	movwf	??_arrcpy
  1021     02AA  0822               	movf	??_arrcpy,w
  1022     02AB  07A6               	addwf	arrcpy@i,f
  1023     02AC                     l1063:
  1024     02AC  0821               	movf	arrcpy@len,w
  1025     02AD  0226               	subwf	arrcpy@i,w
  1026     02AE  1C03               	skipc
  1027     02AF  2AB1               	goto	u171
  1028     02B0  2AB2               	goto	u170
  1029     02B1                     u171:
  1030     02B1  2A99               	goto	l1059
  1031     02B2                     u170:
  1032     02B2                     l52:
  1033     02B2  0008               	return
  1034     02B3                     __end_of_arrcpy:
  1035                           
  1036                           	psect	text4
  1037     0261                     __ptext4:	
  1038 ;; *************** function _nrf_send *****************
  1039 ;; Defined at:
  1040 ;;		line 265 in file "./nrf24l01.h"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  data            1    wreg     PTR unsigned char 
  1043 ;;		 -> main@data(3), 
  1044 ;;  len             1   17[BANK0 ] unsigned char 
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;  data            1   19[BANK0 ] PTR unsigned char 
  1047 ;;		 -> main@data(3), 
  1048 ;;  clear           1   20[BANK0 ] unsigned char 
  1049 ;;  stat            1   18[BANK0 ] unsigned char 
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMMON   BANK0
  1059 ;;      Params:         0       1
  1060 ;;      Locals:         0       3
  1061 ;;      Temps:          0       0
  1062 ;;      Totals:         0       4
  1063 ;;Total ram usage:        4 bytes
  1064 ;; Hardware stack levels used: 1
  1065 ;; Hardware stack levels required when called: 4
  1066 ;; This function calls:
  1067 ;;		_nrf_set_tx_mode
  1068 ;;		_nrf_write_command
  1069 ;;		_nrf_write_payload
  1070 ;;		_nrf_write_register
  1071 ;; This function is called by:
  1072 ;;		_main
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076     0261                     _nrf_send:	
  1077                           ;psect for function _nrf_send
  1078                           
  1079                           
  1080                           ;incstack = 0
  1081                           ; Regs used in _nrf_send: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1082                           ;nrf_send@data stored from wreg
  1083     0261  1283               	bcf	3,5	;RP0=0, select bank0
  1084     0262  00B3               	movwf	nrf_send@data
  1085     0263                     l1153:
  1086                           
  1087                           ;./nrf24l01.h: 265:     void nrf_send(uint8_t *data, uint8_t len);./nrf24l01.h: 266:    
      +                           {;./nrf24l01.h: 267:         nrf_set_tx_mode();
  1088     0263  227A               	fcall	_nrf_set_tx_mode
  1089                           
  1090                           ;./nrf24l01.h: 268:         nrf_write_payload(data, len);
  1091     0264  1283               	bcf	3,5	;RP0=0, select bank0
  1092     0265  0831               	movf	nrf_send@len,w
  1093     0266  00AD               	movwf	nrf_write_payload@len
  1094     0267  0833               	movf	nrf_send@data,w
  1095     0268  224F               	fcall	_nrf_write_payload
  1096     0269                     l1155:
  1097                           
  1098                           ;./nrf24l01.h: 273:         {;./nrf24l01.h: 274:             stat = nrf_write_command(0b
      +                          11111111);
  1099     0269  30FF               	movlw	255
  1100     026A  2237               	fcall	_nrf_write_command
  1101     026B  1283               	bcf	3,5	;RP0=0, select bank0
  1102     026C  00B2               	movwf	nrf_send@stat
  1103     026D                     l1157:
  1104                           
  1105                           ;./nrf24l01.h: 275:         } while ((stat & 0x20) == 0);
  1106     026D  1EB2               	btfss	nrf_send@stat,5
  1107     026E  2A70               	goto	u191
  1108     026F  2A71               	goto	u190
  1109     0270                     u191:
  1110     0270  2A69               	goto	l1155
  1111     0271                     u190:
  1112     0271                     l1159:
  1113                           
  1114                           ;./nrf24l01.h: 278:         uint8_t clear = 0x20;
  1115     0271  3020               	movlw	32
  1116     0272  00B4               	movwf	nrf_send@clear
  1117     0273                     l1161:
  1118                           
  1119                           ;./nrf24l01.h: 279:         nrf_write_register(0x07, &clear, 1);
  1120     0273  3034               	movlw	(low (nrf_send@clear| 0))& (0+255)
  1121     0274  00AA               	movwf	nrf_write_register@data
  1122     0275  01AB               	clrf	nrf_write_register@len
  1123     0276  0AAB               	incf	nrf_write_register@len,f
  1124     0277  3007               	movlw	7
  1125     0278  222D               	fcall	_nrf_write_register
  1126     0279                     l103:
  1127     0279  0008               	return
  1128     027A                     __end_of_nrf_send:
  1129                           
  1130                           	psect	text5
  1131     024F                     __ptext5:	
  1132 ;; *************** function _nrf_write_payload *****************
  1133 ;; Defined at:
  1134 ;;		line 143 in file "./nrf24l01.h"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;  data            1    wreg     PTR unsigned char 
  1137 ;;		 -> main@data(3), 
  1138 ;;  len             1   13[BANK0 ] unsigned char 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  data            1   15[BANK0 ] PTR unsigned char 
  1141 ;;		 -> main@data(3), 
  1142 ;;  status          1    0        unsigned char 
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      unsigned char 
  1145 ;; Registers used:
  1146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMMON   BANK0
  1152 ;;      Params:         0       1
  1153 ;;      Locals:         0       1
  1154 ;;      Temps:          0       1
  1155 ;;      Totals:         0       3
  1156 ;;Total ram usage:        3 bytes
  1157 ;; Hardware stack levels used: 1
  1158 ;; Hardware stack levels required when called: 3
  1159 ;; This function calls:
  1160 ;;		_nrf_write_register
  1161 ;; This function is called by:
  1162 ;;		_nrf_send
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166     024F                     _nrf_write_payload:	
  1167                           ;psect for function _nrf_write_payload
  1168                           
  1169                           
  1170                           ;incstack = 0
  1171                           ; Regs used in _nrf_write_payload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1172                           ;nrf_write_payload@data stored from wreg
  1173     024F  1283               	bcf	3,5	;RP0=0, select bank0
  1174     0250  00AF               	movwf	nrf_write_payload@data
  1175     0251                     l1065:
  1176     0251  082F               	movf	nrf_write_payload@data,w
  1177     0252  00AA               	movwf	nrf_write_register@data
  1178     0253  082D               	movf	nrf_write_payload@len,w
  1179     0254  00AB               	movwf	nrf_write_register@len
  1180     0255  30A0               	movlw	160
  1181     0256  222D               	fcall	_nrf_write_register
  1182     0257                     l1067:
  1183                           
  1184                           ;./nrf24l01.h: 146:         GPIO0 = 1;
  1185     0257  1283               	bcf	3,5	;RP0=0, select bank0
  1186     0258  1405               	bsf	5,0	;volatile
  1187     0259                     l1069:
  1188                           
  1189                           ;./nrf24l01.h: 147:         _delay((unsigned long)((20)*(4000000UL/4000000.0)));
  1190     0259  3006               	movlw	6
  1191     025A  00AE               	movwf	??_nrf_write_payload
  1192     025B                     u247:
  1193     025B  0BAE               	decfsz	??_nrf_write_payload,f
  1194     025C  2A5B               	goto	u247
  1195     025D  0000               	nop
  1196     025E                     l1071:
  1197                           
  1198                           ;./nrf24l01.h: 148:         GPIO0 = 0;
  1199     025E  1283               	bcf	3,5	;RP0=0, select bank0
  1200     025F  1005               	bcf	5,0	;volatile
  1201     0260                     l73:
  1202     0260  0008               	return
  1203     0261                     __end_of_nrf_write_payload:
  1204                           
  1205                           	psect	text6
  1206     0237                     __ptext6:	
  1207 ;; *************** function _nrf_write_command *****************
  1208 ;; Defined at:
  1209 ;;		line 153 in file "./nrf24l01.h"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;  command         1    wreg     unsigned char 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;  command         1    4[BANK0 ] unsigned char 
  1214 ;;  status          1    5[BANK0 ] unsigned char 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      unsigned char 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0, pclath, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMMON   BANK0
  1224 ;;      Params:         0       0
  1225 ;;      Locals:         0       2
  1226 ;;      Temps:          0       0
  1227 ;;      Totals:         0       2
  1228 ;;Total ram usage:        2 bytes
  1229 ;; Hardware stack levels used: 1
  1230 ;; Hardware stack levels required when called: 1
  1231 ;; This function calls:
  1232 ;;		_SPI_write
  1233 ;; This function is called by:
  1234 ;;		_nrf_flush_rxtx
  1235 ;;		_nrf_send
  1236 ;;		_nrf_data_available
  1237 ;;		_nrf_read
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241     0237                     _nrf_write_command:	
  1242                           ;psect for function _nrf_write_command
  1243                           
  1244                           
  1245                           ;incstack = 0
  1246                           ; Regs used in _nrf_write_command: [wreg+status,2+status,0+pclath+cstack]
  1247                           ;nrf_write_command@command stored from wreg
  1248     0237  1283               	bcf	3,5	;RP0=0, select bank0
  1249     0238  00A4               	movwf	nrf_write_command@command
  1250     0239                     l1047:
  1251                           
  1252                           ;./nrf24l01.h: 153:     uint8_t nrf_write_command(uint8_t command);./nrf24l01.h: 154:   
      +                            {;./nrf24l01.h: 155:         GPIO5 = 0;
  1253     0239  1285               	bcf	5,5	;volatile
  1254     023A                     l1049:
  1255                           
  1256                           ;./nrf24l01.h: 156:         uint8_t status = SPI_write(command);
  1257     023A  0824               	movf	nrf_write_command@command,w
  1258     023B  22D2               	fcall	_SPI_write
  1259     023C  1283               	bcf	3,5	;RP0=0, select bank0
  1260     023D  00A5               	movwf	nrf_write_command@status
  1261     023E                     l1051:
  1262                           
  1263                           ;./nrf24l01.h: 157:         GPIO5 = 1;
  1264     023E  1685               	bsf	5,5	;volatile
  1265     023F                     l1053:
  1266                           
  1267                           ;./nrf24l01.h: 158:         return status;
  1268     023F  0825               	movf	nrf_write_command@status,w
  1269     0240                     l76:
  1270     0240  0008               	return
  1271     0241                     __end_of_nrf_write_command:
  1272                           
  1273                           	psect	text7
  1274     027A                     __ptext7:	
  1275 ;; *************** function _nrf_set_tx_mode *****************
  1276 ;; Defined at:
  1277 ;;		line 241 in file "./nrf24l01.h"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;		None
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;  config          1   16[BANK0 ] unsigned char 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  1    wreg      void 
  1284 ;; Registers used:
  1285 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMMON   BANK0
  1291 ;;      Params:         0       0
  1292 ;;      Locals:         0       1
  1293 ;;      Temps:          0       1
  1294 ;;      Totals:         0       2
  1295 ;;Total ram usage:        2 bytes
  1296 ;; Hardware stack levels used: 1
  1297 ;; Hardware stack levels required when called: 3
  1298 ;; This function calls:
  1299 ;;		_nrf_read_register
  1300 ;;		_nrf_write_register
  1301 ;; This function is called by:
  1302 ;;		_nrf_send
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307     027A                     _nrf_set_tx_mode:	
  1308                           ;psect for function _nrf_set_tx_mode
  1309                           
  1310     027A                     l1083:	
  1311                           ;incstack = 0
  1312                           ; Regs used in _nrf_set_tx_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1313                           
  1314                           
  1315                           ;./nrf24l01.h: 243:         uint8_t config;;./nrf24l01.h: 244:         nrf_read_register
      +                          (0x00, &config, 1);
  1316     027A  3030               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1317     027B  1283               	bcf	3,5	;RP0=0, select bank0
  1318     027C  00AC               	movwf	nrf_read_register@data
  1319     027D  01AD               	clrf	nrf_read_register@len
  1320     027E  0AAD               	incf	nrf_read_register@len,f
  1321     027F  3000               	movlw	0
  1322     0280  2224               	fcall	_nrf_read_register
  1323     0281                     l1085:
  1324                           
  1325                           ;./nrf24l01.h: 246:         GPIO0 = 0;
  1326     0281  1283               	bcf	3,5	;RP0=0, select bank0
  1327     0282  1005               	bcf	5,0	;volatile
  1328     0283                     l1087:
  1329                           
  1330                           ;./nrf24l01.h: 248:         if (!(config & 0x01))
  1331     0283  1830               	btfsc	nrf_set_tx_mode@config,0
  1332     0284  2A86               	goto	u181
  1333     0285  2A87               	goto	u180
  1334     0286                     u181:
  1335     0286  2A88               	goto	l1091
  1336     0287                     u180:
  1337     0287  2A94               	goto	l95
  1338     0288                     l1091:
  1339                           
  1340                           ;./nrf24l01.h: 251:         config &= ~0x01;
  1341     0288  30FE               	movlw	254
  1342     0289  00AF               	movwf	??_nrf_set_tx_mode
  1343     028A  082F               	movf	??_nrf_set_tx_mode,w
  1344     028B  05B0               	andwf	nrf_set_tx_mode@config,f
  1345     028C                     l1093:
  1346                           
  1347                           ;./nrf24l01.h: 252:         nrf_write_register(0x00, &config, 1);
  1348     028C  3030               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1349     028D  00AA               	movwf	nrf_write_register@data
  1350     028E  01AB               	clrf	nrf_write_register@len
  1351     028F  0AAB               	incf	nrf_write_register@len,f
  1352     0290  3000               	movlw	0
  1353     0291  222D               	fcall	_nrf_write_register
  1354     0292                     l1095:
  1355                           
  1356                           ;./nrf24l01.h: 254:         GPIO0 = 0;
  1357     0292  1283               	bcf	3,5	;RP0=0, select bank0
  1358     0293  1005               	bcf	5,0	;volatile
  1359     0294                     l95:
  1360     0294  0008               	return
  1361     0295                     __end_of_nrf_set_tx_mode:
  1362                           
  1363                           	psect	text8
  1364     022D                     __ptext8:	
  1365 ;; *************** function _nrf_write_register *****************
  1366 ;; Defined at:
  1367 ;;		line 131 in file "./nrf24l01.h"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  reg             1    wreg     unsigned char 
  1370 ;;  data            1   10[BANK0 ] PTR unsigned char 
  1371 ;;		 -> main@data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1372 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1373 ;;  len             1   11[BANK0 ] unsigned char 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  reg             1   12[BANK0 ] unsigned char 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      unsigned char 
  1378 ;; Registers used:
  1379 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0
  1385 ;;      Params:         0       2
  1386 ;;      Locals:         0       1
  1387 ;;      Temps:          0       0
  1388 ;;      Totals:         0       3
  1389 ;;Total ram usage:        3 bytes
  1390 ;; Hardware stack levels used: 1
  1391 ;; Hardware stack levels required when called: 2
  1392 ;; This function calls:
  1393 ;;		_nrf_command_with_data
  1394 ;; This function is called by:
  1395 ;;		_nrf_write_payload
  1396 ;;		_nrf_flush_rxtx
  1397 ;;		_nrf_setup
  1398 ;;		_nrf_set_tx_mode
  1399 ;;		_nrf_send
  1400 ;;		_nrf_set_rx_mode
  1401 ;;		_nrf_read
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405     022D                     _nrf_write_register:	
  1406                           ;psect for function _nrf_write_register
  1407                           
  1408                           
  1409                           ;incstack = 0
  1410                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1411                           ;nrf_write_register@reg stored from wreg
  1412     022D  1283               	bcf	3,5	;RP0=0, select bank0
  1413     022E  00AC               	movwf	nrf_write_register@reg
  1414     022F                     l1039:
  1415                           
  1416                           ;./nrf24l01.h: 131:     uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t l
      +                          en);./nrf24l01.h: 132:     {;./nrf24l01.h: 133:         return nrf_command_with_data(reg
      +                           | 0b00100000, data, len);
  1417     022F  082A               	movf	nrf_write_register@data,w
  1418     0230  00A4               	movwf	nrf_command_with_data@data
  1419     0231  082B               	movf	nrf_write_register@len,w
  1420     0232  00A5               	movwf	nrf_command_with_data@len
  1421     0233  082C               	movf	nrf_write_register@reg,w
  1422     0234  3820               	iorlw	32
  1423     0235  22B3               	fcall	_nrf_command_with_data
  1424     0236                     l67:
  1425     0236  0008               	return
  1426     0237                     __end_of_nrf_write_register:
  1427                           
  1428                           	psect	text9
  1429     02B3                     __ptext9:	
  1430 ;; *************** function _nrf_command_with_data *****************
  1431 ;; Defined at:
  1432 ;;		line 124 in file "./nrf24l01.h"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  command         1    wreg     unsigned char 
  1435 ;;  data            1    4[BANK0 ] PTR unsigned char 
  1436 ;;		 -> main@data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1437 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1438 ;;  len             1    5[BANK0 ] unsigned char 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;  command         1    7[BANK0 ] unsigned char 
  1441 ;;  i               1    9[BANK0 ] unsigned char 
  1442 ;;  status          1    8[BANK0 ] unsigned char 
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      unsigned char 
  1445 ;; Registers used:
  1446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMMON   BANK0
  1452 ;;      Params:         0       2
  1453 ;;      Locals:         0       3
  1454 ;;      Temps:          0       1
  1455 ;;      Totals:         0       6
  1456 ;;Total ram usage:        6 bytes
  1457 ;; Hardware stack levels used: 1
  1458 ;; Hardware stack levels required when called: 1
  1459 ;; This function calls:
  1460 ;;		_SPI_write
  1461 ;; This function is called by:
  1462 ;;		_nrf_write_register
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466     02B3                     _nrf_command_with_data:	
  1467                           ;psect for function _nrf_command_with_data
  1468                           
  1469                           
  1470                           ;incstack = 0
  1471                           ; Regs used in _nrf_command_with_data: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1472                           ;nrf_command_with_data@command stored from wreg
  1473     02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1474     02B4  00A7               	movwf	nrf_command_with_data@command
  1475     02B5                     l1023:
  1476                           
  1477                           ;./nrf24l01.h: 124:     uint8_t nrf_command_with_data(uint8_t command, uint8_t *data, ui
      +                          nt8_t len);./nrf24l01.h: 125:     {;./nrf24l01.h: 126:         GPIO5 = 0; uint8_t status
      +                           = SPI_write(command); for (uint8_t i = 0; i < len; i++) { SPI_write(data[i]); } GPIO5 =
      +                           1; return status;
  1478     02B5  1285               	bcf	5,5	;volatile
  1479     02B6                     l1025:
  1480     02B6  0827               	movf	nrf_command_with_data@command,w
  1481     02B7  22D2               	fcall	_SPI_write
  1482     02B8  1283               	bcf	3,5	;RP0=0, select bank0
  1483     02B9  00A8               	movwf	nrf_command_with_data@status
  1484     02BA                     l1027:
  1485     02BA  01A9               	clrf	nrf_command_with_data@i
  1486     02BB  2AC9               	goto	l1033
  1487     02BC                     l1029:
  1488     02BC  0829               	movf	nrf_command_with_data@i,w
  1489     02BD  0724               	addwf	nrf_command_with_data@data,w
  1490     02BE  00A6               	movwf	??_nrf_command_with_data
  1491     02BF  0826               	movf	??_nrf_command_with_data,w
  1492     02C0  0084               	movwf	4
  1493     02C1  1383               	bcf	3,7	;select IRP bank0
  1494     02C2  0800               	movf	0,w
  1495     02C3  22D2               	fcall	_SPI_write
  1496     02C4                     l1031:
  1497     02C4  3001               	movlw	1
  1498     02C5  1283               	bcf	3,5	;RP0=0, select bank0
  1499     02C6  00A6               	movwf	??_nrf_command_with_data
  1500     02C7  0826               	movf	??_nrf_command_with_data,w
  1501     02C8  07A9               	addwf	nrf_command_with_data@i,f
  1502     02C9                     l1033:
  1503     02C9  0825               	movf	nrf_command_with_data@len,w
  1504     02CA  0229               	subwf	nrf_command_with_data@i,w
  1505     02CB  1C03               	skipc
  1506     02CC  2ACE               	goto	u161
  1507     02CD  2ACF               	goto	u160
  1508     02CE                     u161:
  1509     02CE  2ABC               	goto	l1029
  1510     02CF                     u160:
  1511     02CF                     l63:
  1512     02CF  1685               	bsf	5,5	;volatile
  1513     02D0                     l1035:
  1514     02D0  0828               	movf	nrf_command_with_data@status,w
  1515     02D1                     l64:
  1516     02D1  0008               	return
  1517     02D2                     __end_of_nrf_command_with_data:
  1518                           
  1519                           	psect	text10
  1520     0224                     __ptext10:	
  1521 ;; *************** function _nrf_read_register *****************
  1522 ;; Defined at:
  1523 ;;		line 137 in file "./nrf24l01.h"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  reg             1    wreg     unsigned char 
  1526 ;;  data            1   12[BANK0 ] PTR unsigned char 
  1527 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1528 ;;  len             1   13[BANK0 ] unsigned char 
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;  reg             1   14[BANK0 ] unsigned char 
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  1    wreg      unsigned char 
  1533 ;; Registers used:
  1534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMMON   BANK0
  1540 ;;      Params:         0       2
  1541 ;;      Locals:         0       1
  1542 ;;      Temps:          0       0
  1543 ;;      Totals:         0       3
  1544 ;;Total ram usage:        3 bytes
  1545 ;; Hardware stack levels used: 1
  1546 ;; Hardware stack levels required when called: 2
  1547 ;; This function calls:
  1548 ;;		_nrf_command_with_data_overwrite
  1549 ;; This function is called by:
  1550 ;;		_nrf_set_tx_mode
  1551 ;;		_nrf_set_rx_mode
  1552 ;;		_nrf_read
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556     0224                     _nrf_read_register:	
  1557                           ;psect for function _nrf_read_register
  1558                           
  1559                           
  1560                           ;incstack = 0
  1561                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1562                           ;nrf_read_register@reg stored from wreg
  1563     0224  1283               	bcf	3,5	;RP0=0, select bank0
  1564     0225  00AE               	movwf	nrf_read_register@reg
  1565     0226                     l1043:
  1566                           
  1567                           ;./nrf24l01.h: 137:     uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t le
      +                          n);./nrf24l01.h: 138:     {;./nrf24l01.h: 139:         return nrf_command_with_data_over
      +                          write(reg | 0b00000000, data, len);
  1568     0226  082C               	movf	nrf_read_register@data,w
  1569     0227  00A4               	movwf	nrf_command_with_data_overwrite@data
  1570     0228  082D               	movf	nrf_read_register@len,w
  1571     0229  00A5               	movwf	nrf_command_with_data_overwrite@len
  1572     022A  082E               	movf	nrf_read_register@reg,w
  1573     022B  22F8               	fcall	_nrf_command_with_data_overwrite
  1574     022C                     l70:
  1575     022C  0008               	return
  1576     022D                     __end_of_nrf_read_register:
  1577                           
  1578                           	psect	text11
  1579     02F8                     __ptext11:	
  1580 ;; *************** function _nrf_command_with_data_overwrite *****************
  1581 ;; Defined at:
  1582 ;;		line 118 in file "./nrf24l01.h"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  command         1    wreg     unsigned char 
  1585 ;;  data            1    4[BANK0 ] PTR unsigned char 
  1586 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1587 ;;  len             1    5[BANK0 ] unsigned char 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  command         1    9[BANK0 ] unsigned char 
  1590 ;;  i               1   11[BANK0 ] unsigned char 
  1591 ;;  status          1   10[BANK0 ] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      unsigned char 
  1594 ;; Registers used:
  1595 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMMON   BANK0
  1601 ;;      Params:         0       2
  1602 ;;      Locals:         0       3
  1603 ;;      Temps:          0       3
  1604 ;;      Totals:         0       8
  1605 ;;Total ram usage:        8 bytes
  1606 ;; Hardware stack levels used: 1
  1607 ;; Hardware stack levels required when called: 1
  1608 ;; This function calls:
  1609 ;;		_SPI_write
  1610 ;; This function is called by:
  1611 ;;		_nrf_read_register
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615     02F8                     _nrf_command_with_data_overwrite:	
  1616                           ;psect for function _nrf_command_with_data_overwrite
  1617                           
  1618                           
  1619                           ;incstack = 0
  1620                           ; Regs used in _nrf_command_with_data_overwrite: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  1621                           ;nrf_command_with_data_overwrite@command stored from wreg
  1622     02F8  1283               	bcf	3,5	;RP0=0, select bank0
  1623     02F9  00A9               	movwf	nrf_command_with_data_overwrite@command
  1624     02FA                     l1007:
  1625                           
  1626                           ;./nrf24l01.h: 118:     uint8_t nrf_command_with_data_overwrite(uint8_t command, uint8_t
      +                           *data, uint8_t len);./nrf24l01.h: 119:     {;./nrf24l01.h: 120:         GPIO5 = 0; uint
      +                          8_t status = SPI_write(command); for (uint8_t i = 0; i < len; i++) { data[i] = SPI_write
      +                          (data[i]); } GPIO5 = 1; return status;
  1627     02FA  1285               	bcf	5,5	;volatile
  1628     02FB                     l1009:
  1629     02FB  0829               	movf	nrf_command_with_data_overwrite@command,w
  1630     02FC  22D2               	fcall	_SPI_write
  1631     02FD  1283               	bcf	3,5	;RP0=0, select bank0
  1632     02FE  00AA               	movwf	nrf_command_with_data_overwrite@status
  1633     02FF                     l1011:
  1634     02FF  01AB               	clrf	nrf_command_with_data_overwrite@i
  1635     0300  2B17               	goto	l1017
  1636     0301                     l1013:
  1637     0301  082B               	movf	nrf_command_with_data_overwrite@i,w
  1638     0302  0724               	addwf	nrf_command_with_data_overwrite@data,w
  1639     0303  00A6               	movwf	??_nrf_command_with_data_overwrite
  1640     0304  0826               	movf	??_nrf_command_with_data_overwrite,w
  1641     0305  0084               	movwf	4
  1642     0306  1383               	bcf	3,7	;select IRP bank0
  1643     0307  0800               	movf	0,w
  1644     0308  22D2               	fcall	_SPI_write
  1645     0309  1283               	bcf	3,5	;RP0=0, select bank0
  1646     030A  00A7               	movwf	??_nrf_command_with_data_overwrite+1
  1647     030B  082B               	movf	nrf_command_with_data_overwrite@i,w
  1648     030C  0724               	addwf	nrf_command_with_data_overwrite@data,w
  1649     030D  00A8               	movwf	??_nrf_command_with_data_overwrite+2
  1650     030E  0828               	movf	??_nrf_command_with_data_overwrite+2,w
  1651     030F  0084               	movwf	4
  1652     0310  0827               	movf	??_nrf_command_with_data_overwrite+1,w
  1653     0311  1383               	bcf	3,7	;select IRP bank0
  1654     0312  0080               	movwf	0
  1655     0313                     l1015:
  1656     0313  3001               	movlw	1
  1657     0314  00A6               	movwf	??_nrf_command_with_data_overwrite
  1658     0315  0826               	movf	??_nrf_command_with_data_overwrite,w
  1659     0316  07AB               	addwf	nrf_command_with_data_overwrite@i,f
  1660     0317                     l1017:
  1661     0317  0825               	movf	nrf_command_with_data_overwrite@len,w
  1662     0318  022B               	subwf	nrf_command_with_data_overwrite@i,w
  1663     0319  1C03               	skipc
  1664     031A  2B1C               	goto	u151
  1665     031B  2B1D               	goto	u150
  1666     031C                     u151:
  1667     031C  2B01               	goto	l1013
  1668     031D                     u150:
  1669     031D                     l57:
  1670     031D  1685               	bsf	5,5	;volatile
  1671     031E                     l1019:
  1672     031E  082A               	movf	nrf_command_with_data_overwrite@status,w
  1673     031F                     l58:
  1674     031F  0008               	return
  1675     0320                     __end_of_nrf_command_with_data_overwrite:
  1676                           
  1677                           	psect	text12
  1678     02D2                     __ptext12:	
  1679 ;; *************** function _SPI_write *****************
  1680 ;; Defined at:
  1681 ;;		line 39 in file "./softwarespi.h"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  data            1    wreg     unsigned char 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  data            1    1[BANK0 ] unsigned char 
  1686 ;;  i               1    3[BANK0 ] unsigned char 
  1687 ;;  read            1    2[BANK0 ] unsigned char 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      unsigned char 
  1690 ;; Registers used:
  1691 ;;		wreg, status,2, status,0
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMMON   BANK0
  1697 ;;      Params:         0       0
  1698 ;;      Locals:         0       3
  1699 ;;      Temps:          0       1
  1700 ;;      Totals:         0       4
  1701 ;;Total ram usage:        4 bytes
  1702 ;; Hardware stack levels used: 1
  1703 ;; This function calls:
  1704 ;;		Nothing
  1705 ;; This function is called by:
  1706 ;;		_nrf_command_with_data_overwrite
  1707 ;;		_nrf_command_with_data
  1708 ;;		_nrf_write_command
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712     02D2                     _SPI_write:	
  1713                           ;psect for function _SPI_write
  1714                           
  1715                           
  1716                           ;incstack = 0
  1717                           ; Regs used in _SPI_write: [wreg+status,2+status,0]
  1718                           ;SPI_write@data stored from wreg
  1719     02D2  1283               	bcf	3,5	;RP0=0, select bank0
  1720     02D3  00A1               	movwf	SPI_write@data
  1721     02D4                     l985:
  1722                           
  1723                           ;./softwarespi.h: 40:         uint8_t read = 0;
  1724     02D4  01A2               	clrf	SPI_write@read
  1725     02D5                     l987:
  1726                           
  1727                           ;./softwarespi.h: 41:         GPIO1 = 0;
  1728     02D5  1085               	bcf	5,1	;volatile
  1729                           
  1730                           ;./softwarespi.h: 44:         for(uint8_t i = 0; i < 8; i++){
  1731     02D6  01A3               	clrf	SPI_write@i
  1732     02D7                     l42:
  1733                           
  1734                           ;./softwarespi.h: 45:             if(data & 0x80){
  1735     02D7  1FA1               	btfss	SPI_write@data,7
  1736     02D8  2ADA               	goto	u131
  1737     02D9  2ADB               	goto	u130
  1738     02DA                     u131:
  1739     02DA  2ADD               	goto	l44
  1740     02DB                     u130:
  1741     02DB                     l993:
  1742                           
  1743                           ;./softwarespi.h: 46:                 GPIO4 = 1;
  1744     02DB  1605               	bsf	5,4	;volatile
  1745                           
  1746                           ;./softwarespi.h: 47:             }else{
  1747     02DC  2ADE               	goto	l45
  1748     02DD                     l44:
  1749                           
  1750                           ;./softwarespi.h: 48:                 GPIO4 = 0;
  1751     02DD  1205               	bcf	5,4	;volatile
  1752     02DE                     l45:	
  1753                           ;./softwarespi.h: 49:             }
  1754                           
  1755                           
  1756                           ;./softwarespi.h: 50:             GPIO1 = 1;
  1757     02DE  1485               	bsf	5,1	;volatile
  1758                           
  1759                           ;./softwarespi.h: 51:             GPIO1 = 0;
  1760     02DF  1085               	bcf	5,1	;volatile
  1761     02E0                     l995:
  1762                           
  1763                           ;./softwarespi.h: 53:             read <<= 1;
  1764     02E0  1003               	clrc
  1765     02E1  0DA2               	rlf	SPI_write@read,f
  1766     02E2                     l997:
  1767                           
  1768                           ;./softwarespi.h: 54:             read |= GPIO3;
  1769     02E2  3000               	movlw	0
  1770     02E3  1985               	btfsc	5,3	;volatile
  1771     02E4  3001               	movlw	1
  1772     02E5  00A0               	movwf	??_SPI_write
  1773     02E6  0820               	movf	??_SPI_write,w
  1774     02E7  04A2               	iorwf	SPI_write@read,f
  1775     02E8                     l999:
  1776                           
  1777                           ;./softwarespi.h: 55:             data <<= 1;
  1778     02E8  1003               	clrc
  1779     02E9  0DA1               	rlf	SPI_write@data,f
  1780                           
  1781                           ;./softwarespi.h: 56:         }
  1782     02EA  3001               	movlw	1
  1783     02EB  00A0               	movwf	??_SPI_write
  1784     02EC  0820               	movf	??_SPI_write,w
  1785     02ED  07A3               	addwf	SPI_write@i,f
  1786     02EE                     l1001:
  1787     02EE  3008               	movlw	8
  1788     02EF  0223               	subwf	SPI_write@i,w
  1789     02F0  1C03               	skipc
  1790     02F1  2AF3               	goto	u141
  1791     02F2  2AF4               	goto	u140
  1792     02F3                     u141:
  1793     02F3  2AD7               	goto	l42
  1794     02F4                     u140:
  1795     02F4                     l1003:
  1796                           
  1797                           ;./softwarespi.h: 57:         read >>= 1;
  1798     02F4  1003               	clrc
  1799     02F5  0CA2               	rrf	SPI_write@read,f
  1800                           
  1801                           ;./softwarespi.h: 59:         return read;
  1802     02F6  0822               	movf	SPI_write@read,w
  1803     02F7                     l46:
  1804     02F7  0008               	return
  1805     02F8                     __end_of_SPI_write:
  1806                           
  1807                           	psect	text13
  1808     0214                     __ptext13:	
  1809 ;; *************** function _SPI_init_master *****************
  1810 ;; Defined at:
  1811 ;;		line 28 in file "./softwarespi.h"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;		None
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      void 
  1818 ;; Registers used:
  1819 ;;		None
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMMON   BANK0
  1825 ;;      Params:         0       0
  1826 ;;      Locals:         0       0
  1827 ;;      Temps:          0       0
  1828 ;;      Totals:         0       0
  1829 ;;Total ram usage:        0 bytes
  1830 ;; Hardware stack levels used: 1
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838     0214                     _SPI_init_master:	
  1839                           ;psect for function _SPI_init_master
  1840                           
  1841     0214                     l1097:	
  1842                           ;incstack = 0
  1843                           ; Regs used in _SPI_init_master: []
  1844                           
  1845                           
  1846                           ;./softwarespi.h: 30:         TRISIO1 = 0;
  1847     0214  1683               	bsf	3,5	;RP0=1, select bank1
  1848     0215  1085               	bcf	5,1	;volatile
  1849                           
  1850                           ;./softwarespi.h: 31:         TRISIO4 = 0;
  1851     0216  1205               	bcf	5,4	;volatile
  1852                           
  1853                           ;./softwarespi.h: 32:         TRISIO3 = 1;
  1854     0217  1585               	bsf	5,3	;volatile
  1855                           
  1856                           ;./softwarespi.h: 35:         GPIO1 = 0;
  1857     0218  1283               	bcf	3,5	;RP0=0, select bank0
  1858     0219  1085               	bcf	5,1	;volatile
  1859                           
  1860                           ;./softwarespi.h: 36:         GPIO4 = 0;
  1861     021A  1205               	bcf	5,4	;volatile
  1862     021B                     l39:
  1863     021B  0008               	return
  1864     021C                     __end_of_SPI_init_master:
  1865     005E                     btemp	set	94	;btemp
  1866     005E                     wtemp0	set	94
  1867                           
  1868                           	psect	config
  1869                           
  1870                           ;Config register CONFIG @ 0x2007
  1871                           ;	Oscillator Selection bits
  1872                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  1873                           ;	Watchdog Timer Enable bit
  1874                           ;	WDTE = OFF, WDT disabled
  1875                           ;	Power-Up Timer Enable bit
  1876                           ;	PWRTE = ON, PWRT enabled
  1877                           ;	GP3/MCLR pin function select
  1878                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
  1879                           ;	Brown-out Detect Enable bit
  1880                           ;	BOREN = ON, BOD enabled
  1881                           ;	Code Protection bit
  1882                           ;	CP = OFF, Program Memory code protection is disabled
  1883                           ;	Data Code Protection bit
  1884                           ;	CPD = OFF, Data memory code protection is disabled
  1885     2007                     	org	8199
  1886     2007  31C4               	dw	12740

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     30      38

Pointer List with Targets:

    nrf_send@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_setup@addr	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK0[5]), 

    nrf_write_payload@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_set_tx_mode@config(BANK0[1]), nrf_set_rx_mode@config(BANK0[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[3]), nrf_read@clear(BANK0[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(BANK0[1]), 
		 -> nrf_set_rx_mode@config(BANK0[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(BANK0[1]), 

    nrf_command_with_data@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[3]), nrf_read@clear(BANK0[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(BANK0[1]), 
		 -> nrf_set_rx_mode@config(BANK0[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(BANK0[1]), 

    nrf_command_with_data_overwrite@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_set_tx_mode@config(BANK0[1]), nrf_set_rx_mode@config(BANK0[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK0[5]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_setup@data(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_nrf_setup
    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_send->_nrf_set_tx_mode
    _nrf_write_payload->_nrf_write_register
    _nrf_write_command->_SPI_write
    _nrf_set_tx_mode->_nrf_read_register
    _nrf_write_register->_nrf_command_with_data
    _nrf_command_with_data->_SPI_write
    _nrf_read_register->_nrf_command_with_data_overwrite
    _nrf_command_with_data_overwrite->_SPI_write

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   21148
                                             24 BANK0      6     6      0
                    _SPI_init_master
                           _nrf_send
                    _nrf_set_tx_mode
                          _nrf_setup
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                           10     8      2    7066
                                             14 BANK0     10     8      2
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3044
                                             13 BANK0      1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               7     5      2     504
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _nrf_send                                             4     3      1   10159
                                             17 BANK0      4     3      1
                    _nrf_set_tx_mode
                  _nrf_write_command
                  _nrf_write_payload
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_payload                                    4     3      1    3040
                                             13 BANK0      3     2      1
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0     140
                                              4 BANK0      2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_set_tx_mode                                      2     2      0    3899
                                             15 BANK0      2     2      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    2880
                                             10 BANK0      3     1      2
              _nrf_command_with_data
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data                                6     4      2     382
                                              4 BANK0      6     4      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2     948
                                             12 BANK0      3     1      2
    _nrf_command_with_data_overwrite
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data_overwrite                      8     6      2     426
                                              4 BANK0      8     6      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            4     4      0      95
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _nrf_send
     _nrf_set_tx_mode
       _nrf_read_register
         _nrf_command_with_data_overwrite
           _SPI_write
       _nrf_write_register
         _nrf_command_with_data
           _SPI_write
     _nrf_write_command
       _SPI_write
     _nrf_write_payload
       _nrf_write_register
     _nrf_write_register
   _nrf_set_tx_mode
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E     1E      26       4       61.3%
BITBANK0            3E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      26       6        0.0%
ABS                  0      0      26       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Apr 21 16:19:33 2023

                                     l42 02D7                                       l44 02DD  
                                     l52 02B2                                       l45 02DE  
                                     l46 02F7                                       l70 022C  
                                     l39 021B                                       l63 02CF  
                                     l64 02D1                                       l57 031D  
                                     l73 0260                                       l58 031F  
                                     l67 0236                                       l83 0389  
                                     l76 0240                                       l95 0294  
                                     l79 024E                                       l87 03EC  
                  nrf_set_tx_mode@config 0030                                      l103 0279  
                                    l993 02DB                                      l985 02D4  
                                    l995 02E0                                      l987 02D5  
                                    l997 02E2                                      l999 02E8  
                                    u130 02DB                                      u131 02DA  
                                    u140 02F4                                      u141 02F3  
                                    u150 031D                                      u151 031C  
                                    u160 02CF                                      u161 02CE  
                                    u217 0347                                      u170 02B2  
                                    u171 02B1                                      u227 0355  
                                    u180 0287                                      u181 0286  
                                    u237 0369                                      u190 0271  
                                    u247 025B                                      u191 0270  
                                    fsr0 0004                                      indf 0000  
                 nrf_command_with_data@i 0029                                     l1001 02EE  
                                   l1003 02F4                                     l1011 02FF  
                                   l1013 0301                                     l1101 0365  
                                   l1015 0313                                     l1007 02FA  
                                   l1031 02C4                                     l1023 02B5  
                                   l1111 0382                                     l1103 0371  
                                   l1017 0317                                     l1009 02FB  
                                   l1033 02C9                                     l1025 02B6  
                                   l1113 038C                                     l1121 03A6  
                                   l1105 0377                                     l1201 0333  
                                   l1019 031E                                     l1043 0226  
                                   l1035 02D0                                     l1027 02BA  
                                   l1051 023E                                     l1131 03BD  
                                   l1123 03AC                                     l1115 038F  
                                   l1107 0379                                     l1211 034D  
                                   l1203 0334                                     l1029 02BC  
                                   l1053 023F                                     l1061 02A8  
                                   l1141 03D6                                     l1133 03C0  
                                   l1125 03AE                                     l1109 037F  
                                   l1213 034F                                     l1205 0336  
                                   l1039 022F                                     l1047 0239  
                                   l1071 025E                                     l1063 02AC  
                                   l1143 03DD                                     l1135 03C6  
                                   l1127 03B4                                     l1119 0392  
                                   l1207 033C                                     l1049 023A  
                                   l1065 0251                                     l1161 0273  
                                   l1153 0263                                     l1057 0297  
                                   l1081 024C                                     l1145 03E4  
                                   l1137 03C9                                     l1129 03B7  
                                   l1209 0340                                     l1091 0288  
                                   l1083 027A                                     l1067 0257  
                                   l1155 0269                                     l1059 0299  
                                   l1075 0241                                     l1147 03EB  
                                   l1139 03CF                                     l1235 039B  
                                   l1093 028C                                     l1085 0281  
                                   l1069 0259                                     l1157 026D  
                                   l1077 0244                                     l1095 0292  
                                   l1087 0283                                     l1159 0271  
                                   l1079 024A                                     l1191 0326  
                                   l1097 0214                                     l1193 0328  
                                   l1099 035F                                     l1195 0329  
                                   l1187 0320                                     l1197 032B  
                                   l1189 0324                                     l1199 032C  
                                   _GPIO 0005                                     _main 0320  
                                   btemp 005E                                     start 0000  
__end_of_nrf_command_with_data_overwrite 0320        ??_nrf_command_with_data_overwrite 0026  
       ?_nrf_command_with_data_overwrite 0024          _nrf_command_with_data_overwrite 02F8  
                                  ?_main 0020         nrf_command_with_data_overwrite@i 002B  
                                  _CMCON 0019                                    _ANSEL 009F  
                                  _GPIO0 0028                                    _GPIO1 0029  
                                  _GPIO2 002A                                    _GPIO3 002B  
                                  _GPIO4 002C                                    _GPIO5 002D  
                                  _VRCON 0099            __end_of_nrf_command_with_data 02D2  
                                  status 0003                                    wtemp0 005E  
                        __initialization 03ED                             __end_of_main 035D  
                                 ??_main 0038                     nrf_write_payload@len 002D  
               nrf_command_with_data@len 0025                                   _ADCON0 001F  
                  nrf_setup@payload_size 002F                                   _TRISIO 0085  
                         _nrf_flush_rxtx 0241                                   _arrcpy 0295  
           nrf_command_with_data@command 0027                         __end_of_nrf_send 027A  
                      __end_of_SPI_write 02F8                       nrf_flush_rxtx@data 002D  
                __end_of__initialization 03FD                   __end_of_nrf_flush_rxtx 024F  
                         __pcstackCOMMON 0000                             __pidataBANK0 021C  
             __end_of_nrf_write_register 0237                        ??_SPI_init_master 0000  
                      ??_nrf_set_tx_mode 002F                    nrf_write_payload@data 002F  
                  nrf_write_register@len 002B                    nrf_write_register@reg 002C  
                        ?_nrf_flush_rxtx 0020                               __pmaintext 0320  
                                ?_arrcpy 0020                                  _TRISIO0 0428  
                                _TRISIO1 0429                                  _TRISIO3 042B  
                                _TRISIO4 042C                                  _TRISIO5 042D  
                            nrf_send@len 0031                                ?_nrf_send 0031  
                                __ptext1 035D                                  __ptext2 0241  
                                __ptext3 0295                                  __ptext4 0261  
                                __ptext5 024F                                  __ptext6 0237  
                                __ptext7 027A                                  __ptext8 022D  
                                __ptext9 02B3                     nrf_read_register@len 002D  
                   nrf_read_register@reg 002E                    _nrf_command_with_data 02B3  
                                arrcpy@i 0026                     end_of_initialization 03FD  
                      __end_of_nrf_setup 03ED                               ??_nrf_send 0000  
    nrf_command_with_data_overwrite@data 0024                            nrf_send@clear 0034  
                              _SPI_write 02D2                          _SPI_init_master 0214  
                        _nrf_set_tx_mode 027A                            nrf_setup@addr 0032  
                          nrf_setup@data 0033                           __end_of_arrcpy 02B3  
                    start_initialization 03ED                   ?_nrf_command_with_data 0024  
                     nrf_setup@addr_size 002E                       _nrf_write_register 022D  
                             ?_SPI_write 0020                         ??_nrf_flush_rxtx 0000  
                    ?_nrf_write_register 002A                                 ??_arrcpy 0022  
                            __pdataBANK0 003E                     ??_nrf_write_register 0000  
                 nrf_write_register@data 002A                                ___latbits 0000  
                          __pcstackBANK0 0020                  __end_of_SPI_init_master 021C  
                __end_of_nrf_set_tx_mode 0295                            SPI_write@data 0021  
                          SPI_write@read 0022                              ??_SPI_write 0020  
                              _nrf_setup 035D                        _nrf_read_register 0224  
                     ?_nrf_read_register 002C                             nrf_send@data 0033  
                           nrf_send@stat 0032   nrf_command_with_data_overwrite@command 0029  
                              arrcpy@len 0021                                arrcpy@dst 0025  
                              arrcpy@src 0020                      ??_nrf_read_register 0000  
                      _nrf_write_command 0237                       ?_nrf_write_command 0020  
                      _nrf_write_payload 024F                               ?_nrf_setup 002E  
                     ?_nrf_write_payload 002D                         ?_SPI_init_master 0020  
                       ?_nrf_set_tx_mode 0020                __end_of_nrf_read_register 022D  
                    ??_nrf_write_command 0000                      ??_nrf_write_payload 002E  
            nrf_command_with_data@status 0028                  ??_nrf_command_with_data 0026  
                             SPI_write@i 0023                __end_of_nrf_write_command 0241  
                               __ptext10 0224                                 __ptext11 02F8  
                               __ptext12 02D2                                 __ptext13 0214  
                  nrf_read_register@data 002C                __end_of_nrf_write_payload 0261  
                               _nrf_send 0261                                 main@F646 003E  
                               main@data 003B                               _RADIO_ADDR 0041  
  nrf_command_with_data_overwrite@status 002A                nrf_command_with_data@data 0024  
               nrf_write_command@command 0024                              ??_nrf_setup 0030  
     nrf_command_with_data_overwrite@len 0025                  nrf_write_command@status 0025  
