

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Oct 24 14:36:40 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Version 2.40
    24                           ; Generated 04/07/2022 GMT
    25                           ; 
    26                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0000                     	;# 
    59     0001                     	;# 
    60     0002                     	;# 
    61     0003                     	;# 
    62     0004                     	;# 
    63     0005                     	;# 
    64     0006                     	;# 
    65     0007                     	;# 
    66     0008                     	;# 
    67     0009                     	;# 
    68     000A                     	;# 
    69     000B                     	;# 
    70     000C                     	;# 
    71     000D                     	;# 
    72     000E                     	;# 
    73     000E                     	;# 
    74     000F                     	;# 
    75     0010                     	;# 
    76     0011                     	;# 
    77     0012                     	;# 
    78     0013                     	;# 
    79     0014                     	;# 
    80     0015                     	;# 
    81     0015                     	;# 
    82     0016                     	;# 
    83     0017                     	;# 
    84     0018                     	;# 
    85     0019                     	;# 
    86     001A                     	;# 
    87     001B                     	;# 
    88     001B                     	;# 
    89     001C                     	;# 
    90     001D                     	;# 
    91     001E                     	;# 
    92     001F                     	;# 
    93     0081                     	;# 
    94     0085                     	;# 
    95     0086                     	;# 
    96     0087                     	;# 
    97     0088                     	;# 
    98     0089                     	;# 
    99     008C                     	;# 
   100     008D                     	;# 
   101     008E                     	;# 
   102     0091                     	;# 
   103     0092                     	;# 
   104     0093                     	;# 
   105     0094                     	;# 
   106     0098                     	;# 
   107     0099                     	;# 
   108     009C                     	;# 
   109     009D                     	;# 
   110     009E                     	;# 
   111     009F                     	;# 
   112     010C                     	;# 
   113     010D                     	;# 
   114     010E                     	;# 
   115     010F                     	;# 
   116     018C                     	;# 
   117     018D                     	;# 
   118     0000                     	;# 
   119     0001                     	;# 
   120     0002                     	;# 
   121     0003                     	;# 
   122     0004                     	;# 
   123     0005                     	;# 
   124     0006                     	;# 
   125     0007                     	;# 
   126     0008                     	;# 
   127     0009                     	;# 
   128     000A                     	;# 
   129     000B                     	;# 
   130     000C                     	;# 
   131     000D                     	;# 
   132     000E                     	;# 
   133     000E                     	;# 
   134     000F                     	;# 
   135     0010                     	;# 
   136     0011                     	;# 
   137     0012                     	;# 
   138     0013                     	;# 
   139     0014                     	;# 
   140     0015                     	;# 
   141     0015                     	;# 
   142     0016                     	;# 
   143     0017                     	;# 
   144     0018                     	;# 
   145     0019                     	;# 
   146     001A                     	;# 
   147     001B                     	;# 
   148     001B                     	;# 
   149     001C                     	;# 
   150     001D                     	;# 
   151     001E                     	;# 
   152     001F                     	;# 
   153     0081                     	;# 
   154     0085                     	;# 
   155     0086                     	;# 
   156     0087                     	;# 
   157     0088                     	;# 
   158     0089                     	;# 
   159     008C                     	;# 
   160     008D                     	;# 
   161     008E                     	;# 
   162     0091                     	;# 
   163     0092                     	;# 
   164     0093                     	;# 
   165     0094                     	;# 
   166     0098                     	;# 
   167     0099                     	;# 
   168     009C                     	;# 
   169     009D                     	;# 
   170     009E                     	;# 
   171     009F                     	;# 
   172     010C                     	;# 
   173     010D                     	;# 
   174     010E                     	;# 
   175     010F                     	;# 
   176     018C                     	;# 
   177     018D                     	;# 
   178                           
   179                           	psect	strings
   180     0003                     __pstrings:
   181     0003                     stringtab:
   182     0003                     __stringtab:
   183     0003                     stringcode:	
   184                           ;	String table - string pointers are 1 byte each
   185                           
   186     0003                     stringdir:
   187     0003  3000               	movlw	high stringdir
   188     0004  008A               	movwf	10
   189     0005  0804               	movf	4,w
   190     0006  0A84               	incf	4,f
   191     0007  0782               	addwf	2,f
   192     0008                     __stringbase:
   193     0008  3400               	retlw	0
   194     0009                     __end_of__stringtab:
   195     0009                     _dpowers:
   196     0009  3401               	retlw	1
   197     000A  3400               	retlw	0
   198     000B  340A               	retlw	10
   199     000C  3400               	retlw	0
   200     000D  3464               	retlw	100
   201     000E  3400               	retlw	0
   202     000F  34E8               	retlw	232
   203     0010  3403               	retlw	3
   204     0011  3410               	retlw	16
   205     0012  3427               	retlw	39
   206     0013                     __end_of_dpowers:
   207     001E                     _ADRESH	set	30
   208     001F                     _ADCON0bits	set	31
   209     001F                     _ADCON0	set	31
   210     0048                     _RE0	set	72
   211     0049                     _RE1	set	73
   212     0047                     _RD7	set	71
   213     0046                     _RD6	set	70
   214     0045                     _RD5	set	69
   215     0044                     _RD4	set	68
   216     009E                     _ADRESL	set	158
   217     009F                     _ADCON1bits	set	159
   218     0085                     _TRISA	set	133
   219     009C                     _CMCON	set	156
   220     0089                     _TRISE	set	137
   221     0088                     _TRISD	set	136
   222     0081                     _OPTION_REG	set	129
   223     0013                     STR_1:
   224     0013  3448               	retlw	72	;'H'
   225     0014  3465               	retlw	101	;'e'
   226     0015  3479               	retlw	121	;'y'
   227     0016  3420               	retlw	32	;' '
   228     0017  3425               	retlw	37	;'%'
   229     0018  3464               	retlw	100	;'d'
   230     0019  3400               	retlw	0
   231                           
   232                           	psect	cinit
   233     07FC                     start_initialization:	
   234                           ; #config settings
   235                           
   236     07FC                     __initialization:
   237     07FC                     end_of_initialization:	
   238                           ;End of C runtime variable initialization code
   239                           
   240     07FC                     __end_of__initialization:
   241     07FC  0183               	clrf	3
   242     07FD  120A  118A  2EAE   	ljmp	_main	;jump to C main() function
   243                           
   244                           	psect	cstackCOMMON
   245     0070                     __pcstackCOMMON:
   246     0070                     ?_setup:
   247     0070                     ??_setup:	
   248                           ; 1 bytes @ 0x0
   249                           
   250     0070                     ?_Lcd_SetBit:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     0070                     ??_Lcd_SetBit:	
   254                           ; 1 bytes @ 0x0
   255                           
   256     0070                     ?_Lcd_Cmd:	
   257                           ; 1 bytes @ 0x0
   258                           
   259     0070                     ?_Lcd_Start:	
   260                           ; 1 bytes @ 0x0
   261                           
   262     0070                     ?_Lcd_Print_Char:	
   263                           ; 1 bytes @ 0x0
   264                           
   265     0070                     ?_Lcd_Print_String:	
   266                           ; 1 bytes @ 0x0
   267                           
   268     0070                     ?_main:	
   269                           ; 1 bytes @ 0x0
   270                           
   271     0070                     ?_Lcd_Clear:	
   272                           ; 1 bytes @ 0x0
   273                           
   274     0070                     ?___lwdiv:	
   275                           ; 2 bytes @ 0x0
   276                           
   277     0070                     Lcd_SetBit@data_bit:	
   278                           ; 2 bytes @ 0x0
   279                           
   280     0070                     ___lwdiv@divisor:	
   281                           ; 1 bytes @ 0x0
   282                           
   283                           
   284                           ; 2 bytes @ 0x0
   285     0070                     	ds	1
   286     0071                     ??_Lcd_Cmd:
   287     0071                     ??_Lcd_Print_Char:	
   288                           ; 1 bytes @ 0x1
   289                           
   290                           
   291                           ; 1 bytes @ 0x1
   292     0071                     	ds	1
   293     0072                     Lcd_Print_Char@Lower_Nibble:
   294     0072                     ___lwdiv@dividend:	
   295                           ; 1 bytes @ 0x2
   296                           
   297                           
   298                           ; 2 bytes @ 0x2
   299     0072                     	ds	1
   300     0073                     Lcd_Cmd@a:
   301     0073                     Lcd_Print_Char@Upper_Nibble:	
   302                           ; 1 bytes @ 0x3
   303                           
   304                           
   305                           ; 1 bytes @ 0x3
   306     0073                     	ds	1
   307     0074                     ??_Lcd_Clear:
   308     0074                     ?_Lcd_Set_Cursor:	
   309                           ; 1 bytes @ 0x4
   310                           
   311     0074                     ??_Lcd_Start:	
   312                           ; 1 bytes @ 0x4
   313                           
   314     0074                     ??___lwdiv:	
   315                           ; 1 bytes @ 0x4
   316                           
   317     0074                     Lcd_Set_Cursor@b:	
   318                           ; 1 bytes @ 0x4
   319                           
   320     0074                     Lcd_Print_Char@data:	
   321                           ; 1 bytes @ 0x4
   322                           
   323                           
   324                           ; 1 bytes @ 0x4
   325     0074                     	ds	1
   326     0075                     ??_Lcd_Set_Cursor:
   327     0075                     Lcd_Print_Char@i:	
   328                           ; 1 bytes @ 0x5
   329                           
   330     0075                     ___lwdiv@quotient:	
   331                           ; 2 bytes @ 0x5
   332                           
   333                           
   334                           ; 2 bytes @ 0x5
   335     0075                     	ds	1
   336     0076                     Lcd_Set_Cursor@a:
   337                           
   338                           ; 1 bytes @ 0x6
   339     0076                     	ds	1
   340     0077                     Lcd_Set_Cursor@z:
   341     0077                     ___lwdiv@counter:	
   342                           ; 1 bytes @ 0x7
   343                           
   344     0077                     Lcd_Print_Char@i_143:	
   345                           ; 1 bytes @ 0x7
   346                           
   347                           
   348                           ; 2 bytes @ 0x7
   349     0077                     	ds	1
   350     0078                     ?___lwmod:
   351     0078                     Lcd_Set_Cursor@y:	
   352                           ; 2 bytes @ 0x8
   353                           
   354     0078                     ___lwmod@divisor:	
   355                           ; 1 bytes @ 0x8
   356                           
   357                           
   358                           ; 2 bytes @ 0x8
   359     0078                     	ds	1
   360     0079                     ??_Lcd_Print_String:
   361     0079                     Lcd_Set_Cursor@temp:	
   362                           ; 1 bytes @ 0x9
   363                           
   364                           
   365                           ; 1 bytes @ 0x9
   366     0079                     	ds	1
   367     007A                     Lcd_Print_String@i:
   368     007A                     ___lwmod@dividend:	
   369                           ; 2 bytes @ 0xA
   370                           
   371                           
   372                           ; 2 bytes @ 0xA
   373     007A                     	ds	2
   374     007C                     ??___lwmod:
   375     007C                     Lcd_Print_String@a:	
   376                           ; 1 bytes @ 0xC
   377                           
   378                           
   379                           ; 1 bytes @ 0xC
   380     007C                     	ds	1
   381     007D                     ___lwmod@counter:
   382                           
   383                           ; 1 bytes @ 0xD
   384     007D                     	ds	1
   385                           
   386                           	psect	cstackBANK0
   387     0020                     __pcstackBANK0:
   388     0020                     ?_sprintf:
   389     0020                     sprintf@f:	
   390                           ; 2 bytes @ 0x0
   391                           
   392                           
   393                           ; 1 bytes @ 0x0
   394     0020                     	ds	3
   395     0023                     ??_sprintf:
   396                           
   397                           ; 1 bytes @ 0x3
   398     0023                     	ds	3
   399     0026                     sprintf@ap:
   400                           
   401                           ; 1 bytes @ 0x6
   402     0026                     	ds	1
   403     0027                     sprintf@flag:
   404                           
   405                           ; 1 bytes @ 0x7
   406     0027                     	ds	1
   407     0028                     sprintf@prec:
   408                           
   409                           ; 1 bytes @ 0x8
   410     0028                     	ds	1
   411     0029                     sprintf@val:
   412                           
   413                           ; 2 bytes @ 0x9
   414     0029                     	ds	2
   415     002B                     sprintf@sp:
   416                           
   417                           ; 1 bytes @ 0xB
   418     002B                     	ds	1
   419     002C                     sprintf@c:
   420                           
   421                           ; 1 bytes @ 0xC
   422     002C                     	ds	1
   423     002D                     ??_main:
   424                           
   425                           ; 1 bytes @ 0xD
   426     002D                     	ds	3
   427     0030                     main@txt:
   428                           
   429                           ; 10 bytes @ 0x10
   430     0030                     	ds	10
   431     003A                     main@result:
   432                           
   433                           ; 2 bytes @ 0x1A
   434     003A                     	ds	2
   435                           
   436                           	psect	maintext
   437     06AE                     __pmaintext:	
   438 ;;
   439 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   440 ;;
   441 ;; *************** function _main *****************
   442 ;; Defined at:
   443 ;;		line 22 in file "main.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  txt            10   16[BANK0 ] unsigned char [10]
   448 ;;  result          2   26[BANK0 ] unsigned int 
   449 ;; Return value:  Size  Location     Type
   450 ;;                  1    wreg      void 
   451 ;; Registers used:
   452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : B00/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   458 ;;      Params:         0       0       0       0       0
   459 ;;      Locals:         0      12       0       0       0
   460 ;;      Temps:          0       3       0       0       0
   461 ;;      Totals:         0      15       0       0       0
   462 ;;Total ram usage:       15 bytes
   463 ;; Hardware stack levels required when called: 3
   464 ;; This function calls:
   465 ;;		_Lcd_Clear
   466 ;;		_Lcd_Print_String
   467 ;;		_Lcd_Set_Cursor
   468 ;;		_Lcd_Start
   469 ;;		_setup
   470 ;;		_sprintf
   471 ;; This function is called by:
   472 ;;		Startup code after reset
   473 ;; This function uses a non-reentrant model
   474 ;;
   475                           
   476     06AE                     _main:	
   477                           ;psect for function _main
   478                           
   479     06AE                     l1221:	
   480                           ;incstack = 0
   481                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   482                           
   483                           
   484                           ;main.c: 23:     OPTION_REG = 0b10000000;
   485     06AE  3080               	movlw	128
   486     06AF  1683               	bsf	3,5	;RP0=1, select bank1
   487     06B0  1303               	bcf	3,6	;RP1=0, select bank1
   488     06B1  0081               	movwf	1	;volatile
   489     06B2                     l1223:
   490                           
   491                           ;main.c: 25:     setup();
   492     06B2  120A  118A  24CF  120A  118A  	fcall	_setup
   493     06B7                     l1225:
   494                           
   495                           ;main.c: 26:     TRISD = 0x00;
   496     06B7  1683               	bsf	3,5	;RP0=1, select bank1
   497     06B8  1303               	bcf	3,6	;RP1=0, select bank1
   498     06B9  0188               	clrf	8	;volatile
   499     06BA                     l1227:
   500                           
   501                           ;main.c: 27:     TRISE = 0x00;
   502     06BA  0189               	clrf	9	;volatile
   503     06BB                     l1229:
   504                           
   505                           ;main.c: 28:     CMCON = 0b00000111;
   506     06BB  3007               	movlw	7
   507     06BC  009C               	movwf	28	;volatile
   508     06BD                     l1231:
   509                           
   510                           ;main.c: 30:     TRISA = 0b11111111;
   511     06BD  30FF               	movlw	255
   512     06BE  0085               	movwf	5	;volatile
   513     06BF                     l1233:
   514                           
   515                           ;main.c: 32:     OPTION_REG = 0b10000000;
   516     06BF  3080               	movlw	128
   517     06C0  0081               	movwf	1	;volatile
   518     06C1                     l1235:
   519                           
   520                           ;main.c: 34:     ADCON1bits.ADFM = 1;
   521     06C1  179F               	bsf	31,7	;volatile
   522     06C2                     l1237:
   523                           
   524                           ;main.c: 35:     ADCON1bits.PCFG = 0b1110;
   525     06C2  081F               	movf	31,w	;volatile
   526     06C3  39F0               	andlw	-16
   527     06C4  380E               	iorlw	14
   528     06C5  009F               	movwf	31	;volatile
   529     06C6                     l1239:
   530                           
   531                           ;main.c: 36:     ADCON1bits.ADCS2 = 0;
   532     06C6  131F               	bcf	31,6	;volatile
   533     06C7                     l1241:
   534                           
   535                           ;main.c: 39:     Lcd_Start();
   536     06C7  120A  118A  25FE  120A  118A  	fcall	_Lcd_Start
   537     06CC                     l1243:
   538                           
   539                           ;main.c: 41:     unsigned int result;;main.c: 46:     char txt[10];;main.c: 49:     ADCO
      +                          N0 = 0b00000001;
   540     06CC  3001               	movlw	1
   541     06CD  1283               	bcf	3,5	;RP0=0, select bank0
   542     06CE  1303               	bcf	3,6	;RP1=0, select bank0
   543     06CF  009F               	movwf	31	;volatile
   544     06D0                     l1245:
   545                           
   546                           ;main.c: 51:         ADCON0bits.GO = 1;
   547     06D0  1283               	bcf	3,5	;RP0=0, select bank0
   548     06D1  1303               	bcf	3,6	;RP1=0, select bank0
   549     06D2  151F               	bsf	31,2	;volatile
   550     06D3                     l88:	
   551                           ;main.c: 52:         while (ADCON0bits.GO_DONE);
   552                           
   553     06D3  191F               	btfsc	31,2	;volatile
   554     06D4  2ED6               	goto	u661
   555     06D5  2ED7               	goto	u660
   556     06D6                     u661:
   557     06D6  2ED3               	goto	l88
   558     06D7                     u660:
   559     06D7                     l1247:
   560                           
   561                           ;main.c: 53:         result = ADRESH;
   562     06D7  081E               	movf	30,w	;volatile
   563     06D8  00AD               	movwf	??_main
   564     06D9  01AE               	clrf	??_main+1
   565     06DA  082D               	movf	??_main,w
   566     06DB  00BA               	movwf	main@result
   567     06DC  082E               	movf	??_main+1,w
   568     06DD  00BB               	movwf	main@result+1
   569                           
   570                           ;main.c: 54:         result = result << 8;
   571     06DE  083A               	movf	main@result,w
   572     06DF  00AE               	movwf	??_main+1
   573     06E0  01AD               	clrf	??_main
   574     06E1  082D               	movf	??_main,w
   575     06E2  00BA               	movwf	main@result
   576     06E3  082E               	movf	??_main+1,w
   577     06E4  00BB               	movwf	main@result+1
   578                           
   579                           ;main.c: 55:         result |= ADRESL;
   580     06E5  1683               	bsf	3,5	;RP0=1, select bank1
   581     06E6  1303               	bcf	3,6	;RP1=0, select bank1
   582     06E7  081E               	movf	30,w	;volatile
   583     06E8  1283               	bcf	3,5	;RP0=0, select bank0
   584     06E9  1303               	bcf	3,6	;RP1=0, select bank0
   585     06EA  00AD               	movwf	??_main
   586     06EB  01AE               	clrf	??_main+1
   587     06EC  082D               	movf	??_main,w
   588     06ED  04BA               	iorwf	main@result,f
   589     06EE  082E               	movf	??_main+1,w
   590     06EF  04BB               	iorwf	main@result+1,f
   591     06F0                     l1249:
   592                           
   593                           ;main.c: 57:         sprintf(txt, "Hey %d", result);
   594     06F0  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   595     06F1  00A0               	movwf	sprintf@f
   596     06F2  083B               	movf	main@result+1,w
   597     06F3  00A2               	movwf	?_sprintf+2
   598     06F4  083A               	movf	main@result,w
   599     06F5  00A1               	movwf	?_sprintf+1
   600     06F6  3030               	movlw	(low (main@txt| 0))& (0+255)
   601     06F7  120A  118A  2722  120A  118A  	fcall	_sprintf
   602     06FC                     l1251:
   603                           
   604                           ;main.c: 58:         Lcd_Clear();
   605     06FC  120A  118A  24D0  120A  118A  	fcall	_Lcd_Clear
   606     0701                     l1253:
   607                           
   608                           ;main.c: 59:         Lcd_Set_Cursor(1,1);
   609     0701  01F4               	clrf	Lcd_Set_Cursor@b
   610     0702  0AF4               	incf	Lcd_Set_Cursor@b,f
   611     0703  3001               	movlw	1
   612     0704  120A  118A  25B8  120A  118A  	fcall	_Lcd_Set_Cursor
   613     0709                     l1255:
   614                           
   615                           ;main.c: 60:         Lcd_Print_String(txt);
   616     0709  3030               	movlw	(low (main@txt| 0))& (0+255)
   617     070A  120A  118A  24F7  120A  118A  	fcall	_Lcd_Print_String
   618                           
   619                           ;main.c: 62:         _delay((unsigned long)((1000)*(10000000/4000.0)));
   620     070F  300D               	movlw	13
   621     0710  1283               	bcf	3,5	;RP0=0, select bank0
   622     0711  1303               	bcf	3,6	;RP1=0, select bank0
   623     0712  00AF               	movwf	??_main+2
   624     0713  30AF               	movlw	175
   625     0714  00AE               	movwf	??_main+1
   626     0715  30B5               	movlw	181
   627     0716  00AD               	movwf	??_main
   628     0717                     u677:
   629     0717  0BAD               	decfsz	??_main,f
   630     0718  2F17               	goto	u677
   631     0719  0BAE               	decfsz	??_main+1,f
   632     071A  2F17               	goto	u677
   633     071B  0BAF               	decfsz	??_main+2,f
   634     071C  2F17               	goto	u677
   635     071D  2F1E               	nop2
   636     071E  2ED0               	goto	l1245
   637     071F  120A  118A  2800   	ljmp	start
   638     0722                     __end_of_main:
   639                           
   640                           	psect	text1
   641     0722                     __ptext1:	
   642 ;; *************** function _sprintf *****************
   643 ;; Defined at:
   644 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;  sp              1    wreg     PTR unsigned char 
   647 ;;		 -> main@txt(10), 
   648 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   649 ;;		 -> STR_1(7), 
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   652 ;;		 -> main@txt(10), 
   653 ;;  tmpval          4    0        struct .
   654 ;;  val             2    9[BANK0 ] unsigned int 
   655 ;;  cp              2    0        PTR const unsigned char 
   656 ;;  len             2    0        unsigned int 
   657 ;;  c               1   12[BANK0 ] unsigned char 
   658 ;;  prec            1    8[BANK0 ] char 
   659 ;;  flag            1    7[BANK0 ] unsigned char 
   660 ;;  ap              1    6[BANK0 ] PTR void [1]
   661 ;;		 -> ?_sprintf(2), 
   662 ;; Return value:  Size  Location     Type
   663 ;;                  2    0[BANK0 ] int 
   664 ;; Registers used:
   665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   671 ;;      Params:         0       3       0       0       0
   672 ;;      Locals:         0       7       0       0       0
   673 ;;      Temps:          0       3       0       0       0
   674 ;;      Totals:         0      13       0       0       0
   675 ;;Total ram usage:       13 bytes
   676 ;; Hardware stack levels used: 1
   677 ;; Hardware stack levels required when called: 1
   678 ;; This function calls:
   679 ;;		___lwdiv
   680 ;;		___lwmod
   681 ;; This function is called by:
   682 ;;		_main
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686     0722                     _sprintf:	
   687                           ;psect for function _sprintf
   688                           
   689                           
   690                           ;incstack = 0
   691                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   692                           ;sprintf@sp stored from wreg
   693     0722  1283               	bcf	3,5	;RP0=0, select bank0
   694     0723  1303               	bcf	3,6	;RP1=0, select bank0
   695     0724  00AB               	movwf	sprintf@sp
   696     0725                     l1159:
   697                           
   698                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   699     0725  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   700     0726  00A6               	movwf	sprintf@ap
   701                           
   702                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   703     0727  2FE7               	goto	l1211
   704     0728                     l1161:
   705                           
   706                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   707     0728  3025               	movlw	37
   708     0729  062C               	xorwf	sprintf@c,w
   709     072A  1903               	btfsc	3,2
   710     072B  2F2D               	goto	u591
   711     072C  2F2E               	goto	u590
   712     072D                     u591:
   713     072D  2F38               	goto	l1167
   714     072E                     u590:
   715     072E                     l1163:
   716                           
   717                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   718     072E  082B               	movf	sprintf@sp,w
   719     072F  0084               	movwf	4
   720     0730  082C               	movf	sprintf@c,w
   721     0731  1383               	bcf	3,7	;select IRP bank0
   722     0732  0080               	movwf	0
   723     0733                     l1165:
   724     0733  3001               	movlw	1
   725     0734  00A3               	movwf	??_sprintf
   726     0735  0823               	movf	??_sprintf,w
   727     0736  07AB               	addwf	sprintf@sp,f
   728                           
   729                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
   730     0737  2FE7               	goto	l1211
   731     0738                     l1167:
   732                           
   733                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   734     0738  01A7               	clrf	sprintf@flag
   735     0739                     l1171:	
   736                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   737                           
   738     0739  3001               	movlw	1
   739     073A  07A0               	addwf	sprintf@f,f
   740     073B  30FF               	movlw	-1
   741     073C  0720               	addwf	sprintf@f,w
   742     073D  0084               	movwf	4
   743     073E  120A  118A  2003  120A  118A  	fcall	stringdir
   744     0743  00AC               	movwf	sprintf@c
   745     0744  00A3               	movwf	??_sprintf
   746     0745  01A4               	clrf	??_sprintf+1
   747                           
   748                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   749                           ; Switch size 1, requested type "simple"
   750                           ; Number of cases is 1, Range of values is 0 to 0
   751                           ; switch strategies available:
   752                           ; Name         Instructions Cycles
   753                           ; simple_byte            4     3 (average)
   754                           ; direct_byte           11     8 (fixed)
   755                           ; jumptable            260     6 (fixed)
   756                           ;	Chosen strategy is simple_byte
   757     0746  0824               	movf	??_sprintf+1,w
   758     0747  3A00               	xorlw	0	; case 0
   759     0748  1903               	skipnz
   760     0749  2F4B               	goto	l1277
   761     074A  2FE7               	goto	l1211
   762     074B                     l1277:
   763                           
   764                           ; Switch size 1, requested type "simple"
   765                           ; Number of cases is 3, Range of values is 0 to 105
   766                           ; switch strategies available:
   767                           ; Name         Instructions Cycles
   768                           ; simple_byte           10     6 (average)
   769                           ; jumptable            260     6 (fixed)
   770                           ;	Chosen strategy is simple_byte
   771     074B  0823               	movf	??_sprintf,w
   772     074C  3A00               	xorlw	0	; case 0
   773     074D  1903               	skipnz
   774     074E  2FF7               	goto	l1213
   775     074F  3A64               	xorlw	100	; case 100
   776     0750  1903               	skipnz
   777     0751  2F56               	goto	l1173
   778     0752  3A0D               	xorlw	13	; case 105
   779     0753  1903               	skipnz
   780     0754  2F56               	goto	l1173
   781     0755  2FE7               	goto	l1211
   782     0756                     l1173:
   783                           
   784                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   785     0756  0826               	movf	sprintf@ap,w
   786     0757  0084               	movwf	4
   787     0758  1383               	bcf	3,7	;select IRP bank0
   788     0759  0800               	movf	0,w
   789     075A  00A9               	movwf	sprintf@val
   790     075B  0A84               	incf	4,f
   791     075C  0800               	movf	0,w
   792     075D  00AA               	movwf	sprintf@val+1
   793     075E                     l1175:
   794     075E  3002               	movlw	2
   795     075F  00A3               	movwf	??_sprintf
   796     0760  0823               	movf	??_sprintf,w
   797     0761  07A6               	addwf	sprintf@ap,f
   798     0762                     l1177:
   799                           
   800                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   801     0762  1FAA               	btfss	sprintf@val+1,7
   802     0763  2F65               	goto	u601
   803     0764  2F66               	goto	u600
   804     0765                     u601:
   805     0765  2F6F               	goto	l1183
   806     0766                     u600:
   807     0766                     l1179:
   808                           
   809                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   810     0766  3003               	movlw	3
   811     0767  00A3               	movwf	??_sprintf
   812     0768  0823               	movf	??_sprintf,w
   813     0769  04A7               	iorwf	sprintf@flag,f
   814     076A                     l1181:
   815                           
   816                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
   817     076A  09A9               	comf	sprintf@val,f
   818     076B  09AA               	comf	sprintf@val+1,f
   819     076C  0AA9               	incf	sprintf@val,f
   820     076D  1903               	skipnz
   821     076E  0AAA               	incf	sprintf@val+1,f
   822     076F                     l1183:
   823                           
   824                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   825     076F  01AC               	clrf	sprintf@c
   826     0770  0AAC               	incf	sprintf@c,f
   827     0771                     l1189:
   828                           
   829                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   830     0771  082C               	movf	sprintf@c,w
   831     0772  00A3               	movwf	??_sprintf
   832     0773  0723               	addwf	??_sprintf,w
   833     0774  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   834     0775  0084               	movwf	4
   835     0776  120A  118A  2003  120A  118A  	fcall	stringdir
   836     077B  00A4               	movwf	??_sprintf+1
   837     077C  120A  118A  2003  120A  118A  	fcall	stringdir
   838     0781  00A5               	movwf	??_sprintf+2
   839     0782  0825               	movf	??_sprintf+2,w
   840     0783  022A               	subwf	sprintf@val+1,w
   841     0784  1D03               	skipz
   842     0785  2F88               	goto	u615
   843     0786  0824               	movf	??_sprintf+1,w
   844     0787  0229               	subwf	sprintf@val,w
   845     0788                     u615:
   846     0788  1803               	skipnc
   847     0789  2F8B               	goto	u611
   848     078A  2F8C               	goto	u610
   849     078B                     u611:
   850     078B  2F8D               	goto	l1193
   851     078C                     u610:
   852     078C  2F97               	goto	l1195
   853     078D                     l1193:
   854     078D  3001               	movlw	1
   855     078E  00A3               	movwf	??_sprintf
   856     078F  0823               	movf	??_sprintf,w
   857     0790  07AC               	addwf	sprintf@c,f
   858     0791  3005               	movlw	5
   859     0792  062C               	xorwf	sprintf@c,w
   860     0793  1D03               	btfss	3,2
   861     0794  2F96               	goto	u621
   862     0795  2F97               	goto	u620
   863     0796                     u621:
   864     0796  2F71               	goto	l1189
   865     0797                     u620:
   866     0797                     l1195:
   867                           
   868                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   869     0797  0827               	movf	sprintf@flag,w
   870     0798  3903               	andlw	3
   871     0799  1903               	btfsc	3,2
   872     079A  2F9C               	goto	u631
   873     079B  2F9D               	goto	u630
   874     079C                     u631:
   875     079C  2FA6               	goto	l1201
   876     079D                     u630:
   877     079D                     l1197:
   878                           
   879                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
   880     079D  082B               	movf	sprintf@sp,w
   881     079E  0084               	movwf	4
   882     079F  302D               	movlw	45
   883     07A0  1383               	bcf	3,7	;select IRP bank0
   884     07A1  0080               	movwf	0
   885     07A2                     l1199:
   886     07A2  3001               	movlw	1
   887     07A3  00A3               	movwf	??_sprintf
   888     07A4  0823               	movf	??_sprintf,w
   889     07A5  07AB               	addwf	sprintf@sp,f
   890     07A6                     l1201:
   891                           
   892                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   893     07A6  082C               	movf	sprintf@c,w
   894     07A7  00A8               	movwf	sprintf@prec
   895                           
   896                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   897     07A8  2FDE               	goto	l1209
   898     07A9                     l1203:
   899                           
   900                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   901     07A9  300A               	movlw	10
   902     07AA  00F8               	movwf	___lwmod@divisor
   903     07AB  3000               	movlw	0
   904     07AC  00F9               	movwf	___lwmod@divisor+1
   905     07AD  0828               	movf	sprintf@prec,w
   906     07AE  00A3               	movwf	??_sprintf
   907     07AF  0723               	addwf	??_sprintf,w
   908     07B0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   909     07B1  0084               	movwf	4
   910     07B2  120A  118A  2003  120A  118A  	fcall	stringdir
   911     07B7  00F0               	movwf	___lwdiv@divisor
   912     07B8  120A  118A  2003  120A  118A  	fcall	stringdir
   913     07BD  00F1               	movwf	___lwdiv@divisor+1
   914     07BE  082A               	movf	sprintf@val+1,w
   915     07BF  00F3               	movwf	___lwdiv@dividend+1
   916     07C0  0829               	movf	sprintf@val,w
   917     07C1  00F2               	movwf	___lwdiv@dividend
   918     07C2  120A  118A  2574  120A  118A  	fcall	___lwdiv
   919     07C7  0871               	movf	?___lwdiv+1,w
   920     07C8  00FB               	movwf	___lwmod@dividend+1
   921     07C9  0870               	movf	?___lwdiv,w
   922     07CA  00FA               	movwf	___lwmod@dividend
   923     07CB  120A  118A  253A  120A  118A  	fcall	___lwmod
   924     07D0  0878               	movf	?___lwmod,w
   925     07D1  3E30               	addlw	48
   926     07D2  1283               	bcf	3,5	;RP0=0, select bank0
   927     07D3  1303               	bcf	3,6	;RP1=0, select bank0
   928     07D4  00AC               	movwf	sprintf@c
   929     07D5                     l1205:
   930                           
   931                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
   932     07D5  082B               	movf	sprintf@sp,w
   933     07D6  0084               	movwf	4
   934     07D7  082C               	movf	sprintf@c,w
   935     07D8  1383               	bcf	3,7	;select IRP bank0
   936     07D9  0080               	movwf	0
   937     07DA                     l1207:
   938     07DA  3001               	movlw	1
   939     07DB  00A3               	movwf	??_sprintf
   940     07DC  0823               	movf	??_sprintf,w
   941     07DD  07AB               	addwf	sprintf@sp,f
   942     07DE                     l1209:
   943                           
   944                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   945     07DE  30FF               	movlw	255
   946     07DF  00A3               	movwf	??_sprintf
   947     07E0  0823               	movf	??_sprintf,w
   948     07E1  07A8               	addwf	sprintf@prec,f
   949     07E2  0A28               	incf	sprintf@prec,w
   950     07E3  1D03               	btfss	3,2
   951     07E4  2FE6               	goto	u641
   952     07E5  2FE7               	goto	u640
   953     07E6                     u641:
   954     07E6  2FA9               	goto	l1203
   955     07E7                     u640:
   956     07E7                     l1211:
   957                           
   958                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   959     07E7  3001               	movlw	1
   960     07E8  07A0               	addwf	sprintf@f,f
   961     07E9  30FF               	movlw	-1
   962     07EA  0720               	addwf	sprintf@f,w
   963     07EB  0084               	movwf	4
   964     07EC  120A  118A  2003  120A  118A  	fcall	stringdir
   965     07F1  00AC               	movwf	sprintf@c
   966     07F2  082C               	movf	sprintf@c,w
   967     07F3  1D03               	btfss	3,2
   968     07F4  2FF6               	goto	u651
   969     07F5  2FF7               	goto	u650
   970     07F6                     u651:
   971     07F6  2F28               	goto	l1161
   972     07F7                     u650:
   973     07F7                     l1213:
   974                           
   975                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   976     07F7  082B               	movf	sprintf@sp,w
   977     07F8  0084               	movwf	4
   978     07F9  1383               	bcf	3,7	;select IRP bank0
   979     07FA  0180               	clrf	0
   980     07FB                     l203:
   981     07FB  0008               	return
   982     07FC                     __end_of_sprintf:
   983                           
   984                           	psect	text2
   985     053A                     __ptext2:	
   986 ;; *************** function ___lwmod *****************
   987 ;; Defined at:
   988 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;  divisor         2    8[COMMON] unsigned int 
   991 ;;  dividend        2   10[COMMON] unsigned int 
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  counter         1   13[COMMON] unsigned char 
   994 ;; Return value:  Size  Location     Type
   995 ;;                  2    8[COMMON] unsigned int 
   996 ;; Registers used:
   997 ;;		wreg, status,2, status,0
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1003 ;;      Params:         4       0       0       0       0
  1004 ;;      Locals:         1       0       0       0       0
  1005 ;;      Temps:          1       0       0       0       0
  1006 ;;      Totals:         6       0       0       0       0
  1007 ;;Total ram usage:        6 bytes
  1008 ;; Hardware stack levels used: 1
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_sprintf
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016     053A                     ___lwmod:	
  1017                           ;psect for function ___lwmod
  1018                           
  1019     053A                     l1073:	
  1020                           ;incstack = 0
  1021                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1022                           
  1023     053A  0878               	movf	___lwmod@divisor,w
  1024     053B  0479               	iorwf	___lwmod@divisor+1,w
  1025     053C  1903               	btfsc	3,2
  1026     053D  2D3F               	goto	u481
  1027     053E  2D40               	goto	u480
  1028     053F                     u481:
  1029     053F  2D6F               	goto	l1091
  1030     0540                     u480:
  1031     0540                     l1075:
  1032     0540  01FD               	clrf	___lwmod@counter
  1033     0541  0AFD               	incf	___lwmod@counter,f
  1034     0542  2D4E               	goto	l1081
  1035     0543                     l1077:
  1036     0543  3001               	movlw	1
  1037     0544                     u495:
  1038     0544  1003               	clrc
  1039     0545  0DF8               	rlf	___lwmod@divisor,f
  1040     0546  0DF9               	rlf	___lwmod@divisor+1,f
  1041     0547  3EFF               	addlw	-1
  1042     0548  1D03               	skipz
  1043     0549  2D44               	goto	u495
  1044     054A                     l1079:
  1045     054A  3001               	movlw	1
  1046     054B  00FC               	movwf	??___lwmod
  1047     054C  087C               	movf	??___lwmod,w
  1048     054D  07FD               	addwf	___lwmod@counter,f
  1049     054E                     l1081:
  1050     054E  1FF9               	btfss	___lwmod@divisor+1,7
  1051     054F  2D51               	goto	u501
  1052     0550  2D52               	goto	u500
  1053     0551                     u501:
  1054     0551  2D43               	goto	l1077
  1055     0552                     u500:
  1056     0552                     l1083:
  1057     0552  0879               	movf	___lwmod@divisor+1,w
  1058     0553  027B               	subwf	___lwmod@dividend+1,w
  1059     0554  1D03               	skipz
  1060     0555  2D58               	goto	u515
  1061     0556  0878               	movf	___lwmod@divisor,w
  1062     0557  027A               	subwf	___lwmod@dividend,w
  1063     0558                     u515:
  1064     0558  1C03               	skipc
  1065     0559  2D5B               	goto	u511
  1066     055A  2D5C               	goto	u510
  1067     055B                     u511:
  1068     055B  2D62               	goto	l1087
  1069     055C                     u510:
  1070     055C                     l1085:
  1071     055C  0878               	movf	___lwmod@divisor,w
  1072     055D  02FA               	subwf	___lwmod@dividend,f
  1073     055E  0879               	movf	___lwmod@divisor+1,w
  1074     055F  1C03               	skipc
  1075     0560  03FB               	decf	___lwmod@dividend+1,f
  1076     0561  02FB               	subwf	___lwmod@dividend+1,f
  1077     0562                     l1087:
  1078     0562  3001               	movlw	1
  1079     0563                     u525:
  1080     0563  1003               	clrc
  1081     0564  0CF9               	rrf	___lwmod@divisor+1,f
  1082     0565  0CF8               	rrf	___lwmod@divisor,f
  1083     0566  3EFF               	addlw	-1
  1084     0567  1D03               	skipz
  1085     0568  2D63               	goto	u525
  1086     0569                     l1089:
  1087     0569  3001               	movlw	1
  1088     056A  02FD               	subwf	___lwmod@counter,f
  1089     056B  1D03               	btfss	3,2
  1090     056C  2D6E               	goto	u531
  1091     056D  2D6F               	goto	u530
  1092     056E                     u531:
  1093     056E  2D52               	goto	l1083
  1094     056F                     u530:
  1095     056F                     l1091:
  1096     056F  087B               	movf	___lwmod@dividend+1,w
  1097     0570  00F9               	movwf	?___lwmod+1
  1098     0571  087A               	movf	___lwmod@dividend,w
  1099     0572  00F8               	movwf	?___lwmod
  1100     0573                     l489:
  1101     0573  0008               	return
  1102     0574                     __end_of___lwmod:
  1103                           
  1104                           	psect	text3
  1105     0574                     __ptext3:	
  1106 ;; *************** function ___lwdiv *****************
  1107 ;; Defined at:
  1108 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  divisor         2    0[COMMON] unsigned int 
  1111 ;;  dividend        2    2[COMMON] unsigned int 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  quotient        2    5[COMMON] unsigned int 
  1114 ;;  counter         1    7[COMMON] unsigned char 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  2    0[COMMON] unsigned int 
  1117 ;; Registers used:
  1118 ;;		wreg, status,2, status,0
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1124 ;;      Params:         4       0       0       0       0
  1125 ;;      Locals:         3       0       0       0       0
  1126 ;;      Temps:          1       0       0       0       0
  1127 ;;      Totals:         8       0       0       0       0
  1128 ;;Total ram usage:        8 bytes
  1129 ;; Hardware stack levels used: 1
  1130 ;; This function calls:
  1131 ;;		Nothing
  1132 ;; This function is called by:
  1133 ;;		_sprintf
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137     0574                     ___lwdiv:	
  1138                           ;psect for function ___lwdiv
  1139                           
  1140     0574                     l1047:	
  1141                           ;incstack = 0
  1142                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1143                           
  1144     0574  01F5               	clrf	___lwdiv@quotient
  1145     0575  01F6               	clrf	___lwdiv@quotient+1
  1146     0576                     l1049:
  1147     0576  0870               	movf	___lwdiv@divisor,w
  1148     0577  0471               	iorwf	___lwdiv@divisor+1,w
  1149     0578  1903               	btfsc	3,2
  1150     0579  2D7B               	goto	u411
  1151     057A  2D7C               	goto	u410
  1152     057B                     u411:
  1153     057B  2DB3               	goto	l1069
  1154     057C                     u410:
  1155     057C                     l1051:
  1156     057C  01F7               	clrf	___lwdiv@counter
  1157     057D  0AF7               	incf	___lwdiv@counter,f
  1158     057E  2D8A               	goto	l1057
  1159     057F                     l1053:
  1160     057F  3001               	movlw	1
  1161     0580                     u425:
  1162     0580  1003               	clrc
  1163     0581  0DF0               	rlf	___lwdiv@divisor,f
  1164     0582  0DF1               	rlf	___lwdiv@divisor+1,f
  1165     0583  3EFF               	addlw	-1
  1166     0584  1D03               	skipz
  1167     0585  2D80               	goto	u425
  1168     0586                     l1055:
  1169     0586  3001               	movlw	1
  1170     0587  00F4               	movwf	??___lwdiv
  1171     0588  0874               	movf	??___lwdiv,w
  1172     0589  07F7               	addwf	___lwdiv@counter,f
  1173     058A                     l1057:
  1174     058A  1FF1               	btfss	___lwdiv@divisor+1,7
  1175     058B  2D8D               	goto	u431
  1176     058C  2D8E               	goto	u430
  1177     058D                     u431:
  1178     058D  2D7F               	goto	l1053
  1179     058E                     u430:
  1180     058E                     l1059:
  1181     058E  3001               	movlw	1
  1182     058F                     u445:
  1183     058F  1003               	clrc
  1184     0590  0DF5               	rlf	___lwdiv@quotient,f
  1185     0591  0DF6               	rlf	___lwdiv@quotient+1,f
  1186     0592  3EFF               	addlw	-1
  1187     0593  1D03               	skipz
  1188     0594  2D8F               	goto	u445
  1189     0595  0871               	movf	___lwdiv@divisor+1,w
  1190     0596  0273               	subwf	___lwdiv@dividend+1,w
  1191     0597  1D03               	skipz
  1192     0598  2D9B               	goto	u455
  1193     0599  0870               	movf	___lwdiv@divisor,w
  1194     059A  0272               	subwf	___lwdiv@dividend,w
  1195     059B                     u455:
  1196     059B  1C03               	skipc
  1197     059C  2D9E               	goto	u451
  1198     059D  2D9F               	goto	u450
  1199     059E                     u451:
  1200     059E  2DA6               	goto	l1065
  1201     059F                     u450:
  1202     059F                     l1061:
  1203     059F  0870               	movf	___lwdiv@divisor,w
  1204     05A0  02F2               	subwf	___lwdiv@dividend,f
  1205     05A1  0871               	movf	___lwdiv@divisor+1,w
  1206     05A2  1C03               	skipc
  1207     05A3  03F3               	decf	___lwdiv@dividend+1,f
  1208     05A4  02F3               	subwf	___lwdiv@dividend+1,f
  1209     05A5                     l1063:
  1210     05A5  1475               	bsf	___lwdiv@quotient,0
  1211     05A6                     l1065:
  1212     05A6  3001               	movlw	1
  1213     05A7                     u465:
  1214     05A7  1003               	clrc
  1215     05A8  0CF1               	rrf	___lwdiv@divisor+1,f
  1216     05A9  0CF0               	rrf	___lwdiv@divisor,f
  1217     05AA  3EFF               	addlw	-1
  1218     05AB  1D03               	skipz
  1219     05AC  2DA7               	goto	u465
  1220     05AD                     l1067:
  1221     05AD  3001               	movlw	1
  1222     05AE  02F7               	subwf	___lwdiv@counter,f
  1223     05AF  1D03               	btfss	3,2
  1224     05B0  2DB2               	goto	u471
  1225     05B1  2DB3               	goto	u470
  1226     05B2                     u471:
  1227     05B2  2D8E               	goto	l1059
  1228     05B3                     u470:
  1229     05B3                     l1069:
  1230     05B3  0876               	movf	___lwdiv@quotient+1,w
  1231     05B4  00F1               	movwf	?___lwdiv+1
  1232     05B5  0875               	movf	___lwdiv@quotient,w
  1233     05B6  00F0               	movwf	?___lwdiv
  1234     05B7                     l479:
  1235     05B7  0008               	return
  1236     05B8                     __end_of___lwdiv:
  1237                           
  1238                           	psect	text4
  1239     04CF                     __ptext4:	
  1240 ;; *************** function _setup *****************
  1241 ;; Defined at:
  1242 ;;		line 1 in file "./lcdt.h"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		None
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1256 ;;      Params:         0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0
  1259 ;;      Totals:         0       0       0       0       0
  1260 ;;Total ram usage:        0 bytes
  1261 ;; Hardware stack levels used: 1
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_main
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269     04CF                     _setup:	
  1270                           ;psect for function _setup
  1271                           
  1272     04CF                     l41:	
  1273                           ;incstack = 0
  1274                           ; Regs used in _setup: []
  1275                           
  1276     04CF  0008               	return
  1277     04D0                     __end_of_setup:
  1278                           
  1279                           	psect	text5
  1280     05FE                     __ptext5:	
  1281 ;; *************** function _Lcd_Start *****************
  1282 ;; Defined at:
  1283 ;;		line 71 in file "./lcdt.h"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;		None
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  i               2    0        int 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, status,2, status,0, pclath, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1297 ;;      Params:         0       0       0       0       0
  1298 ;;      Locals:         0       0       0       0       0
  1299 ;;      Temps:          2       0       0       0       0
  1300 ;;      Totals:         2       0       0       0       0
  1301 ;;Total ram usage:        2 bytes
  1302 ;; Hardware stack levels used: 1
  1303 ;; Hardware stack levels required when called: 2
  1304 ;; This function calls:
  1305 ;;		_Lcd_Cmd
  1306 ;;		_Lcd_SetBit
  1307 ;; This function is called by:
  1308 ;;		_main
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312     05FE                     _Lcd_Start:	
  1313                           ;psect for function _Lcd_Start
  1314                           
  1315     05FE                     l1117:	
  1316                           ;incstack = 0
  1317                           ; Regs used in _Lcd_Start: [wreg+status,2+status,0+pclath+cstack]
  1318                           
  1319                           
  1320                           ;./lcdt.h: 73:   Lcd_SetBit(0x00);
  1321     05FE  3000               	movlw	0
  1322     05FF  120A  118A  2518  120A  118A  	fcall	_Lcd_SetBit
  1323     0604                     l1119:
  1324     0604                     l1121:
  1325     0604                     l1129:
  1326                           
  1327                           ;./lcdt.h: 75:   Lcd_Cmd(0x03);
  1328     0604  3003               	movlw	3
  1329     0605  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1330     060A                     l1131:
  1331                           
  1332                           ;./lcdt.h: 76:     _delay((unsigned long)((5)*(10000000/4000.0)));
  1333     060A  3011               	movlw	17
  1334     060B  00F5               	movwf	??_Lcd_Start+1
  1335     060C  303A               	movlw	58
  1336     060D  00F4               	movwf	??_Lcd_Start
  1337     060E                     u687:
  1338     060E  0BF4               	decfsz	??_Lcd_Start,f
  1339     060F  2E0E               	goto	u687
  1340     0610  0BF5               	decfsz	??_Lcd_Start+1,f
  1341     0611  2E0E               	goto	u687
  1342     0612  0000               	nop
  1343     0613                     l1133:
  1344                           
  1345                           ;./lcdt.h: 77:   Lcd_Cmd(0x03);
  1346     0613  3003               	movlw	3
  1347     0614  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1348                           
  1349                           ;./lcdt.h: 78:     _delay((unsigned long)((11)*(10000000/4000.0)));
  1350     0619  3024               	movlw	36
  1351     061A  00F5               	movwf	??_Lcd_Start+1
  1352     061B  30B5               	movlw	181
  1353     061C  00F4               	movwf	??_Lcd_Start
  1354     061D                     u697:
  1355     061D  0BF4               	decfsz	??_Lcd_Start,f
  1356     061E  2E1D               	goto	u697
  1357     061F  0BF5               	decfsz	??_Lcd_Start+1,f
  1358     0620  2E1D               	goto	u697
  1359     0621  2E22               	nop2
  1360     0622                     l1135:
  1361                           
  1362                           ;./lcdt.h: 79:   Lcd_Cmd(0x03);
  1363     0622  3003               	movlw	3
  1364     0623  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1365     0628                     l1137:
  1366                           
  1367                           ;./lcdt.h: 80:   Lcd_Cmd(0x02);
  1368     0628  3002               	movlw	2
  1369     0629  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1370     062E                     l1139:
  1371                           
  1372                           ;./lcdt.h: 81:   Lcd_Cmd(0x02);
  1373     062E  3002               	movlw	2
  1374     062F  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1375     0634                     l1141:
  1376                           
  1377                           ;./lcdt.h: 82:   Lcd_Cmd(0x08);
  1378     0634  3008               	movlw	8
  1379     0635  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1380     063A                     l1143:
  1381                           
  1382                           ;./lcdt.h: 83:   Lcd_Cmd(0x00);
  1383     063A  3000               	movlw	0
  1384     063B  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1385     0640                     l1145:
  1386                           
  1387                           ;./lcdt.h: 84:   Lcd_Cmd(0x0C);
  1388     0640  300C               	movlw	12
  1389     0641  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1390     0646                     l1147:
  1391                           
  1392                           ;./lcdt.h: 85:   Lcd_Cmd(0x00);
  1393     0646  3000               	movlw	0
  1394     0647  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1395     064C                     l1149:
  1396                           
  1397                           ;./lcdt.h: 86:   Lcd_Cmd(0x06);
  1398     064C  3006               	movlw	6
  1399     064D  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1400     0652                     l69:
  1401     0652  0008               	return
  1402     0653                     __end_of_Lcd_Start:
  1403                           
  1404                           	psect	text6
  1405     05B8                     __ptext6:	
  1406 ;; *************** function _Lcd_Set_Cursor *****************
  1407 ;; Defined at:
  1408 ;;		line 50 in file "./lcdt.h"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;  a               1    wreg     unsigned char 
  1411 ;;  b               1    4[COMMON] unsigned char 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  a               1    6[COMMON] unsigned char 
  1414 ;;  temp            1    9[COMMON] unsigned char 
  1415 ;;  y               1    8[COMMON] unsigned char 
  1416 ;;  z               1    7[COMMON] unsigned char 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		wreg, status,2, status,0, pclath, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1426 ;;      Params:         1       0       0       0       0
  1427 ;;      Locals:         4       0       0       0       0
  1428 ;;      Temps:          1       0       0       0       0
  1429 ;;      Totals:         6       0       0       0       0
  1430 ;;Total ram usage:        6 bytes
  1431 ;; Hardware stack levels used: 1
  1432 ;; Hardware stack levels required when called: 2
  1433 ;; This function calls:
  1434 ;;		_Lcd_Cmd
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440     05B8                     _Lcd_Set_Cursor:	
  1441                           ;psect for function _Lcd_Set_Cursor
  1442                           
  1443                           
  1444                           ;incstack = 0
  1445                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1446                           ;Lcd_Set_Cursor@a stored from wreg
  1447     05B8  00F6               	movwf	Lcd_Set_Cursor@a
  1448     05B9                     l1097:
  1449                           
  1450                           ;./lcdt.h: 50: void Lcd_Set_Cursor(char a, char b);./lcdt.h: 51: {;./lcdt.h: 52:     cha
      +                          r temp,z,y;;./lcdt.h: 53:     if(a== 1)
  1451     05B9  0376               	decf	Lcd_Set_Cursor@a,w
  1452     05BA  1D03               	btfss	3,2
  1453     05BB  2DBD               	goto	u541
  1454     05BC  2DBE               	goto	u540
  1455     05BD                     u541:
  1456     05BD  2DDB               	goto	l1107
  1457     05BE                     u540:
  1458     05BE                     l1099:
  1459                           
  1460                           ;./lcdt.h: 54:     {;./lcdt.h: 55:       temp = 0x80 + b - 1;
  1461     05BE  0874               	movf	Lcd_Set_Cursor@b,w
  1462     05BF  3E7F               	addlw	127
  1463     05C0  00F9               	movwf	Lcd_Set_Cursor@temp
  1464                           
  1465                           ;./lcdt.h: 56:         z = temp>>4;
  1466     05C1  0879               	movf	Lcd_Set_Cursor@temp,w
  1467     05C2  00F5               	movwf	??_Lcd_Set_Cursor
  1468     05C3  3004               	movlw	4
  1469     05C4                     u555:
  1470     05C4  1003               	clrc
  1471     05C5  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1472     05C6  3EFF               	addlw	-1
  1473     05C7  1D03               	skipz
  1474     05C8  2DC4               	goto	u555
  1475     05C9  0875               	movf	??_Lcd_Set_Cursor,w
  1476     05CA  00F7               	movwf	Lcd_Set_Cursor@z
  1477     05CB                     l1101:
  1478                           
  1479                           ;./lcdt.h: 57:         y = temp & 0x0F;
  1480     05CB  0879               	movf	Lcd_Set_Cursor@temp,w
  1481     05CC  390F               	andlw	15
  1482     05CD  00F8               	movwf	Lcd_Set_Cursor@y
  1483     05CE                     l1103:
  1484                           
  1485                           ;./lcdt.h: 58:         Lcd_Cmd(z);
  1486     05CE  0877               	movf	Lcd_Set_Cursor@z,w
  1487     05CF  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1488     05D4                     l1105:
  1489                           
  1490                           ;./lcdt.h: 59:         Lcd_Cmd(y);
  1491     05D4  0878               	movf	Lcd_Set_Cursor@y,w
  1492     05D5  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1493                           
  1494                           ;./lcdt.h: 60:     }
  1495     05DA  2DFD               	goto	l64
  1496     05DB                     l1107:
  1497     05DB  3002               	movlw	2
  1498     05DC  0676               	xorwf	Lcd_Set_Cursor@a,w
  1499     05DD  1D03               	btfss	3,2
  1500     05DE  2DE0               	goto	u561
  1501     05DF  2DE1               	goto	u560
  1502     05E0                     u561:
  1503     05E0  2DFD               	goto	l64
  1504     05E1                     u560:
  1505     05E1                     l1109:
  1506                           
  1507                           ;./lcdt.h: 62:     {;./lcdt.h: 63:         temp = 0xC0 + b - 1;
  1508     05E1  0874               	movf	Lcd_Set_Cursor@b,w
  1509     05E2  3EBF               	addlw	191
  1510     05E3  00F9               	movwf	Lcd_Set_Cursor@temp
  1511                           
  1512                           ;./lcdt.h: 64:         z = temp>>4;
  1513     05E4  0879               	movf	Lcd_Set_Cursor@temp,w
  1514     05E5  00F5               	movwf	??_Lcd_Set_Cursor
  1515     05E6  3004               	movlw	4
  1516     05E7                     u575:
  1517     05E7  1003               	clrc
  1518     05E8  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1519     05E9  3EFF               	addlw	-1
  1520     05EA  1D03               	skipz
  1521     05EB  2DE7               	goto	u575
  1522     05EC  0875               	movf	??_Lcd_Set_Cursor,w
  1523     05ED  00F7               	movwf	Lcd_Set_Cursor@z
  1524     05EE                     l1111:
  1525                           
  1526                           ;./lcdt.h: 65:         y = temp & 0x0F;
  1527     05EE  0879               	movf	Lcd_Set_Cursor@temp,w
  1528     05EF  390F               	andlw	15
  1529     05F0  00F8               	movwf	Lcd_Set_Cursor@y
  1530     05F1                     l1113:
  1531                           
  1532                           ;./lcdt.h: 66:         Lcd_Cmd(z);
  1533     05F1  0877               	movf	Lcd_Set_Cursor@z,w
  1534     05F2  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1535     05F7                     l1115:
  1536                           
  1537                           ;./lcdt.h: 67:         Lcd_Cmd(y);
  1538     05F7  0878               	movf	Lcd_Set_Cursor@y,w
  1539     05F8  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1540     05FD                     l64:
  1541     05FD  0008               	return
  1542     05FE                     __end_of_Lcd_Set_Cursor:
  1543                           
  1544                           	psect	text7
  1545     04F7                     __ptext7:	
  1546 ;; *************** function _Lcd_Print_String *****************
  1547 ;; Defined at:
  1548 ;;		line 105 in file "./lcdt.h"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  a               1    wreg     PTR unsigned char 
  1551 ;;		 -> main@txt(10), 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  a               1   12[COMMON] PTR unsigned char 
  1554 ;;		 -> main@txt(10), 
  1555 ;;  i               2   10[COMMON] int 
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      void 
  1558 ;; Registers used:
  1559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1565 ;;      Params:         0       0       0       0       0
  1566 ;;      Locals:         3       0       0       0       0
  1567 ;;      Temps:          1       0       0       0       0
  1568 ;;      Totals:         4       0       0       0       0
  1569 ;;Total ram usage:        4 bytes
  1570 ;; Hardware stack levels used: 1
  1571 ;; Hardware stack levels required when called: 2
  1572 ;; This function calls:
  1573 ;;		_Lcd_Print_Char
  1574 ;; This function is called by:
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579     04F7                     _Lcd_Print_String:	
  1580                           ;psect for function _Lcd_Print_String
  1581                           
  1582                           
  1583                           ;incstack = 0
  1584                           ; Regs used in _Lcd_Print_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1585                           ;Lcd_Print_String@a stored from wreg
  1586     04F7  00FC               	movwf	Lcd_Print_String@a
  1587     04F8                     l1151:
  1588                           
  1589                           ;./lcdt.h: 105: void Lcd_Print_String(char *a);./lcdt.h: 106: {;./lcdt.h: 107:     int i
      +                          ;;./lcdt.h: 108:     for(i=0;a[i]!='\0';i++)
  1590     04F8  01FA               	clrf	Lcd_Print_String@i
  1591     04F9  01FB               	clrf	Lcd_Print_String@i+1
  1592     04FA  2D0C               	goto	l1157
  1593     04FB                     l1153:
  1594                           
  1595                           ;./lcdt.h: 109:        Lcd_Print_Char(a[i]);
  1596     04FB  087A               	movf	Lcd_Print_String@i,w
  1597     04FC  077C               	addwf	Lcd_Print_String@a,w
  1598     04FD  00F9               	movwf	??_Lcd_Print_String
  1599     04FE  0879               	movf	??_Lcd_Print_String,w
  1600     04FF  0084               	movwf	4
  1601     0500  0800               	movf	0,w
  1602     0501  120A  118A  2653  120A  118A  	fcall	_Lcd_Print_Char
  1603     0506                     l1155:
  1604     0506  3001               	movlw	1
  1605     0507  07FA               	addwf	Lcd_Print_String@i,f
  1606     0508  1803               	skipnc
  1607     0509  0AFB               	incf	Lcd_Print_String@i+1,f
  1608     050A  3000               	movlw	0
  1609     050B  07FB               	addwf	Lcd_Print_String@i+1,f
  1610     050C                     l1157:
  1611     050C  087A               	movf	Lcd_Print_String@i,w
  1612     050D  077C               	addwf	Lcd_Print_String@a,w
  1613     050E  00F9               	movwf	??_Lcd_Print_String
  1614     050F  0879               	movf	??_Lcd_Print_String,w
  1615     0510  0084               	movwf	4
  1616     0511  1383               	bcf	3,7	;select IRP bank0
  1617     0512  0800               	movf	0,w
  1618     0513  1D03               	btfss	3,2
  1619     0514  2D16               	goto	u581
  1620     0515  2D17               	goto	u580
  1621     0516                     u581:
  1622     0516  2CFB               	goto	l1153
  1623     0517                     u580:
  1624     0517                     l82:
  1625     0517  0008               	return
  1626     0518                     __end_of_Lcd_Print_String:
  1627                           
  1628                           	psect	text8
  1629     0653                     __ptext8:	
  1630 ;; *************** function _Lcd_Print_Char *****************
  1631 ;; Defined at:
  1632 ;;		line 89 in file "./lcdt.h"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;  data            1    wreg     unsigned char 
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;  data            1    4[COMMON] unsigned char 
  1637 ;;  i               2    7[COMMON] int 
  1638 ;;  i               2    5[COMMON] int 
  1639 ;;  Upper_Nibble    1    3[COMMON] unsigned char 
  1640 ;;  Lower_Nibble    1    2[COMMON] unsigned char 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1650 ;;      Params:         0       0       0       0       0
  1651 ;;      Locals:         7       0       0       0       0
  1652 ;;      Temps:          1       0       0       0       0
  1653 ;;      Totals:         8       0       0       0       0
  1654 ;;Total ram usage:        8 bytes
  1655 ;; Hardware stack levels used: 1
  1656 ;; Hardware stack levels required when called: 1
  1657 ;; This function calls:
  1658 ;;		_Lcd_SetBit
  1659 ;; This function is called by:
  1660 ;;		_Lcd_Print_String
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664     0653                     _Lcd_Print_Char:	
  1665                           ;psect for function _Lcd_Print_Char
  1666                           
  1667                           
  1668                           ;incstack = 0
  1669                           ; Regs used in _Lcd_Print_Char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1670                           ;Lcd_Print_Char@data stored from wreg
  1671     0653  00F4               	movwf	Lcd_Print_Char@data
  1672     0654                     l1015:
  1673                           
  1674                           ;./lcdt.h: 89: void Lcd_Print_Char(char data);./lcdt.h: 90: {;./lcdt.h: 91:    char Lowe
      +                          r_Nibble,Upper_Nibble;;./lcdt.h: 92:    Lower_Nibble = data&0x0F;
  1675     0654  0874               	movf	Lcd_Print_Char@data,w
  1676     0655  390F               	andlw	15
  1677     0656  00F2               	movwf	Lcd_Print_Char@Lower_Nibble
  1678                           
  1679                           ;./lcdt.h: 93:    Upper_Nibble = data&0xF0;
  1680     0657  0874               	movf	Lcd_Print_Char@data,w
  1681     0658  39F0               	andlw	240
  1682     0659  00F3               	movwf	Lcd_Print_Char@Upper_Nibble
  1683     065A                     l1017:
  1684                           
  1685                           ;./lcdt.h: 94:    RE1 = 1;
  1686     065A  1283               	bcf	3,5	;RP0=0, select bank0
  1687     065B  1303               	bcf	3,6	;RP1=0, select bank0
  1688     065C  1489               	bsf	9,1	;volatile
  1689     065D                     l1019:
  1690                           
  1691                           ;./lcdt.h: 95:    Lcd_SetBit(Upper_Nibble>>4);
  1692     065D  0873               	movf	Lcd_Print_Char@Upper_Nibble,w
  1693     065E  00F1               	movwf	??_Lcd_Print_Char
  1694     065F  3004               	movlw	4
  1695     0660                     u385:
  1696     0660  1003               	clrc
  1697     0661  0CF1               	rrf	??_Lcd_Print_Char,f
  1698     0662  3EFF               	addlw	-1
  1699     0663  1D03               	skipz
  1700     0664  2E60               	goto	u385
  1701     0665  0871               	movf	??_Lcd_Print_Char,w
  1702     0666  120A  118A  2518  120A  118A  	fcall	_Lcd_SetBit
  1703     066B                     l1021:
  1704                           
  1705                           ;./lcdt.h: 96:    RE0 = 1;
  1706     066B  1283               	bcf	3,5	;RP0=0, select bank0
  1707     066C  1303               	bcf	3,6	;RP1=0, select bank0
  1708     066D  1409               	bsf	9,0	;volatile
  1709     066E                     l1023:
  1710                           
  1711                           ;./lcdt.h: 97:    for(int i=2130483; i<=0; i--) __nop();
  1712     066E  3033               	movlw	51
  1713     066F  00F5               	movwf	Lcd_Print_Char@i
  1714     0670  3082               	movlw	130
  1715     0671  00F6               	movwf	Lcd_Print_Char@i+1
  1716     0672                     l72:
  1717     0672  0000               	nop
  1718     0673                     l1029:
  1719     0673  30FF               	movlw	255
  1720     0674  07F5               	addwf	Lcd_Print_Char@i,f
  1721     0675  1803               	skipnc
  1722     0676  0AF6               	incf	Lcd_Print_Char@i+1,f
  1723     0677  30FF               	movlw	255
  1724     0678  07F6               	addwf	Lcd_Print_Char@i+1,f
  1725     0679                     l1031:
  1726     0679  0876               	movf	Lcd_Print_Char@i+1,w
  1727     067A  3A80               	xorlw	128
  1728     067B  00FF               	movwf	btemp+1
  1729     067C  3080               	movlw	128
  1730     067D  027F               	subwf	btemp+1,w
  1731     067E  1D03               	skipz
  1732     067F  2E82               	goto	u395
  1733     0680  3001               	movlw	1
  1734     0681  0275               	subwf	Lcd_Print_Char@i,w
  1735     0682                     u395:
  1736     0682  1C03               	skipc
  1737     0683  2E85               	goto	u391
  1738     0684  2E86               	goto	u390
  1739     0685                     u391:
  1740     0685  2E72               	goto	l72
  1741     0686                     u390:
  1742     0686                     l73:
  1743                           
  1744                           ;./lcdt.h: 98:    RE0 = 0;
  1745     0686  1283               	bcf	3,5	;RP0=0, select bank0
  1746     0687  1303               	bcf	3,6	;RP1=0, select bank0
  1747     0688  1009               	bcf	9,0	;volatile
  1748     0689                     l1033:
  1749                           
  1750                           ;./lcdt.h: 99:    Lcd_SetBit(Lower_Nibble);
  1751     0689  0872               	movf	Lcd_Print_Char@Lower_Nibble,w
  1752     068A  120A  118A  2518  120A  118A  	fcall	_Lcd_SetBit
  1753     068F                     l1035:
  1754                           
  1755                           ;./lcdt.h: 100:    RE0 = 1;
  1756     068F  1283               	bcf	3,5	;RP0=0, select bank0
  1757     0690  1303               	bcf	3,6	;RP1=0, select bank0
  1758     0691  1409               	bsf	9,0	;volatile
  1759     0692                     l1037:
  1760                           
  1761                           ;./lcdt.h: 101:    for(int i=2130483; i<=0; i--) __nop();
  1762     0692  3033               	movlw	51
  1763     0693  00F7               	movwf	Lcd_Print_Char@i_143
  1764     0694  3082               	movlw	130
  1765     0695  00F8               	movwf	Lcd_Print_Char@i_143+1
  1766     0696                     l74:
  1767     0696  0000               	nop
  1768     0697                     l1043:
  1769     0697  30FF               	movlw	255
  1770     0698  07F7               	addwf	Lcd_Print_Char@i_143,f
  1771     0699  1803               	skipnc
  1772     069A  0AF8               	incf	Lcd_Print_Char@i_143+1,f
  1773     069B  30FF               	movlw	255
  1774     069C  07F8               	addwf	Lcd_Print_Char@i_143+1,f
  1775     069D                     l1045:
  1776     069D  0878               	movf	Lcd_Print_Char@i_143+1,w
  1777     069E  3A80               	xorlw	128
  1778     069F  00FF               	movwf	btemp+1
  1779     06A0  3080               	movlw	128
  1780     06A1  027F               	subwf	btemp+1,w
  1781     06A2  1D03               	skipz
  1782     06A3  2EA6               	goto	u405
  1783     06A4  3001               	movlw	1
  1784     06A5  0277               	subwf	Lcd_Print_Char@i_143,w
  1785     06A6                     u405:
  1786     06A6  1C03               	skipc
  1787     06A7  2EA9               	goto	u401
  1788     06A8  2EAA               	goto	u400
  1789     06A9                     u401:
  1790     06A9  2E96               	goto	l74
  1791     06AA                     u400:
  1792     06AA                     l75:
  1793                           
  1794                           ;./lcdt.h: 102:    RE0 = 0;
  1795     06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1796     06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1797     06AC  1009               	bcf	9,0	;volatile
  1798     06AD                     l76:
  1799     06AD  0008               	return
  1800     06AE                     __end_of_Lcd_Print_Char:
  1801                           
  1802                           	psect	text9
  1803     04D0                     __ptext9:	
  1804 ;; *************** function _Lcd_Clear *****************
  1805 ;; Defined at:
  1806 ;;		line 44 in file "./lcdt.h"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;		None
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  2   57[None  ] int 
  1813 ;; Registers used:
  1814 ;;		wreg, status,2, status,0, pclath, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1820 ;;      Params:         0       0       0       0       0
  1821 ;;      Locals:         0       0       0       0       0
  1822 ;;      Temps:          0       0       0       0       0
  1823 ;;      Totals:         0       0       0       0       0
  1824 ;;Total ram usage:        0 bytes
  1825 ;; Hardware stack levels used: 1
  1826 ;; Hardware stack levels required when called: 2
  1827 ;; This function calls:
  1828 ;;		_Lcd_Cmd
  1829 ;; This function is called by:
  1830 ;;		_main
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834     04D0                     _Lcd_Clear:	
  1835                           ;psect for function _Lcd_Clear
  1836                           
  1837     04D0                     l1095:	
  1838                           ;incstack = 0
  1839                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1840                           
  1841                           
  1842                           ;./lcdt.h: 46:     Lcd_Cmd(0);
  1843     04D0  3000               	movlw	0
  1844     04D1  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1845                           
  1846                           ;./lcdt.h: 47:     Lcd_Cmd(1);
  1847     04D6  3001               	movlw	1
  1848     04D7  120A  118A  24DD  120A  118A  	fcall	_Lcd_Cmd
  1849     04DC                     l58:
  1850     04DC  0008               	return
  1851     04DD                     __end_of_Lcd_Clear:
  1852                           
  1853                           	psect	text10
  1854     04DD                     __ptext10:	
  1855 ;; *************** function _Lcd_Cmd *****************
  1856 ;; Defined at:
  1857 ;;		line 35 in file "./lcdt.h"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  a               1    wreg     unsigned char 
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  a               1    3[COMMON] unsigned char 
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  1    wreg      void 
  1864 ;; Registers used:
  1865 ;;		wreg, status,2, status,0, pclath, cstack
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1871 ;;      Params:         0       0       0       0       0
  1872 ;;      Locals:         1       0       0       0       0
  1873 ;;      Temps:          2       0       0       0       0
  1874 ;;      Totals:         3       0       0       0       0
  1875 ;;Total ram usage:        3 bytes
  1876 ;; Hardware stack levels used: 1
  1877 ;; Hardware stack levels required when called: 1
  1878 ;; This function calls:
  1879 ;;		_Lcd_SetBit
  1880 ;; This function is called by:
  1881 ;;		_Lcd_Clear
  1882 ;;		_Lcd_Set_Cursor
  1883 ;;		_Lcd_Start
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887     04DD                     _Lcd_Cmd:	
  1888                           ;psect for function _Lcd_Cmd
  1889                           
  1890                           
  1891                           ;incstack = 0
  1892                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1893                           ;Lcd_Cmd@a stored from wreg
  1894     04DD  00F3               	movwf	Lcd_Cmd@a
  1895     04DE                     l1005:
  1896                           
  1897                           ;./lcdt.h: 35: void Lcd_Cmd(char a);./lcdt.h: 36: {;./lcdt.h: 37:     RE1 = 0;
  1898     04DE  1283               	bcf	3,5	;RP0=0, select bank0
  1899     04DF  1303               	bcf	3,6	;RP1=0, select bank0
  1900     04E0  1089               	bcf	9,1	;volatile
  1901     04E1                     l1007:
  1902                           
  1903                           ;./lcdt.h: 38:     Lcd_SetBit(a);
  1904     04E1  0873               	movf	Lcd_Cmd@a,w
  1905     04E2  120A  118A  2518  120A  118A  	fcall	_Lcd_SetBit
  1906     04E7                     l1009:
  1907                           
  1908                           ;./lcdt.h: 39:     RE0 = 1;
  1909     04E7  1283               	bcf	3,5	;RP0=0, select bank0
  1910     04E8  1303               	bcf	3,6	;RP1=0, select bank0
  1911     04E9  1409               	bsf	9,0	;volatile
  1912     04EA                     l1011:
  1913                           
  1914                           ;./lcdt.h: 40:         _delay((unsigned long)((4)*(10000000/4000.0)));
  1915     04EA  300D               	movlw	13
  1916     04EB  00F2               	movwf	??_Lcd_Cmd+1
  1917     04EC  30FB               	movlw	251
  1918     04ED  00F1               	movwf	??_Lcd_Cmd
  1919     04EE                     u707:
  1920     04EE  0BF1               	decfsz	??_Lcd_Cmd,f
  1921     04EF  2CEE               	goto	u707
  1922     04F0  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1923     04F1  2CEE               	goto	u707
  1924     04F2  2CF3               	nop2
  1925     04F3                     l1013:
  1926                           
  1927                           ;./lcdt.h: 41:         RE0 = 0;
  1928     04F3  1283               	bcf	3,5	;RP0=0, select bank0
  1929     04F4  1303               	bcf	3,6	;RP1=0, select bank0
  1930     04F5  1009               	bcf	9,0	;volatile
  1931     04F6                     l55:
  1932     04F6  0008               	return
  1933     04F7                     __end_of_Lcd_Cmd:
  1934                           
  1935                           	psect	text11
  1936     0518                     __ptext11:	
  1937 ;; *************** function _Lcd_SetBit *****************
  1938 ;; Defined at:
  1939 ;;		line 12 in file "./lcdt.h"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  data_bit        1    wreg     unsigned char 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  data_bit        1    0[COMMON] unsigned char 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      void 
  1946 ;; Registers used:
  1947 ;;		wreg
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1953 ;;      Params:         0       0       0       0       0
  1954 ;;      Locals:         1       0       0       0       0
  1955 ;;      Temps:          0       0       0       0       0
  1956 ;;      Totals:         1       0       0       0       0
  1957 ;;Total ram usage:        1 bytes
  1958 ;; Hardware stack levels used: 1
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_Lcd_Cmd
  1963 ;;		_Lcd_Start
  1964 ;;		_Lcd_Print_Char
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968     0518                     _Lcd_SetBit:	
  1969                           ;psect for function _Lcd_SetBit
  1970                           
  1971                           
  1972                           ;incstack = 0
  1973                           ; Regs used in _Lcd_SetBit: [wreg]
  1974                           ;Lcd_SetBit@data_bit stored from wreg
  1975     0518  00F0               	movwf	Lcd_SetBit@data_bit
  1976     0519                     l995:
  1977                           
  1978                           ;./lcdt.h: 12: void Lcd_SetBit(char data_bit);./lcdt.h: 13: {;./lcdt.h: 14:     if(data_
      +                          bit& 1)
  1979     0519  1C70               	btfss	Lcd_SetBit@data_bit,0
  1980     051A  2D1C               	goto	u341
  1981     051B  2D1D               	goto	u340
  1982     051C                     u341:
  1983     051C  2D21               	goto	l44
  1984     051D                     u340:
  1985     051D                     l997:
  1986                           
  1987                           ;./lcdt.h: 15:         RD4 = 1;
  1988     051D  1283               	bcf	3,5	;RP0=0, select bank0
  1989     051E  1303               	bcf	3,6	;RP1=0, select bank0
  1990     051F  1608               	bsf	8,4	;volatile
  1991     0520  2D24               	goto	l45
  1992     0521                     l44:	
  1993                           ;./lcdt.h: 16:     else
  1994                           
  1995                           
  1996                           ;./lcdt.h: 17:         RD4 = 0;
  1997     0521  1283               	bcf	3,5	;RP0=0, select bank0
  1998     0522  1303               	bcf	3,6	;RP1=0, select bank0
  1999     0523  1208               	bcf	8,4	;volatile
  2000     0524                     l45:
  2001                           
  2002                           ;./lcdt.h: 19:     if(data_bit& 2)
  2003     0524  1CF0               	btfss	Lcd_SetBit@data_bit,1
  2004     0525  2D27               	goto	u351
  2005     0526  2D28               	goto	u350
  2006     0527                     u351:
  2007     0527  2D2A               	goto	l46
  2008     0528                     u350:
  2009     0528                     l999:
  2010                           
  2011                           ;./lcdt.h: 20:         RD5 = 1;
  2012     0528  1688               	bsf	8,5	;volatile
  2013     0529  2D2B               	goto	l47
  2014     052A                     l46:	
  2015                           ;./lcdt.h: 21:     else
  2016                           
  2017                           
  2018                           ;./lcdt.h: 22:         RD5 = 0;
  2019     052A  1288               	bcf	8,5	;volatile
  2020     052B                     l47:
  2021                           
  2022                           ;./lcdt.h: 24:     if(data_bit& 4)
  2023     052B  1D70               	btfss	Lcd_SetBit@data_bit,2
  2024     052C  2D2E               	goto	u361
  2025     052D  2D2F               	goto	u360
  2026     052E                     u361:
  2027     052E  2D31               	goto	l48
  2028     052F                     u360:
  2029     052F                     l1001:
  2030                           
  2031                           ;./lcdt.h: 25:         RD6 = 1;
  2032     052F  1708               	bsf	8,6	;volatile
  2033     0530  2D32               	goto	l49
  2034     0531                     l48:	
  2035                           ;./lcdt.h: 26:     else
  2036                           
  2037                           
  2038                           ;./lcdt.h: 27:         RD6 = 0;
  2039     0531  1308               	bcf	8,6	;volatile
  2040     0532                     l49:
  2041                           
  2042                           ;./lcdt.h: 29:     if(data_bit& 8)
  2043     0532  1DF0               	btfss	Lcd_SetBit@data_bit,3
  2044     0533  2D35               	goto	u371
  2045     0534  2D36               	goto	u370
  2046     0535                     u371:
  2047     0535  2D38               	goto	l50
  2048     0536                     u370:
  2049     0536                     l1003:
  2050                           
  2051                           ;./lcdt.h: 30:         RD7 = 1;
  2052     0536  1788               	bsf	8,7	;volatile
  2053     0537  2D39               	goto	l52
  2054     0538                     l50:	
  2055                           ;./lcdt.h: 31:     else
  2056                           
  2057                           
  2058                           ;./lcdt.h: 32:         RD7 = 0;
  2059     0538  1388               	bcf	8,7	;volatile
  2060     0539                     l52:
  2061     0539  0008               	return
  2062     053A                     __end_of_Lcd_SetBit:
  2063     007E                     btemp	set	126	;btemp
  2064     007E                     wtemp0	set	126
  2065                           
  2066                           	psect	config
  2067                           
  2068                           ;Config register CONFIG @ 0x2007
  2069                           ;	Oscillator Selection bits
  2070                           ;	FOSC = HS, HS oscillator
  2071                           ;	Watchdog Timer Enable bit
  2072                           ;	WDTE = OFF, WDT disabled
  2073                           ;	Power-up Timer Enable bit
  2074                           ;	PWRTE = OFF, PWRT disabled
  2075                           ;	Brown-out Reset Enable bit
  2076                           ;	BOREN = OFF, BOR disabled
  2077                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2078                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2079                           ;	Data EEPROM Memory Code Protection bit
  2080                           ;	CPD = OFF, Data EEPROM code protection off
  2081                           ;	Flash Program Memory Write Enable bits
  2082                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2083                           ;	In-Circuit Debugger Mode bit
  2084                           ;	DEBUG = 0x1, unprogrammed default
  2085                           ;	Flash Program Memory Code Protection bit
  2086                           ;	CP = OFF, Code protection off
  2087     2007                     	org	8199
  2088     2007  3F3A               	dw	16186

Data Sizes:
    Strings     7
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      28
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@txt(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Print_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> main@txt(BANK0[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_SetBit
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    2515
                                             13 BANK0     15    15      0
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                          _Lcd_Start
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            4     4      0     244
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     456
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Print_String                                     4     4      0     393
                                              9 COMMON     4     4      0
                     _Lcd_Print_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Print_Char                                       8     8      0     270
                                              1 COMMON     8     8      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (2) _Lcd_SetBit                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_SetBit
   _Lcd_Print_String
     _Lcd_Print_Char
       _Lcd_SetBit
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Start
     _Lcd_Cmd
     _Lcd_SetBit
   _setup
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      1C       5       35.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Oct 24 14:36:40 2022

                         pc 0002                          l41 04CF                          l50 0538  
                        l52 0539                          l44 0521                          l45 0524  
                        l46 052A                          l47 052B                          l55 04F6  
                        l48 0531                          l72 0672                          l64 05FD  
                        l49 0532                          l73 0686                          l58 04DC  
                        l74 0696                          l82 0517                          l75 06AA  
                        l76 06AD                          l69 0652                          l88 06D3  
                        fsr 0004                         l203 07FB                         l479 05B7  
                       l489 0573                         l995 0519                         l997 051D  
                       l999 0528                         _RE0 0048                         _RE1 0049  
                       _RD4 0044                         _RD5 0045                         _RD6 0046  
                       _RD7 0047                         u400 06AA                         u401 06A9  
                       u410 057C                         u411 057B                         u340 051D  
                       u500 0552                         u341 051C                         u405 06A6  
                       u501 0551                         u350 0528                         u430 058E  
                       u510 055C                         u351 0527                         u431 058D  
                       u511 055B                         u360 052F                         u600 0766  
                       u361 052E                         u425 0580                         u601 0765  
                       u370 0536                         u450 059F                         u530 056F  
                       u610 078C                         u371 0535                         u451 059E  
                       u531 056E                         u515 0558                         u611 078B  
                       u540 05BE                         u620 0797                         u541 05BD  
                       u445 058F                         u525 0563                         u621 0796  
                       u390 0686                         u470 05B3                         u630 079D  
                       u391 0685                         u471 05B2                         u455 059B  
                       u631 079C                         u615 0788                         u560 05E1  
                       u480 0540                         u640 07E7                         u385 0660  
                       u561 05E0                         u465 05A7                         u481 053F  
                       u641 07E6                         u650 07F7                         u707 04EE  
                       u395 0682                         u555 05C4                         u651 07F6  
                       u580 0517                         u660 06D7                         u581 0516  
                       u661 06D6                         u590 072E                         u575 05E7  
                       u495 0544                         u591 072D                         u677 0717  
                       u687 060E                         u697 061D                         fsr0 0004  
                       indf 0000                        l1001 052F                        l1003 0536  
                      l1011 04EA                        l1013 04F3                        l1005 04DE  
                      l1021 066B                        l1101 05CB                        l1007 04E1  
                      l1031 0679                        l1023 066E                        l1015 0654  
                      l1111 05EE                        l1103 05CE                        l1009 04E7  
                      l1033 0689                        l1017 065A                        l1113 05F1  
                      l1105 05D4                        l1121 0604                        l1201 07A6  
                      l1043 0697                        l1035 068F                        l1019 065D  
                      l1115 05F7                        l1107 05DB                        l1131 060A  
                      l1051 057C                        l1203 07A9                        l1211 07E7  
                      l1045 069D                        l1037 0692                        l1029 0673  
                      l1109 05E1                        l1141 0634                        l1133 0613  
                      l1117 05FE                        l1061 059F                        l1053 057F  
                      l1205 07D5                        l1213 07F7                        l1221 06AE  
                      l1151 04F8                        l1143 063A                        l1135 0622  
                      l1119 0604                        l1063 05A5                        l1055 0586  
                      l1047 0574                        l1207 07DA                        l1231 06BD  
                      l1223 06B2                        l1153 04FB                        l1145 0640  
                      l1137 0628                        l1129 0604                        l1065 05A6  
                      l1057 058A                        l1049 0576                        l1081 054E  
                      l1073 053A                        l1209 07DE                        l1161 0728  
                      l1241 06C7                        l1233 06BF                        l1225 06B7  
                      l1155 0506                        l1147 0646                        l1139 062E  
                      l1067 05AD                        l1059 058E                        l1083 0552  
                      l1075 0540                        l1091 056F                        l1171 0739  
                      l1163 072E                        l1251 06FC                        l1243 06CC  
                      l1235 06C1                        l1227 06BA                        l1157 050C  
                      l1149 064C                        l1069 05B3                        l1085 055C  
                      l1077 0543                        l1181 076A                        l1173 0756  
                      l1165 0733                        l1253 0701                        l1245 06D0  
                      l1237 06C2                        l1229 06BB                        l1095 04D0  
                      l1087 0562                        l1079 054A                        l1183 076F  
                      l1175 075E                        l1167 0738                        l1159 0725  
                      l1255 0709                        l1247 06D7                        l1239 06C6  
                      l1097 05B9                        l1089 0569                        l1193 078D  
                      l1177 0762                        l1249 06F0                        l1099 05BE  
                      l1195 0797                        l1179 0766                        l1197 079D  
                      l1189 0771                        l1277 074B                        l1199 07A2  
                      STR_1 0013                        _main 06AE                        btemp 007E  
                      start 0000          Lcd_Print_Char@data 0074             __end_of_Lcd_Cmd 04F7  
                _Lcd_SetBit 0518                       ?_main 0070                       _CMCON 009C  
           __end_of___lwdiv 05B8             __end_of___lwmod 0574                       _TRISA 0085  
                     _TRISD 0088                       _TRISE 0089             __end_of_dpowers 0013  
                     _setup 04CF                       pclath 000A         Lcd_Print_Char@i_143 0077  
                     status 0003                       wtemp0 007E             __end_of_sprintf 07FC  
           __initialization 07FC                __end_of_main 0722                      ??_main 002D  
                    _ADCON0 001F                      _ADRESH 001E                      _ADRESL 009E  
                    ?_setup 0070                   ??_Lcd_Cmd 0071                   ??___lwdiv 0074  
                 ??___lwmod 007C                 ?_Lcd_SetBit 0070                   ??_sprintf 0023  
           Lcd_Set_Cursor@a 0076             Lcd_Set_Cursor@b 0074             Lcd_Set_Cursor@y 0078  
           Lcd_Set_Cursor@z 0077     __end_of__initialization 07FC           __end_of_Lcd_Clear 04DD  
         __end_of_Lcd_Start 0653              __pcstackCOMMON 0070               __end_of_setup 04D0  
            _Lcd_Set_Cursor 05B8                     ??_setup 0070            _Lcd_Print_String 04F7  
            _Lcd_Print_Char 0653                  __pmaintext 06AE          Lcd_SetBit@data_bit 0070  
    __end_of_Lcd_Set_Cursor 05FE                  __stringtab 0003             Lcd_Print_Char@i 0075  
                   _Lcd_Cmd 04DD      __end_of_Lcd_Print_Char 06AE                     ___lwdiv 0574  
                   ___lwmod 053A             ?_Lcd_Set_Cursor 0074                     __ptext1 0722  
                   __ptext2 053A                     __ptext3 0574                     __ptext4 04CF  
                   __ptext5 05FE                     __ptext6 05B8                     __ptext7 04F7  
                   __ptext8 0653                     __ptext9 04D0                     _dpowers 0009  
                   _sprintf 0722                     main@txt 0030        end_of_initialization 07FC  
           ?_Lcd_Print_Char 0070                ??_Lcd_SetBit 0070          __end_of_Lcd_SetBit 053A  
                main@result 003A                   _Lcd_Clear 04D0                   _Lcd_Start 05FE  
  __end_of_Lcd_Print_String 0518         start_initialization 07FC           Lcd_Print_String@a 007C  
         Lcd_Print_String@i 007A                  ?_Lcd_Clear 0070                  ?_Lcd_Start 0070  
Lcd_Print_Char@Lower_Nibble 0072                   ___latbits 0002               __pcstackBANK0 0020  
                  ?_Lcd_Cmd 0070                 sprintf@flag 0027                 sprintf@prec 0028  
          ___lwdiv@dividend 0072            ??_Lcd_Set_Cursor 0075                    ?___lwdiv 0070  
                  ?___lwmod 0078                   __pstrings 0003            ??_Lcd_Print_Char 0071  
          ___lwdiv@quotient 0075                    ?_sprintf 0020                    Lcd_Cmd@a 0073  
               ??_Lcd_Clear 0074                 ??_Lcd_Start 0074                  _ADCON0bits 001F  
               __stringbase 0008                  _ADCON1bits 009F          __end_of__stringtab 0009  
         ?_Lcd_Print_String 0070                  sprintf@val 0029          ??_Lcd_Print_String 0079  
           ___lwdiv@divisor 0070             ___lwdiv@counter 0077                    __ptext10 04DD  
                  __ptext11 0518  Lcd_Print_Char@Upper_Nibble 0073                   sprintf@ap 0026  
                 sprintf@sp 002B            ___lwmod@dividend 007A                   stringcode 0003  
        Lcd_Set_Cursor@temp 0079                  _OPTION_REG 0081                    sprintf@c 002C  
                  sprintf@f 0020             ___lwmod@divisor 0078             ___lwmod@counter 007D  
                  stringdir 0003                    stringtab 0003  
