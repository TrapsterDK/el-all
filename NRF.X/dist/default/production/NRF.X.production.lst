

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Mar 27 22:53:50 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34     0000                     
    35                           ; Generated 09/02/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F887 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69     0000                     	;# 
    70     0001                     	;# 
    71     0002                     	;# 
    72     0003                     	;# 
    73     0004                     	;# 
    74     0005                     	;# 
    75     0006                     	;# 
    76     0007                     	;# 
    77     0008                     	;# 
    78     0009                     	;# 
    79     000A                     	;# 
    80     000B                     	;# 
    81     000C                     	;# 
    82     000D                     	;# 
    83     000E                     	;# 
    84     000E                     	;# 
    85     000F                     	;# 
    86     0010                     	;# 
    87     0011                     	;# 
    88     0012                     	;# 
    89     0013                     	;# 
    90     0014                     	;# 
    91     0015                     	;# 
    92     0015                     	;# 
    93     0016                     	;# 
    94     0017                     	;# 
    95     0018                     	;# 
    96     0019                     	;# 
    97     001A                     	;# 
    98     001B                     	;# 
    99     001B                     	;# 
   100     001C                     	;# 
   101     001D                     	;# 
   102     001E                     	;# 
   103     001F                     	;# 
   104     0081                     	;# 
   105     0085                     	;# 
   106     0086                     	;# 
   107     0087                     	;# 
   108     0088                     	;# 
   109     0089                     	;# 
   110     008C                     	;# 
   111     008D                     	;# 
   112     008E                     	;# 
   113     008F                     	;# 
   114     0090                     	;# 
   115     0091                     	;# 
   116     0092                     	;# 
   117     0093                     	;# 
   118     0093                     	;# 
   119     0093                     	;# 
   120     0094                     	;# 
   121     0095                     	;# 
   122     0096                     	;# 
   123     0097                     	;# 
   124     0098                     	;# 
   125     0099                     	;# 
   126     009A                     	;# 
   127     009B                     	;# 
   128     009C                     	;# 
   129     009D                     	;# 
   130     009E                     	;# 
   131     009F                     	;# 
   132     0105                     	;# 
   133     0107                     	;# 
   134     0108                     	;# 
   135     0109                     	;# 
   136     010C                     	;# 
   137     010C                     	;# 
   138     010D                     	;# 
   139     010E                     	;# 
   140     010F                     	;# 
   141     0185                     	;# 
   142     0187                     	;# 
   143     0188                     	;# 
   144     0189                     	;# 
   145     018C                     	;# 
   146     018D                     	;# 
   147     0000                     	;# 
   148     0001                     	;# 
   149     0002                     	;# 
   150     0003                     	;# 
   151     0004                     	;# 
   152     0005                     	;# 
   153     0006                     	;# 
   154     0007                     	;# 
   155     0008                     	;# 
   156     0009                     	;# 
   157     000A                     	;# 
   158     000B                     	;# 
   159     000C                     	;# 
   160     000D                     	;# 
   161     000E                     	;# 
   162     000E                     	;# 
   163     000F                     	;# 
   164     0010                     	;# 
   165     0011                     	;# 
   166     0012                     	;# 
   167     0013                     	;# 
   168     0014                     	;# 
   169     0015                     	;# 
   170     0015                     	;# 
   171     0016                     	;# 
   172     0017                     	;# 
   173     0018                     	;# 
   174     0019                     	;# 
   175     001A                     	;# 
   176     001B                     	;# 
   177     001B                     	;# 
   178     001C                     	;# 
   179     001D                     	;# 
   180     001E                     	;# 
   181     001F                     	;# 
   182     0081                     	;# 
   183     0085                     	;# 
   184     0086                     	;# 
   185     0087                     	;# 
   186     0088                     	;# 
   187     0089                     	;# 
   188     008C                     	;# 
   189     008D                     	;# 
   190     008E                     	;# 
   191     008F                     	;# 
   192     0090                     	;# 
   193     0091                     	;# 
   194     0092                     	;# 
   195     0093                     	;# 
   196     0093                     	;# 
   197     0093                     	;# 
   198     0094                     	;# 
   199     0095                     	;# 
   200     0096                     	;# 
   201     0097                     	;# 
   202     0098                     	;# 
   203     0099                     	;# 
   204     009A                     	;# 
   205     009B                     	;# 
   206     009C                     	;# 
   207     009D                     	;# 
   208     009E                     	;# 
   209     009F                     	;# 
   210     0105                     	;# 
   211     0107                     	;# 
   212     0108                     	;# 
   213     0109                     	;# 
   214     010C                     	;# 
   215     010C                     	;# 
   216     010D                     	;# 
   217     010E                     	;# 
   218     010F                     	;# 
   219     0185                     	;# 
   220     0187                     	;# 
   221     0188                     	;# 
   222     0189                     	;# 
   223     018C                     	;# 
   224     018D                     	;# 
   225                           
   226                           	psect	idataBANK0
   227     03AB                     __pidataBANK0:
   228                           
   229                           ;initializer for _RADIO_ADDR
   230     03AB  3401               	retlw	1
   231     03AC  3402               	retlw	2
   232     03AD  3403               	retlw	3
   233     03AE  3404               	retlw	4
   234     03AF  3405               	retlw	5
   235                           
   236                           	psect	idataBANK1
   237     03A8                     __pidataBANK1:
   238                           
   239                           ;initializer for main@F1424
   240     03A8  3441               	retlw	65
   241     03A9  3442               	retlw	66
   242     03AA  3400               	retlw	0
   243     0013                     _SSPBUF	set	19
   244     0014                     _SSPCON	set	20
   245     001A                     _RCREG	set	26
   246     0019                     _TXREG	set	25
   247     0042                     _RD2	set	66
   248     0043                     _RD3	set	67
   249     0065                     _RCIF	set	101
   250     00C4                     _CREN	set	196
   251     00C7                     _SPEN	set	199
   252     008F                     _OSCCONbits	set	143
   253     0094                     _SSPSTAT	set	148
   254     0099                     _SPBRG	set	153
   255     0442                     _TRISD2	set	1090
   256     0443                     _TRISD3	set	1091
   257     04A0                     _BF	set	1184
   258     043B                     _TRISC3	set	1083
   259     043D                     _TRISC5	set	1085
   260     043C                     _TRISC4	set	1084
   261     04C1                     _TRMT	set	1217
   262     04C5                     _TXEN	set	1221
   263     043E                     _TRISC6	set	1086
   264     043F                     _TRISC7	set	1087
   265     04C4                     _SYNC	set	1220
   266     04C2                     _BRGH	set	1218
   267                           
   268                           	psect	strings
   269     0003                     __pstrings:
   270     0003                     stringtab:
   271     0003                     __stringtab:
   272     0003                     stringcode:	
   273                           ;	String table - string pointers are 1 byte each
   274                           
   275     0003                     stringdir:
   276     0003  3000               	movlw	high stringdir
   277     0004  008A               	movwf	10
   278     0005  0804               	movf	4,w
   279     0006  0A84               	incf	4,f
   280     0007  0782               	addwf	2,f
   281     0008                     __stringbase:
   282     0008  3400               	retlw	0
   283     0009                     __end_of__stringtab:
   284     0009                     STR_1:
   285     0009  3425               	retlw	37	;'%'
   286     000A  3463               	retlw	99	;'c'
   287     000B  3425               	retlw	37	;'%'
   288     000C  3463               	retlw	99	;'c'
   289     000D  3425               	retlw	37	;'%'
   290     000E  3463               	retlw	99	;'c'
   291     000F  3425               	retlw	37	;'%'
   292     0010  3463               	retlw	99	;'c'
   293     0011  3425               	retlw	37	;'%'
   294     0012  3463               	retlw	99	;'c'
   295     0013  3425               	retlw	37	;'%'
   296     0014  3463               	retlw	99	;'c'
   297     0015  3425               	retlw	37	;'%'
   298     0016  3463               	retlw	99	;'c'
   299     0017  3425               	retlw	37	;'%'
   300     0018  3463               	retlw	99	;'c'
   301     0019  340A               	retlw	10
   302     001A  3400               	retlw	0
   303     001B                     STR_2:
   304     001B  3442               	retlw	66	;'B'
   305     001C  344F               	retlw	79	;'O'
   306     001D  344F               	retlw	79	;'O'
   307     001E  3454               	retlw	84	;'T'
   308     001F  3445               	retlw	69	;'E'
   309     0020  3444               	retlw	68	;'D'
   310     0021  340A               	retlw	10
   311     0022  3400               	retlw	0
   312                           
   313                           	psect	cinit
   314     07BE                     start_initialization:	
   315                           ; #config settings
   316                           
   317     07BE                     __initialization:
   318                           
   319                           ; Initialize objects allocated to BANK1
   320     07BE  1683               	bsf	3,5	;RP0=1, select bank1
   321     07BF  1303               	bcf	3,6	;RP1=0, select bank1
   322     07C0  120A  118A  23A8  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   323     07C5  00EA               	movwf	__pdataBANK1& (0+127)
   324     07C6  120A  118A  23A9  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   325     07CB  00EB               	movwf	(__pdataBANK1+1)& (0+127)
   326     07CC  120A  118A  23AA  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   327     07D1  00EC               	movwf	(__pdataBANK1+2)& (0+127)
   328                           
   329                           ; Initialize objects allocated to BANK0
   330     07D2  1283               	bcf	3,5	;RP0=0, select bank0
   331     07D3  1303               	bcf	3,6	;RP1=0, select bank0
   332     07D4  120A  118A  23AB  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   333     07D9  00C7               	movwf	__pdataBANK0& (0+127)
   334     07DA  120A  118A  23AC  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   335     07DF  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   336     07E0  120A  118A  23AD  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   337     07E5  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   338     07E6  120A  118A  23AE  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   339     07EB  00CA               	movwf	(__pdataBANK0+3)& (0+127)
   340     07EC  120A  118A  23AF  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   341     07F1  00CB               	movwf	(__pdataBANK0+4)& (0+127)
   342                           
   343                           ; Clear objects allocated to BANK0
   344     07F2  01BD               	clrf	__pbssBANK0& (0+127)
   345     07F3  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   346     07F4  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   347     07F5  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   348     07F6  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   349     07F7  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   350     07F8  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   351     07F9  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   352     07FA  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   353     07FB  01C6               	clrf	(__pbssBANK0+9)& (0+127)
   354     07FC                     end_of_initialization:	
   355                           ;End of C runtime variable initialization code
   356                           
   357     07FC                     __end_of__initialization:
   358     07FC  0183               	clrf	3
   359     07FD  120A  118A  2E4F   	ljmp	_main	;jump to C main() function
   360                           
   361                           	psect	bssBANK0
   362     003D                     __pbssBANK0:
   363     003D                     char_to_binary_string@output:
   364     003D                     	ds	10
   365                           
   366                           	psect	dataBANK0
   367     0047                     __pdataBANK0:
   368     0047                     _RADIO_ADDR:
   369     0047                     	ds	5
   370                           
   371                           	psect	dataBANK1
   372     00EA                     __pdataBANK1:
   373     00EA                     main@F1424:
   374     00EA                     	ds	3
   375                           
   376                           	psect	cstackBANK1
   377     00A0                     __pcstackBANK1:
   378     00A0                     main@buffer:
   379                           
   380                           ; 64 bytes @ 0x0
   381     00A0                     	ds	64
   382     00E0                     main@data:
   383                           
   384                           ; 3 bytes @ 0x40
   385     00E0                     	ds	3
   386     00E3                     main@send_data:
   387                           
   388                           ; 3 bytes @ 0x43
   389     00E3                     	ds	3
   390     00E6                     main@i:
   391                           
   392                           ; 2 bytes @ 0x46
   393     00E6                     	ds	2
   394     00E8                     main@j:
   395                           
   396                           ; 2 bytes @ 0x48
   397     00E8                     	ds	2
   398                           
   399                           	psect	cstackCOMMON
   400     0070                     __pcstackCOMMON:
   401     0070                     ??_sprintf:
   402     0070                     ?_UART_write:	
   403                           ; 1 bytes @ 0x0
   404                           
   405     0070                     ??_UART_write:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0070                     ?_UART_write_text:	
   409                           ; 1 bytes @ 0x0
   410                           
   411     0070                     ?_SPI_init_master:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ??_SPI_init_master:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     ?_SPI_write:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     ??_SPI_write:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     ?_arrcpy:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0070                     ?_nrf_write_command:	
   427                           ; 1 bytes @ 0x0
   428                           
   429     0070                     ?_nrf_flush_rxtx:	
   430                           ; 1 bytes @ 0x0
   431                           
   432     0070                     ?_nrf_set_tx_mode:	
   433                           ; 1 bytes @ 0x0
   434                           
   435     0070                     ?_main:	
   436                           ; 1 bytes @ 0x0
   437                           
   438     0070                     ?___aldiv:	
   439                           ; 2 bytes @ 0x0
   440                           
   441     0070                     UART_write@data:	
   442                           ; 4 bytes @ 0x0
   443                           
   444     0070                     SPI_write@data:	
   445                           ; 1 bytes @ 0x0
   446                           
   447     0070                     arrcpy@src:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0070                     ___aldiv@divisor:	
   451                           ; 1 bytes @ 0x0
   452                           
   453                           
   454                           ; 4 bytes @ 0x0
   455     0070                     	ds	1
   456     0071                     ??_UART_write_text:
   457     0071                     ?_nrf_command:	
   458                           ; 1 bytes @ 0x1
   459                           
   460     0071                     ??_nrf_write_command:	
   461                           ; 1 bytes @ 0x1
   462                           
   463     0071                     arrcpy@len:	
   464                           ; 1 bytes @ 0x1
   465                           
   466     0071                     nrf_command@data:	
   467                           ; 1 bytes @ 0x1
   468                           
   469     0071                     nrf_write_command@NRF_command:	
   470                           ; 1 bytes @ 0x1
   471                           
   472                           
   473                           ; 1 bytes @ 0x1
   474     0071                     	ds	1
   475     0072                     ??_arrcpy:
   476     0072                     nrf_command@len:	
   477                           ; 1 bytes @ 0x2
   478                           
   479     0072                     nrf_write_command@status:	
   480                           ; 1 bytes @ 0x2
   481                           
   482     0072                     sprintf@ap:	
   483                           ; 1 bytes @ 0x2
   484                           
   485     0072                     UART_write_text@i:	
   486                           ; 1 bytes @ 0x2
   487                           
   488                           
   489                           ; 2 bytes @ 0x2
   490     0072                     	ds	1
   491     0073                     ??_nrf_command:
   492     0073                     sprintf@c:	
   493                           ; 1 bytes @ 0x3
   494                           
   495                           
   496                           ; 1 bytes @ 0x3
   497     0073                     	ds	1
   498     0074                     UART_write_text@text:
   499     0074                     arrcpy@dst:	
   500                           ; 1 bytes @ 0x4
   501                           
   502     0074                     sprintf@sp:	
   503                           ; 1 bytes @ 0x4
   504                           
   505     0074                     ___aldiv@dividend:	
   506                           ; 1 bytes @ 0x4
   507                           
   508                           
   509                           ; 4 bytes @ 0x4
   510     0074                     	ds	1
   511     0075                     arrcpy@i:
   512     0075                     nrf_command@NRF_command:	
   513                           ; 1 bytes @ 0x5
   514                           
   515                           
   516                           ; 1 bytes @ 0x5
   517     0075                     	ds	1
   518     0076                     nrf_command@status:
   519                           
   520                           ; 1 bytes @ 0x6
   521     0076                     	ds	1
   522     0077                     nrf_command@i:
   523                           
   524                           ; 1 bytes @ 0x7
   525     0077                     	ds	1
   526     0078                     ?_nrf_write_register:
   527     0078                     ?_nrf_read_register:	
   528                           ; 1 bytes @ 0x8
   529                           
   530     0078                     ??___aldiv:	
   531                           ; 1 bytes @ 0x8
   532                           
   533     0078                     nrf_write_register@data:	
   534                           ; 1 bytes @ 0x8
   535                           
   536     0078                     nrf_read_register@data:	
   537                           ; 1 bytes @ 0x8
   538                           
   539                           
   540                           ; 1 bytes @ 0x8
   541     0078                     	ds	1
   542     0079                     nrf_write_register@len:
   543     0079                     nrf_read_register@len:	
   544                           ; 1 bytes @ 0x9
   545                           
   546                           
   547                           ; 1 bytes @ 0x9
   548     0079                     	ds	1
   549     007A                     ??_nrf_write_register:
   550     007A                     ??_nrf_read_register:	
   551                           ; 1 bytes @ 0xA
   552                           
   553     007A                     nrf_write_register@reg:	
   554                           ; 1 bytes @ 0xA
   555                           
   556     007A                     nrf_read_register@reg:	
   557                           ; 1 bytes @ 0xA
   558                           
   559                           
   560                           ; 1 bytes @ 0xA
   561     007A                     	ds	1
   562     007B                     ?_nrf_write_payload:
   563     007B                     ??_nrf_flush_rxtx:	
   564                           ; 1 bytes @ 0xB
   565                           
   566     007B                     ??_nrf_set_tx_mode:	
   567                           ; 1 bytes @ 0xB
   568                           
   569     007B                     nrf_write_payload@len:	
   570                           ; 1 bytes @ 0xB
   571                           
   572     007B                     nrf_flush_rxtx@data:	
   573                           ; 1 bytes @ 0xB
   574                           
   575     007B                     nrf_set_tx_mode@config:	
   576                           ; 1 bytes @ 0xB
   577                           
   578                           
   579                           ; 1 bytes @ 0xB
   580     007B                     	ds	1
   581     007C                     ??_nrf_write_payload:
   582     007C                     ?_nrf_setup:	
   583                           ; 1 bytes @ 0xC
   584                           
   585     007C                     nrf_setup@payload_size:	
   586                           ; 1 bytes @ 0xC
   587                           
   588                           
   589                           ; 1 bytes @ 0xC
   590     007C                     	ds	1
   591     007D                     nrf_write_payload@data:
   592                           
   593                           ; 1 bytes @ 0xD
   594     007D                     	ds	1
   595     007E                     ??_nrf_send:
   596                           
   597                           	psect	cstackBANK0
   598     0020                     __pcstackBANK0:	
   599                           ; 1 bytes @ 0xE
   600                           
   601     0020                     ??_nrf_setup:
   602     0020                     ?_nrf_send:	
   603                           ; 1 bytes @ 0x0
   604                           
   605     0020                     ?_sprintf:	
   606                           ; 1 bytes @ 0x0
   607                           
   608     0020                     nrf_send@len:	
   609                           ; 2 bytes @ 0x0
   610                           
   611     0020                     sprintf@f:	
   612                           ; 1 bytes @ 0x0
   613                           
   614     0020                     ___aldiv@counter:	
   615                           ; 1 bytes @ 0x0
   616                           
   617                           
   618                           ; 1 bytes @ 0x0
   619     0020                     	ds	1
   620     0021                     nrf_send@stat:
   621     0021                     ___aldiv@sign:	
   622                           ; 1 bytes @ 0x1
   623                           
   624                           
   625                           ; 1 bytes @ 0x1
   626     0021                     	ds	1
   627     0022                     nrf_setup@addr:
   628     0022                     nrf_send@data:	
   629                           ; 1 bytes @ 0x2
   630                           
   631     0022                     ___aldiv@quotient:	
   632                           ; 1 bytes @ 0x2
   633                           
   634                           
   635                           ; 4 bytes @ 0x2
   636     0022                     	ds	1
   637     0023                     nrf_send@clear:
   638     0023                     nrf_setup@data:	
   639                           ; 1 bytes @ 0x3
   640                           
   641                           
   642                           ; 5 bytes @ 0x3
   643     0023                     	ds	3
   644     0026                     ?_UART_init:
   645     0026                     UART_init@baudrate:	
   646                           ; 1 bytes @ 0x6
   647                           
   648                           
   649                           ; 4 bytes @ 0x6
   650     0026                     	ds	4
   651     002A                     UART_init@_XTAL_FREQ:
   652                           
   653                           ; 4 bytes @ 0xA
   654     002A                     	ds	4
   655     002E                     ??_UART_init:
   656                           
   657                           ; 1 bytes @ 0xE
   658     002E                     	ds	12
   659     003A                     ??_main:
   660                           
   661                           ; 1 bytes @ 0x1A
   662     003A                     	ds	3
   663                           
   664                           	psect	maintext
   665     064F                     __pmaintext:	
   666 ;;
   667 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   668 ;;
   669 ;; *************** function _main *****************
   670 ;; Defined at:
   671 ;;		line 50 in file "main.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  j               2   72[BANK1 ] int 
   676 ;;  send_data       3   67[BANK1 ] unsigned char [3]
   677 ;;  i               2   70[BANK1 ] int 
   678 ;;  data            3   64[BANK1 ] unsigned char [3]
   679 ;;  buffer         64    0[BANK1 ] unsigned char [64]
   680 ;; Return value:  Size  Location     Type
   681 ;;                  2  177[None  ] int 
   682 ;; Registers used:
   683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : B00/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   689 ;;      Params:         0       0       0       0       0
   690 ;;      Locals:         0       0      74       0       0
   691 ;;      Temps:          0       3       0       0       0
   692 ;;      Totals:         0       3      74       0       0
   693 ;;Total ram usage:       77 bytes
   694 ;; Hardware stack levels required when called: 5
   695 ;; This function calls:
   696 ;;		_SPI_init_master
   697 ;;		_UART_init
   698 ;;		_UART_write_text
   699 ;;		_arrcpy
   700 ;;		_nrf_send
   701 ;;		_nrf_set_tx_mode
   702 ;;		_nrf_setup
   703 ;;		_sprintf
   704 ;; This function is called by:
   705 ;;		Startup code after reset
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709     064F                     _main:	
   710                           ;psect for function _main
   711                           
   712     064F                     l1496:	
   713                           ;incstack = 0
   714                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   715                           
   716                           
   717                           ;main.c: 53:     OSCCONbits.IRCF = 111;
   718     064F  3070               	movlw	112
   719     0650  1683               	bsf	3,5	;RP0=1, select bank1
   720     0651  1303               	bcf	3,6	;RP1=0, select bank1
   721     0652  048F               	iorwf	15,f	;volatile
   722     0653                     l1498:
   723                           
   724                           ;main.c: 56:     UART_init(9600, 8000000UL);
   725     0653  3000               	movlw	0
   726     0654  1283               	bcf	3,5	;RP0=0, select bank0
   727     0655  1303               	bcf	3,6	;RP1=0, select bank0
   728     0656  00A9               	movwf	UART_init@baudrate+3
   729     0657  3000               	movlw	0
   730     0658  00A8               	movwf	UART_init@baudrate+2
   731     0659  3025               	movlw	37
   732     065A  00A7               	movwf	UART_init@baudrate+1
   733     065B  3080               	movlw	128
   734     065C  00A6               	movwf	UART_init@baudrate
   735     065D  3000               	movlw	0
   736     065E  00AD               	movwf	UART_init@_XTAL_FREQ+3
   737     065F  307A               	movlw	122
   738     0660  00AC               	movwf	UART_init@_XTAL_FREQ+2
   739     0661  3012               	movlw	18
   740     0662  00AB               	movwf	UART_init@_XTAL_FREQ+1
   741     0663  3000               	movlw	0
   742     0664  00AA               	movwf	UART_init@_XTAL_FREQ
   743     0665  120A  118A  2547  120A  118A  	fcall	_UART_init
   744     066A                     l1500:
   745                           
   746                           ;main.c: 59:     { char buffer[64]; sprintf(buffer, "BOOTED\n"); UART_write_text(buffer)
      +                          ; };
   747     066A  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   748     066B  1283               	bcf	3,5	;RP0=0, select bank0
   749     066C  1303               	bcf	3,6	;RP1=0, select bank0
   750     066D  00A0               	movwf	sprintf@f
   751     066E  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   752     066F  120A  118A  24EE  120A  118A  	fcall	_sprintf
   753     0674                     l1502:
   754     0674  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   755     0675  120A  118A  244C  120A  118A  	fcall	_UART_write_text
   756     067A                     l1504:
   757                           
   758                           ;main.c: 62:     SPI_init_master();
   759     067A  120A  118A  23B0  120A  118A  	fcall	_SPI_init_master
   760     067F                     l1506:
   761                           
   762                           ;main.c: 65:     nrf_setup(RADIO_ADDR, 3);
   763     067F  3003               	movlw	3
   764     0680  00FC               	movwf	nrf_setup@payload_size
   765     0681  3047               	movlw	(low (_RADIO_ADDR| 0))& (0+255)
   766     0682  120A  118A  26FD  120A  118A  	fcall	_nrf_setup
   767     0687                     l1508:
   768                           
   769                           ;main.c: 69:     nrf_set_tx_mode();
   770     0687  120A  118A  246D  120A  118A  	fcall	_nrf_set_tx_mode
   771     068C                     l1510:
   772                           
   773                           ;main.c: 74:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   774     068C  3006               	movlw	6
   775     068D  1283               	bcf	3,5	;RP0=0, select bank0
   776     068E  1303               	bcf	3,6	;RP1=0, select bank0
   777     068F  00BB               	movwf	??_main+1
   778     0690  302F               	movlw	47
   779     0691  00BA               	movwf	??_main
   780     0692                     u687:
   781     0692  0BBA               	decfsz	??_main,f
   782     0693  2E92               	goto	u687
   783     0694  0BBB               	decfsz	??_main+1,f
   784     0695  2E92               	goto	u687
   785     0696  2E97               	nop2
   786     0697                     l1512:
   787                           
   788                           ;main.c: 76:     {;main.c: 79:         uint8_t data[3] = "AB";
   789     0697  1683               	bsf	3,5	;RP0=1, select bank1
   790     0698  1303               	bcf	3,6	;RP1=0, select bank1
   791     0699  086A               	movf	main@F1424^(0+128),w
   792     069A  00E0               	movwf	main@data^(0+128)
   793     069B  086B               	movf	(main@F1424+1)^(0+128),w
   794     069C  00E1               	movwf	(main@data+1)^(0+128)
   795     069D  086C               	movf	(main@F1424+2)^(0+128),w
   796     069E  00E2               	movwf	(main@data+2)^(0+128)
   797     069F                     l1514:
   798                           
   799                           ;main.c: 80:         for (int i = 0; i < 10; i++)
   800     069F  01E6               	clrf	main@i^(0+128)
   801     06A0  01E7               	clrf	(main@i+1)^(0+128)
   802     06A1                     l1520:
   803                           
   804                           ;main.c: 81:         {;main.c: 82:             uint8_t send_data[3];;main.c: 83:        
      +                               arrcpy(send_data, data, 3);
   805     06A1  30E0               	movlw	(low (main@data| 0))& (0+255)
   806     06A2  00F0               	movwf	arrcpy@src
   807     06A3  3003               	movlw	3
   808     06A4  00F1               	movwf	arrcpy@len
   809     06A5  30E3               	movlw	(low (main@send_data| 0))& (0+255)
   810     06A6  120A  118A  242F  120A  118A  	fcall	_arrcpy
   811     06AB                     l1522:
   812                           
   813                           ;main.c: 84:             for (int j = 0; j < 3 -1; j++)
   814     06AB  1683               	bsf	3,5	;RP0=1, select bank1
   815     06AC  1303               	bcf	3,6	;RP1=0, select bank1
   816     06AD  01E8               	clrf	main@j^(0+128)
   817     06AE  01E9               	clrf	(main@j+1)^(0+128)
   818     06AF                     l1528:
   819                           
   820                           ;main.c: 85:             {;main.c: 86:                 send_data[j] += i;
   821     06AF  1683               	bsf	3,5	;RP0=1, select bank1
   822     06B0  1303               	bcf	3,6	;RP1=0, select bank1
   823     06B1  0866               	movf	main@i^(0+128),w
   824     06B2  00FF               	movwf	btemp+1
   825     06B3  0868               	movf	main@j^(0+128),w
   826     06B4  3EE3               	addlw	(low (main@send_data| 0))& (0+255)
   827     06B5  0084               	movwf	4
   828     06B6  087F               	movf	btemp+1,w
   829     06B7  1383               	bcf	3,7	;select IRP bank1
   830     06B8  0780               	addwf	0,f
   831     06B9                     l1530:
   832                           
   833                           ;main.c: 87:             }
   834     06B9  3001               	movlw	1
   835     06BA  07E8               	addwf	main@j^(0+128),f
   836     06BB  1803               	skipnc
   837     06BC  0AE9               	incf	(main@j+1)^(0+128),f
   838     06BD  3000               	movlw	0
   839     06BE  07E9               	addwf	(main@j+1)^(0+128),f
   840     06BF                     l1532:
   841     06BF  0869               	movf	(main@j+1)^(0+128),w
   842     06C0  3A80               	xorlw	128
   843     06C1  00FF               	movwf	btemp+1
   844     06C2  3080               	movlw	128
   845     06C3  027F               	subwf	btemp+1,w
   846     06C4  1D03               	skipz
   847     06C5  2EC8               	goto	u665
   848     06C6  3002               	movlw	2
   849     06C7  0268               	subwf	main@j^(0+128),w
   850     06C8                     u665:
   851     06C8  1C03               	skipc
   852     06C9  2ECB               	goto	u661
   853     06CA  2ECC               	goto	u660
   854     06CB                     u661:
   855     06CB  2EAF               	goto	l1528
   856     06CC                     u660:
   857     06CC                     l1534:
   858                           
   859                           ;main.c: 88:             nrf_send(send_data, 3);
   860     06CC  3003               	movlw	3
   861     06CD  1283               	bcf	3,5	;RP0=0, select bank0
   862     06CE  1303               	bcf	3,6	;RP1=0, select bank0
   863     06CF  00A0               	movwf	nrf_send@len
   864     06D0  30E3               	movlw	(low (main@send_data| 0))& (0+255)
   865     06D1  120A  118A  2491  120A  118A  	fcall	_nrf_send
   866     06D6                     l1536:
   867                           
   868                           ;main.c: 89:             _delay((unsigned long)((500)*(8000000UL/4000.0)));
   869     06D6  3006               	movlw	6
   870     06D7  1283               	bcf	3,5	;RP0=0, select bank0
   871     06D8  1303               	bcf	3,6	;RP1=0, select bank0
   872     06D9  00BC               	movwf	??_main+2
   873     06DA  3013               	movlw	19
   874     06DB  00BB               	movwf	??_main+1
   875     06DC  30AD               	movlw	173
   876     06DD  00BA               	movwf	??_main
   877     06DE                     u697:
   878     06DE  0BBA               	decfsz	??_main,f
   879     06DF  2EDE               	goto	u697
   880     06E0  0BBB               	decfsz	??_main+1,f
   881     06E1  2EDE               	goto	u697
   882     06E2  0BBC               	decfsz	??_main+2,f
   883     06E3  2EDE               	goto	u697
   884     06E4                     l1538:
   885                           
   886                           ;main.c: 90:         }
   887     06E4  3001               	movlw	1
   888     06E5  1683               	bsf	3,5	;RP0=1, select bank1
   889     06E6  1303               	bcf	3,6	;RP1=0, select bank1
   890     06E7  07E6               	addwf	main@i^(0+128),f
   891     06E8  1803               	skipnc
   892     06E9  0AE7               	incf	(main@i+1)^(0+128),f
   893     06EA  3000               	movlw	0
   894     06EB  07E7               	addwf	(main@i+1)^(0+128),f
   895     06EC                     l1540:
   896     06EC  0867               	movf	(main@i+1)^(0+128),w
   897     06ED  3A80               	xorlw	128
   898     06EE  00FF               	movwf	btemp+1
   899     06EF  3080               	movlw	128
   900     06F0  027F               	subwf	btemp+1,w
   901     06F1  1D03               	skipz
   902     06F2  2EF5               	goto	u675
   903     06F3  300A               	movlw	10
   904     06F4  0266               	subwf	main@i^(0+128),w
   905     06F5                     u675:
   906     06F5  1C03               	skipc
   907     06F6  2EF8               	goto	u671
   908     06F7  2EF9               	goto	u670
   909     06F8                     u671:
   910     06F8  2EA1               	goto	l1520
   911     06F9                     u670:
   912     06F9  2E97               	goto	l1512
   913     06FA  120A  118A  2800   	ljmp	start
   914     06FD                     __end_of_main:
   915                           
   916                           	psect	text1
   917     04EE                     __ptext1:	
   918 ;; *************** function _sprintf *****************
   919 ;; Defined at:
   920 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  sp              1    wreg     PTR unsigned char 
   923 ;;		 -> main@buffer(64), char_to_binary_string@output(10), 
   924 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   925 ;;		 -> STR_2(8), STR_1(18), 
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  sp              1    4[COMMON] PTR unsigned char 
   928 ;;		 -> main@buffer(64), char_to_binary_string@output(10), 
   929 ;;  tmpval          4    0        struct .
   930 ;;  cp              2    0        PTR const unsigned char 
   931 ;;  len             2    0        unsigned int 
   932 ;;  val             2    0        unsigned int 
   933 ;;  c               1    3[COMMON] unsigned char 
   934 ;;  ap              1    2[COMMON] PTR void [1]
   935 ;;		 -> ?_sprintf(2), 
   936 ;;  flag            1    0        unsigned char 
   937 ;;  prec            1    0        char 
   938 ;; Return value:  Size  Location     Type
   939 ;;                  2    0[BANK0 ] int 
   940 ;; Registers used:
   941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   947 ;;      Params:         0      17       0       0       0
   948 ;;      Locals:         3       0       0       0       0
   949 ;;      Temps:          2       0       0       0       0
   950 ;;      Totals:         5      17       0       0       0
   951 ;;Total ram usage:       22 bytes
   952 ;; Hardware stack levels used: 2
   953 ;; This function calls:
   954 ;;		Nothing
   955 ;; This function is called by:
   956 ;;		_main
   957 ;;		_char_to_binary_string
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961     04EE                     _sprintf:	
   962                           ;psect for function _sprintf
   963                           
   964                           
   965                           ;incstack = 0
   966                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   967                           ;sprintf@sp stored from wreg
   968     04EE  00F4               	movwf	sprintf@sp
   969     04EF                     l1388:
   970                           
   971                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   972     04EF  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   973     04F0  00F2               	movwf	sprintf@ap
   974                           
   975                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   976     04F1  2D30               	goto	l1408
   977     04F2                     l1390:
   978                           
   979                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   980     04F2  3025               	movlw	37
   981     04F3  0673               	xorwf	sprintf@c,w
   982     04F4  1903               	btfsc	3,2
   983     04F5  2CF7               	goto	u551
   984     04F6  2CF8               	goto	u550
   985     04F7                     u551:
   986     04F7  2D02               	goto	l1396
   987     04F8                     u550:
   988     04F8                     l1392:
   989                           
   990                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   991     04F8  0874               	movf	sprintf@sp,w
   992     04F9  0084               	movwf	4
   993     04FA  0873               	movf	sprintf@c,w
   994     04FB  1383               	bcf	3,7	;select IRP bank0
   995     04FC  0080               	movwf	0
   996     04FD                     l1394:
   997     04FD  3001               	movlw	1
   998     04FE  00FF               	movwf	btemp+1
   999     04FF  087F               	movf	btemp+1,w
  1000     0500  07F4               	addwf	sprintf@sp,f
  1001                           
  1002                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
  1003     0501  2D30               	goto	l1408
  1004     0502                     l1396:
  1005                           
  1006                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1007     0502  2D16               	goto	l1406
  1008     0503                     l1398:
  1009                           
  1010                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
  1011     0503  0872               	movf	sprintf@ap,w
  1012     0504  0084               	movwf	4
  1013     0505  1383               	bcf	3,7	;select IRP bank0
  1014     0506  0800               	movf	0,w
  1015     0507  00F3               	movwf	sprintf@c
  1016     0508                     l1400:
  1017     0508  3002               	movlw	2
  1018     0509  00FF               	movwf	btemp+1
  1019     050A  087F               	movf	btemp+1,w
  1020     050B  07F2               	addwf	sprintf@ap,f
  1021     050C                     l1402:
  1022                           
  1023                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  1024     050C  0874               	movf	sprintf@sp,w
  1025     050D  0084               	movwf	4
  1026     050E  0873               	movf	sprintf@c,w
  1027     050F  1383               	bcf	3,7	;select IRP bank0
  1028     0510  0080               	movwf	0
  1029     0511  3001               	movlw	1
  1030     0512  00FF               	movwf	btemp+1
  1031     0513  087F               	movf	btemp+1,w
  1032     0514  07F4               	addwf	sprintf@sp,f
  1033                           
  1034                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 836:    continue;
  1035     0515  2D30               	goto	l1408
  1036     0516                     l1406:
  1037     0516  3001               	movlw	1
  1038     0517  07A0               	addwf	sprintf@f,f
  1039     0518  30FF               	movlw	-1
  1040     0519  0720               	addwf	sprintf@f,w
  1041     051A  0084               	movwf	4
  1042     051B  120A  118A  2003  120A  118A  	fcall	stringdir
  1043     0520  00F3               	movwf	sprintf@c
  1044     0521  00F0               	movwf	??_sprintf
  1045     0522  01F1               	clrf	??_sprintf+1
  1046                           
  1047                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1048                           ; Switch size 1, requested type "simple"
  1049                           ; Number of cases is 1, Range of values is 0 to 0
  1050                           ; switch strategies available:
  1051                           ; Name         Instructions Cycles
  1052                           ; simple_byte            4     3 (average)
  1053                           ; direct_byte           11     8 (fixed)
  1054                           ; jumptable            260     6 (fixed)
  1055                           ;	Chosen strategy is simple_byte
  1056     0523  0871               	movf	??_sprintf+1,w
  1057     0524  3A00               	xorlw	0	; case 0
  1058     0525  1903               	skipnz
  1059     0526  2D28               	goto	l1572
  1060     0527  2D0C               	goto	l1402
  1061     0528                     l1572:
  1062                           
  1063                           ; Switch size 1, requested type "simple"
  1064                           ; Number of cases is 2, Range of values is 0 to 99
  1065                           ; switch strategies available:
  1066                           ; Name         Instructions Cycles
  1067                           ; simple_byte            7     4 (average)
  1068                           ; jumptable            260     6 (fixed)
  1069                           ;	Chosen strategy is simple_byte
  1070     0528  0870               	movf	??_sprintf,w
  1071     0529  3A00               	xorlw	0	; case 0
  1072     052A  1903               	skipnz
  1073     052B  2D42               	goto	l1410
  1074     052C  3A63               	xorlw	99	; case 99
  1075     052D  1903               	skipnz
  1076     052E  2D03               	goto	l1398
  1077     052F  2D0C               	goto	l1402
  1078     0530                     l1408:
  1079                           
  1080                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1081     0530  3001               	movlw	1
  1082     0531  1283               	bcf	3,5	;RP0=0, select bank0
  1083     0532  1303               	bcf	3,6	;RP1=0, select bank0
  1084     0533  07A0               	addwf	sprintf@f,f
  1085     0534  30FF               	movlw	-1
  1086     0535  0720               	addwf	sprintf@f,w
  1087     0536  0084               	movwf	4
  1088     0537  120A  118A  2003  120A  118A  	fcall	stringdir
  1089     053C  00F3               	movwf	sprintf@c
  1090     053D  0873               	movf	sprintf@c,w
  1091     053E  1D03               	btfss	3,2
  1092     053F  2D41               	goto	u561
  1093     0540  2D42               	goto	u560
  1094     0541                     u561:
  1095     0541  2CF2               	goto	l1390
  1096     0542                     u560:
  1097     0542                     l1410:
  1098                           
  1099                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1100     0542  0874               	movf	sprintf@sp,w
  1101     0543  0084               	movwf	4
  1102     0544  1383               	bcf	3,7	;select IRP bank0
  1103     0545  0180               	clrf	0
  1104     0546                     l286:
  1105     0546  0008               	return
  1106     0547                     __end_of_sprintf:
  1107                           
  1108                           	psect	text2
  1109     06FD                     __ptext2:	
  1110 ;; *************** function _nrf_setup *****************
  1111 ;; Defined at:
  1112 ;;		line 162 in file "./nrf24l01.h"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  addr            1    wreg     PTR unsigned char 
  1115 ;;		 -> RADIO_ADDR(5), 
  1116 ;;  payload_size    1   12[COMMON] unsigned char 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  addr            1    2[BANK0 ] PTR unsigned char 
  1119 ;;		 -> RADIO_ADDR(5), 
  1120 ;;  data            5    3[BANK0 ] unsigned char [5]
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1130 ;;      Params:         1       0       0       0       0
  1131 ;;      Locals:         0       6       0       0       0
  1132 ;;      Temps:          0       2       0       0       0
  1133 ;;      Totals:         1       8       0       0       0
  1134 ;;Total ram usage:        9 bytes
  1135 ;; Hardware stack levels used: 1
  1136 ;; Hardware stack levels required when called: 4
  1137 ;; This function calls:
  1138 ;;		_arrcpy
  1139 ;;		_nrf_flush_rxtx
  1140 ;;		_nrf_write_register
  1141 ;; This function is called by:
  1142 ;;		_main
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146     06FD                     _nrf_setup:	
  1147                           ;psect for function _nrf_setup
  1148                           
  1149                           
  1150                           ;incstack = 0
  1151                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1152                           ;nrf_setup@addr stored from wreg
  1153     06FD  1283               	bcf	3,5	;RP0=0, select bank0
  1154     06FE  1303               	bcf	3,6	;RP1=0, select bank0
  1155     06FF  00A2               	movwf	nrf_setup@addr
  1156     0700                     l1344:
  1157                           
  1158                           ;./nrf24l01.h: 162:     void nrf_setup(uint8_t *addr, uint8_t payload_size);./nrf24l01.h
      +                          : 163:     {;./nrf24l01.h: 165:         TRISD3 = 0;
  1159     0700  1683               	bsf	3,5	;RP0=1, select bank1
  1160     0701  1303               	bcf	3,6	;RP1=0, select bank1
  1161     0702  1188               	bcf	8,3	;volatile
  1162                           
  1163                           ;./nrf24l01.h: 166:         TRISD2 = 0;
  1164     0703  1108               	bcf	8,2	;volatile
  1165     0704                     l1346:
  1166                           
  1167                           ;./nrf24l01.h: 168:         _delay((unsigned long)((2)*(8000000UL/4000.0)));
  1168     0704  3006               	movlw	6
  1169     0705  1283               	bcf	3,5	;RP0=0, select bank0
  1170     0706  1303               	bcf	3,6	;RP1=0, select bank0
  1171     0707  00A1               	movwf	??_nrf_setup+1
  1172     0708  302F               	movlw	47
  1173     0709  00A0               	movwf	??_nrf_setup
  1174     070A                     u707:
  1175     070A  0BA0               	decfsz	??_nrf_setup,f
  1176     070B  2F0A               	goto	u707
  1177     070C  0BA1               	decfsz	??_nrf_setup+1,f
  1178     070D  2F0A               	goto	u707
  1179     070E  2F0F               	nop2
  1180     070F                     l1348:
  1181                           
  1182                           ;./nrf24l01.h: 170:         RD3 = 1;
  1183     070F  1283               	bcf	3,5	;RP0=0, select bank0
  1184     0710  1303               	bcf	3,6	;RP1=0, select bank0
  1185     0711  1588               	bsf	8,3	;volatile
  1186     0712                     l1350:
  1187                           
  1188                           ;./nrf24l01.h: 171:         RD2 = 0;
  1189     0712  1108               	bcf	8,2	;volatile
  1190                           
  1191                           ;./nrf24l01.h: 173:         _delay((unsigned long)((2)*(8000000UL/4000.0)));
  1192     0713  3006               	movlw	6
  1193     0714  1283               	bcf	3,5	;RP0=0, select bank0
  1194     0715  1303               	bcf	3,6	;RP1=0, select bank0
  1195     0716  00A1               	movwf	??_nrf_setup+1
  1196     0717  302F               	movlw	47
  1197     0718  00A0               	movwf	??_nrf_setup
  1198     0719                     u717:
  1199     0719  0BA0               	decfsz	??_nrf_setup,f
  1200     071A  2F19               	goto	u717
  1201     071B  0BA1               	decfsz	??_nrf_setup+1,f
  1202     071C  2F19               	goto	u717
  1203     071D  2F1E               	nop2
  1204                           
  1205                           ;./nrf24l01.h: 175:         uint8_t data[5];;./nrf24l01.h: 177:         data[0] = 0x0B;
  1206     071E  300B               	movlw	11
  1207     071F  1283               	bcf	3,5	;RP0=0, select bank0
  1208     0720  1303               	bcf	3,6	;RP1=0, select bank0
  1209     0721  00A3               	movwf	nrf_setup@data
  1210     0722                     l1352:
  1211                           
  1212                           ;./nrf24l01.h: 178:         nrf_write_register(0x00, &data, 1);
  1213     0722  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1214     0723  00F8               	movwf	nrf_write_register@data
  1215     0724  01F9               	clrf	nrf_write_register@len
  1216     0725  0AF9               	incf	nrf_write_register@len,f
  1217     0726  3000               	movlw	0
  1218     0727  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1219     072C                     l1354:
  1220                           
  1221                           ;./nrf24l01.h: 179:         data[0] = 0x00;
  1222     072C  1283               	bcf	3,5	;RP0=0, select bank0
  1223     072D  1303               	bcf	3,6	;RP1=0, select bank0
  1224     072E  01A3               	clrf	nrf_setup@data
  1225     072F                     l1356:
  1226                           
  1227                           ;./nrf24l01.h: 180:         nrf_write_register(0x01, &data, 1);
  1228     072F  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1229     0730  00F8               	movwf	nrf_write_register@data
  1230     0731  01F9               	clrf	nrf_write_register@len
  1231     0732  0AF9               	incf	nrf_write_register@len,f
  1232     0733  3001               	movlw	1
  1233     0734  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1234     0739                     l1358:
  1235                           
  1236                           ;./nrf24l01.h: 181:         data[0] = 0x01;
  1237     0739  1283               	bcf	3,5	;RP0=0, select bank0
  1238     073A  1303               	bcf	3,6	;RP1=0, select bank0
  1239     073B  01A3               	clrf	nrf_setup@data
  1240     073C  0AA3               	incf	nrf_setup@data,f
  1241     073D                     l1360:
  1242                           
  1243                           ;./nrf24l01.h: 182:         nrf_write_register(0x02, &data, 1);
  1244     073D  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1245     073E  00F8               	movwf	nrf_write_register@data
  1246     073F  01F9               	clrf	nrf_write_register@len
  1247     0740  0AF9               	incf	nrf_write_register@len,f
  1248     0741  3002               	movlw	2
  1249     0742  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1250     0747                     l1362:
  1251                           
  1252                           ;./nrf24l01.h: 183:         data[0] = 0x01;
  1253     0747  1283               	bcf	3,5	;RP0=0, select bank0
  1254     0748  1303               	bcf	3,6	;RP1=0, select bank0
  1255     0749  01A3               	clrf	nrf_setup@data
  1256     074A  0AA3               	incf	nrf_setup@data,f
  1257     074B                     l1364:
  1258                           
  1259                           ;./nrf24l01.h: 184:         nrf_write_register(0x03, &data, 1);
  1260     074B  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1261     074C  00F8               	movwf	nrf_write_register@data
  1262     074D  01F9               	clrf	nrf_write_register@len
  1263     074E  0AF9               	incf	nrf_write_register@len,f
  1264     074F  3003               	movlw	3
  1265     0750  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1266     0755                     l1366:
  1267                           
  1268                           ;./nrf24l01.h: 185:         data[0] = 0x00;
  1269     0755  1283               	bcf	3,5	;RP0=0, select bank0
  1270     0756  1303               	bcf	3,6	;RP1=0, select bank0
  1271     0757  01A3               	clrf	nrf_setup@data
  1272     0758                     l1368:
  1273                           
  1274                           ;./nrf24l01.h: 186:         nrf_write_register(0x04, &data, 1);
  1275     0758  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1276     0759  00F8               	movwf	nrf_write_register@data
  1277     075A  01F9               	clrf	nrf_write_register@len
  1278     075B  0AF9               	incf	nrf_write_register@len,f
  1279     075C  3004               	movlw	4
  1280     075D  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1281     0762                     l1370:
  1282                           
  1283                           ;./nrf24l01.h: 187:         data[0] = 0x01;
  1284     0762  1283               	bcf	3,5	;RP0=0, select bank0
  1285     0763  1303               	bcf	3,6	;RP1=0, select bank0
  1286     0764  01A3               	clrf	nrf_setup@data
  1287     0765  0AA3               	incf	nrf_setup@data,f
  1288     0766                     l1372:
  1289                           
  1290                           ;./nrf24l01.h: 188:         nrf_write_register(0x05, &data, 1);
  1291     0766  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1292     0767  00F8               	movwf	nrf_write_register@data
  1293     0768  01F9               	clrf	nrf_write_register@len
  1294     0769  0AF9               	incf	nrf_write_register@len,f
  1295     076A  3005               	movlw	5
  1296     076B  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1297                           
  1298                           ;./nrf24l01.h: 189:         data[0] = 0x26;
  1299     0770  3026               	movlw	38
  1300     0771  1283               	bcf	3,5	;RP0=0, select bank0
  1301     0772  1303               	bcf	3,6	;RP1=0, select bank0
  1302     0773  00A3               	movwf	nrf_setup@data
  1303     0774                     l1374:
  1304                           
  1305                           ;./nrf24l01.h: 190:         nrf_write_register(0x06, &data, 1);
  1306     0774  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1307     0775  00F8               	movwf	nrf_write_register@data
  1308     0776  01F9               	clrf	nrf_write_register@len
  1309     0777  0AF9               	incf	nrf_write_register@len,f
  1310     0778  3006               	movlw	6
  1311     0779  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1312     077E                     l1376:
  1313                           
  1314                           ;./nrf24l01.h: 191:         data[0] = payload_size;
  1315     077E  087C               	movf	nrf_setup@payload_size,w
  1316     077F  1283               	bcf	3,5	;RP0=0, select bank0
  1317     0780  1303               	bcf	3,6	;RP1=0, select bank0
  1318     0781  00A3               	movwf	nrf_setup@data
  1319                           
  1320                           ;./nrf24l01.h: 192:         nrf_write_register(0x11, &data, 1);
  1321     0782  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1322     0783  00F8               	movwf	nrf_write_register@data
  1323     0784  01F9               	clrf	nrf_write_register@len
  1324     0785  0AF9               	incf	nrf_write_register@len,f
  1325     0786  3011               	movlw	17
  1326     0787  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1327                           
  1328                           ;./nrf24l01.h: 194:         arrcpy(data, addr, sizeof(addr));
  1329     078C  1283               	bcf	3,5	;RP0=0, select bank0
  1330     078D  1303               	bcf	3,6	;RP1=0, select bank0
  1331     078E  0822               	movf	nrf_setup@addr,w
  1332     078F  00F0               	movwf	arrcpy@src
  1333     0790  01F1               	clrf	arrcpy@len
  1334     0791  0AF1               	incf	arrcpy@len,f
  1335     0792  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1336     0793  120A  118A  242F  120A  118A  	fcall	_arrcpy
  1337                           
  1338                           ;./nrf24l01.h: 195:         nrf_write_register(0x0A, data, sizeof(addr));
  1339     0798  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1340     0799  00F8               	movwf	nrf_write_register@data
  1341     079A  01F9               	clrf	nrf_write_register@len
  1342     079B  0AF9               	incf	nrf_write_register@len,f
  1343     079C  300A               	movlw	10
  1344     079D  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1345                           
  1346                           ;./nrf24l01.h: 197:         arrcpy(data, addr, sizeof(addr));
  1347     07A2  1283               	bcf	3,5	;RP0=0, select bank0
  1348     07A3  1303               	bcf	3,6	;RP1=0, select bank0
  1349     07A4  0822               	movf	nrf_setup@addr,w
  1350     07A5  00F0               	movwf	arrcpy@src
  1351     07A6  01F1               	clrf	arrcpy@len
  1352     07A7  0AF1               	incf	arrcpy@len,f
  1353     07A8  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1354     07A9  120A  118A  242F  120A  118A  	fcall	_arrcpy
  1355                           
  1356                           ;./nrf24l01.h: 198:         nrf_write_register(0x10, data, sizeof(addr));
  1357     07AE  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1358     07AF  00F8               	movwf	nrf_write_register@data
  1359     07B0  01F9               	clrf	nrf_write_register@len
  1360     07B1  0AF9               	incf	nrf_write_register@len,f
  1361     07B2  3010               	movlw	16
  1362     07B3  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1363                           
  1364                           ;./nrf24l01.h: 200:         nrf_flush_rxtx();
  1365     07B8  120A  118A  2416  120A  118A  	fcall	_nrf_flush_rxtx
  1366     07BD                     l115:
  1367     07BD  0008               	return
  1368     07BE                     __end_of_nrf_setup:
  1369                           
  1370                           	psect	text3
  1371     0416                     __ptext3:	
  1372 ;; *************** function _nrf_flush_rxtx *****************
  1373 ;; Defined at:
  1374 ;;		line 152 in file "./nrf24l01.h"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;		None
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;  data            1   11[COMMON] unsigned char 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1388 ;;      Params:         0       0       0       0       0
  1389 ;;      Locals:         1       0       0       0       0
  1390 ;;      Temps:          0       0       0       0       0
  1391 ;;      Totals:         1       0       0       0       0
  1392 ;;Total ram usage:        1 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; Hardware stack levels required when called: 3
  1395 ;; This function calls:
  1396 ;;		_nrf_write_command
  1397 ;;		_nrf_write_register
  1398 ;; This function is called by:
  1399 ;;		_nrf_setup
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403     0416                     _nrf_flush_rxtx:	
  1404                           ;psect for function _nrf_flush_rxtx
  1405                           
  1406     0416                     l1248:	
  1407                           ;incstack = 0
  1408                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1409                           
  1410                           
  1411                           ;./nrf24l01.h: 154:         uint8_t data = 0b01110000;
  1412     0416  3070               	movlw	112
  1413     0417  00FB               	movwf	nrf_flush_rxtx@data
  1414     0418                     l1250:
  1415                           
  1416                           ;./nrf24l01.h: 155:         nrf_write_register(0x07, &data, 1);
  1417     0418  307B               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1418     0419  00F8               	movwf	nrf_write_register@data
  1419     041A  01F9               	clrf	nrf_write_register@len
  1420     041B  0AF9               	incf	nrf_write_register@len,f
  1421     041C  3007               	movlw	7
  1422     041D  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1423     0422                     l1252:
  1424                           
  1425                           ;./nrf24l01.h: 156:         nrf_write_command(0b11100001);
  1426     0422  30E1               	movlw	225
  1427     0423  120A  118A  23F0  120A  118A  	fcall	_nrf_write_command
  1428     0428                     l1254:
  1429                           
  1430                           ;./nrf24l01.h: 157:         nrf_write_command(0b11100010);
  1431     0428  30E2               	movlw	226
  1432     0429  120A  118A  23F0  120A  118A  	fcall	_nrf_write_command
  1433     042E                     l112:
  1434     042E  0008               	return
  1435     042F                     __end_of_nrf_flush_rxtx:
  1436                           
  1437                           	psect	text4
  1438     042F                     __ptext4:	
  1439 ;; *************** function _arrcpy *****************
  1440 ;; Defined at:
  1441 ;;		line 95 in file "./nrf24l01.h"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;  dst             1    wreg     PTR unsigned char 
  1444 ;;		 -> main@send_data(3), nrf_setup@data(5), 
  1445 ;;  src             1    0[COMMON] PTR unsigned char 
  1446 ;;		 -> main@data(3), RADIO_ADDR(5), 
  1447 ;;  len             1    1[COMMON] unsigned char 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  dst             1    4[COMMON] PTR unsigned char 
  1450 ;;		 -> main@send_data(3), nrf_setup@data(5), 
  1451 ;;  i               1    5[COMMON] unsigned char 
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  1    wreg      void 
  1454 ;; Registers used:
  1455 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1461 ;;      Params:         2       0       0       0       0
  1462 ;;      Locals:         2       0       0       0       0
  1463 ;;      Temps:          2       0       0       0       0
  1464 ;;      Totals:         6       0       0       0       0
  1465 ;;Total ram usage:        6 bytes
  1466 ;; Hardware stack levels used: 1
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_nrf_setup
  1471 ;;		_main
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475     042F                     _arrcpy:	
  1476                           ;psect for function _arrcpy
  1477                           
  1478                           
  1479                           ;incstack = 0
  1480                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0+btemp+1]
  1481                           ;arrcpy@dst stored from wreg
  1482     042F  00F4               	movwf	arrcpy@dst
  1483     0430                     l1232:
  1484                           
  1485                           ;./nrf24l01.h: 95:     void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);./nrf24l01.h
      +                          : 96:     {;./nrf24l01.h: 97:         for (uint8_t i = 0; i < len; i++)
  1486     0430  01F5               	clrf	arrcpy@i
  1487     0431  2C45               	goto	l1238
  1488     0432                     l1234:
  1489                           
  1490                           ;./nrf24l01.h: 98:         {;./nrf24l01.h: 99:             dst[i] = src[i];
  1491     0432  0875               	movf	arrcpy@i,w
  1492     0433  0770               	addwf	arrcpy@src,w
  1493     0434  00F2               	movwf	??_arrcpy
  1494     0435  0872               	movf	??_arrcpy,w
  1495     0436  0084               	movwf	4
  1496     0437  1383               	bcf	3,7	;select IRP bank0
  1497     0438  0800               	movf	0,w
  1498     0439  00FF               	movwf	btemp+1
  1499     043A  0875               	movf	arrcpy@i,w
  1500     043B  0774               	addwf	arrcpy@dst,w
  1501     043C  00F3               	movwf	??_arrcpy+1
  1502     043D  0873               	movf	??_arrcpy+1,w
  1503     043E  0084               	movwf	4
  1504     043F  087F               	movf	btemp+1,w
  1505     0440  0080               	movwf	0
  1506     0441                     l1236:
  1507                           
  1508                           ;./nrf24l01.h: 100:         }
  1509     0441  3001               	movlw	1
  1510     0442  00FF               	movwf	btemp+1
  1511     0443  087F               	movf	btemp+1,w
  1512     0444  07F5               	addwf	arrcpy@i,f
  1513     0445                     l1238:
  1514     0445  0871               	movf	arrcpy@len,w
  1515     0446  0275               	subwf	arrcpy@i,w
  1516     0447  1C03               	skipc
  1517     0448  2C4A               	goto	u381
  1518     0449  2C4B               	goto	u380
  1519     044A                     u381:
  1520     044A  2C32               	goto	l1234
  1521     044B                     u380:
  1522     044B                     l91:
  1523     044B  0008               	return
  1524     044C                     __end_of_arrcpy:
  1525                           
  1526                           	psect	text5
  1527     0491                     __ptext5:	
  1528 ;; *************** function _nrf_send *****************
  1529 ;; Defined at:
  1530 ;;		line 243 in file "./nrf24l01.h"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  data            1    wreg     PTR unsigned char 
  1533 ;;		 -> main@send_data(3), 
  1534 ;;  len             1    0[BANK0 ] unsigned char 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;  data            1    2[BANK0 ] PTR unsigned char 
  1537 ;;		 -> main@send_data(3), 
  1538 ;;  clear           1    3[BANK0 ] unsigned char 
  1539 ;;  stat            1    1[BANK0 ] unsigned char 
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1549 ;;      Params:         0       1       0       0       0
  1550 ;;      Locals:         0       3       0       0       0
  1551 ;;      Temps:          0       0       0       0       0
  1552 ;;      Totals:         0       4       0       0       0
  1553 ;;Total ram usage:        4 bytes
  1554 ;; Hardware stack levels used: 1
  1555 ;; Hardware stack levels required when called: 4
  1556 ;; This function calls:
  1557 ;;		_nrf_set_tx_mode
  1558 ;;		_nrf_write_command
  1559 ;;		_nrf_write_payload
  1560 ;;		_nrf_write_register
  1561 ;; This function is called by:
  1562 ;;		_main
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566     0491                     _nrf_send:	
  1567                           ;psect for function _nrf_send
  1568                           
  1569                           
  1570                           ;incstack = 0
  1571                           ; Regs used in _nrf_send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1572                           ;nrf_send@data stored from wreg
  1573     0491  1283               	bcf	3,5	;RP0=0, select bank0
  1574     0492  1303               	bcf	3,6	;RP1=0, select bank0
  1575     0493  00A2               	movwf	nrf_send@data
  1576     0494                     l1378:
  1577                           
  1578                           ;./nrf24l01.h: 243:     void nrf_send(uint8_t *data, uint8_t len);./nrf24l01.h: 244:    
      +                           {;./nrf24l01.h: 245:         nrf_set_tx_mode();
  1579     0494  120A  118A  246D  120A  118A  	fcall	_nrf_set_tx_mode
  1580                           
  1581                           ;./nrf24l01.h: 246:         nrf_write_payload(data, len);
  1582     0499  1283               	bcf	3,5	;RP0=0, select bank0
  1583     049A  1303               	bcf	3,6	;RP1=0, select bank0
  1584     049B  0820               	movf	nrf_send@len,w
  1585     049C  00FB               	movwf	nrf_write_payload@len
  1586     049D  0822               	movf	nrf_send@data,w
  1587     049E  120A  118A  2400  120A  118A  	fcall	_nrf_write_payload
  1588     04A3                     l1380:
  1589                           
  1590                           ;./nrf24l01.h: 251:         {;./nrf24l01.h: 252:             stat = nrf_write_command(0b
      +                          11111111);
  1591     04A3  30FF               	movlw	255
  1592     04A4  120A  118A  23F0  120A  118A  	fcall	_nrf_write_command
  1593     04A9  1283               	bcf	3,5	;RP0=0, select bank0
  1594     04AA  1303               	bcf	3,6	;RP1=0, select bank0
  1595     04AB  00A1               	movwf	nrf_send@stat
  1596     04AC                     l1382:
  1597                           
  1598                           ;./nrf24l01.h: 253:         } while ((stat & 0x20) == 0);
  1599     04AC  1EA1               	btfss	nrf_send@stat,5
  1600     04AD  2CAF               	goto	u541
  1601     04AE  2CB0               	goto	u540
  1602     04AF                     u541:
  1603     04AF  2CA3               	goto	l1380
  1604     04B0                     u540:
  1605     04B0                     l1384:
  1606                           
  1607                           ;./nrf24l01.h: 256:         uint8_t clear = 0x20;
  1608     04B0  3020               	movlw	32
  1609     04B1  00A3               	movwf	nrf_send@clear
  1610     04B2                     l1386:
  1611                           
  1612                           ;./nrf24l01.h: 257:         nrf_write_register(0x07, &clear, 1);
  1613     04B2  3023               	movlw	(low (nrf_send@clear| 0))& (0+255)
  1614     04B3  00F8               	movwf	nrf_write_register@data
  1615     04B4  01F9               	clrf	nrf_write_register@len
  1616     04B5  0AF9               	incf	nrf_write_register@len,f
  1617     04B6  3007               	movlw	7
  1618     04B7  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1619     04BC                     l131:
  1620     04BC  0008               	return
  1621     04BD                     __end_of_nrf_send:
  1622                           
  1623                           	psect	text6
  1624     0400                     __ptext6:	
  1625 ;; *************** function _nrf_write_payload *****************
  1626 ;; Defined at:
  1627 ;;		line 131 in file "./nrf24l01.h"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  data            1    wreg     PTR unsigned char 
  1630 ;;		 -> main@send_data(3), 
  1631 ;;  len             1   11[COMMON] unsigned char 
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;  data            1   13[COMMON] PTR unsigned char 
  1634 ;;		 -> main@send_data(3), 
  1635 ;;  status          1    0        unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      unsigned char 
  1638 ;; Registers used:
  1639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1645 ;;      Params:         1       0       0       0       0
  1646 ;;      Locals:         1       0       0       0       0
  1647 ;;      Temps:          1       0       0       0       0
  1648 ;;      Totals:         3       0       0       0       0
  1649 ;;Total ram usage:        3 bytes
  1650 ;; Hardware stack levels used: 1
  1651 ;; Hardware stack levels required when called: 3
  1652 ;; This function calls:
  1653 ;;		_nrf_write_register
  1654 ;; This function is called by:
  1655 ;;		_nrf_send
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659     0400                     _nrf_write_payload:	
  1660                           ;psect for function _nrf_write_payload
  1661                           
  1662                           
  1663                           ;incstack = 0
  1664                           ; Regs used in _nrf_write_payload: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1665                           ;nrf_write_payload@data stored from wreg
  1666     0400  00FD               	movwf	nrf_write_payload@data
  1667     0401                     l1240:
  1668     0401  087D               	movf	nrf_write_payload@data,w
  1669     0402  00F8               	movwf	nrf_write_register@data
  1670     0403  087B               	movf	nrf_write_payload@len,w
  1671     0404  00F9               	movwf	nrf_write_register@len
  1672     0405  30A0               	movlw	160
  1673     0406  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1674     040B                     l1242:
  1675                           
  1676                           ;./nrf24l01.h: 134:         RD2 = 1;
  1677     040B  1283               	bcf	3,5	;RP0=0, select bank0
  1678     040C  1303               	bcf	3,6	;RP1=0, select bank0
  1679     040D  1508               	bsf	8,2	;volatile
  1680     040E                     l1244:
  1681                           
  1682                           ;./nrf24l01.h: 135:         _delay((unsigned long)((20)*(8000000UL/4000000.0)));
  1683     040E  300D               	movlw	13
  1684     040F  00FC               	movwf	??_nrf_write_payload
  1685     0410                     u727:
  1686     0410  0BFC               	decfsz	??_nrf_write_payload,f
  1687     0411  2C10               	goto	u727
  1688     0412                     l1246:
  1689                           
  1690                           ;./nrf24l01.h: 136:         RD2 = 0;
  1691     0412  1283               	bcf	3,5	;RP0=0, select bank0
  1692     0413  1303               	bcf	3,6	;RP1=0, select bank0
  1693     0414  1108               	bcf	8,2	;volatile
  1694     0415                     l106:
  1695     0415  0008               	return
  1696     0416                     __end_of_nrf_write_payload:
  1697                           
  1698                           	psect	text7
  1699     03F0                     __ptext7:	
  1700 ;; *************** function _nrf_write_command *****************
  1701 ;; Defined at:
  1702 ;;		line 140 in file "./nrf24l01.h"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  NRF_command     1    wreg     unsigned char 
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;  NRF_command     1    1[COMMON] unsigned char 
  1707 ;;  status          1    2[COMMON] unsigned char 
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      unsigned char 
  1710 ;; Registers used:
  1711 ;;		wreg, pclath, cstack
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1717 ;;      Params:         0       0       0       0       0
  1718 ;;      Locals:         2       0       0       0       0
  1719 ;;      Temps:          0       0       0       0       0
  1720 ;;      Totals:         2       0       0       0       0
  1721 ;;Total ram usage:        2 bytes
  1722 ;; Hardware stack levels used: 1
  1723 ;; Hardware stack levels required when called: 1
  1724 ;; This function calls:
  1725 ;;		_SPI_write
  1726 ;; This function is called by:
  1727 ;;		_nrf_flush_rxtx
  1728 ;;		_nrf_send
  1729 ;;		_nrf_data_available
  1730 ;;		_nrf_read
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734     03F0                     _nrf_write_command:	
  1735                           ;psect for function _nrf_write_command
  1736                           
  1737                           
  1738                           ;incstack = 0
  1739                           ; Regs used in _nrf_write_command: [wreg+pclath+cstack]
  1740                           ;nrf_write_command@NRF_command stored from wreg
  1741     03F0  00F1               	movwf	nrf_write_command@NRF_command
  1742     03F1                     l1218:
  1743                           
  1744                           ;./nrf24l01.h: 140:     uint8_t nrf_write_command(uint8_t NRF_command);./nrf24l01.h: 141
      +                          :     {;./nrf24l01.h: 142:         RD3 = 0;
  1745     03F1  1283               	bcf	3,5	;RP0=0, select bank0
  1746     03F2  1303               	bcf	3,6	;RP1=0, select bank0
  1747     03F3  1188               	bcf	8,3	;volatile
  1748     03F4                     l1220:
  1749                           
  1750                           ;./nrf24l01.h: 143:         uint8_t status = SPI_write(NRF_command);
  1751     03F4  0871               	movf	nrf_write_command@NRF_command,w
  1752     03F5  120A  118A  23E1  120A  118A  	fcall	_SPI_write
  1753     03FA  00F2               	movwf	nrf_write_command@status
  1754     03FB                     l1222:
  1755                           
  1756                           ;./nrf24l01.h: 144:         RD3 = 1;
  1757     03FB  1283               	bcf	3,5	;RP0=0, select bank0
  1758     03FC  1303               	bcf	3,6	;RP1=0, select bank0
  1759     03FD  1588               	bsf	8,3	;volatile
  1760     03FE                     l1224:
  1761                           
  1762                           ;./nrf24l01.h: 145:         return status;
  1763     03FE  0872               	movf	nrf_write_command@status,w
  1764     03FF                     l109:
  1765     03FF  0008               	return
  1766     0400                     __end_of_nrf_write_command:
  1767                           
  1768                           	psect	text8
  1769     046D                     __ptext8:	
  1770 ;; *************** function _nrf_set_tx_mode *****************
  1771 ;; Defined at:
  1772 ;;		line 219 in file "./nrf24l01.h"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  config          1   11[COMMON] unsigned char 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1786 ;;      Params:         0       0       0       0       0
  1787 ;;      Locals:         1       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0
  1789 ;;      Totals:         1       0       0       0       0
  1790 ;;Total ram usage:        1 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; Hardware stack levels required when called: 3
  1793 ;; This function calls:
  1794 ;;		_nrf_read_register
  1795 ;;		_nrf_write_register
  1796 ;; This function is called by:
  1797 ;;		_nrf_send
  1798 ;;		_main
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802     046D                     _nrf_set_tx_mode:	
  1803                           ;psect for function _nrf_set_tx_mode
  1804                           
  1805     046D                     l1256:	
  1806                           ;incstack = 0
  1807                           ; Regs used in _nrf_set_tx_mode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1808                           
  1809                           
  1810                           ;./nrf24l01.h: 221:         uint8_t config;;./nrf24l01.h: 222:         nrf_read_register
      +                          (0x00, &config, 1);
  1811     046D  307B               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1812     046E  00F8               	movwf	nrf_read_register@data
  1813     046F  01F9               	clrf	nrf_read_register@len
  1814     0470  0AF9               	incf	nrf_read_register@len,f
  1815     0471  3000               	movlw	0
  1816     0472  120A  118A  23C8  120A  118A  	fcall	_nrf_read_register
  1817     0477                     l1258:
  1818                           
  1819                           ;./nrf24l01.h: 224:         RD2 = 0;
  1820     0477  1283               	bcf	3,5	;RP0=0, select bank0
  1821     0478  1303               	bcf	3,6	;RP1=0, select bank0
  1822     0479  1108               	bcf	8,2	;volatile
  1823     047A                     l1260:
  1824                           
  1825                           ;./nrf24l01.h: 226:         if (!(config & 0x01))
  1826     047A  187B               	btfsc	nrf_set_tx_mode@config,0
  1827     047B  2C7D               	goto	u391
  1828     047C  2C7E               	goto	u390
  1829     047D                     u391:
  1830     047D  2C7F               	goto	l1264
  1831     047E                     u390:
  1832     047E  2C90               	goto	l123
  1833     047F                     l1264:
  1834                           
  1835                           ;./nrf24l01.h: 229:         config &= ~0x01;
  1836     047F  30FE               	movlw	254
  1837     0480  00FF               	movwf	btemp+1
  1838     0481  087F               	movf	btemp+1,w
  1839     0482  05FB               	andwf	nrf_set_tx_mode@config,f
  1840     0483                     l1266:
  1841                           
  1842                           ;./nrf24l01.h: 230:         nrf_write_register(0x00, &config, 1);
  1843     0483  307B               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1844     0484  00F8               	movwf	nrf_write_register@data
  1845     0485  01F9               	clrf	nrf_write_register@len
  1846     0486  0AF9               	incf	nrf_write_register@len,f
  1847     0487  3000               	movlw	0
  1848     0488  120A  118A  23D4  120A  118A  	fcall	_nrf_write_register
  1849     048D                     l1268:
  1850                           
  1851                           ;./nrf24l01.h: 232:         RD2 = 0;
  1852     048D  1283               	bcf	3,5	;RP0=0, select bank0
  1853     048E  1303               	bcf	3,6	;RP1=0, select bank0
  1854     048F  1108               	bcf	8,2	;volatile
  1855     0490                     l123:
  1856     0490  0008               	return
  1857     0491                     __end_of_nrf_set_tx_mode:
  1858                           
  1859                           	psect	text9
  1860     03D4                     __ptext9:	
  1861 ;; *************** function _nrf_write_register *****************
  1862 ;; Defined at:
  1863 ;;		line 119 in file "./nrf24l01.h"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  reg             1    wreg     unsigned char 
  1866 ;;  data            1    8[COMMON] PTR unsigned char 
  1867 ;;		 -> main@send_data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1868 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1869 ;;  len             1    9[COMMON] unsigned char 
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;  reg             1   10[COMMON] unsigned char 
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      unsigned char 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1881 ;;      Params:         2       0       0       0       0
  1882 ;;      Locals:         1       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0
  1884 ;;      Totals:         3       0       0       0       0
  1885 ;;Total ram usage:        3 bytes
  1886 ;; Hardware stack levels used: 1
  1887 ;; Hardware stack levels required when called: 2
  1888 ;; This function calls:
  1889 ;;		_nrf_command
  1890 ;; This function is called by:
  1891 ;;		_nrf_write_payload
  1892 ;;		_nrf_flush_rxtx
  1893 ;;		_nrf_setup
  1894 ;;		_nrf_set_tx_mode
  1895 ;;		_nrf_send
  1896 ;;		_nrf_set_rx_mode
  1897 ;;		_nrf_read
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901     03D4                     _nrf_write_register:	
  1902                           ;psect for function _nrf_write_register
  1903                           
  1904                           
  1905                           ;incstack = 0
  1906                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1907                           ;nrf_write_register@reg stored from wreg
  1908     03D4  00FA               	movwf	nrf_write_register@reg
  1909     03D5                     l1210:
  1910                           
  1911                           ;./nrf24l01.h: 119:     uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t l
      +                          en);./nrf24l01.h: 120:     {;./nrf24l01.h: 121:         return nrf_command(reg | 0b00100
      +                          000, data, len);
  1912     03D5  0878               	movf	nrf_write_register@data,w
  1913     03D6  00F1               	movwf	nrf_command@data
  1914     03D7  0879               	movf	nrf_write_register@len,w
  1915     03D8  00F2               	movwf	nrf_command@len
  1916     03D9  087A               	movf	nrf_write_register@reg,w
  1917     03DA  3820               	iorlw	32
  1918     03DB  120A  118A  24BD  120A  118A  	fcall	_nrf_command
  1919     03E0                     l100:
  1920     03E0  0008               	return
  1921     03E1                     __end_of_nrf_write_register:
  1922                           
  1923                           	psect	text10
  1924     03C8                     __ptext10:	
  1925 ;; *************** function _nrf_read_register *****************
  1926 ;; Defined at:
  1927 ;;		line 125 in file "./nrf24l01.h"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;  reg             1    wreg     unsigned char 
  1930 ;;  data            1    8[COMMON] PTR unsigned char 
  1931 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1932 ;;  len             1    9[COMMON] unsigned char 
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;  reg             1   10[COMMON] unsigned char 
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  1    wreg      unsigned char 
  1937 ;; Registers used:
  1938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1944 ;;      Params:         2       0       0       0       0
  1945 ;;      Locals:         1       0       0       0       0
  1946 ;;      Temps:          0       0       0       0       0
  1947 ;;      Totals:         3       0       0       0       0
  1948 ;;Total ram usage:        3 bytes
  1949 ;; Hardware stack levels used: 1
  1950 ;; Hardware stack levels required when called: 2
  1951 ;; This function calls:
  1952 ;;		_nrf_command
  1953 ;; This function is called by:
  1954 ;;		_nrf_set_tx_mode
  1955 ;;		_nrf_set_rx_mode
  1956 ;;		_nrf_read
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960     03C8                     _nrf_read_register:	
  1961                           ;psect for function _nrf_read_register
  1962                           
  1963                           
  1964                           ;incstack = 0
  1965                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1966                           ;nrf_read_register@reg stored from wreg
  1967     03C8  00FA               	movwf	nrf_read_register@reg
  1968     03C9                     l1214:
  1969                           
  1970                           ;./nrf24l01.h: 125:     uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t le
      +                          n);./nrf24l01.h: 126:     {;./nrf24l01.h: 127:         return nrf_command(reg | 0b000000
      +                          00, data, len);
  1971     03C9  0878               	movf	nrf_read_register@data,w
  1972     03CA  00F1               	movwf	nrf_command@data
  1973     03CB  0879               	movf	nrf_read_register@len,w
  1974     03CC  00F2               	movwf	nrf_command@len
  1975     03CD  087A               	movf	nrf_read_register@reg,w
  1976     03CE  120A  118A  24BD  120A  118A  	fcall	_nrf_command
  1977     03D3                     l103:
  1978     03D3  0008               	return
  1979     03D4                     __end_of_nrf_read_register:
  1980                           
  1981                           	psect	text11
  1982     04BD                     __ptext11:	
  1983 ;; *************** function _nrf_command *****************
  1984 ;; Defined at:
  1985 ;;		line 105 in file "./nrf24l01.h"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  NRF_command     1    wreg     unsigned char 
  1988 ;;  data            1    1[COMMON] PTR unsigned char 
  1989 ;;		 -> main@send_data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1990 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1991 ;;  len             1    2[COMMON] unsigned char 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  NRF_command     1    5[COMMON] unsigned char 
  1994 ;;  i               1    7[COMMON] unsigned char 
  1995 ;;  status          1    6[COMMON] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      unsigned char 
  1998 ;; Registers used:
  1999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2005 ;;      Params:         2       0       0       0       0
  2006 ;;      Locals:         3       0       0       0       0
  2007 ;;      Temps:          2       0       0       0       0
  2008 ;;      Totals:         7       0       0       0       0
  2009 ;;Total ram usage:        7 bytes
  2010 ;; Hardware stack levels used: 1
  2011 ;; Hardware stack levels required when called: 1
  2012 ;; This function calls:
  2013 ;;		_SPI_write
  2014 ;; This function is called by:
  2015 ;;		_nrf_write_register
  2016 ;;		_nrf_read_register
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020     04BD                     _nrf_command:	
  2021                           ;psect for function _nrf_command
  2022                           
  2023                           
  2024                           ;incstack = 0
  2025                           ; Regs used in _nrf_command: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2026                           ;nrf_command@NRF_command stored from wreg
  2027     04BD  00F5               	movwf	nrf_command@NRF_command
  2028     04BE                     l1194:
  2029                           
  2030                           ;./nrf24l01.h: 105:     uint8_t nrf_command(uint8_t NRF_command, uint8_t *data, uint8_t 
      +                          len);./nrf24l01.h: 106:     {;./nrf24l01.h: 107:         RD3 = 0;
  2031     04BE  1283               	bcf	3,5	;RP0=0, select bank0
  2032     04BF  1303               	bcf	3,6	;RP1=0, select bank0
  2033     04C0  1188               	bcf	8,3	;volatile
  2034     04C1                     l1196:
  2035                           
  2036                           ;./nrf24l01.h: 109:         uint8_t status = SPI_write(NRF_command);
  2037     04C1  0875               	movf	nrf_command@NRF_command,w
  2038     04C2  120A  118A  23E1  120A  118A  	fcall	_SPI_write
  2039     04C7  00F6               	movwf	nrf_command@status
  2040     04C8                     l1198:
  2041                           
  2042                           ;./nrf24l01.h: 110:         for (uint8_t i = 0; i < len; i++)
  2043     04C8  01F7               	clrf	nrf_command@i
  2044     04C9  2CE3               	goto	l1204
  2045     04CA                     l1200:
  2046                           
  2047                           ;./nrf24l01.h: 111:             data[i] = SPI_write(data[i]);
  2048     04CA  0877               	movf	nrf_command@i,w
  2049     04CB  0771               	addwf	nrf_command@data,w
  2050     04CC  00F3               	movwf	??_nrf_command
  2051     04CD  0873               	movf	??_nrf_command,w
  2052     04CE  0084               	movwf	4
  2053     04CF  1383               	bcf	3,7	;select IRP bank0
  2054     04D0  0800               	movf	0,w
  2055     04D1  120A  118A  23E1  120A  118A  	fcall	_SPI_write
  2056     04D6  00FF               	movwf	btemp+1
  2057     04D7  0877               	movf	nrf_command@i,w
  2058     04D8  0771               	addwf	nrf_command@data,w
  2059     04D9  00F4               	movwf	??_nrf_command+1
  2060     04DA  0874               	movf	??_nrf_command+1,w
  2061     04DB  0084               	movwf	4
  2062     04DC  087F               	movf	btemp+1,w
  2063     04DD  1383               	bcf	3,7	;select IRP bank0
  2064     04DE  0080               	movwf	0
  2065     04DF                     l1202:
  2066     04DF  3001               	movlw	1
  2067     04E0  00FF               	movwf	btemp+1
  2068     04E1  087F               	movf	btemp+1,w
  2069     04E2  07F7               	addwf	nrf_command@i,f
  2070     04E3                     l1204:
  2071     04E3  0872               	movf	nrf_command@len,w
  2072     04E4  0277               	subwf	nrf_command@i,w
  2073     04E5  1C03               	skipc
  2074     04E6  2CE8               	goto	u361
  2075     04E7  2CE9               	goto	u360
  2076     04E8                     u361:
  2077     04E8  2CCA               	goto	l1200
  2078     04E9                     u360:
  2079     04E9                     l96:
  2080                           
  2081                           ;./nrf24l01.h: 113:         RD3 = 1;
  2082     04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2083     04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2084     04EB  1588               	bsf	8,3	;volatile
  2085     04EC                     l1206:
  2086                           
  2087                           ;./nrf24l01.h: 115:         return status;
  2088     04EC  0876               	movf	nrf_command@status,w
  2089     04ED                     l97:
  2090     04ED  0008               	return
  2091     04EE                     __end_of_nrf_command:
  2092                           
  2093                           	psect	text12
  2094     03E1                     __ptext12:	
  2095 ;; *************** function _SPI_write *****************
  2096 ;; Defined at:
  2097 ;;		line 40 in file "./spi.h"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  data            1    wreg     unsigned char 
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  data            1    0[COMMON] unsigned char 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      unsigned char 
  2104 ;; Registers used:
  2105 ;;		wreg
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2111 ;;      Params:         0       0       0       0       0
  2112 ;;      Locals:         1       0       0       0       0
  2113 ;;      Temps:          0       0       0       0       0
  2114 ;;      Totals:         1       0       0       0       0
  2115 ;;Total ram usage:        1 bytes
  2116 ;; Hardware stack levels used: 1
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		_nrf_command
  2121 ;;		_nrf_write_command
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125     03E1                     _SPI_write:	
  2126                           ;psect for function _SPI_write
  2127                           
  2128                           
  2129                           ;incstack = 0
  2130                           ; Regs used in _SPI_write: [wreg]
  2131                           ;SPI_write@data stored from wreg
  2132     03E1  00F0               	movwf	SPI_write@data
  2133     03E2                     l1188:
  2134                           
  2135                           ;./spi.h: 40:     uint8_t SPI_write(uint8_t data);./spi.h: 41:     {;./spi.h: 42:       
      +                            SSPBUF = data;
  2136     03E2  0870               	movf	SPI_write@data,w
  2137     03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2138     03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2139     03E5  0093               	movwf	19	;volatile
  2140     03E6                     l82:	
  2141                           ;./spi.h: 44:             ;
  2142                           
  2143                           
  2144                           ;./spi.h: 43:         while (!BF)
  2145     03E6  1683               	bsf	3,5	;RP0=1, select bank1
  2146     03E7  1303               	bcf	3,6	;RP1=0, select bank1
  2147     03E8  1C14               	btfss	20,0	;volatile
  2148     03E9  2BEB               	goto	u351
  2149     03EA  2BEC               	goto	u350
  2150     03EB                     u351:
  2151     03EB  2BE6               	goto	l82
  2152     03EC                     u350:
  2153     03EC                     l1190:
  2154                           
  2155                           ;./spi.h: 45:         return SSPBUF;
  2156     03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2157     03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2158     03EE  0813               	movf	19,w	;volatile
  2159     03EF                     l85:
  2160     03EF  0008               	return
  2161     03F0                     __end_of_SPI_write:
  2162                           
  2163                           	psect	text13
  2164     044C                     __ptext13:	
  2165 ;; *************** function _UART_write_text *****************
  2166 ;; Defined at:
  2167 ;;		line 41 in file "./uart.h"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;  text            1    wreg     PTR unsigned char 
  2170 ;;		 -> main@buffer(64), 
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  text            1    4[COMMON] PTR unsigned char 
  2173 ;;		 -> main@buffer(64), 
  2174 ;;  i               2    2[COMMON] int 
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      void 
  2177 ;; Registers used:
  2178 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2184 ;;      Params:         0       0       0       0       0
  2185 ;;      Locals:         3       0       0       0       0
  2186 ;;      Temps:          1       0       0       0       0
  2187 ;;      Totals:         4       0       0       0       0
  2188 ;;Total ram usage:        4 bytes
  2189 ;; Hardware stack levels used: 1
  2190 ;; Hardware stack levels required when called: 1
  2191 ;; This function calls:
  2192 ;;		_UART_write
  2193 ;; This function is called by:
  2194 ;;		_main
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198     044C                     _UART_write_text:	
  2199                           ;psect for function _UART_write_text
  2200                           
  2201                           
  2202                           ;incstack = 0
  2203                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2204                           ;UART_write_text@text stored from wreg
  2205     044C  00F4               	movwf	UART_write_text@text
  2206     044D                     l1328:
  2207                           
  2208                           ;./uart.h: 41:  void UART_write_text(char *text);./uart.h: 42:  {;./uart.h: 43:   for (i
      +                          nt i = 0; text[i] != '\0'; i++)
  2209     044D  01F2               	clrf	UART_write_text@i
  2210     044E  01F3               	clrf	UART_write_text@i+1
  2211     044F  2C61               	goto	l1334
  2212     0450                     l1330:
  2213                           
  2214                           ;./uart.h: 44:    UART_write(text[i]);
  2215     0450  0872               	movf	UART_write_text@i,w
  2216     0451  0774               	addwf	UART_write_text@text,w
  2217     0452  00F1               	movwf	??_UART_write_text
  2218     0453  0871               	movf	??_UART_write_text,w
  2219     0454  0084               	movwf	4
  2220     0455  0800               	movf	0,w
  2221     0456  120A  118A  23BC  120A  118A  	fcall	_UART_write
  2222     045B                     l1332:
  2223     045B  3001               	movlw	1
  2224     045C  07F2               	addwf	UART_write_text@i,f
  2225     045D  1803               	skipnc
  2226     045E  0AF3               	incf	UART_write_text@i+1,f
  2227     045F  3000               	movlw	0
  2228     0460  07F3               	addwf	UART_write_text@i+1,f
  2229     0461                     l1334:
  2230     0461  0872               	movf	UART_write_text@i,w
  2231     0462  0774               	addwf	UART_write_text@text,w
  2232     0463  00F1               	movwf	??_UART_write_text
  2233     0464  0871               	movf	??_UART_write_text,w
  2234     0465  0084               	movwf	4
  2235     0466  1383               	bcf	3,7	;select IRP bank0
  2236     0467  0800               	movf	0,w
  2237     0468  1D03               	btfss	3,2
  2238     0469  2C6B               	goto	u531
  2239     046A  2C6C               	goto	u530
  2240     046B                     u531:
  2241     046B  2C50               	goto	l1330
  2242     046C                     u530:
  2243     046C                     l67:
  2244     046C  0008               	return
  2245     046D                     __end_of_UART_write_text:
  2246                           
  2247                           	psect	text14
  2248     03BC                     __ptext14:	
  2249 ;; *************** function _UART_write *****************
  2250 ;; Defined at:
  2251 ;;		line 33 in file "./uart.h"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  data            1    wreg     unsigned char 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  data            1    0[COMMON] unsigned char 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      void 
  2258 ;; Registers used:
  2259 ;;		wreg
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2265 ;;      Params:         0       0       0       0       0
  2266 ;;      Locals:         1       0       0       0       0
  2267 ;;      Temps:          0       0       0       0       0
  2268 ;;      Totals:         1       0       0       0       0
  2269 ;;Total ram usage:        1 bytes
  2270 ;; Hardware stack levels used: 1
  2271 ;; This function calls:
  2272 ;;		Nothing
  2273 ;; This function is called by:
  2274 ;;		_UART_write_text
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278     03BC                     _UART_write:	
  2279                           ;psect for function _UART_write
  2280                           
  2281                           
  2282                           ;incstack = 0
  2283                           ; Regs used in _UART_write: [wreg]
  2284                           ;UART_write@data stored from wreg
  2285     03BC  00F0               	movwf	UART_write@data
  2286     03BD                     l1228:
  2287     03BD                     l58:	
  2288                           ;./uart.h: 36:    ;
  2289                           
  2290                           
  2291                           ;./uart.h: 35:   while (!TRMT)
  2292     03BD  1683               	bsf	3,5	;RP0=1, select bank1
  2293     03BE  1303               	bcf	3,6	;RP1=0, select bank1
  2294     03BF  1C98               	btfss	24,1	;volatile
  2295     03C0  2BC2               	goto	u371
  2296     03C1  2BC3               	goto	u370
  2297     03C2                     u371:
  2298     03C2  2BBD               	goto	l58
  2299     03C3                     u370:
  2300     03C3                     l1230:
  2301                           
  2302                           ;./uart.h: 37:   TXREG = data;
  2303     03C3  0870               	movf	UART_write@data,w
  2304     03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2305     03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2306     03C6  0099               	movwf	25	;volatile
  2307     03C7                     l61:
  2308     03C7  0008               	return
  2309     03C8                     __end_of_UART_write:
  2310                           
  2311                           	psect	text15
  2312     0547                     __ptext15:	
  2313 ;; *************** function _UART_init *****************
  2314 ;; Defined at:
  2315 ;;		line 19 in file "./uart.h"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  baudrate        4    6[BANK0 ] const long 
  2318 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;		None
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  1    wreg      void 
  2323 ;; Registers used:
  2324 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2330 ;;      Params:         0       8       0       0       0
  2331 ;;      Locals:         0       0       0       0       0
  2332 ;;      Temps:          0      12       0       0       0
  2333 ;;      Totals:         0      20       0       0       0
  2334 ;;Total ram usage:       20 bytes
  2335 ;; Hardware stack levels used: 1
  2336 ;; Hardware stack levels required when called: 1
  2337 ;; This function calls:
  2338 ;;		___aldiv
  2339 ;; This function is called by:
  2340 ;;		_main
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344     0547                     _UART_init:	
  2345                           ;psect for function _UART_init
  2346                           
  2347     0547                     l1312:	
  2348                           ;incstack = 0
  2349                           ; Regs used in _UART_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2350                           
  2351                           
  2352                           ;./uart.h: 19:  void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 20:  
      +                          {;./uart.h: 21:   BRGH = 1;
  2353     0547  1683               	bsf	3,5	;RP0=1, select bank1
  2354     0548  1303               	bcf	3,6	;RP1=0, select bank1
  2355     0549  1518               	bsf	24,2	;volatile
  2356     054A                     l1314:
  2357                           
  2358                           ;./uart.h: 22:   SPBRG = (_XTAL_FREQ - baudrate * 16) / (baudrate * 16);
  2359     054A  1283               	bcf	3,5	;RP0=0, select bank0
  2360     054B  1303               	bcf	3,6	;RP1=0, select bank0
  2361     054C  0826               	movf	UART_init@baudrate,w
  2362     054D  00AE               	movwf	??_UART_init
  2363     054E  0827               	movf	UART_init@baudrate+1,w
  2364     054F  00AF               	movwf	??_UART_init+1
  2365     0550  0828               	movf	UART_init@baudrate+2,w
  2366     0551  00B0               	movwf	??_UART_init+2
  2367     0552  0829               	movf	UART_init@baudrate+3,w
  2368     0553  00B1               	movwf	??_UART_init+3
  2369     0554  3004               	movlw	4
  2370     0555                     u505:
  2371     0555  1003               	clrc
  2372     0556  0DAE               	rlf	??_UART_init,f
  2373     0557  0DAF               	rlf	??_UART_init+1,f
  2374     0558  0DB0               	rlf	??_UART_init+2,f
  2375     0559  0DB1               	rlf	??_UART_init+3,f
  2376     055A                     u500:
  2377     055A  3EFF               	addlw	-1
  2378     055B  1D03               	skipz
  2379     055C  2D55               	goto	u505
  2380     055D  0831               	movf	??_UART_init+3,w
  2381     055E  00F3               	movwf	___aldiv@divisor+3
  2382     055F  0830               	movf	??_UART_init+2,w
  2383     0560  00F2               	movwf	___aldiv@divisor+2
  2384     0561  082F               	movf	??_UART_init+1,w
  2385     0562  00F1               	movwf	___aldiv@divisor+1
  2386     0563  082E               	movf	??_UART_init,w
  2387     0564  00F0               	movwf	___aldiv@divisor
  2388     0565  0826               	movf	UART_init@baudrate,w
  2389     0566  00B2               	movwf	??_UART_init+4
  2390     0567  0827               	movf	UART_init@baudrate+1,w
  2391     0568  00B3               	movwf	??_UART_init+5
  2392     0569  0828               	movf	UART_init@baudrate+2,w
  2393     056A  00B4               	movwf	??_UART_init+6
  2394     056B  0829               	movf	UART_init@baudrate+3,w
  2395     056C  00B5               	movwf	??_UART_init+7
  2396     056D  3004               	movlw	4
  2397     056E                     u515:
  2398     056E  1003               	clrc
  2399     056F  0DB2               	rlf	??_UART_init+4,f
  2400     0570  0DB3               	rlf	??_UART_init+5,f
  2401     0571  0DB4               	rlf	??_UART_init+6,f
  2402     0572  0DB5               	rlf	??_UART_init+7,f
  2403     0573                     u510:
  2404     0573  3EFF               	addlw	-1
  2405     0574  1D03               	skipz
  2406     0575  2D6E               	goto	u515
  2407     0576  082A               	movf	UART_init@_XTAL_FREQ,w
  2408     0577  00B6               	movwf	??_UART_init+8
  2409     0578  082B               	movf	UART_init@_XTAL_FREQ+1,w
  2410     0579  00B7               	movwf	??_UART_init+9
  2411     057A  082C               	movf	UART_init@_XTAL_FREQ+2,w
  2412     057B  00B8               	movwf	??_UART_init+10
  2413     057C  082D               	movf	UART_init@_XTAL_FREQ+3,w
  2414     057D  00B9               	movwf	??_UART_init+11
  2415     057E  0832               	movf	??_UART_init+4,w
  2416     057F  02B6               	subwf	??_UART_init+8,f
  2417     0580  0833               	movf	??_UART_init+5,w
  2418     0581  1C03               	skipc
  2419     0582  0F33               	incfsz	??_UART_init+5,w
  2420     0583  2D85               	goto	u521
  2421     0584  2D86               	goto	u522
  2422     0585                     u521:
  2423     0585  02B7               	subwf	??_UART_init+9,f
  2424     0586                     u522:
  2425     0586  0834               	movf	??_UART_init+6,w
  2426     0587  1C03               	skipc
  2427     0588  0F34               	incfsz	??_UART_init+6,w
  2428     0589  2D8B               	goto	u523
  2429     058A  2D8C               	goto	u524
  2430     058B                     u523:
  2431     058B  02B8               	subwf	??_UART_init+10,f
  2432     058C                     u524:
  2433     058C  0835               	movf	??_UART_init+7,w
  2434     058D  1C03               	skipc
  2435     058E  0F35               	incfsz	??_UART_init+7,w
  2436     058F  2D91               	goto	u525
  2437     0590  2D92               	goto	u526
  2438     0591                     u525:
  2439     0591  02B9               	subwf	??_UART_init+11,f
  2440     0592                     u526:
  2441     0592  0839               	movf	??_UART_init+11,w
  2442     0593  00F7               	movwf	___aldiv@dividend+3
  2443     0594  0838               	movf	??_UART_init+10,w
  2444     0595  00F6               	movwf	___aldiv@dividend+2
  2445     0596  0837               	movf	??_UART_init+9,w
  2446     0597  00F5               	movwf	___aldiv@dividend+1
  2447     0598  0836               	movf	??_UART_init+8,w
  2448     0599  00F4               	movwf	___aldiv@dividend
  2449     059A  120A  118A  25B2  120A  118A  	fcall	___aldiv
  2450     059F  0870               	movf	?___aldiv,w
  2451     05A0  1683               	bsf	3,5	;RP0=1, select bank1
  2452     05A1  1303               	bcf	3,6	;RP1=0, select bank1
  2453     05A2  0099               	movwf	25	;volatile
  2454     05A3                     l1316:
  2455                           
  2456                           ;./uart.h: 23:   SYNC = 0;
  2457     05A3  1218               	bcf	24,4	;volatile
  2458     05A4                     l1318:
  2459                           
  2460                           ;./uart.h: 24:   SPEN = 1;
  2461     05A4  1283               	bcf	3,5	;RP0=0, select bank0
  2462     05A5  1303               	bcf	3,6	;RP1=0, select bank0
  2463     05A6  1798               	bsf	24,7	;volatile
  2464     05A7                     l1320:
  2465                           
  2466                           ;./uart.h: 25:   TRISC7 = 1;
  2467     05A7  1683               	bsf	3,5	;RP0=1, select bank1
  2468     05A8  1303               	bcf	3,6	;RP1=0, select bank1
  2469     05A9  1787               	bsf	7,7	;volatile
  2470     05AA                     l1322:
  2471                           
  2472                           ;./uart.h: 26:   TRISC6 = 1;
  2473     05AA  1707               	bsf	7,6	;volatile
  2474     05AB                     l1324:
  2475                           
  2476                           ;./uart.h: 27:   CREN = 1;
  2477     05AB  1283               	bcf	3,5	;RP0=0, select bank0
  2478     05AC  1303               	bcf	3,6	;RP1=0, select bank0
  2479     05AD  1618               	bsf	24,4	;volatile
  2480     05AE                     l1326:
  2481                           
  2482                           ;./uart.h: 28:   TXEN = 1;
  2483     05AE  1683               	bsf	3,5	;RP0=1, select bank1
  2484     05AF  1303               	bcf	3,6	;RP1=0, select bank1
  2485     05B0  1698               	bsf	24,5	;volatile
  2486     05B1                     l55:
  2487     05B1  0008               	return
  2488     05B2                     __end_of_UART_init:
  2489                           
  2490                           	psect	text16
  2491     05B2                     __ptext16:	
  2492 ;; *************** function ___aldiv *****************
  2493 ;; Defined at:
  2494 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  divisor         4    0[COMMON] long 
  2497 ;;  dividend        4    4[COMMON] long 
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  quotient        4    2[BANK0 ] long 
  2500 ;;  sign            1    1[BANK0 ] unsigned char 
  2501 ;;  counter         1    0[BANK0 ] unsigned char 
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  4    0[COMMON] long 
  2504 ;; Registers used:
  2505 ;;		wreg, status,2, status,0, btemp+1
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2511 ;;      Params:         8       0       0       0       0
  2512 ;;      Locals:         0       6       0       0       0
  2513 ;;      Temps:          1       0       0       0       0
  2514 ;;      Totals:         9       6       0       0       0
  2515 ;;Total ram usage:       15 bytes
  2516 ;; Hardware stack levels used: 1
  2517 ;; This function calls:
  2518 ;;		Nothing
  2519 ;; This function is called by:
  2520 ;;		_UART_init
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524     05B2                     ___aldiv:	
  2525                           ;psect for function ___aldiv
  2526                           
  2527     05B2                     l1270:	
  2528                           ;incstack = 0
  2529                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  2530                           
  2531     05B2  1283               	bcf	3,5	;RP0=0, select bank0
  2532     05B3  1303               	bcf	3,6	;RP1=0, select bank0
  2533     05B4  01A1               	clrf	___aldiv@sign
  2534     05B5                     l1272:
  2535     05B5  1FF3               	btfss	___aldiv@divisor+3,7
  2536     05B6  2DB8               	goto	u401
  2537     05B7  2DB9               	goto	u400
  2538     05B8                     u401:
  2539     05B8  2DC6               	goto	l355
  2540     05B9                     u400:
  2541     05B9                     l1274:
  2542     05B9  09F0               	comf	___aldiv@divisor,f
  2543     05BA  09F1               	comf	___aldiv@divisor+1,f
  2544     05BB  09F2               	comf	___aldiv@divisor+2,f
  2545     05BC  09F3               	comf	___aldiv@divisor+3,f
  2546     05BD  0AF0               	incf	___aldiv@divisor,f
  2547     05BE  1903               	skipnz
  2548     05BF  0AF1               	incf	___aldiv@divisor+1,f
  2549     05C0  1903               	skipnz
  2550     05C1  0AF2               	incf	___aldiv@divisor+2,f
  2551     05C2  1903               	skipnz
  2552     05C3  0AF3               	incf	___aldiv@divisor+3,f
  2553     05C4  01A1               	clrf	___aldiv@sign
  2554     05C5  0AA1               	incf	___aldiv@sign,f
  2555     05C6                     l355:
  2556     05C6  1FF7               	btfss	___aldiv@dividend+3,7
  2557     05C7  2DC9               	goto	u411
  2558     05C8  2DCA               	goto	u410
  2559     05C9                     u411:
  2560     05C9  2DD9               	goto	l1280
  2561     05CA                     u410:
  2562     05CA                     l1276:
  2563     05CA  09F4               	comf	___aldiv@dividend,f
  2564     05CB  09F5               	comf	___aldiv@dividend+1,f
  2565     05CC  09F6               	comf	___aldiv@dividend+2,f
  2566     05CD  09F7               	comf	___aldiv@dividend+3,f
  2567     05CE  0AF4               	incf	___aldiv@dividend,f
  2568     05CF  1903               	skipnz
  2569     05D0  0AF5               	incf	___aldiv@dividend+1,f
  2570     05D1  1903               	skipnz
  2571     05D2  0AF6               	incf	___aldiv@dividend+2,f
  2572     05D3  1903               	skipnz
  2573     05D4  0AF7               	incf	___aldiv@dividend+3,f
  2574     05D5                     l1278:
  2575     05D5  3001               	movlw	1
  2576     05D6  00FF               	movwf	btemp+1
  2577     05D7  087F               	movf	btemp+1,w
  2578     05D8  06A1               	xorwf	___aldiv@sign,f
  2579     05D9                     l1280:
  2580     05D9  3000               	movlw	0
  2581     05DA  00A5               	movwf	___aldiv@quotient+3
  2582     05DB  3000               	movlw	0
  2583     05DC  00A4               	movwf	___aldiv@quotient+2
  2584     05DD  3000               	movlw	0
  2585     05DE  00A3               	movwf	___aldiv@quotient+1
  2586     05DF  3000               	movlw	0
  2587     05E0  00A2               	movwf	___aldiv@quotient
  2588     05E1                     l1282:
  2589     05E1  0873               	movf	___aldiv@divisor+3,w
  2590     05E2  0472               	iorwf	___aldiv@divisor+2,w
  2591     05E3  0471               	iorwf	___aldiv@divisor+1,w
  2592     05E4  0470               	iorwf	___aldiv@divisor,w
  2593     05E5  1903               	skipnz
  2594     05E6  2DE8               	goto	u421
  2595     05E7  2DE9               	goto	u420
  2596     05E8                     u421:
  2597     05E8  2E36               	goto	l1304
  2598     05E9                     u420:
  2599     05E9                     l1284:
  2600     05E9  01A0               	clrf	___aldiv@counter
  2601     05EA  0AA0               	incf	___aldiv@counter,f
  2602     05EB  2DF9               	goto	l1290
  2603     05EC                     l1286:
  2604     05EC  3001               	movlw	1
  2605     05ED  00F8               	movwf	??___aldiv
  2606     05EE                     u435:
  2607     05EE  1003               	clrc
  2608     05EF  0DF0               	rlf	___aldiv@divisor,f
  2609     05F0  0DF1               	rlf	___aldiv@divisor+1,f
  2610     05F1  0DF2               	rlf	___aldiv@divisor+2,f
  2611     05F2  0DF3               	rlf	___aldiv@divisor+3,f
  2612     05F3  0BF8               	decfsz	??___aldiv,f
  2613     05F4  2DEE               	goto	u435
  2614     05F5                     l1288:
  2615     05F5  3001               	movlw	1
  2616     05F6  00FF               	movwf	btemp+1
  2617     05F7  087F               	movf	btemp+1,w
  2618     05F8  07A0               	addwf	___aldiv@counter,f
  2619     05F9                     l1290:
  2620     05F9  1FF3               	btfss	___aldiv@divisor+3,7
  2621     05FA  2DFC               	goto	u441
  2622     05FB  2DFD               	goto	u440
  2623     05FC                     u441:
  2624     05FC  2DEC               	goto	l1286
  2625     05FD                     u440:
  2626     05FD                     l1292:
  2627     05FD  3001               	movlw	1
  2628     05FE  00F8               	movwf	??___aldiv
  2629     05FF                     u455:
  2630     05FF  1003               	clrc
  2631     0600  0DA2               	rlf	___aldiv@quotient,f
  2632     0601  0DA3               	rlf	___aldiv@quotient+1,f
  2633     0602  0DA4               	rlf	___aldiv@quotient+2,f
  2634     0603  0DA5               	rlf	___aldiv@quotient+3,f
  2635     0604  0BF8               	decfsz	??___aldiv,f
  2636     0605  2DFF               	goto	u455
  2637     0606                     l1294:
  2638     0606  0873               	movf	___aldiv@divisor+3,w
  2639     0607  0277               	subwf	___aldiv@dividend+3,w
  2640     0608  1D03               	skipz
  2641     0609  2E14               	goto	u465
  2642     060A  0872               	movf	___aldiv@divisor+2,w
  2643     060B  0276               	subwf	___aldiv@dividend+2,w
  2644     060C  1D03               	skipz
  2645     060D  2E14               	goto	u465
  2646     060E  0871               	movf	___aldiv@divisor+1,w
  2647     060F  0275               	subwf	___aldiv@dividend+1,w
  2648     0610  1D03               	skipz
  2649     0611  2E14               	goto	u465
  2650     0612  0870               	movf	___aldiv@divisor,w
  2651     0613  0274               	subwf	___aldiv@dividend,w
  2652     0614                     u465:
  2653     0614  1C03               	skipc
  2654     0615  2E17               	goto	u461
  2655     0616  2E18               	goto	u460
  2656     0617                     u461:
  2657     0617  2E27               	goto	l1300
  2658     0618                     u460:
  2659     0618                     l1296:
  2660     0618  0870               	movf	___aldiv@divisor,w
  2661     0619  02F4               	subwf	___aldiv@dividend,f
  2662     061A  0871               	movf	___aldiv@divisor+1,w
  2663     061B  1C03               	skipc
  2664     061C  0F71               	incfsz	___aldiv@divisor+1,w
  2665     061D  02F5               	subwf	___aldiv@dividend+1,f
  2666     061E  0872               	movf	___aldiv@divisor+2,w
  2667     061F  1C03               	skipc
  2668     0620  0F72               	incfsz	___aldiv@divisor+2,w
  2669     0621  02F6               	subwf	___aldiv@dividend+2,f
  2670     0622  0873               	movf	___aldiv@divisor+3,w
  2671     0623  1C03               	skipc
  2672     0624  0F73               	incfsz	___aldiv@divisor+3,w
  2673     0625  02F7               	subwf	___aldiv@dividend+3,f
  2674     0626                     l1298:
  2675     0626  1422               	bsf	___aldiv@quotient,0
  2676     0627                     l1300:
  2677     0627  3001               	movlw	1
  2678     0628                     u475:
  2679     0628  1003               	clrc
  2680     0629  0CF3               	rrf	___aldiv@divisor+3,f
  2681     062A  0CF2               	rrf	___aldiv@divisor+2,f
  2682     062B  0CF1               	rrf	___aldiv@divisor+1,f
  2683     062C  0CF0               	rrf	___aldiv@divisor,f
  2684     062D  3EFF               	addlw	-1
  2685     062E  1D03               	skipz
  2686     062F  2E28               	goto	u475
  2687     0630                     l1302:
  2688     0630  3001               	movlw	1
  2689     0631  02A0               	subwf	___aldiv@counter,f
  2690     0632  1D03               	btfss	3,2
  2691     0633  2E35               	goto	u481
  2692     0634  2E36               	goto	u480
  2693     0635                     u481:
  2694     0635  2DFD               	goto	l1292
  2695     0636                     u480:
  2696     0636                     l1304:
  2697     0636  0821               	movf	___aldiv@sign,w
  2698     0637  1903               	btfsc	3,2
  2699     0638  2E3A               	goto	u491
  2700     0639  2E3B               	goto	u490
  2701     063A                     u491:
  2702     063A  2E46               	goto	l1308
  2703     063B                     u490:
  2704     063B                     l1306:
  2705     063B  09A2               	comf	___aldiv@quotient,f
  2706     063C  09A3               	comf	___aldiv@quotient+1,f
  2707     063D  09A4               	comf	___aldiv@quotient+2,f
  2708     063E  09A5               	comf	___aldiv@quotient+3,f
  2709     063F  0AA2               	incf	___aldiv@quotient,f
  2710     0640  1903               	skipnz
  2711     0641  0AA3               	incf	___aldiv@quotient+1,f
  2712     0642  1903               	skipnz
  2713     0643  0AA4               	incf	___aldiv@quotient+2,f
  2714     0644  1903               	skipnz
  2715     0645  0AA5               	incf	___aldiv@quotient+3,f
  2716     0646                     l1308:
  2717     0646  0825               	movf	___aldiv@quotient+3,w
  2718     0647  00F3               	movwf	?___aldiv+3
  2719     0648  0824               	movf	___aldiv@quotient+2,w
  2720     0649  00F2               	movwf	?___aldiv+2
  2721     064A  0823               	movf	___aldiv@quotient+1,w
  2722     064B  00F1               	movwf	?___aldiv+1
  2723     064C  0822               	movf	___aldiv@quotient,w
  2724     064D  00F0               	movwf	?___aldiv
  2725     064E                     l365:
  2726     064E  0008               	return
  2727     064F                     __end_of___aldiv:
  2728                           
  2729                           	psect	text17
  2730     03B0                     __ptext17:	
  2731 ;; *************** function _SPI_init_master *****************
  2732 ;; Defined at:
  2733 ;;		line 30 in file "./spi.h"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;		None
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2747 ;;      Params:         0       0       0       0       0
  2748 ;;      Locals:         0       0       0       0       0
  2749 ;;      Temps:          0       0       0       0       0
  2750 ;;      Totals:         0       0       0       0       0
  2751 ;;Total ram usage:        0 bytes
  2752 ;; Hardware stack levels used: 1
  2753 ;; This function calls:
  2754 ;;		Nothing
  2755 ;; This function is called by:
  2756 ;;		_main
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760     03B0                     _SPI_init_master:	
  2761                           ;psect for function _SPI_init_master
  2762                           
  2763     03B0                     l1336:	
  2764                           ;incstack = 0
  2765                           ; Regs used in _SPI_init_master: [wreg]
  2766                           
  2767                           
  2768                           ;./spi.h: 32:         SSPCON = 0b01100001;
  2769     03B0  3061               	movlw	97
  2770     03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2771     03B2  1303               	bcf	3,6	;RP1=0, select bank0
  2772     03B3  0094               	movwf	20	;volatile
  2773                           
  2774                           ;./spi.h: 33:         SSPSTAT = 0b01000000;
  2775     03B4  3040               	movlw	64
  2776     03B5  1683               	bsf	3,5	;RP0=1, select bank1
  2777     03B6  1303               	bcf	3,6	;RP1=0, select bank1
  2778     03B7  0094               	movwf	20	;volatile
  2779     03B8                     l1338:
  2780                           
  2781                           ;./spi.h: 34:         TRISC4 = 1;
  2782     03B8  1607               	bsf	7,4	;volatile
  2783     03B9                     l1340:
  2784                           
  2785                           ;./spi.h: 35:         TRISC5 = 0;
  2786     03B9  1287               	bcf	7,5	;volatile
  2787     03BA                     l1342:
  2788                           
  2789                           ;./spi.h: 36:         TRISC3 = 0;
  2790     03BA  1187               	bcf	7,3	;volatile
  2791     03BB                     l79:
  2792     03BB  0008               	return
  2793     03BC                     __end_of_SPI_init_master:
  2794     007E                     btemp	set	126	;btemp
  2795     007E                     wtemp0	set	126
  2796                           
  2797                           	psect	config
  2798                           
  2799                           ;Config register CONFIG1 @ 0x2007
  2800                           ;	Oscillator Selection bits
  2801                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2802                           ;	Watchdog Timer Enable bit
  2803                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2804                           ;	Power-up Timer Enable bit
  2805                           ;	PWRTE = OFF, PWRT disabled
  2806                           ;	RE3/MCLR pin function select bit
  2807                           ;	MCLRE = 0x1, unprogrammed default
  2808                           ;	Code Protection bit
  2809                           ;	CP = OFF, Program memory code protection is disabled
  2810                           ;	Data Code Protection bit
  2811                           ;	CPD = OFF, Data memory code protection is disabled
  2812                           ;	Brown Out Reset Selection bits
  2813                           ;	BOREN = OFF, BOR disabled
  2814                           ;	Internal External Switchover bit
  2815                           ;	IESO = 0x1, unprogrammed default
  2816                           ;	Fail-Safe Clock Monitor Enabled bit
  2817                           ;	FCMEN = 0x1, unprogrammed default
  2818                           ;	Low Voltage Programming Enable bit
  2819                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2820                           ;	In-Circuit Debugger Mode bit
  2821                           ;	DEBUG = 0x1, unprogrammed default
  2822     2007                     	org	8199
  2823     2007  2CF2               	dw	11506
  2824                           
  2825                           ;Config register CONFIG2 @ 0x2008
  2826                           ;	Brown-out Reset Selection bit
  2827                           ;	BOR4V = 0x1, unprogrammed default
  2828                           ;	Flash Program Memory Self Write Enable bits
  2829                           ;	WRT = OFF, Write protection off
  2830     2008                     	org	8200
  2831     2008  3FFF               	dw	16383

Data Sizes:
    Strings     26
    Constant    0
    Data        8
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      44
    BANK1            80     74      77
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_2(CODE[8]), STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> main@buffer(BANK1[64]), char_to_binary_string@output(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    nrf_send@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@send_data(BANK1[3]), 

    nrf_setup@addr	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK0[5]), 

    nrf_write_payload@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@send_data(BANK1[3]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@send_data(BANK1[3]), nrf_read@clear(COMMON[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(COMMON[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@send_data(BANK1[3]), nrf_read@clear(COMMON[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(COMMON[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK1[3]), RADIO_ADDR(BANK0[5]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> main@send_data(BANK1[3]), nrf_setup@data(BANK0[5]), 

    UART_write_text@text	PTR unsigned char  size(1) Largest target is 64
		 -> main@buffer(BANK1[64]), 


Critical Paths under _main in COMMON

    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_send->_nrf_write_payload
    _nrf_write_payload->_nrf_write_register
    _nrf_write_command->_SPI_write
    _nrf_set_tx_mode->_nrf_read_register
    _nrf_set_tx_mode->_nrf_write_register
    _nrf_write_register->_nrf_command
    _nrf_read_register->_nrf_command
    _nrf_command->_SPI_write
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                77    77      0   24082
                                             26 BANK0      3     3      0
                                              0 BANK1     74    74      0
                    _SPI_init_master
                          _UART_init
                    _UART_write_text
                             _arrcpy
                           _nrf_send
                    _nrf_set_tx_mode
                          _nrf_setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             34    17     17     424
                                              0 COMMON     5     5      0
                                              0 BANK0     17     0     17
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                            9     8      1    7240
                                             12 COMMON     1     0      1
                                              0 BANK0      8     8      0
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3096
                                             11 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               6     4      2     689
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _nrf_send                                             4     3      1   10529
                                              0 BANK0      4     3      1
                    _nrf_set_tx_mode
                  _nrf_write_command
                  _nrf_write_payload
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_payload                                    4     3      1    3157
                                             11 COMMON     3     2      1
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_set_tx_mode                                      1     1      0    4100
                                             11 COMMON     1     1      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    3003
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2    1027
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (3) _nrf_command                                          7     5      2     505
                                              1 COMMON     7     5      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      4     4      0     145
                                              1 COMMON     4     4      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_init
     ___aldiv
   _UART_write_text
     _UART_write
   _arrcpy
   _nrf_send
     _nrf_set_tx_mode
       _nrf_read_register
         _nrf_command
           _SPI_write
       _nrf_write_register
         _nrf_command
     _nrf_write_command
       _SPI_write
     _nrf_write_payload
       _nrf_write_register
     _nrf_write_register
   _nrf_set_tx_mode
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     4A      4D       7       96.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1D      2C       5       55.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      87      12        0.0%
ABS                  0      0      87       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Mar 27 22:53:50 2023

                           pc 0002                            _BF 04A0                            l61 03C7  
                          l55 05B1                            l58 03BD                            l82 03E6  
                          l67 046C                            l91 044B                            l85 03EF  
                          l79 03BB                            l96 04E9                            l97 04ED  
                          fsr 0004         nrf_set_tx_mode@config 007B                           l100 03E0  
                         l103 03D3                           l112 042E                           l106 0415  
                         l123 0490                           l131 04BC                           l115 07BD  
                         l109 03FF                           l355 05C6                           l365 064E  
                         l286 0546                           _RD2 0042                           _RD3 0043  
                         u400 05B9                           u401 05B8                           u410 05CA  
                         u411 05C9                           u420 05E9                           u500 055A  
                         u421 05E8                           u510 0573                           u350 03EC  
                         u351 03EB                           u440 05FD                           u360 04E9  
                         u441 05FC                           u521 0585                           u505 0555  
                         u361 04E8                           u522 0586                           u370 03C3  
                         u530 046C                           u435 05EE                           u523 058B  
                         u515 056E                           u371 03C2                           u531 046B  
                         u460 0618                           u524 058C                           u540 04B0  
                         u380 044B                           u461 0617                           u525 0591  
                         u541 04AF                           u381 044A                           u526 0592  
                         u390 047E                           u550 04F8                           u455 05FF  
                         u391 047D                           u551 04F7                           u480 0636  
                         u560 0542                           u481 0635                           u465 0614  
                         u561 0541                           u490 063B                           u491 063A  
                         u475 0628                           u707 070A                           u660 06CC  
                         u717 0719                           u661 06CB                           u670 06F9  
                         u727 0410                           u671 06F8                           u665 06C8  
                         u675 06F5                           u687 0692                           u697 06DE  
                         fsr0 0004                           indf 0000                          l1200 04CA  
                        l1202 04DF                          l1210 03D5                          l1300 0627  
                        l1204 04E3                          l1220 03F4                          l1302 0630  
                        l1230 03C3                          l1206 04EC                          l1214 03C9  
                        l1222 03FB                          l1304 0636                          l1320 05A7  
                        l1312 0547                          l1224 03FE                          l1240 0401  
                        l1232 0430                          l1400 0508                          l1306 063B  
                        l1322 05AA                          l1314 054A                          l1330 0450  
                        l1218 03F1                          l1242 040B                          l1234 0432  
                        l1250 0418                          l1410 0542                          l1402 050C  
                        l1340 03B9                          l1308 0646                          l1324 05AB  
                        l1316 05A3                          l1228 03BD                          l1332 045B  
                        l1260 047A                          l1244 040E                          l1236 0441  
                        l1252 0422                          l1500 066A                          l1342 03BA  
                        l1270 05B2                          l1326 05AE                          l1318 05A4  
                        l1334 0461                          l1190 03EC                          l1246 0412  
                        l1238 0445                          l1254 0428                          l1350 0712  
                        l1406 0516                          l1510 068C                          l1502 0674  
                        l1336 03B0                          l1280 05D9                          l1272 05B5  
                        l1328 044D                          l1264 047F                          l1256 046D  
                        l1248 0416                          l1360 073D                          l1352 0722  
                        l1344 0700                          l1408 0530                          l1520 06A1  
                        l1512 0697                          l1504 067A                          l1338 03B8  
                        l1290 05F9                          l1282 05E1                          l1274 05B9  
                        l1194 04BE                          l1266 0483                          l1258 0477  
                        l1370 0762                          l1362 0747                          l1354 072C  
                        l1346 0704                          l1530 06B9                          l1522 06AB  
                        l1514 069F                          l1506 067F                          l1292 05FD  
                        l1284 05E9                          l1276 05CA                          l1188 03E2  
                        l1196 04C1                          l1268 048D                          l1380 04A3  
                        l1372 0766                          l1364 074B                          l1356 072F  
                        l1348 070F                          l1540 06EC                          l1532 06BF  
                        l1508 0687                          l1294 0606                          l1286 05EC  
                        l1278 05D5                          l1198 04C8                          l1382 04AC  
                        l1374 0774                          l1366 0755                          l1358 0739  
                        l1390 04F2                          l1534 06CC                          l1296 0618  
                        l1288 05F5                          l1384 04B0                          l1376 077E  
                        l1368 0758                          l1392 04F8                          l1536 06D6  
                        l1528 06AF                          l1298 0626                          l1386 04B2  
                        l1378 0494                          l1394 04FD                          l1538 06E4  
                        l1572 0528                          l1396 0502                          l1388 04EF  
                        l1398 0503                          l1496 064F                          l1498 0653  
                        STR_1 0009                          STR_2 001B                          _BRGH 04C2  
                        _CREN 00C4                          _RCIF 0065                          _SPEN 00C7  
                        _TRMT 04C1                          _TXEN 04C5                          _SYNC 04C4  
                        _main 064F                          btemp 007E                          start 0000  
            UART_write_text@i 0072               __end_of___aldiv 064F                         ?_main 0070  
                       _RCREG 001A                         _SPBRG 0099                         _TXREG 0019  
                 ?_UART_write 0070                         main@i 00E6                         main@j 00E8  
                       pclath 000A                         status 0003                         wtemp0 007E  
             __end_of_sprintf 0547               __initialization 07BE                  __end_of_main 06FD  
                      ??_main 003A          nrf_write_payload@len 007B                  ?_nrf_command 0071  
       nrf_setup@payload_size 007C                        _TRISC3 043B                        _TRISC4 043C  
                      _TRISD2 0442                        _TRISC5 043D                        _TRISD3 0443  
                      _TRISC6 043E                        _TRISC7 043F                        _SSPCON 0014  
                      _SSPBUF 0013                     ??___aldiv 0078             __end_of_UART_init 05B2  
              _nrf_flush_rxtx 0416                 main@send_data 00E3   char_to_binary_string@output 003D  
                      _arrcpy 042F              __end_of_nrf_send 04BD               _UART_write_text 044C  
           __end_of_SPI_write 03F0                     ??_sprintf 0070            nrf_flush_rxtx@data 007B  
     __end_of__initialization 07FC        __end_of_nrf_flush_rxtx 042F                __pcstackCOMMON 0070  
                __pidataBANK0 03AB                  __pidataBANK1 03A8    __end_of_nrf_write_register 03E1  
           ??_SPI_init_master 0070             ??_nrf_set_tx_mode 007B         nrf_write_payload@data 007D  
                  __pbssBANK0 003D         nrf_write_register@len 0079         nrf_write_register@reg 007A  
             ?_nrf_flush_rxtx 0070                    __pmaintext 064F                       ?_arrcpy 0070  
     __end_of_UART_write_text 046D                  ??_UART_write 0070                       _SSPSTAT 0094  
                 nrf_send@len 0020                    __stringtab 0003                     ?_nrf_send 0020  
                     ___aldiv 05B2            __end_of_UART_write 03C8                       __ptext1 04EE  
                     __ptext2 06FD                       __ptext3 0416                       __ptext4 042F  
                     __ptext5 0491                       __ptext6 0400                       __ptext7 03F0  
                     __ptext8 046D                       __ptext9 03D4          nrf_read_register@len 0079  
        nrf_read_register@reg 007A              ___aldiv@dividend 0074                       _sprintf 04EE  
                     arrcpy@i 0075          end_of_initialization 07FC             __end_of_nrf_setup 07BE  
         UART_init@_XTAL_FREQ 002A                    ??_nrf_send 007E              ___aldiv@quotient 0022  
            ?_UART_write_text 0070                     _UART_init 0547                 nrf_send@clear 0023  
                   _SPI_write 03E1  nrf_write_command@NRF_command 0071                    main@buffer 00A0  
             _SPI_init_master 03B0               _nrf_set_tx_mode 046D                 nrf_setup@addr 0022  
               nrf_setup@data 0023                __end_of_arrcpy 044C                    ?_UART_init 0026  
         start_initialization 07BE            _nrf_write_register 03D4                    ?_SPI_write 0070  
            ??_nrf_flush_rxtx 007B           ?_nrf_write_register 0078                      ??_arrcpy 0072  
                 __pdataBANK0 0047                   __pdataBANK1 00EA          ??_nrf_write_register 007A  
      nrf_write_register@data 0078                     ___latbits 0002                 __pcstackBANK0 0020  
               __pcstackBANK1 00A0           UART_write_text@text 0074       __end_of_SPI_init_master 03BC  
     __end_of_nrf_set_tx_mode 0491                 SPI_write@data 0070                      ?___aldiv 0070  
                   __pstrings 0003                   ??_UART_init 002E                 ??_nrf_command 0073  
                    ?_sprintf 0020                   ??_SPI_write 0070               ___aldiv@divisor 0070  
                nrf_command@i 0077               ___aldiv@counter 0020                     _nrf_setup 06FD  
                   main@F1424 00EA               nrf_command@data 0071             _nrf_read_register 03C8  
          ?_nrf_read_register 0078                  nrf_send@data 0022                   __stringbase 0008  
                nrf_send@stat 0021                UART_write@data 0070                     arrcpy@len 0071  
                   arrcpy@dst 0074                     arrcpy@src 0070           ??_nrf_read_register 007A  
           _nrf_write_command 03F0           __end_of_nrf_command 04EE            ?_nrf_write_command 0070  
           _nrf_write_payload 0400                    ?_nrf_setup 007C            ?_nrf_write_payload 007B  
            ?_SPI_init_master 0070              ?_nrf_set_tx_mode 0070     __end_of_nrf_read_register 03D4  
         ??_nrf_write_command 0071           ??_nrf_write_payload 007C            __end_of__stringtab 0009  
   __end_of_nrf_write_command 0400                      __ptext10 03C8                      __ptext11 04BD  
                    __ptext12 03E1                      __ptext13 044C                      __ptext14 03BC  
                    __ptext15 0547                      __ptext16 05B2                      __ptext17 03B0  
       nrf_read_register@data 0078     __end_of_nrf_write_payload 0416                      _nrf_send 0491  
              nrf_command@len 0072                      main@data 00E0                    _RADIO_ADDR 0047  
                 _nrf_command 04BD        nrf_command@NRF_command 0075                     sprintf@ap 0072  
                   sprintf@sp 0074             UART_init@baudrate 0026                   ??_nrf_setup 0020  
                   stringcode 0003                    _OSCCONbits 008F                      sprintf@c 0073  
                    sprintf@f 0020                      stringdir 0003                      stringtab 0003  
                ___aldiv@sign 0021       nrf_write_command@status 0072             nrf_command@status 0076  
                  _UART_write 03BC             ??_UART_write_text 0071  
