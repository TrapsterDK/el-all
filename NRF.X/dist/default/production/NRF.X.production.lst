

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Mar 28 13:57:10 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34     0000                     
    35                           ; Version 2.40
    36                           ; Generated 04/07/2022 GMT
    37                           ; 
    38                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0007                     	;# 
    78     0008                     	;# 
    79     0009                     	;# 
    80     000A                     	;# 
    81     000B                     	;# 
    82     000C                     	;# 
    83     000D                     	;# 
    84     000E                     	;# 
    85     000E                     	;# 
    86     000F                     	;# 
    87     0010                     	;# 
    88     0011                     	;# 
    89     0012                     	;# 
    90     0013                     	;# 
    91     0014                     	;# 
    92     0015                     	;# 
    93     0015                     	;# 
    94     0016                     	;# 
    95     0017                     	;# 
    96     0018                     	;# 
    97     0019                     	;# 
    98     001A                     	;# 
    99     001B                     	;# 
   100     001B                     	;# 
   101     001C                     	;# 
   102     001D                     	;# 
   103     001E                     	;# 
   104     001F                     	;# 
   105     0081                     	;# 
   106     0085                     	;# 
   107     0086                     	;# 
   108     0087                     	;# 
   109     0088                     	;# 
   110     0089                     	;# 
   111     008C                     	;# 
   112     008D                     	;# 
   113     008E                     	;# 
   114     008F                     	;# 
   115     0090                     	;# 
   116     0091                     	;# 
   117     0092                     	;# 
   118     0093                     	;# 
   119     0093                     	;# 
   120     0093                     	;# 
   121     0094                     	;# 
   122     0095                     	;# 
   123     0096                     	;# 
   124     0097                     	;# 
   125     0098                     	;# 
   126     0099                     	;# 
   127     009A                     	;# 
   128     009B                     	;# 
   129     009C                     	;# 
   130     009D                     	;# 
   131     009E                     	;# 
   132     009F                     	;# 
   133     0105                     	;# 
   134     0107                     	;# 
   135     0108                     	;# 
   136     0109                     	;# 
   137     010C                     	;# 
   138     010C                     	;# 
   139     010D                     	;# 
   140     010E                     	;# 
   141     010F                     	;# 
   142     0185                     	;# 
   143     0187                     	;# 
   144     0188                     	;# 
   145     0189                     	;# 
   146     018C                     	;# 
   147     018D                     	;# 
   148     0000                     	;# 
   149     0001                     	;# 
   150     0002                     	;# 
   151     0003                     	;# 
   152     0004                     	;# 
   153     0005                     	;# 
   154     0006                     	;# 
   155     0007                     	;# 
   156     0008                     	;# 
   157     0009                     	;# 
   158     000A                     	;# 
   159     000B                     	;# 
   160     000C                     	;# 
   161     000D                     	;# 
   162     000E                     	;# 
   163     000E                     	;# 
   164     000F                     	;# 
   165     0010                     	;# 
   166     0011                     	;# 
   167     0012                     	;# 
   168     0013                     	;# 
   169     0014                     	;# 
   170     0015                     	;# 
   171     0015                     	;# 
   172     0016                     	;# 
   173     0017                     	;# 
   174     0018                     	;# 
   175     0019                     	;# 
   176     001A                     	;# 
   177     001B                     	;# 
   178     001B                     	;# 
   179     001C                     	;# 
   180     001D                     	;# 
   181     001E                     	;# 
   182     001F                     	;# 
   183     0081                     	;# 
   184     0085                     	;# 
   185     0086                     	;# 
   186     0087                     	;# 
   187     0088                     	;# 
   188     0089                     	;# 
   189     008C                     	;# 
   190     008D                     	;# 
   191     008E                     	;# 
   192     008F                     	;# 
   193     0090                     	;# 
   194     0091                     	;# 
   195     0092                     	;# 
   196     0093                     	;# 
   197     0093                     	;# 
   198     0093                     	;# 
   199     0094                     	;# 
   200     0095                     	;# 
   201     0096                     	;# 
   202     0097                     	;# 
   203     0098                     	;# 
   204     0099                     	;# 
   205     009A                     	;# 
   206     009B                     	;# 
   207     009C                     	;# 
   208     009D                     	;# 
   209     009E                     	;# 
   210     009F                     	;# 
   211     0105                     	;# 
   212     0107                     	;# 
   213     0108                     	;# 
   214     0109                     	;# 
   215     010C                     	;# 
   216     010C                     	;# 
   217     010D                     	;# 
   218     010E                     	;# 
   219     010F                     	;# 
   220     0185                     	;# 
   221     0187                     	;# 
   222     0188                     	;# 
   223     0189                     	;# 
   224     018C                     	;# 
   225     018D                     	;# 
   226                           
   227                           	psect	idataBANK1
   228     038A                     __pidataBANK1:
   229                           
   230                           ;initializer for _RADIO_ADDR
   231     038A  3401               	retlw	1
   232     038B  3402               	retlw	2
   233     038C  3403               	retlw	3
   234     038D  3404               	retlw	4
   235     038E  3405               	retlw	5
   236     0013                     _SSPBUF	set	19
   237     0014                     _SSPCON	set	20
   238     001A                     _RCREG	set	26
   239     0019                     _TXREG	set	25
   240     0042                     _RD2	set	66
   241     0043                     _RD3	set	67
   242     0065                     _RCIF	set	101
   243     00C4                     _CREN	set	196
   244     00C7                     _SPEN	set	199
   245     008F                     _OSCCONbits	set	143
   246     0094                     _SSPSTAT	set	148
   247     0099                     _SPBRG	set	153
   248     0442                     _TRISD2	set	1090
   249     0443                     _TRISD3	set	1091
   250     04A0                     _BF	set	1184
   251     043B                     _TRISC3	set	1083
   252     043D                     _TRISC5	set	1085
   253     043C                     _TRISC4	set	1084
   254     04C1                     _TRMT	set	1217
   255     04C5                     _TXEN	set	1221
   256     043E                     _TRISC6	set	1086
   257     043F                     _TRISC7	set	1087
   258     04C4                     _SYNC	set	1220
   259     04C2                     _BRGH	set	1218
   260                           
   261                           	psect	strings
   262     0003                     __pstrings:
   263     0003                     stringtab:
   264     0003                     __stringtab:
   265                           
   266                           ;	String table - string pointers are 1 byte each
   267     0003  1BFF               	btfsc	btemp+1,7
   268     0004  280D               	ljmp	stringcode
   269     0005  1383               	bcf	3,7
   270     0006  187F               	btfsc	btemp+1,0
   271     0007  1783               	bsf	3,7
   272     0008  0800               	movf	0,w
   273     0009  0A84               	incf	4,f
   274     000A  1903               	skipnz
   275     000B  0AFF               	incf	btemp+1,f
   276     000C  0008               	return
   277     000D                     stringcode:
   278     000D                     stringdir:
   279     000D  3000               	movlw	high stringdir
   280     000E  008A               	movwf	10
   281     000F  0804               	movf	4,w
   282     0010  0A84               	incf	4,f
   283     0011  0782               	addwf	2,f
   284     0012                     __stringbase:
   285     0012  3400               	retlw	0
   286     0013                     __end_of__stringtab:
   287     0013                     STR_1:
   288     0013  3425               	retlw	37	;'%'
   289     0014  3463               	retlw	99	;'c'
   290     0015  3425               	retlw	37	;'%'
   291     0016  3463               	retlw	99	;'c'
   292     0017  3425               	retlw	37	;'%'
   293     0018  3463               	retlw	99	;'c'
   294     0019  3425               	retlw	37	;'%'
   295     001A  3463               	retlw	99	;'c'
   296     001B  3425               	retlw	37	;'%'
   297     001C  3463               	retlw	99	;'c'
   298     001D  3425               	retlw	37	;'%'
   299     001E  3463               	retlw	99	;'c'
   300     001F  3425               	retlw	37	;'%'
   301     0020  3463               	retlw	99	;'c'
   302     0021  3425               	retlw	37	;'%'
   303     0022  3463               	retlw	99	;'c'
   304     0023  340A               	retlw	10
   305     0024  3400               	retlw	0
   306     0025                     STR_3:
   307     0025  3452               	retlw	82	;'R'
   308     0026  3465               	retlw	101	;'e'
   309     0027  3463               	retlw	99	;'c'
   310     0028  3469               	retlw	105	;'i'
   311     0029  3465               	retlw	101	;'e'
   312     002A  3476               	retlw	118	;'v'
   313     002B  3465               	retlw	101	;'e'
   314     002C  3464               	retlw	100	;'d'
   315     002D  3420               	retlw	32	;' '
   316     002E  3425               	retlw	37	;'%'
   317     002F  3473               	retlw	115	;'s'
   318     0030  340A               	retlw	10
   319     0031  3400               	retlw	0
   320     0032                     STR_2:
   321     0032  3442               	retlw	66	;'B'
   322     0033  344F               	retlw	79	;'O'
   323     0034  344F               	retlw	79	;'O'
   324     0035  3454               	retlw	84	;'T'
   325     0036  3445               	retlw	69	;'E'
   326     0037  3444               	retlw	68	;'D'
   327     0038  340A               	retlw	10
   328     0039  3400               	retlw	0
   329     003A                     STR_4:
   330     003A  3428               	retlw	40	;'('
   331     003B  346E               	retlw	110	;'n'
   332     003C  3475               	retlw	117	;'u'
   333     003D  346C               	retlw	108	;'l'
   334     003E  346C               	retlw	108	;'l'
   335     003F  3429               	retlw	41	;')'
   336     0040  3400               	retlw	0
   337                           
   338                           	psect	cinit
   339     07D0                     start_initialization:	
   340                           ; #config settings
   341                           
   342     07D0                     __initialization:
   343                           
   344                           ; Initialize objects allocated to BANK1
   345     07D0  1683               	bsf	3,5	;RP0=1, select bank1
   346     07D1  1303               	bcf	3,6	;RP1=0, select bank1
   347     07D2  120A  118A  238A  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   348     07D7  00E0               	movwf	__pdataBANK1& (0+127)
   349     07D8  120A  118A  238B  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   350     07DD  00E1               	movwf	(__pdataBANK1+1)& (0+127)
   351     07DE  120A  118A  238C  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   352     07E3  00E2               	movwf	(__pdataBANK1+2)& (0+127)
   353     07E4  120A  118A  238D  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   354     07E9  00E3               	movwf	(__pdataBANK1+3)& (0+127)
   355     07EA  120A  118A  238E  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
   356     07EF  00E4               	movwf	(__pdataBANK1+4)& (0+127)
   357                           
   358                           ; Clear objects allocated to BANK0
   359     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   360     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   361     07F2  01BD               	clrf	__pbssBANK0& (0+127)
   362     07F3  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   363     07F4  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   364     07F5  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   365     07F6  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   366     07F7  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   367     07F8  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   368     07F9  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   369     07FA  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   370     07FB  01C6               	clrf	(__pbssBANK0+9)& (0+127)
   371     07FC                     end_of_initialization:	
   372                           ;End of C runtime variable initialization code
   373                           
   374     07FC                     __end_of__initialization:
   375     07FC  0183               	clrf	3
   376     07FD  120A  118A  2D5E   	ljmp	_main	;jump to C main() function
   377                           
   378                           	psect	bssBANK0
   379     003D                     __pbssBANK0:
   380     003D                     char_to_binary_string@output:
   381     003D                     	ds	10
   382                           
   383                           	psect	dataBANK1
   384     00E0                     __pdataBANK1:
   385     00E0                     _RADIO_ADDR:
   386     00E0                     	ds	5
   387                           
   388                           	psect	cstackBANK3
   389     0190                     __pcstackBANK3:
   390     0190                     main@buffer_197:
   391                           
   392                           ; 64 bytes @ 0x0
   393     0190                     	ds	64
   394                           
   395                           	psect	cstackBANK1
   396     00A0                     __pcstackBANK1:
   397     00A0                     main@buffer:
   398                           
   399                           ; 64 bytes @ 0x0
   400     00A0                     	ds	64
   401                           
   402                           	psect	cstackCOMMON
   403     0070                     __pcstackCOMMON:
   404     0070                     ??_sprintf:
   405     0070                     ?_UART_write:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0070                     ??_UART_write:	
   409                           ; 1 bytes @ 0x0
   410                           
   411     0070                     ?_SPI_init_master:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ??_SPI_init_master:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     ?_SPI_write:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     ??_SPI_write:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     ?_arrcpy:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0070                     ?_nrf_write_command:	
   427                           ; 1 bytes @ 0x0
   428                           
   429     0070                     ?_nrf_flush_rxtx:	
   430                           ; 1 bytes @ 0x0
   431                           
   432     0070                     ?_nrf_set_rx_mode:	
   433                           ; 1 bytes @ 0x0
   434                           
   435     0070                     ?_nrf_data_available:	
   436                           ; 1 bytes @ 0x0
   437                           
   438     0070                     ?_main:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0070                     ?___aldiv:	
   442                           ; 2 bytes @ 0x0
   443                           
   444     0070                     UART_write@data:	
   445                           ; 4 bytes @ 0x0
   446                           
   447     0070                     SPI_write@data:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0070                     arrcpy@src:	
   451                           ; 1 bytes @ 0x0
   452                           
   453     0070                     ___aldiv@divisor:	
   454                           ; 1 bytes @ 0x0
   455                           
   456                           
   457                           ; 4 bytes @ 0x0
   458     0070                     	ds	1
   459     0071                     ?_UART_write_text:
   460     0071                     ?_nrf_command_with_data_overwrite:	
   461                           ; 1 bytes @ 0x1
   462                           
   463     0071                     ?_nrf_command_with_data:	
   464                           ; 1 bytes @ 0x1
   465                           
   466     0071                     ??_nrf_write_command:	
   467                           ; 1 bytes @ 0x1
   468                           
   469     0071                     arrcpy@len:	
   470                           ; 1 bytes @ 0x1
   471                           
   472     0071                     nrf_command_with_data_overwrite@data:	
   473                           ; 1 bytes @ 0x1
   474                           
   475     0071                     nrf_command_with_data@data:	
   476                           ; 1 bytes @ 0x1
   477                           
   478     0071                     nrf_write_command@command:	
   479                           ; 1 bytes @ 0x1
   480                           
   481     0071                     UART_write_text@text:	
   482                           ; 1 bytes @ 0x1
   483                           
   484                           
   485                           ; 2 bytes @ 0x1
   486     0071                     	ds	1
   487     0072                     ??_arrcpy:
   488     0072                     nrf_command_with_data_overwrite@len:	
   489                           ; 1 bytes @ 0x2
   490                           
   491     0072                     nrf_command_with_data@len:	
   492                           ; 1 bytes @ 0x2
   493                           
   494     0072                     nrf_write_command@status:	
   495                           ; 1 bytes @ 0x2
   496                           
   497     0072                     sprintf@ap:	
   498                           ; 1 bytes @ 0x2
   499                           
   500                           
   501                           ; 1 bytes @ 0x2
   502     0072                     	ds	1
   503     0073                     ??_UART_write_text:
   504     0073                     ??_nrf_command_with_data_overwrite:	
   505                           ; 1 bytes @ 0x3
   506                           
   507     0073                     ??_nrf_command_with_data:	
   508                           ; 1 bytes @ 0x3
   509                           
   510     0073                     ??_nrf_data_available:	
   511                           ; 1 bytes @ 0x3
   512                           
   513     0073                     nrf_data_available@status:	
   514                           ; 1 bytes @ 0x3
   515                           
   516     0073                     sprintf@cp:	
   517                           ; 1 bytes @ 0x3
   518                           
   519                           
   520                           ; 2 bytes @ 0x3
   521     0073                     	ds	1
   522     0074                     nrf_command_with_data@command:
   523     0074                     ___aldiv@dividend:	
   524                           ; 1 bytes @ 0x4
   525                           
   526                           
   527                           ; 4 bytes @ 0x4
   528     0074                     	ds	1
   529     0075                     arrcpy@dst:
   530     0075                     nrf_command_with_data@status:	
   531                           ; 1 bytes @ 0x5
   532                           
   533     0075                     sprintf@c:	
   534                           ; 1 bytes @ 0x5
   535                           
   536                           
   537                           ; 1 bytes @ 0x5
   538     0075                     	ds	1
   539     0076                     arrcpy@i:
   540     0076                     nrf_command_with_data_overwrite@command:	
   541                           ; 1 bytes @ 0x6
   542                           
   543     0076                     nrf_command_with_data@i:	
   544                           ; 1 bytes @ 0x6
   545                           
   546     0076                     UART_write_text@i:	
   547                           ; 1 bytes @ 0x6
   548                           
   549                           
   550                           ; 2 bytes @ 0x6
   551     0076                     	ds	1
   552     0077                     ?_nrf_write_register:
   553     0077                     nrf_command_with_data_overwrite@status:	
   554                           ; 1 bytes @ 0x7
   555                           
   556     0077                     nrf_write_register@data:	
   557                           ; 1 bytes @ 0x7
   558                           
   559                           
   560                           ; 1 bytes @ 0x7
   561     0077                     	ds	1
   562     0078                     ??___aldiv:
   563     0078                     nrf_command_with_data_overwrite@i:	
   564                           ; 1 bytes @ 0x8
   565                           
   566     0078                     nrf_write_register@len:	
   567                           ; 1 bytes @ 0x8
   568                           
   569                           
   570                           ; 1 bytes @ 0x8
   571     0078                     	ds	1
   572     0079                     ??_nrf_write_register:
   573     0079                     ?_nrf_read_register:	
   574                           ; 1 bytes @ 0x9
   575                           
   576     0079                     nrf_write_register@reg:	
   577                           ; 1 bytes @ 0x9
   578                           
   579     0079                     nrf_read_register@data:	
   580                           ; 1 bytes @ 0x9
   581                           
   582                           
   583                           ; 1 bytes @ 0x9
   584     0079                     	ds	1
   585     007A                     ??_nrf_flush_rxtx:
   586     007A                     nrf_read_register@len:	
   587                           ; 1 bytes @ 0xA
   588                           
   589     007A                     nrf_flush_rxtx@data:	
   590                           ; 1 bytes @ 0xA
   591                           
   592                           
   593                           ; 1 bytes @ 0xA
   594     007A                     	ds	1
   595     007B                     ??_nrf_read_register:
   596     007B                     ?_nrf_setup:	
   597                           ; 1 bytes @ 0xB
   598                           
   599     007B                     nrf_read_register@reg:	
   600                           ; 1 bytes @ 0xB
   601                           
   602     007B                     nrf_setup@payload_size:	
   603                           ; 1 bytes @ 0xB
   604                           
   605                           
   606                           ; 1 bytes @ 0xB
   607     007B                     	ds	1
   608     007C                     ??_nrf_setup:
   609     007C                     ??_nrf_set_rx_mode:	
   610                           ; 1 bytes @ 0xC
   611                           
   612     007C                     ?_nrf_read:	
   613                           ; 1 bytes @ 0xC
   614                           
   615     007C                     nrf_set_rx_mode@config:	
   616                           ; 1 bytes @ 0xC
   617                           
   618     007C                     nrf_read@len:	
   619                           ; 1 bytes @ 0xC
   620                           
   621                           
   622                           ; 1 bytes @ 0xC
   623     007C                     	ds	1
   624     007D                     ??_nrf_read:
   625                           
   626                           ; 1 bytes @ 0xD
   627     007D                     	ds	1
   628     007E                     ??_main:
   629                           
   630                           	psect	cstackBANK0
   631     0020                     __pcstackBANK0:	
   632                           ; 1 bytes @ 0xE
   633                           
   634     0020                     ?_sprintf:
   635     0020                     nrf_setup@addr:	
   636                           ; 2 bytes @ 0x0
   637                           
   638     0020                     nrf_read@data:	
   639                           ; 1 bytes @ 0x0
   640                           
   641     0020                     ___aldiv@counter:	
   642                           ; 1 bytes @ 0x0
   643                           
   644     0020                     sprintf@sp:	
   645                           ; 1 bytes @ 0x0
   646                           
   647                           
   648                           ; 2 bytes @ 0x0
   649     0020                     	ds	1
   650     0021                     nrf_read@clear:
   651     0021                     ___aldiv@sign:	
   652                           ; 1 bytes @ 0x1
   653                           
   654     0021                     nrf_setup@data:	
   655                           ; 1 bytes @ 0x1
   656                           
   657                           
   658                           ; 5 bytes @ 0x1
   659     0021                     	ds	1
   660     0022                     sprintf@f:
   661     0022                     ___aldiv@quotient:	
   662                           ; 1 bytes @ 0x2
   663                           
   664                           
   665                           ; 4 bytes @ 0x2
   666     0022                     	ds	4
   667     0026                     ?_UART_init:
   668     0026                     UART_init@baudrate:	
   669                           ; 1 bytes @ 0x6
   670                           
   671                           
   672                           ; 4 bytes @ 0x6
   673     0026                     	ds	4
   674     002A                     UART_init@_XTAL_FREQ:
   675                           
   676                           ; 4 bytes @ 0xA
   677     002A                     	ds	4
   678     002E                     ??_UART_init:
   679                           
   680                           ; 1 bytes @ 0xE
   681     002E                     	ds	12
   682     003A                     main@data:
   683                           
   684                           ; 3 bytes @ 0x1A
   685     003A                     	ds	3
   686                           
   687                           	psect	maintext
   688     055E                     __pmaintext:	
   689 ;;
   690 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   691 ;;
   692 ;; *************** function _main *****************
   693 ;; Defined at:
   694 ;;		line 50 in file "main.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  buffer         64    0[BANK3 ] unsigned char [64]
   699 ;;  data            3   26[BANK0 ] unsigned char [3]
   700 ;;  buffer         64    0[BANK1 ] unsigned char [64]
   701 ;; Return value:  Size  Location     Type
   702 ;;                  2  183[None  ] int 
   703 ;; Registers used:
   704 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   705 ;; Tracked objects:
   706 ;;		On entry : B00/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   710 ;;      Params:         0       0       0       0       0
   711 ;;      Locals:         0       3      64      64       0
   712 ;;      Temps:          0       0       0       0       0
   713 ;;      Totals:         0       3      64      64       0
   714 ;;Total ram usage:      131 bytes
   715 ;; Hardware stack levels required when called: 5
   716 ;; This function calls:
   717 ;;		_SPI_init_master
   718 ;;		_UART_init
   719 ;;		_UART_write_text
   720 ;;		_nrf_data_available
   721 ;;		_nrf_read
   722 ;;		_nrf_set_rx_mode
   723 ;;		_nrf_setup
   724 ;;		_sprintf
   725 ;; This function is called by:
   726 ;;		Startup code after reset
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730     055E                     _main:	
   731                           ;psect for function _main
   732                           
   733     055E                     l1544:	
   734                           ;incstack = 0
   735                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   736                           
   737                           
   738                           ;main.c: 53:     OSCCONbits.IRCF = 111;
   739     055E  3070               	movlw	112
   740     055F  1683               	bsf	3,5	;RP0=1, select bank1
   741     0560  1303               	bcf	3,6	;RP1=0, select bank1
   742     0561  048F               	iorwf	15,f	;volatile
   743     0562                     l1546:
   744                           
   745                           ;main.c: 56:     UART_init(9600, 8000000UL);
   746     0562  3000               	movlw	0
   747     0563  1283               	bcf	3,5	;RP0=0, select bank0
   748     0564  1303               	bcf	3,6	;RP1=0, select bank0
   749     0565  00A9               	movwf	UART_init@baudrate+3
   750     0566  3000               	movlw	0
   751     0567  00A8               	movwf	UART_init@baudrate+2
   752     0568  3025               	movlw	37
   753     0569  00A7               	movwf	UART_init@baudrate+1
   754     056A  3080               	movlw	128
   755     056B  00A6               	movwf	UART_init@baudrate
   756     056C  3000               	movlw	0
   757     056D  00AD               	movwf	UART_init@_XTAL_FREQ+3
   758     056E  307A               	movlw	122
   759     056F  00AC               	movwf	UART_init@_XTAL_FREQ+2
   760     0570  3012               	movlw	18
   761     0571  00AB               	movwf	UART_init@_XTAL_FREQ+1
   762     0572  3000               	movlw	0
   763     0573  00AA               	movwf	UART_init@_XTAL_FREQ
   764     0574  120A  118A  24F3  120A  118A  	fcall	_UART_init
   765     0579                     l1548:
   766                           
   767                           ;main.c: 59:     { char buffer[64]; sprintf(buffer, "BOOTED\n"); UART_write_text(buffer)
      +                          ; };
   768     0579  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   769     057A  1283               	bcf	3,5	;RP0=0, select bank0
   770     057B  1303               	bcf	3,6	;RP1=0, select bank0
   771     057C  00A0               	movwf	sprintf@sp
   772     057D  3000               	movlw	0
   773     057E  00A1               	movwf	sprintf@sp+1
   774     057F  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   775     0580  00A2               	movwf	sprintf@f
   776     0581  120A  118A  266C  120A  118A  	fcall	_sprintf
   777     0586                     l1550:
   778     0586  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   779     0587  00F1               	movwf	UART_write_text@text
   780     0588  3000               	movlw	0
   781     0589  00F2               	movwf	UART_write_text@text+1
   782     058A  120A  118A  24BC  120A  118A  	fcall	_UART_write_text
   783     058F                     l1552:
   784                           
   785                           ;main.c: 62:     SPI_init_master();
   786     058F  120A  118A  238F  120A  118A  	fcall	_SPI_init_master
   787     0594                     l1554:
   788                           
   789                           ;main.c: 65:     nrf_setup(RADIO_ADDR, 3);
   790     0594  3003               	movlw	3
   791     0595  00FB               	movwf	nrf_setup@payload_size
   792     0596  30E0               	movlw	(low (_RADIO_ADDR| 0))& (0+255)
   793     0597  120A  118A  2713  120A  118A  	fcall	_nrf_setup
   794     059C                     l1556:
   795                           
   796                           ;main.c: 71:     nrf_set_rx_mode();
   797     059C  120A  118A  2423  120A  118A  	fcall	_nrf_set_rx_mode
   798     05A1                     l1558:
   799                           
   800                           ;main.c: 91:         while (!nrf_data_available())
   801     05A1  120A  118A  23C0  120A  118A  	fcall	_nrf_data_available
   802     05A6  3A00               	xorlw	0
   803     05A7  1903               	skipnz
   804     05A8  2DAA               	goto	u791
   805     05A9  2DAB               	goto	u790
   806     05AA                     u791:
   807     05AA  2DA1               	goto	l1558
   808     05AB                     u790:
   809     05AB                     l1560:
   810                           
   811                           ;main.c: 95:         uint8_t data[3];;main.c: 96:         nrf_read(data, 3);
   812     05AB  3003               	movlw	3
   813     05AC  00FC               	movwf	nrf_read@len
   814     05AD  303A               	movlw	(low (main@data| 0))& (0+255)
   815     05AE  120A  118A  2441  120A  118A  	fcall	_nrf_read
   816     05B3                     l1562:
   817                           
   818                           ;main.c: 97:         { char buffer[64]; sprintf(buffer, "Recieved %s\n", data); UART_wri
      +                          te_text(buffer); };
   819     05B3  3090               	movlw	(low (main@buffer_197| (0+256)))& (0+255)
   820     05B4  1283               	bcf	3,5	;RP0=0, select bank0
   821     05B5  1303               	bcf	3,6	;RP1=0, select bank0
   822     05B6  00A0               	movwf	sprintf@sp
   823     05B7  3001               	movlw	1
   824     05B8  00A1               	movwf	sprintf@sp+1
   825     05B9  3013               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   826     05BA  00A2               	movwf	sprintf@f
   827     05BB  303A               	movlw	(low (main@data| 0))& (0+255)
   828     05BC  00A3               	movwf	low ((?_sprintf| 0+3))
   829     05BD  120A  118A  266C  120A  118A  	fcall	_sprintf
   830     05C2                     l1564:
   831     05C2  3090               	movlw	(low (main@buffer_197| (0+256)))& (0+255)
   832     05C3  00F1               	movwf	UART_write_text@text
   833     05C4  3001               	movlw	1
   834     05C5  00F2               	movwf	UART_write_text@text+1
   835     05C6  120A  118A  24BC  120A  118A  	fcall	_UART_write_text
   836     05CB  2DA1               	goto	l1558
   837     05CC  120A  118A  2800   	ljmp	start
   838     05CF                     __end_of_main:
   839                           
   840                           	psect	text1
   841     066C                     __ptext1:	
   842 ;; *************** function _sprintf *****************
   843 ;; Defined at:
   844 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  sp              2    0[BANK0 ] PTR unsigned char 
   847 ;;		 -> main@buffer_197(64), main@buffer(64), char_to_binary_string@output(10), 
   848 ;;  f               1    2[BANK0 ] PTR const unsigned char 
   849 ;;		 -> STR_3(13), STR_2(8), STR_1(18), 
   850 ;; Auto vars:     Size  Location     Type
   851 ;;  tmpval          4    0        struct .
   852 ;;  cp              2    3[COMMON] PTR const unsigned char 
   853 ;;		 -> STR_4(7), ?_sprintf(2), main@data(3), 
   854 ;;  len             2    0        unsigned int 
   855 ;;  val             2    0        unsigned int 
   856 ;;  c               1    5[COMMON] unsigned char 
   857 ;;  ap              1    2[COMMON] PTR void [1]
   858 ;;		 -> ?_sprintf(2), 
   859 ;;  flag            1    0        unsigned char 
   860 ;;  prec            1    0        char 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  2    0[BANK0 ] int 
   863 ;; Registers used:
   864 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   870 ;;      Params:         0      19       0       0       0
   871 ;;      Locals:         4       0       0       0       0
   872 ;;      Temps:          2       0       0       0       0
   873 ;;      Totals:         6      19       0       0       0
   874 ;;Total ram usage:       25 bytes
   875 ;; Hardware stack levels used: 2
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_main
   880 ;;		_char_to_binary_string
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884     066C                     _sprintf:	
   885                           ;psect for function _sprintf
   886                           
   887     066C                     l1434:	
   888                           ;incstack = 0
   889                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   890                           
   891                           
   892                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   893     066C  3023               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
   894     066D  00F2               	movwf	sprintf@ap
   895                           
   896                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   897     066E  2EFA               	goto	l1470
   898     066F                     l1436:
   899                           
   900                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   901     066F  3025               	movlw	37
   902     0670  0675               	xorwf	sprintf@c,w
   903     0671  1903               	btfsc	3,2
   904     0672  2E74               	goto	u661
   905     0673  2E75               	goto	u660
   906     0674                     u661:
   907     0674  2E83               	goto	l1442
   908     0675                     u660:
   909     0675                     l1438:
   910                           
   911                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   912     0675  0820               	movf	sprintf@sp,w
   913     0676  0084               	movwf	4
   914     0677  1783               	bsf	3,7
   915     0678  1C21               	btfss	sprintf@sp+1,0
   916     0679  1383               	bcf	3,7
   917     067A  0875               	movf	sprintf@c,w
   918     067B  0080               	movwf	0
   919     067C                     l1440:
   920     067C  3001               	movlw	1
   921     067D  07A0               	addwf	sprintf@sp,f
   922     067E  1803               	skipnc
   923     067F  0AA1               	incf	sprintf@sp+1,f
   924     0680  3000               	movlw	0
   925     0681  07A1               	addwf	sprintf@sp+1,f
   926                           
   927                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
   928     0682  2EFA               	goto	l1470
   929     0683                     l1442:
   930                           
   931                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   932     0683  2EDD               	goto	l1468
   933     0684                     l1444:
   934                           
   935                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 760:     cp = (*(
      +                          const char * *)__va_arg((*(const char * **)ap), (const char *)0));
   936     0684  0872               	movf	sprintf@ap,w
   937     0685  0084               	movwf	4
   938     0686  1383               	bcf	3,7	;select IRP bank0
   939     0687  0800               	movf	0,w
   940     0688  00F3               	movwf	sprintf@cp
   941     0689  3000               	movlw	0
   942     068A  00F4               	movwf	sprintf@cp+1
   943     068B                     l1446:
   944     068B  3001               	movlw	1
   945     068C  00F0               	movwf	??_sprintf
   946     068D  0870               	movf	??_sprintf,w
   947     068E  07F2               	addwf	sprintf@ap,f
   948     068F                     l1448:
   949                           
   950                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 766:    if(!cp)
   951     068F  0873               	movf	sprintf@cp,w
   952     0690  0474               	iorwf	sprintf@cp+1,w
   953     0691  1D03               	btfss	3,2
   954     0692  2E94               	goto	u671
   955     0693  2E95               	goto	u670
   956     0694                     u671:
   957     0694  2EB7               	goto	l287
   958     0695                     u670:
   959     0695                     l1450:
   960                           
   961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 767:     cp = "(n
      +                          ull)";
   962     0695  3028               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   963     0696  00F3               	movwf	sprintf@cp
   964     0697  3080               	movlw	128
   965     0698  00F4               	movwf	sprintf@cp+1
   966     0699  2EB7               	goto	l287
   967     069A                     l1452:
   968                           
   969                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 804:     ((*sp++ 
      +                          = (*cp++)));
   970     069A  0874               	movf	sprintf@cp+1,w
   971     069B  00FF               	movwf	btemp+1
   972     069C  0873               	movf	sprintf@cp,w
   973     069D  0084               	movwf	4
   974     069E  120A  118A  2003  120A  118A  	fcall	stringtab
   975     06A3  00F0               	movwf	??_sprintf
   976     06A4  0820               	movf	sprintf@sp,w
   977     06A5  0084               	movwf	4
   978     06A6  1783               	bsf	3,7
   979     06A7  1C21               	btfss	sprintf@sp+1,0
   980     06A8  1383               	bcf	3,7
   981     06A9  0870               	movf	??_sprintf,w
   982     06AA  0080               	movwf	0
   983     06AB                     l1454:
   984     06AB  3001               	movlw	1
   985     06AC  07F3               	addwf	sprintf@cp,f
   986     06AD  1803               	skipnc
   987     06AE  0AF4               	incf	sprintf@cp+1,f
   988     06AF  3000               	movlw	0
   989     06B0  07F4               	addwf	sprintf@cp+1,f
   990     06B1                     l1456:
   991     06B1  3001               	movlw	1
   992     06B2  07A0               	addwf	sprintf@sp,f
   993     06B3  1803               	skipnc
   994     06B4  0AA1               	incf	sprintf@sp+1,f
   995     06B5  3000               	movlw	0
   996     06B6  07A1               	addwf	sprintf@sp+1,f
   997     06B7                     l287:
   998                           
   999                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 803:    while(*cp
      +                          )
  1000     06B7  0874               	movf	sprintf@cp+1,w
  1001     06B8  00FF               	movwf	btemp+1
  1002     06B9  0873               	movf	sprintf@cp,w
  1003     06BA  0084               	movwf	4
  1004     06BB  120A  118A  2003  120A  118A  	fcall	stringtab
  1005     06C0  3A00               	xorlw	0
  1006     06C1  1D03               	skipz
  1007     06C2  2EC4               	goto	u681
  1008     06C3  2EC5               	goto	u680
  1009     06C4                     u681:
  1010     06C4  2E9A               	goto	l1452
  1011     06C5                     u680:
  1012     06C5  2EFA               	goto	l1470
  1013     06C6                     l1458:
  1014                           
  1015                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
  1016     06C6  0872               	movf	sprintf@ap,w
  1017     06C7  0084               	movwf	4
  1018     06C8  1383               	bcf	3,7	;select IRP bank0
  1019     06C9  0800               	movf	0,w
  1020     06CA  00F5               	movwf	sprintf@c
  1021     06CB                     l1460:
  1022     06CB  3002               	movlw	2
  1023     06CC  00F0               	movwf	??_sprintf
  1024     06CD  0870               	movf	??_sprintf,w
  1025     06CE  07F2               	addwf	sprintf@ap,f
  1026     06CF                     l1462:
  1027                           
  1028                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  1029     06CF  0820               	movf	sprintf@sp,w
  1030     06D0  0084               	movwf	4
  1031     06D1  1783               	bsf	3,7
  1032     06D2  1C21               	btfss	sprintf@sp+1,0
  1033     06D3  1383               	bcf	3,7
  1034     06D4  0875               	movf	sprintf@c,w
  1035     06D5  0080               	movwf	0
  1036     06D6                     l1464:
  1037     06D6  3001               	movlw	1
  1038     06D7  07A0               	addwf	sprintf@sp,f
  1039     06D8  1803               	skipnc
  1040     06D9  0AA1               	incf	sprintf@sp+1,f
  1041     06DA  3000               	movlw	0
  1042     06DB  07A1               	addwf	sprintf@sp+1,f
  1043                           
  1044                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 836:    continue;
  1045     06DC  2EFA               	goto	l1470
  1046     06DD                     l1468:
  1047     06DD  3001               	movlw	1
  1048     06DE  07A2               	addwf	sprintf@f,f
  1049     06DF  30FF               	movlw	-1
  1050     06E0  0722               	addwf	sprintf@f,w
  1051     06E1  0084               	movwf	4
  1052     06E2  120A  118A  200D  120A  118A  	fcall	stringdir
  1053     06E7  00F5               	movwf	sprintf@c
  1054     06E8  00F0               	movwf	??_sprintf
  1055     06E9  01F1               	clrf	??_sprintf+1
  1056                           
  1057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1058                           ; Switch size 1, requested type "simple"
  1059                           ; Number of cases is 1, Range of values is 0 to 0
  1060                           ; switch strategies available:
  1061                           ; Name         Instructions Cycles
  1062                           ; simple_byte            4     3 (average)
  1063                           ; direct_byte           11     8 (fixed)
  1064                           ; jumptable            260     6 (fixed)
  1065                           ;	Chosen strategy is simple_byte
  1066     06EA  0871               	movf	??_sprintf+1,w
  1067     06EB  3A00               	xorlw	0	; case 0
  1068     06EC  1903               	skipnz
  1069     06ED  2EEF               	goto	l1596
  1070     06EE  2ECF               	goto	l1462
  1071     06EF                     l1596:
  1072                           
  1073                           ; Switch size 1, requested type "simple"
  1074                           ; Number of cases is 3, Range of values is 0 to 115
  1075                           ; switch strategies available:
  1076                           ; Name         Instructions Cycles
  1077                           ; simple_byte           10     6 (average)
  1078                           ; jumptable            260     6 (fixed)
  1079                           ;	Chosen strategy is simple_byte
  1080     06EF  0870               	movf	??_sprintf,w
  1081     06F0  3A00               	xorlw	0	; case 0
  1082     06F1  1903               	skipnz
  1083     06F2  2F0C               	goto	l1472
  1084     06F3  3A63               	xorlw	99	; case 99
  1085     06F4  1903               	skipnz
  1086     06F5  2EC6               	goto	l1458
  1087     06F6  3A10               	xorlw	16	; case 115
  1088     06F7  1903               	skipnz
  1089     06F8  2E84               	goto	l1444
  1090     06F9  2ECF               	goto	l1462
  1091     06FA                     l1470:
  1092                           
  1093                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1094     06FA  3001               	movlw	1
  1095     06FB  1283               	bcf	3,5	;RP0=0, select bank0
  1096     06FC  1303               	bcf	3,6	;RP1=0, select bank0
  1097     06FD  07A2               	addwf	sprintf@f,f
  1098     06FE  30FF               	movlw	-1
  1099     06FF  0722               	addwf	sprintf@f,w
  1100     0700  0084               	movwf	4
  1101     0701  120A  118A  200D  120A  118A  	fcall	stringdir
  1102     0706  00F5               	movwf	sprintf@c
  1103     0707  0875               	movf	sprintf@c,w
  1104     0708  1D03               	btfss	3,2
  1105     0709  2F0B               	goto	u691
  1106     070A  2F0C               	goto	u690
  1107     070B                     u691:
  1108     070B  2E6F               	goto	l1436
  1109     070C                     u690:
  1110     070C                     l1472:
  1111                           
  1112                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1113     070C  0820               	movf	sprintf@sp,w
  1114     070D  0084               	movwf	4
  1115     070E  1783               	bsf	3,7
  1116     070F  1C21               	btfss	sprintf@sp+1,0
  1117     0710  1383               	bcf	3,7
  1118     0711  0180               	clrf	0
  1119     0712                     l294:
  1120     0712  0008               	return
  1121     0713                     __end_of_sprintf:
  1122                           
  1123                           	psect	text2
  1124     0713                     __ptext2:	
  1125 ;; *************** function _nrf_setup *****************
  1126 ;; Defined at:
  1127 ;;		line 174 in file "./nrf24l01.h"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  addr            1    wreg     PTR unsigned char 
  1130 ;;		 -> RADIO_ADDR(5), 
  1131 ;;  payload_size    1   11[COMMON] unsigned char 
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  addr            1    0[BANK0 ] PTR unsigned char 
  1134 ;;		 -> RADIO_ADDR(5), 
  1135 ;;  data            5    1[BANK0 ] unsigned char [5]
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1145 ;;      Params:         1       0       0       0       0
  1146 ;;      Locals:         0       6       0       0       0
  1147 ;;      Temps:          2       0       0       0       0
  1148 ;;      Totals:         3       6       0       0       0
  1149 ;;Total ram usage:        9 bytes
  1150 ;; Hardware stack levels used: 1
  1151 ;; Hardware stack levels required when called: 4
  1152 ;; This function calls:
  1153 ;;		_arrcpy
  1154 ;;		_nrf_flush_rxtx
  1155 ;;		_nrf_write_register
  1156 ;; This function is called by:
  1157 ;;		_main
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161     0713                     _nrf_setup:	
  1162                           ;psect for function _nrf_setup
  1163                           
  1164                           
  1165                           ;incstack = 0
  1166                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1167                           ;nrf_setup@addr stored from wreg
  1168     0713  1283               	bcf	3,5	;RP0=0, select bank0
  1169     0714  1303               	bcf	3,6	;RP1=0, select bank0
  1170     0715  00A0               	movwf	nrf_setup@addr
  1171     0716                     l1360:
  1172                           
  1173                           ;./nrf24l01.h: 174:     void nrf_setup(uint8_t *addr, uint8_t payload_size);./nrf24l01.h
      +                          : 175:     {;./nrf24l01.h: 177:         TRISD3 = 0;
  1174     0716  1683               	bsf	3,5	;RP0=1, select bank1
  1175     0717  1303               	bcf	3,6	;RP1=0, select bank1
  1176     0718  1188               	bcf	8,3	;volatile
  1177                           
  1178                           ;./nrf24l01.h: 178:         TRISD2 = 0;
  1179     0719  1108               	bcf	8,2	;volatile
  1180     071A                     l1362:
  1181                           
  1182                           ;./nrf24l01.h: 180:         _delay((unsigned long)((2)*(8000000UL/4000.0)));
  1183     071A  3006               	movlw	6
  1184     071B  00FD               	movwf	??_nrf_setup+1
  1185     071C  3030               	movlw	48
  1186     071D  00FC               	movwf	??_nrf_setup
  1187     071E                     u807:
  1188     071E  0BFC               	decfsz	??_nrf_setup,f
  1189     071F  2F1E               	goto	u807
  1190     0720  0BFD               	decfsz	??_nrf_setup+1,f
  1191     0721  2F1E               	goto	u807
  1192     0722  0000               	nop
  1193     0723                     l1364:
  1194                           
  1195                           ;./nrf24l01.h: 182:         RD3 = 1;
  1196     0723  1283               	bcf	3,5	;RP0=0, select bank0
  1197     0724  1303               	bcf	3,6	;RP1=0, select bank0
  1198     0725  1588               	bsf	8,3	;volatile
  1199     0726                     l1366:
  1200                           
  1201                           ;./nrf24l01.h: 183:         RD2 = 0;
  1202     0726  1108               	bcf	8,2	;volatile
  1203                           
  1204                           ;./nrf24l01.h: 185:         _delay((unsigned long)((2)*(8000000UL/4000.0)));
  1205     0727  3006               	movlw	6
  1206     0728  00FD               	movwf	??_nrf_setup+1
  1207     0729  3030               	movlw	48
  1208     072A  00FC               	movwf	??_nrf_setup
  1209     072B                     u817:
  1210     072B  0BFC               	decfsz	??_nrf_setup,f
  1211     072C  2F2B               	goto	u817
  1212     072D  0BFD               	decfsz	??_nrf_setup+1,f
  1213     072E  2F2B               	goto	u817
  1214     072F  0000               	nop
  1215                           
  1216                           ;./nrf24l01.h: 187:         uint8_t data[5];;./nrf24l01.h: 189:         data[0] = 0x0B;
  1217     0730  300B               	movlw	11
  1218     0731  1283               	bcf	3,5	;RP0=0, select bank0
  1219     0732  1303               	bcf	3,6	;RP1=0, select bank0
  1220     0733  00A1               	movwf	nrf_setup@data
  1221     0734                     l1368:
  1222                           
  1223                           ;./nrf24l01.h: 190:         nrf_write_register(0x00, &data, 1);
  1224     0734  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1225     0735  00F7               	movwf	nrf_write_register@data
  1226     0736  01F8               	clrf	nrf_write_register@len
  1227     0737  0AF8               	incf	nrf_write_register@len,f
  1228     0738  3000               	movlw	0
  1229     0739  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1230     073E                     l1370:
  1231                           
  1232                           ;./nrf24l01.h: 191:         data[0] = 0x00;
  1233     073E  1283               	bcf	3,5	;RP0=0, select bank0
  1234     073F  1303               	bcf	3,6	;RP1=0, select bank0
  1235     0740  01A1               	clrf	nrf_setup@data
  1236     0741                     l1372:
  1237                           
  1238                           ;./nrf24l01.h: 192:         nrf_write_register(0x01, &data, 1);
  1239     0741  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1240     0742  00F7               	movwf	nrf_write_register@data
  1241     0743  01F8               	clrf	nrf_write_register@len
  1242     0744  0AF8               	incf	nrf_write_register@len,f
  1243     0745  3001               	movlw	1
  1244     0746  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1245     074B                     l1374:
  1246                           
  1247                           ;./nrf24l01.h: 193:         data[0] = 0x01;
  1248     074B  1283               	bcf	3,5	;RP0=0, select bank0
  1249     074C  1303               	bcf	3,6	;RP1=0, select bank0
  1250     074D  01A1               	clrf	nrf_setup@data
  1251     074E  0AA1               	incf	nrf_setup@data,f
  1252     074F                     l1376:
  1253                           
  1254                           ;./nrf24l01.h: 194:         nrf_write_register(0x02, &data, 1);
  1255     074F  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1256     0750  00F7               	movwf	nrf_write_register@data
  1257     0751  01F8               	clrf	nrf_write_register@len
  1258     0752  0AF8               	incf	nrf_write_register@len,f
  1259     0753  3002               	movlw	2
  1260     0754  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1261     0759                     l1378:
  1262                           
  1263                           ;./nrf24l01.h: 195:         data[0] = 0x01;
  1264     0759  1283               	bcf	3,5	;RP0=0, select bank0
  1265     075A  1303               	bcf	3,6	;RP1=0, select bank0
  1266     075B  01A1               	clrf	nrf_setup@data
  1267     075C  0AA1               	incf	nrf_setup@data,f
  1268     075D                     l1380:
  1269                           
  1270                           ;./nrf24l01.h: 196:         nrf_write_register(0x03, &data, 1);
  1271     075D  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1272     075E  00F7               	movwf	nrf_write_register@data
  1273     075F  01F8               	clrf	nrf_write_register@len
  1274     0760  0AF8               	incf	nrf_write_register@len,f
  1275     0761  3003               	movlw	3
  1276     0762  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1277     0767                     l1382:
  1278                           
  1279                           ;./nrf24l01.h: 197:         data[0] = 0x00;
  1280     0767  1283               	bcf	3,5	;RP0=0, select bank0
  1281     0768  1303               	bcf	3,6	;RP1=0, select bank0
  1282     0769  01A1               	clrf	nrf_setup@data
  1283     076A                     l1384:
  1284                           
  1285                           ;./nrf24l01.h: 198:         nrf_write_register(0x04, &data, 1);
  1286     076A  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1287     076B  00F7               	movwf	nrf_write_register@data
  1288     076C  01F8               	clrf	nrf_write_register@len
  1289     076D  0AF8               	incf	nrf_write_register@len,f
  1290     076E  3004               	movlw	4
  1291     076F  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1292     0774                     l1386:
  1293                           
  1294                           ;./nrf24l01.h: 199:         data[0] = 0x01;
  1295     0774  1283               	bcf	3,5	;RP0=0, select bank0
  1296     0775  1303               	bcf	3,6	;RP1=0, select bank0
  1297     0776  01A1               	clrf	nrf_setup@data
  1298     0777  0AA1               	incf	nrf_setup@data,f
  1299     0778                     l1388:
  1300                           
  1301                           ;./nrf24l01.h: 200:         nrf_write_register(0x05, &data, 1);
  1302     0778  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1303     0779  00F7               	movwf	nrf_write_register@data
  1304     077A  01F8               	clrf	nrf_write_register@len
  1305     077B  0AF8               	incf	nrf_write_register@len,f
  1306     077C  3005               	movlw	5
  1307     077D  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1308                           
  1309                           ;./nrf24l01.h: 201:         data[0] = 0x26;
  1310     0782  3026               	movlw	38
  1311     0783  1283               	bcf	3,5	;RP0=0, select bank0
  1312     0784  1303               	bcf	3,6	;RP1=0, select bank0
  1313     0785  00A1               	movwf	nrf_setup@data
  1314     0786                     l1390:
  1315                           
  1316                           ;./nrf24l01.h: 202:         nrf_write_register(0x06, &data, 1);
  1317     0786  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1318     0787  00F7               	movwf	nrf_write_register@data
  1319     0788  01F8               	clrf	nrf_write_register@len
  1320     0789  0AF8               	incf	nrf_write_register@len,f
  1321     078A  3006               	movlw	6
  1322     078B  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1323     0790                     l1392:
  1324                           
  1325                           ;./nrf24l01.h: 203:         data[0] = payload_size;
  1326     0790  087B               	movf	nrf_setup@payload_size,w
  1327     0791  1283               	bcf	3,5	;RP0=0, select bank0
  1328     0792  1303               	bcf	3,6	;RP1=0, select bank0
  1329     0793  00A1               	movwf	nrf_setup@data
  1330                           
  1331                           ;./nrf24l01.h: 204:         nrf_write_register(0x11, &data, 1);
  1332     0794  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1333     0795  00F7               	movwf	nrf_write_register@data
  1334     0796  01F8               	clrf	nrf_write_register@len
  1335     0797  0AF8               	incf	nrf_write_register@len,f
  1336     0798  3011               	movlw	17
  1337     0799  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1338                           
  1339                           ;./nrf24l01.h: 206:         arrcpy(data, addr, sizeof(addr));
  1340     079E  1283               	bcf	3,5	;RP0=0, select bank0
  1341     079F  1303               	bcf	3,6	;RP1=0, select bank0
  1342     07A0  0820               	movf	nrf_setup@addr,w
  1343     07A1  00F0               	movwf	arrcpy@src
  1344     07A2  01F1               	clrf	arrcpy@len
  1345     07A3  0AF1               	incf	arrcpy@len,f
  1346     07A4  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1347     07A5  120A  118A  2406  120A  118A  	fcall	_arrcpy
  1348                           
  1349                           ;./nrf24l01.h: 207:         nrf_write_register(0x0A, data, sizeof(addr));
  1350     07AA  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1351     07AB  00F7               	movwf	nrf_write_register@data
  1352     07AC  01F8               	clrf	nrf_write_register@len
  1353     07AD  0AF8               	incf	nrf_write_register@len,f
  1354     07AE  300A               	movlw	10
  1355     07AF  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1356                           
  1357                           ;./nrf24l01.h: 209:         arrcpy(data, addr, sizeof(addr));
  1358     07B4  1283               	bcf	3,5	;RP0=0, select bank0
  1359     07B5  1303               	bcf	3,6	;RP1=0, select bank0
  1360     07B6  0820               	movf	nrf_setup@addr,w
  1361     07B7  00F0               	movwf	arrcpy@src
  1362     07B8  01F1               	clrf	arrcpy@len
  1363     07B9  0AF1               	incf	arrcpy@len,f
  1364     07BA  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1365     07BB  120A  118A  2406  120A  118A  	fcall	_arrcpy
  1366                           
  1367                           ;./nrf24l01.h: 210:         nrf_write_register(0x10, data, sizeof(addr));
  1368     07C0  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1369     07C1  00F7               	movwf	nrf_write_register@data
  1370     07C2  01F8               	clrf	nrf_write_register@len
  1371     07C3  0AF8               	incf	nrf_write_register@len,f
  1372     07C4  3010               	movlw	16
  1373     07C5  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1374                           
  1375                           ;./nrf24l01.h: 212:         nrf_flush_rxtx();
  1376     07CA  120A  118A  23ED  120A  118A  	fcall	_nrf_flush_rxtx
  1377     07CF                     l121:
  1378     07CF  0008               	return
  1379     07D0                     __end_of_nrf_setup:
  1380                           
  1381                           	psect	text3
  1382     03ED                     __ptext3:	
  1383 ;; *************** function _nrf_flush_rxtx *****************
  1384 ;; Defined at:
  1385 ;;		line 164 in file "./nrf24l01.h"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;  data            1   10[COMMON] unsigned char 
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  1    wreg      void 
  1392 ;; Registers used:
  1393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1399 ;;      Params:         0       0       0       0       0
  1400 ;;      Locals:         1       0       0       0       0
  1401 ;;      Temps:          0       0       0       0       0
  1402 ;;      Totals:         1       0       0       0       0
  1403 ;;Total ram usage:        1 bytes
  1404 ;; Hardware stack levels used: 1
  1405 ;; Hardware stack levels required when called: 3
  1406 ;; This function calls:
  1407 ;;		_nrf_write_command
  1408 ;;		_nrf_write_register
  1409 ;; This function is called by:
  1410 ;;		_nrf_setup
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414     03ED                     _nrf_flush_rxtx:	
  1415                           ;psect for function _nrf_flush_rxtx
  1416                           
  1417     03ED                     l1272:	
  1418                           ;incstack = 0
  1419                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1420                           
  1421                           
  1422                           ;./nrf24l01.h: 166:         uint8_t data = 0b01110000;
  1423     03ED  3070               	movlw	112
  1424     03EE  00FA               	movwf	nrf_flush_rxtx@data
  1425     03EF                     l1274:
  1426                           
  1427                           ;./nrf24l01.h: 167:         nrf_write_register(0x07, &data, 1);
  1428     03EF  307A               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1429     03F0  00F7               	movwf	nrf_write_register@data
  1430     03F1  01F8               	clrf	nrf_write_register@len
  1431     03F2  0AF8               	incf	nrf_write_register@len,f
  1432     03F3  3007               	movlw	7
  1433     03F4  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1434     03F9                     l1276:
  1435                           
  1436                           ;./nrf24l01.h: 168:         nrf_write_command(0b11100001);
  1437     03F9  30E1               	movlw	225
  1438     03FA  120A  118A  23DD  120A  118A  	fcall	_nrf_write_command
  1439     03FF                     l1278:
  1440                           
  1441                           ;./nrf24l01.h: 169:         nrf_write_command(0b11100010);
  1442     03FF  30E2               	movlw	226
  1443     0400  120A  118A  23DD  120A  118A  	fcall	_nrf_write_command
  1444     0405                     l118:
  1445     0405  0008               	return
  1446     0406                     __end_of_nrf_flush_rxtx:
  1447                           
  1448                           	psect	text4
  1449     0406                     __ptext4:	
  1450 ;; *************** function _arrcpy *****************
  1451 ;; Defined at:
  1452 ;;		line 97 in file "./nrf24l01.h"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  dst             1    wreg     PTR unsigned char 
  1455 ;;		 -> nrf_setup@data(5), 
  1456 ;;  src             1    0[COMMON] PTR unsigned char 
  1457 ;;		 -> RADIO_ADDR(5), 
  1458 ;;  len             1    1[COMMON] unsigned char 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;  dst             1    5[COMMON] PTR unsigned char 
  1461 ;;		 -> nrf_setup@data(5), 
  1462 ;;  i               1    6[COMMON] unsigned char 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  1    wreg      void 
  1465 ;; Registers used:
  1466 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1472 ;;      Params:         2       0       0       0       0
  1473 ;;      Locals:         2       0       0       0       0
  1474 ;;      Temps:          3       0       0       0       0
  1475 ;;      Totals:         7       0       0       0       0
  1476 ;;Total ram usage:        7 bytes
  1477 ;; Hardware stack levels used: 1
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_nrf_setup
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485     0406                     _arrcpy:	
  1486                           ;psect for function _arrcpy
  1487                           
  1488                           
  1489                           ;incstack = 0
  1490                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0]
  1491                           ;arrcpy@dst stored from wreg
  1492     0406  00F5               	movwf	arrcpy@dst
  1493     0407                     l1260:
  1494                           
  1495                           ;./nrf24l01.h: 97:     void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);./nrf24l01.h
      +                          : 98:     {;./nrf24l01.h: 99:         for (uint8_t i = 0; i < len; i++)
  1496     0407  01F6               	clrf	arrcpy@i
  1497     0408  2C1C               	goto	l1266
  1498     0409                     l1262:
  1499                           
  1500                           ;./nrf24l01.h: 100:         {;./nrf24l01.h: 101:             dst[i] = src[i];
  1501     0409  0876               	movf	arrcpy@i,w
  1502     040A  0770               	addwf	arrcpy@src,w
  1503     040B  00F2               	movwf	??_arrcpy
  1504     040C  0872               	movf	??_arrcpy,w
  1505     040D  0084               	movwf	4
  1506     040E  1383               	bcf	3,7	;select IRP bank0
  1507     040F  0800               	movf	0,w
  1508     0410  00F3               	movwf	??_arrcpy+1
  1509     0411  0876               	movf	arrcpy@i,w
  1510     0412  0775               	addwf	arrcpy@dst,w
  1511     0413  00F4               	movwf	??_arrcpy+2
  1512     0414  0874               	movf	??_arrcpy+2,w
  1513     0415  0084               	movwf	4
  1514     0416  0873               	movf	??_arrcpy+1,w
  1515     0417  0080               	movwf	0
  1516     0418                     l1264:
  1517                           
  1518                           ;./nrf24l01.h: 102:         }
  1519     0418  3001               	movlw	1
  1520     0419  00F2               	movwf	??_arrcpy
  1521     041A  0872               	movf	??_arrcpy,w
  1522     041B  07F6               	addwf	arrcpy@i,f
  1523     041C                     l1266:
  1524     041C  0871               	movf	arrcpy@len,w
  1525     041D  0276               	subwf	arrcpy@i,w
  1526     041E  1C03               	skipc
  1527     041F  2C21               	goto	u451
  1528     0420  2C22               	goto	u450
  1529     0421                     u451:
  1530     0421  2C09               	goto	l1262
  1531     0422                     u450:
  1532     0422                     l91:
  1533     0422  0008               	return
  1534     0423                     __end_of_arrcpy:
  1535                           
  1536                           	psect	text5
  1537     0423                     __ptext5:	
  1538 ;; *************** function _nrf_set_rx_mode *****************
  1539 ;; Defined at:
  1540 ;;		line 216 in file "./nrf24l01.h"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;		None
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  config          1   12[COMMON] unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1554 ;;      Params:         0       0       0       0       0
  1555 ;;      Locals:         1       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0
  1557 ;;      Totals:         1       0       0       0       0
  1558 ;;Total ram usage:        1 bytes
  1559 ;; Hardware stack levels used: 1
  1560 ;; Hardware stack levels required when called: 3
  1561 ;; This function calls:
  1562 ;;		_nrf_read_register
  1563 ;;		_nrf_write_register
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569     0423                     _nrf_set_rx_mode:	
  1570                           ;psect for function _nrf_set_rx_mode
  1571                           
  1572     0423                     l1394:	
  1573                           ;incstack = 0
  1574                           ; Regs used in _nrf_set_rx_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1575                           
  1576                           
  1577                           ;./nrf24l01.h: 218:         uint8_t config;;./nrf24l01.h: 219:         nrf_read_register
      +                          (0x00, &config, 1);
  1578     0423  307C               	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1579     0424  00F9               	movwf	nrf_read_register@data
  1580     0425  01FA               	clrf	nrf_read_register@len
  1581     0426  0AFA               	incf	nrf_read_register@len,f
  1582     0427  3000               	movlw	0
  1583     0428  120A  118A  23A7  120A  118A  	fcall	_nrf_read_register
  1584     042D                     l1396:
  1585                           
  1586                           ;./nrf24l01.h: 221:         RD2 = 1;
  1587     042D  1283               	bcf	3,5	;RP0=0, select bank0
  1588     042E  1303               	bcf	3,6	;RP1=0, select bank0
  1589     042F  1508               	bsf	8,2	;volatile
  1590     0430                     l1398:
  1591                           
  1592                           ;./nrf24l01.h: 223:         if (config & 0x01)
  1593     0430  1C7C               	btfss	nrf_set_rx_mode@config,0
  1594     0431  2C33               	goto	u621
  1595     0432  2C34               	goto	u620
  1596     0433                     u621:
  1597     0433  2C35               	goto	l124
  1598     0434                     u620:
  1599     0434  2C40               	goto	l125
  1600     0435                     l124:
  1601                           
  1602                           ;./nrf24l01.h: 226:         config |= 0x01;
  1603     0435  147C               	bsf	nrf_set_rx_mode@config,0
  1604     0436                     l1402:
  1605                           
  1606                           ;./nrf24l01.h: 227:         nrf_write_register(0x00, &config, 1);
  1607     0436  307C               	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1608     0437  00F7               	movwf	nrf_write_register@data
  1609     0438  01F8               	clrf	nrf_write_register@len
  1610     0439  0AF8               	incf	nrf_write_register@len,f
  1611     043A  3000               	movlw	0
  1612     043B  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1613     0440                     l125:
  1614     0440  0008               	return
  1615     0441                     __end_of_nrf_set_rx_mode:
  1616                           
  1617                           	psect	text6
  1618     0441                     __ptext6:	
  1619 ;; *************** function _nrf_read *****************
  1620 ;; Defined at:
  1621 ;;		line 273 in file "./nrf24l01.h"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;  data            1    wreg     PTR unsigned char 
  1624 ;;		 -> main@data(3), 
  1625 ;;  len             1   12[COMMON] unsigned char 
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;  data            1    0[BANK0 ] PTR unsigned char 
  1628 ;;		 -> main@data(3), 
  1629 ;;  clear           1    1[BANK0 ] unsigned char 
  1630 ;;  status          1    0        unsigned char 
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      unsigned char 
  1633 ;; Registers used:
  1634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1640 ;;      Params:         1       0       0       0       0
  1641 ;;      Locals:         0       2       0       0       0
  1642 ;;      Temps:          0       0       0       0       0
  1643 ;;      Totals:         1       2       0       0       0
  1644 ;;Total ram usage:        3 bytes
  1645 ;; Hardware stack levels used: 1
  1646 ;; Hardware stack levels required when called: 3
  1647 ;; This function calls:
  1648 ;;		_nrf_read_register
  1649 ;;		_nrf_write_command
  1650 ;;		_nrf_write_register
  1651 ;; This function is called by:
  1652 ;;		_main
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656     0441                     _nrf_read:	
  1657                           ;psect for function _nrf_read
  1658                           
  1659                           
  1660                           ;incstack = 0
  1661                           ; Regs used in _nrf_read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1662                           ;nrf_read@data stored from wreg
  1663     0441  1283               	bcf	3,5	;RP0=0, select bank0
  1664     0442  1303               	bcf	3,6	;RP1=0, select bank0
  1665     0443  00A0               	movwf	nrf_read@data
  1666     0444                     l1424:
  1667     0444  0820               	movf	nrf_read@data,w
  1668     0445  00F9               	movwf	nrf_read_register@data
  1669     0446  087C               	movf	nrf_read@len,w
  1670     0447  00FA               	movwf	nrf_read_register@len
  1671     0448  3061               	movlw	97
  1672     0449  120A  118A  23A7  120A  118A  	fcall	_nrf_read_register
  1673     044E                     l1426:
  1674                           
  1675                           ;./nrf24l01.h: 278:         nrf_write_command(0b11100010);
  1676     044E  30E2               	movlw	226
  1677     044F  120A  118A  23DD  120A  118A  	fcall	_nrf_write_command
  1678     0454                     l1428:
  1679                           
  1680                           ;./nrf24l01.h: 279:         uint8_t clear = 0x40;
  1681     0454  3040               	movlw	64
  1682     0455  1283               	bcf	3,5	;RP0=0, select bank0
  1683     0456  1303               	bcf	3,6	;RP1=0, select bank0
  1684     0457  00A1               	movwf	nrf_read@clear
  1685     0458                     l1430:
  1686                           
  1687                           ;./nrf24l01.h: 280:         nrf_write_register(0x07, &clear, 1);
  1688     0458  3021               	movlw	(low (nrf_read@clear| 0))& (0+255)
  1689     0459  00F7               	movwf	nrf_write_register@data
  1690     045A  01F8               	clrf	nrf_write_register@len
  1691     045B  0AF8               	incf	nrf_write_register@len,f
  1692     045C  3007               	movlw	7
  1693     045D  120A  118A  23B3  120A  118A  	fcall	_nrf_write_register
  1694     0462                     l140:
  1695     0462  0008               	return
  1696     0463                     __end_of_nrf_read:
  1697                           
  1698                           	psect	text7
  1699     03B3                     __ptext7:	
  1700 ;; *************** function _nrf_write_register *****************
  1701 ;; Defined at:
  1702 ;;		line 131 in file "./nrf24l01.h"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  reg             1    wreg     unsigned char 
  1705 ;;  data            1    7[COMMON] PTR unsigned char 
  1706 ;;		 -> nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1707 ;;		 -> nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1708 ;;  len             1    8[COMMON] unsigned char 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  reg             1    9[COMMON] unsigned char 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      unsigned char 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1720 ;;      Params:         2       0       0       0       0
  1721 ;;      Locals:         1       0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0
  1723 ;;      Totals:         3       0       0       0       0
  1724 ;;Total ram usage:        3 bytes
  1725 ;; Hardware stack levels used: 1
  1726 ;; Hardware stack levels required when called: 2
  1727 ;; This function calls:
  1728 ;;		_nrf_command_with_data
  1729 ;; This function is called by:
  1730 ;;		_nrf_flush_rxtx
  1731 ;;		_nrf_setup
  1732 ;;		_nrf_set_rx_mode
  1733 ;;		_nrf_read
  1734 ;;		_nrf_write_payload
  1735 ;;		_nrf_set_tx_mode
  1736 ;;		_nrf_send
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740     03B3                     _nrf_write_register:	
  1741                           ;psect for function _nrf_write_register
  1742                           
  1743                           
  1744                           ;incstack = 0
  1745                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1746                           ;nrf_write_register@reg stored from wreg
  1747     03B3  00F9               	movwf	nrf_write_register@reg
  1748     03B4                     l1242:
  1749                           
  1750                           ;./nrf24l01.h: 131:     uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t l
      +                          en);./nrf24l01.h: 132:     {;./nrf24l01.h: 133:         return nrf_command_with_data(reg
      +                           | 0b00100000, data, len);
  1751     03B4  0877               	movf	nrf_write_register@data,w
  1752     03B5  00F1               	movwf	nrf_command_with_data@data
  1753     03B6  0878               	movf	nrf_write_register@len,w
  1754     03B7  00F2               	movwf	nrf_command_with_data@len
  1755     03B8  0879               	movf	nrf_write_register@reg,w
  1756     03B9  3820               	iorlw	32
  1757     03BA  120A  118A  2463  120A  118A  	fcall	_nrf_command_with_data
  1758     03BF                     l106:
  1759     03BF  0008               	return
  1760     03C0                     __end_of_nrf_write_register:
  1761                           
  1762                           	psect	text8
  1763     0463                     __ptext8:	
  1764 ;; *************** function _nrf_command_with_data *****************
  1765 ;; Defined at:
  1766 ;;		line 124 in file "./nrf24l01.h"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  command         1    wreg     unsigned char 
  1769 ;;  data            1    1[COMMON] PTR unsigned char 
  1770 ;;		 -> nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1771 ;;		 -> nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1772 ;;  len             1    2[COMMON] unsigned char 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  command         1    4[COMMON] unsigned char 
  1775 ;;  i               1    6[COMMON] unsigned char 
  1776 ;;  status          1    5[COMMON] unsigned char 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      unsigned char 
  1779 ;; Registers used:
  1780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1786 ;;      Params:         2       0       0       0       0
  1787 ;;      Locals:         3       0       0       0       0
  1788 ;;      Temps:          1       0       0       0       0
  1789 ;;      Totals:         6       0       0       0       0
  1790 ;;Total ram usage:        6 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; Hardware stack levels required when called: 1
  1793 ;; This function calls:
  1794 ;;		_SPI_write
  1795 ;; This function is called by:
  1796 ;;		_nrf_write_register
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800     0463                     _nrf_command_with_data:	
  1801                           ;psect for function _nrf_command_with_data
  1802                           
  1803                           
  1804                           ;incstack = 0
  1805                           ; Regs used in _nrf_command_with_data: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1806                           ;nrf_command_with_data@command stored from wreg
  1807     0463  00F4               	movwf	nrf_command_with_data@command
  1808     0464                     l1210:
  1809                           
  1810                           ;./nrf24l01.h: 124:     uint8_t nrf_command_with_data(uint8_t command, uint8_t *data, ui
      +                          nt8_t len);./nrf24l01.h: 125:     {;./nrf24l01.h: 126:         RD3 = 0; uint8_t status =
      +                           SPI_write(command); for (uint8_t i = 0; i < len; i++) { SPI_write(data[i]); } RD3 = 1; 
      +                          return status;
  1811     0464  1283               	bcf	3,5	;RP0=0, select bank0
  1812     0465  1303               	bcf	3,6	;RP1=0, select bank0
  1813     0466  1188               	bcf	8,3	;volatile
  1814     0467                     l1212:
  1815     0467  0874               	movf	nrf_command_with_data@command,w
  1816     0468  120A  118A  23CE  120A  118A  	fcall	_SPI_write
  1817     046D  00F5               	movwf	nrf_command_with_data@status
  1818     046E                     l1214:
  1819     046E  01F6               	clrf	nrf_command_with_data@i
  1820     046F  2C80               	goto	l1220
  1821     0470                     l1216:
  1822     0470  0876               	movf	nrf_command_with_data@i,w
  1823     0471  0771               	addwf	nrf_command_with_data@data,w
  1824     0472  00F3               	movwf	??_nrf_command_with_data
  1825     0473  0873               	movf	??_nrf_command_with_data,w
  1826     0474  0084               	movwf	4
  1827     0475  1383               	bcf	3,7	;select IRP bank0
  1828     0476  0800               	movf	0,w
  1829     0477  120A  118A  23CE  120A  118A  	fcall	_SPI_write
  1830     047C                     l1218:
  1831     047C  3001               	movlw	1
  1832     047D  00F3               	movwf	??_nrf_command_with_data
  1833     047E  0873               	movf	??_nrf_command_with_data,w
  1834     047F  07F6               	addwf	nrf_command_with_data@i,f
  1835     0480                     l1220:
  1836     0480  0872               	movf	nrf_command_with_data@len,w
  1837     0481  0276               	subwf	nrf_command_with_data@i,w
  1838     0482  1C03               	skipc
  1839     0483  2C85               	goto	u421
  1840     0484  2C86               	goto	u420
  1841     0485                     u421:
  1842     0485  2C70               	goto	l1216
  1843     0486                     u420:
  1844     0486                     l102:
  1845     0486  1283               	bcf	3,5	;RP0=0, select bank0
  1846     0487  1303               	bcf	3,6	;RP1=0, select bank0
  1847     0488  1588               	bsf	8,3	;volatile
  1848     0489                     l1222:
  1849     0489  0875               	movf	nrf_command_with_data@status,w
  1850     048A                     l103:
  1851     048A  0008               	return
  1852     048B                     __end_of_nrf_command_with_data:
  1853                           
  1854                           	psect	text9
  1855     03A7                     __ptext9:	
  1856 ;; *************** function _nrf_read_register *****************
  1857 ;; Defined at:
  1858 ;;		line 137 in file "./nrf24l01.h"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;  reg             1    wreg     unsigned char 
  1861 ;;  data            1    9[COMMON] PTR unsigned char 
  1862 ;;		 -> main@data(3), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1863 ;;  len             1   10[COMMON] unsigned char 
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  reg             1   11[COMMON] unsigned char 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  1    wreg      unsigned char 
  1868 ;; Registers used:
  1869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1875 ;;      Params:         2       0       0       0       0
  1876 ;;      Locals:         1       0       0       0       0
  1877 ;;      Temps:          0       0       0       0       0
  1878 ;;      Totals:         3       0       0       0       0
  1879 ;;Total ram usage:        3 bytes
  1880 ;; Hardware stack levels used: 1
  1881 ;; Hardware stack levels required when called: 2
  1882 ;; This function calls:
  1883 ;;		_nrf_command_with_data_overwrite
  1884 ;; This function is called by:
  1885 ;;		_nrf_set_rx_mode
  1886 ;;		_nrf_read
  1887 ;;		_nrf_set_tx_mode
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891     03A7                     _nrf_read_register:	
  1892                           ;psect for function _nrf_read_register
  1893                           
  1894                           
  1895                           ;incstack = 0
  1896                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1897                           ;nrf_read_register@reg stored from wreg
  1898     03A7  00FB               	movwf	nrf_read_register@reg
  1899     03A8                     l1268:
  1900                           
  1901                           ;./nrf24l01.h: 137:     uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t le
      +                          n);./nrf24l01.h: 138:     {;./nrf24l01.h: 139:         return nrf_command_with_data_over
      +                          write(reg | 0b00000000, data, len);
  1902     03A8  0879               	movf	nrf_read_register@data,w
  1903     03A9  00F1               	movwf	nrf_command_with_data_overwrite@data
  1904     03AA  087A               	movf	nrf_read_register@len,w
  1905     03AB  00F2               	movwf	nrf_command_with_data_overwrite@len
  1906     03AC  087B               	movf	nrf_read_register@reg,w
  1907     03AD  120A  118A  248B  120A  118A  	fcall	_nrf_command_with_data_overwrite
  1908     03B2                     l109:
  1909     03B2  0008               	return
  1910     03B3                     __end_of_nrf_read_register:
  1911                           
  1912                           	psect	text10
  1913     048B                     __ptext10:	
  1914 ;; *************** function _nrf_command_with_data_overwrite *****************
  1915 ;; Defined at:
  1916 ;;		line 118 in file "./nrf24l01.h"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  command         1    wreg     unsigned char 
  1919 ;;  data            1    1[COMMON] PTR unsigned char 
  1920 ;;		 -> main@data(3), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1921 ;;  len             1    2[COMMON] unsigned char 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  command         1    6[COMMON] unsigned char 
  1924 ;;  i               1    8[COMMON] unsigned char 
  1925 ;;  status          1    7[COMMON] unsigned char 
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      unsigned char 
  1928 ;; Registers used:
  1929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1935 ;;      Params:         2       0       0       0       0
  1936 ;;      Locals:         3       0       0       0       0
  1937 ;;      Temps:          3       0       0       0       0
  1938 ;;      Totals:         8       0       0       0       0
  1939 ;;Total ram usage:        8 bytes
  1940 ;; Hardware stack levels used: 1
  1941 ;; Hardware stack levels required when called: 1
  1942 ;; This function calls:
  1943 ;;		_SPI_write
  1944 ;; This function is called by:
  1945 ;;		_nrf_read_register
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949     048B                     _nrf_command_with_data_overwrite:	
  1950                           ;psect for function _nrf_command_with_data_overwrite
  1951                           
  1952                           
  1953                           ;incstack = 0
  1954                           ; Regs used in _nrf_command_with_data_overwrite: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  1955                           ;nrf_command_with_data_overwrite@command stored from wreg
  1956     048B  00F6               	movwf	nrf_command_with_data_overwrite@command
  1957     048C                     l1226:
  1958                           
  1959                           ;./nrf24l01.h: 118:     uint8_t nrf_command_with_data_overwrite(uint8_t command, uint8_t
      +                           *data, uint8_t len);./nrf24l01.h: 119:     {;./nrf24l01.h: 120:         RD3 = 0; uint8_
      +                          t status = SPI_write(command); for (uint8_t i = 0; i < len; i++) { data[i] = SPI_write(d
      +                          ata[i]); } RD3 = 1; return status;
  1960     048C  1283               	bcf	3,5	;RP0=0, select bank0
  1961     048D  1303               	bcf	3,6	;RP1=0, select bank0
  1962     048E  1188               	bcf	8,3	;volatile
  1963     048F                     l1228:
  1964     048F  0876               	movf	nrf_command_with_data_overwrite@command,w
  1965     0490  120A  118A  23CE  120A  118A  	fcall	_SPI_write
  1966     0495  00F7               	movwf	nrf_command_with_data_overwrite@status
  1967     0496                     l1230:
  1968     0496  01F8               	clrf	nrf_command_with_data_overwrite@i
  1969     0497  2CB1               	goto	l1236
  1970     0498                     l1232:
  1971     0498  0878               	movf	nrf_command_with_data_overwrite@i,w
  1972     0499  0771               	addwf	nrf_command_with_data_overwrite@data,w
  1973     049A  00F3               	movwf	??_nrf_command_with_data_overwrite
  1974     049B  0873               	movf	??_nrf_command_with_data_overwrite,w
  1975     049C  0084               	movwf	4
  1976     049D  1383               	bcf	3,7	;select IRP bank0
  1977     049E  0800               	movf	0,w
  1978     049F  120A  118A  23CE  120A  118A  	fcall	_SPI_write
  1979     04A4  00F4               	movwf	??_nrf_command_with_data_overwrite+1
  1980     04A5  0878               	movf	nrf_command_with_data_overwrite@i,w
  1981     04A6  0771               	addwf	nrf_command_with_data_overwrite@data,w
  1982     04A7  00F5               	movwf	??_nrf_command_with_data_overwrite+2
  1983     04A8  0875               	movf	??_nrf_command_with_data_overwrite+2,w
  1984     04A9  0084               	movwf	4
  1985     04AA  0874               	movf	??_nrf_command_with_data_overwrite+1,w
  1986     04AB  1383               	bcf	3,7	;select IRP bank0
  1987     04AC  0080               	movwf	0
  1988     04AD                     l1234:
  1989     04AD  3001               	movlw	1
  1990     04AE  00F3               	movwf	??_nrf_command_with_data_overwrite
  1991     04AF  0873               	movf	??_nrf_command_with_data_overwrite,w
  1992     04B0  07F8               	addwf	nrf_command_with_data_overwrite@i,f
  1993     04B1                     l1236:
  1994     04B1  0872               	movf	nrf_command_with_data_overwrite@len,w
  1995     04B2  0278               	subwf	nrf_command_with_data_overwrite@i,w
  1996     04B3  1C03               	skipc
  1997     04B4  2CB6               	goto	u431
  1998     04B5  2CB7               	goto	u430
  1999     04B6                     u431:
  2000     04B6  2C98               	goto	l1232
  2001     04B7                     u430:
  2002     04B7                     l96:
  2003     04B7  1283               	bcf	3,5	;RP0=0, select bank0
  2004     04B8  1303               	bcf	3,6	;RP1=0, select bank0
  2005     04B9  1588               	bsf	8,3	;volatile
  2006     04BA                     l1238:
  2007     04BA  0877               	movf	nrf_command_with_data_overwrite@status,w
  2008     04BB                     l97:
  2009     04BB  0008               	return
  2010     04BC                     __end_of_nrf_command_with_data_overwrite:
  2011                           
  2012                           	psect	text11
  2013     03C0                     __ptext11:	
  2014 ;; *************** function _nrf_data_available *****************
  2015 ;; Defined at:
  2016 ;;		line 248 in file "./nrf24l01.h"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  status          1    3[COMMON] unsigned char 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      unsigned char 
  2023 ;; Registers used:
  2024 ;;		wreg, pclath, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2030 ;;      Params:         0       0       0       0       0
  2031 ;;      Locals:         1       0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0
  2033 ;;      Totals:         1       0       0       0       0
  2034 ;;Total ram usage:        1 bytes
  2035 ;; Hardware stack levels used: 1
  2036 ;; Hardware stack levels required when called: 2
  2037 ;; This function calls:
  2038 ;;		_nrf_write_command
  2039 ;; This function is called by:
  2040 ;;		_main
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044     03C0                     _nrf_data_available:	
  2045                           ;psect for function _nrf_data_available
  2046                           
  2047     03C0                     l1418:	
  2048                           ;incstack = 0
  2049                           ; Regs used in _nrf_data_available: [wreg+pclath+cstack]
  2050                           
  2051                           
  2052                           ;./nrf24l01.h: 250:         uint8_t status = nrf_write_command(0b11111111);
  2053     03C0  30FF               	movlw	255
  2054     03C1  120A  118A  23DD  120A  118A  	fcall	_nrf_write_command
  2055     03C6  00F3               	movwf	nrf_data_available@status
  2056     03C7                     l1420:
  2057                           
  2058                           ;./nrf24l01.h: 251:         return (status & 0x40) != 0;
  2059     03C7  1B73               	btfsc	nrf_data_available@status,6
  2060     03C8  2BCA               	goto	u641
  2061     03C9  2BCC               	goto	u640
  2062     03CA                     u641:
  2063     03CA  3001               	movlw	1
  2064     03CB  2BCD               	goto	u650
  2065     03CC                     u640:
  2066     03CC  3000               	movlw	0
  2067     03CD                     u650:
  2068     03CD                     l132:
  2069     03CD  0008               	return
  2070     03CE                     __end_of_nrf_data_available:
  2071                           
  2072                           	psect	text12
  2073     03DD                     __ptext12:	
  2074 ;; *************** function _nrf_write_command *****************
  2075 ;; Defined at:
  2076 ;;		line 152 in file "./nrf24l01.h"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;  command         1    wreg     unsigned char 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  command         1    1[COMMON] unsigned char 
  2081 ;;  status          1    2[COMMON] unsigned char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      unsigned char 
  2084 ;; Registers used:
  2085 ;;		wreg, pclath, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2091 ;;      Params:         0       0       0       0       0
  2092 ;;      Locals:         2       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0
  2094 ;;      Totals:         2       0       0       0       0
  2095 ;;Total ram usage:        2 bytes
  2096 ;; Hardware stack levels used: 1
  2097 ;; Hardware stack levels required when called: 1
  2098 ;; This function calls:
  2099 ;;		_SPI_write
  2100 ;; This function is called by:
  2101 ;;		_nrf_flush_rxtx
  2102 ;;		_nrf_data_available
  2103 ;;		_nrf_read
  2104 ;;		_nrf_send
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108     03DD                     _nrf_write_command:	
  2109                           ;psect for function _nrf_write_command
  2110                           
  2111                           
  2112                           ;incstack = 0
  2113                           ; Regs used in _nrf_write_command: [wreg+pclath+cstack]
  2114                           ;nrf_write_command@command stored from wreg
  2115     03DD  00F1               	movwf	nrf_write_command@command
  2116     03DE                     l1246:
  2117                           
  2118                           ;./nrf24l01.h: 152:     uint8_t nrf_write_command(uint8_t command);./nrf24l01.h: 153:   
      +                            {;./nrf24l01.h: 154:         RD3 = 0;
  2119     03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2120     03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2121     03E0  1188               	bcf	8,3	;volatile
  2122     03E1                     l1248:
  2123                           
  2124                           ;./nrf24l01.h: 155:         uint8_t status = SPI_write(command);
  2125     03E1  0871               	movf	nrf_write_command@command,w
  2126     03E2  120A  118A  23CE  120A  118A  	fcall	_SPI_write
  2127     03E7  00F2               	movwf	nrf_write_command@status
  2128     03E8                     l1250:
  2129                           
  2130                           ;./nrf24l01.h: 156:         RD3 = 1;
  2131     03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2132     03E9  1303               	bcf	3,6	;RP1=0, select bank0
  2133     03EA  1588               	bsf	8,3	;volatile
  2134     03EB                     l1252:
  2135                           
  2136                           ;./nrf24l01.h: 157:         return status;
  2137     03EB  0872               	movf	nrf_write_command@status,w
  2138     03EC                     l115:
  2139     03EC  0008               	return
  2140     03ED                     __end_of_nrf_write_command:
  2141                           
  2142                           	psect	text13
  2143     03CE                     __ptext13:	
  2144 ;; *************** function _SPI_write *****************
  2145 ;; Defined at:
  2146 ;;		line 26 in file "./spi.h"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  data            1    wreg     unsigned char 
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  data            1    0[COMMON] unsigned char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      unsigned char 
  2153 ;; Registers used:
  2154 ;;		wreg
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2160 ;;      Params:         0       0       0       0       0
  2161 ;;      Locals:         1       0       0       0       0
  2162 ;;      Temps:          0       0       0       0       0
  2163 ;;      Totals:         1       0       0       0       0
  2164 ;;Total ram usage:        1 bytes
  2165 ;; Hardware stack levels used: 1
  2166 ;; This function calls:
  2167 ;;		Nothing
  2168 ;; This function is called by:
  2169 ;;		_nrf_command_with_data_overwrite
  2170 ;;		_nrf_command_with_data
  2171 ;;		_nrf_write_command
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175     03CE                     _SPI_write:	
  2176                           ;psect for function _SPI_write
  2177                           
  2178                           
  2179                           ;incstack = 0
  2180                           ; Regs used in _SPI_write: [wreg]
  2181                           ;SPI_write@data stored from wreg
  2182     03CE  00F0               	movwf	SPI_write@data
  2183     03CF                     l1204:
  2184                           
  2185                           ;./spi.h: 26:     uint8_t SPI_write(uint8_t data);./spi.h: 27:     {;./spi.h: 28:       
      +                            SSPBUF = data;
  2186     03CF  0870               	movf	SPI_write@data,w
  2187     03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2188     03D1  1303               	bcf	3,6	;RP1=0, select bank0
  2189     03D2  0093               	movwf	19	;volatile
  2190     03D3                     l82:	
  2191                           ;./spi.h: 30:             ;
  2192                           
  2193                           
  2194                           ;./spi.h: 29:         while (!BF)
  2195     03D3  1683               	bsf	3,5	;RP0=1, select bank1
  2196     03D4  1303               	bcf	3,6	;RP1=0, select bank1
  2197     03D5  1C14               	btfss	20,0	;volatile
  2198     03D6  2BD8               	goto	u411
  2199     03D7  2BD9               	goto	u410
  2200     03D8                     u411:
  2201     03D8  2BD3               	goto	l82
  2202     03D9                     u410:
  2203     03D9                     l1206:
  2204                           
  2205                           ;./spi.h: 31:         return SSPBUF;
  2206     03D9  1283               	bcf	3,5	;RP0=0, select bank0
  2207     03DA  1303               	bcf	3,6	;RP1=0, select bank0
  2208     03DB  0813               	movf	19,w	;volatile
  2209     03DC                     l85:
  2210     03DC  0008               	return
  2211     03DD                     __end_of_SPI_write:
  2212                           
  2213                           	psect	text14
  2214     04BC                     __ptext14:	
  2215 ;; *************** function _UART_write_text *****************
  2216 ;; Defined at:
  2217 ;;		line 41 in file "./uart.h"
  2218 ;; Parameters:    Size  Location     Type
  2219 ;;  text            2    1[COMMON] PTR unsigned char 
  2220 ;;		 -> main@buffer_197(64), main@buffer(64), 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  i               2    6[COMMON] int 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      void 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2232 ;;      Params:         2       0       0       0       0
  2233 ;;      Locals:         2       0       0       0       0
  2234 ;;      Temps:          3       0       0       0       0
  2235 ;;      Totals:         7       0       0       0       0
  2236 ;;Total ram usage:        7 bytes
  2237 ;; Hardware stack levels used: 1
  2238 ;; Hardware stack levels required when called: 1
  2239 ;; This function calls:
  2240 ;;		_UART_write
  2241 ;; This function is called by:
  2242 ;;		_main
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246     04BC                     _UART_write_text:	
  2247                           ;psect for function _UART_write_text
  2248                           
  2249     04BC                     l1336:	
  2250                           ;incstack = 0
  2251                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2252                           
  2253                           
  2254                           ;./uart.h: 41:  void UART_write_text(char *text);./uart.h: 42:  {;./uart.h: 43:   for (i
      +                          nt i = 0; text[i] != '\0'; i++)
  2255     04BC  01F6               	clrf	UART_write_text@i
  2256     04BD  01F7               	clrf	UART_write_text@i+1
  2257     04BE  2CDC               	goto	l1342
  2258     04BF                     l1338:
  2259                           
  2260                           ;./uart.h: 44:    UART_write(text[i]);
  2261     04BF  0876               	movf	UART_write_text@i,w
  2262     04C0  0771               	addwf	UART_write_text@text,w
  2263     04C1  00F4               	movwf	??_UART_write_text+1
  2264     04C2  0872               	movf	UART_write_text@text+1,w
  2265     04C3  00F3               	movwf	??_UART_write_text
  2266     04C4  1803               	skipnc
  2267     04C5  0AF3               	incf	??_UART_write_text,f
  2268     04C6  1FF6               	btfss	UART_write_text@i,7
  2269     04C7  2CC9               	goto	u590
  2270     04C8  03F3               	decf	??_UART_write_text,f
  2271     04C9                     u590:
  2272     04C9  0873               	movf	??_UART_write_text,w
  2273     04CA  00F5               	movwf	??_UART_write_text+2
  2274     04CB  0874               	movf	??_UART_write_text+1,w
  2275     04CC  0084               	movwf	4
  2276     04CD  1783               	bsf	3,7
  2277     04CE  1C75               	btfss	??_UART_write_text+2,0
  2278     04CF  1383               	bcf	3,7
  2279     04D0  0800               	movf	0,w
  2280     04D1  120A  118A  239B  120A  118A  	fcall	_UART_write
  2281     04D6                     l1340:
  2282     04D6  3001               	movlw	1
  2283     04D7  07F6               	addwf	UART_write_text@i,f
  2284     04D8  1803               	skipnc
  2285     04D9  0AF7               	incf	UART_write_text@i+1,f
  2286     04DA  3000               	movlw	0
  2287     04DB  07F7               	addwf	UART_write_text@i+1,f
  2288     04DC                     l1342:
  2289     04DC  0876               	movf	UART_write_text@i,w
  2290     04DD  0771               	addwf	UART_write_text@text,w
  2291     04DE  00F4               	movwf	??_UART_write_text+1
  2292     04DF  0872               	movf	UART_write_text@text+1,w
  2293     04E0  00F3               	movwf	??_UART_write_text
  2294     04E1  1803               	skipnc
  2295     04E2  0AF3               	incf	??_UART_write_text,f
  2296     04E3  1FF6               	btfss	UART_write_text@i,7
  2297     04E4  2CE6               	goto	u600
  2298     04E5  03F3               	decf	??_UART_write_text,f
  2299     04E6                     u600:
  2300     04E6  0873               	movf	??_UART_write_text,w
  2301     04E7  00F5               	movwf	??_UART_write_text+2
  2302     04E8  0874               	movf	??_UART_write_text+1,w
  2303     04E9  0084               	movwf	4
  2304     04EA  1783               	bsf	3,7
  2305     04EB  1C75               	btfss	??_UART_write_text+2,0
  2306     04EC  1383               	bcf	3,7
  2307     04ED  0800               	movf	0,w
  2308     04EE  1D03               	btfss	3,2
  2309     04EF  2CF1               	goto	u611
  2310     04F0  2CF2               	goto	u610
  2311     04F1                     u611:
  2312     04F1  2CBF               	goto	l1338
  2313     04F2                     u610:
  2314     04F2                     l67:
  2315     04F2  0008               	return
  2316     04F3                     __end_of_UART_write_text:
  2317                           
  2318                           	psect	text15
  2319     039B                     __ptext15:	
  2320 ;; *************** function _UART_write *****************
  2321 ;; Defined at:
  2322 ;;		line 33 in file "./uart.h"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  data            1    wreg     unsigned char 
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  data            1    0[COMMON] unsigned char 
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  1    wreg      void 
  2329 ;; Registers used:
  2330 ;;		wreg
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2336 ;;      Params:         0       0       0       0       0
  2337 ;;      Locals:         1       0       0       0       0
  2338 ;;      Temps:          0       0       0       0       0
  2339 ;;      Totals:         1       0       0       0       0
  2340 ;;Total ram usage:        1 bytes
  2341 ;; Hardware stack levels used: 1
  2342 ;; This function calls:
  2343 ;;		Nothing
  2344 ;; This function is called by:
  2345 ;;		_UART_write_text
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349     039B                     _UART_write:	
  2350                           ;psect for function _UART_write
  2351                           
  2352                           
  2353                           ;incstack = 0
  2354                           ; Regs used in _UART_write: [wreg]
  2355                           ;UART_write@data stored from wreg
  2356     039B  00F0               	movwf	UART_write@data
  2357     039C                     l1256:
  2358     039C                     l58:	
  2359                           ;./uart.h: 36:    ;
  2360                           
  2361                           
  2362                           ;./uart.h: 35:   while (!TRMT)
  2363     039C  1683               	bsf	3,5	;RP0=1, select bank1
  2364     039D  1303               	bcf	3,6	;RP1=0, select bank1
  2365     039E  1C98               	btfss	24,1	;volatile
  2366     039F  2BA1               	goto	u441
  2367     03A0  2BA2               	goto	u440
  2368     03A1                     u441:
  2369     03A1  2B9C               	goto	l58
  2370     03A2                     u440:
  2371     03A2                     l1258:
  2372                           
  2373                           ;./uart.h: 37:   TXREG = data;
  2374     03A2  0870               	movf	UART_write@data,w
  2375     03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2376     03A4  1303               	bcf	3,6	;RP1=0, select bank0
  2377     03A5  0099               	movwf	25	;volatile
  2378     03A6                     l61:
  2379     03A6  0008               	return
  2380     03A7                     __end_of_UART_write:
  2381                           
  2382                           	psect	text16
  2383     04F3                     __ptext16:	
  2384 ;; *************** function _UART_init *****************
  2385 ;; Defined at:
  2386 ;;		line 19 in file "./uart.h"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  baudrate        4    6[BANK0 ] const long 
  2389 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, status,0, pclath, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2401 ;;      Params:         0       8       0       0       0
  2402 ;;      Locals:         0       0       0       0       0
  2403 ;;      Temps:          0      12       0       0       0
  2404 ;;      Totals:         0      20       0       0       0
  2405 ;;Total ram usage:       20 bytes
  2406 ;; Hardware stack levels used: 1
  2407 ;; Hardware stack levels required when called: 1
  2408 ;; This function calls:
  2409 ;;		___aldiv
  2410 ;; This function is called by:
  2411 ;;		_main
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415     04F3                     _UART_init:	
  2416                           ;psect for function _UART_init
  2417                           
  2418     04F3                     l1320:	
  2419                           ;incstack = 0
  2420                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  2421                           
  2422                           
  2423                           ;./uart.h: 19:  void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 20:  
      +                          {;./uart.h: 21:   BRGH = 1;
  2424     04F3  1683               	bsf	3,5	;RP0=1, select bank1
  2425     04F4  1303               	bcf	3,6	;RP1=0, select bank1
  2426     04F5  1518               	bsf	24,2	;volatile
  2427     04F6                     l1322:
  2428                           
  2429                           ;./uart.h: 22:   SPBRG = (_XTAL_FREQ - baudrate * 16) / (baudrate * 16);
  2430     04F6  1283               	bcf	3,5	;RP0=0, select bank0
  2431     04F7  1303               	bcf	3,6	;RP1=0, select bank0
  2432     04F8  0826               	movf	UART_init@baudrate,w
  2433     04F9  00AE               	movwf	??_UART_init
  2434     04FA  0827               	movf	UART_init@baudrate+1,w
  2435     04FB  00AF               	movwf	??_UART_init+1
  2436     04FC  0828               	movf	UART_init@baudrate+2,w
  2437     04FD  00B0               	movwf	??_UART_init+2
  2438     04FE  0829               	movf	UART_init@baudrate+3,w
  2439     04FF  00B1               	movwf	??_UART_init+3
  2440     0500  3004               	movlw	4
  2441     0501                     u565:
  2442     0501  1003               	clrc
  2443     0502  0DAE               	rlf	??_UART_init,f
  2444     0503  0DAF               	rlf	??_UART_init+1,f
  2445     0504  0DB0               	rlf	??_UART_init+2,f
  2446     0505  0DB1               	rlf	??_UART_init+3,f
  2447     0506                     u560:
  2448     0506  3EFF               	addlw	-1
  2449     0507  1D03               	skipz
  2450     0508  2D01               	goto	u565
  2451     0509  0831               	movf	??_UART_init+3,w
  2452     050A  00F3               	movwf	___aldiv@divisor+3
  2453     050B  0830               	movf	??_UART_init+2,w
  2454     050C  00F2               	movwf	___aldiv@divisor+2
  2455     050D  082F               	movf	??_UART_init+1,w
  2456     050E  00F1               	movwf	___aldiv@divisor+1
  2457     050F  082E               	movf	??_UART_init,w
  2458     0510  00F0               	movwf	___aldiv@divisor
  2459     0511  0826               	movf	UART_init@baudrate,w
  2460     0512  00B2               	movwf	??_UART_init+4
  2461     0513  0827               	movf	UART_init@baudrate+1,w
  2462     0514  00B3               	movwf	??_UART_init+5
  2463     0515  0828               	movf	UART_init@baudrate+2,w
  2464     0516  00B4               	movwf	??_UART_init+6
  2465     0517  0829               	movf	UART_init@baudrate+3,w
  2466     0518  00B5               	movwf	??_UART_init+7
  2467     0519  3004               	movlw	4
  2468     051A                     u575:
  2469     051A  1003               	clrc
  2470     051B  0DB2               	rlf	??_UART_init+4,f
  2471     051C  0DB3               	rlf	??_UART_init+5,f
  2472     051D  0DB4               	rlf	??_UART_init+6,f
  2473     051E  0DB5               	rlf	??_UART_init+7,f
  2474     051F                     u570:
  2475     051F  3EFF               	addlw	-1
  2476     0520  1D03               	skipz
  2477     0521  2D1A               	goto	u575
  2478     0522  082A               	movf	UART_init@_XTAL_FREQ,w
  2479     0523  00B6               	movwf	??_UART_init+8
  2480     0524  082B               	movf	UART_init@_XTAL_FREQ+1,w
  2481     0525  00B7               	movwf	??_UART_init+9
  2482     0526  082C               	movf	UART_init@_XTAL_FREQ+2,w
  2483     0527  00B8               	movwf	??_UART_init+10
  2484     0528  082D               	movf	UART_init@_XTAL_FREQ+3,w
  2485     0529  00B9               	movwf	??_UART_init+11
  2486     052A  0832               	movf	??_UART_init+4,w
  2487     052B  02B6               	subwf	??_UART_init+8,f
  2488     052C  0833               	movf	??_UART_init+5,w
  2489     052D  1C03               	skipc
  2490     052E  0F33               	incfsz	??_UART_init+5,w
  2491     052F  2D31               	goto	u581
  2492     0530  2D32               	goto	u582
  2493     0531                     u581:
  2494     0531  02B7               	subwf	??_UART_init+9,f
  2495     0532                     u582:
  2496     0532  0834               	movf	??_UART_init+6,w
  2497     0533  1C03               	skipc
  2498     0534  0F34               	incfsz	??_UART_init+6,w
  2499     0535  2D37               	goto	u583
  2500     0536  2D38               	goto	u584
  2501     0537                     u583:
  2502     0537  02B8               	subwf	??_UART_init+10,f
  2503     0538                     u584:
  2504     0538  0835               	movf	??_UART_init+7,w
  2505     0539  1C03               	skipc
  2506     053A  0F35               	incfsz	??_UART_init+7,w
  2507     053B  2D3D               	goto	u585
  2508     053C  2D3E               	goto	u586
  2509     053D                     u585:
  2510     053D  02B9               	subwf	??_UART_init+11,f
  2511     053E                     u586:
  2512     053E  0839               	movf	??_UART_init+11,w
  2513     053F  00F7               	movwf	___aldiv@dividend+3
  2514     0540  0838               	movf	??_UART_init+10,w
  2515     0541  00F6               	movwf	___aldiv@dividend+2
  2516     0542  0837               	movf	??_UART_init+9,w
  2517     0543  00F5               	movwf	___aldiv@dividend+1
  2518     0544  0836               	movf	??_UART_init+8,w
  2519     0545  00F4               	movwf	___aldiv@dividend
  2520     0546  120A  118A  25CF  120A  118A  	fcall	___aldiv
  2521     054B  0870               	movf	?___aldiv,w
  2522     054C  1683               	bsf	3,5	;RP0=1, select bank1
  2523     054D  1303               	bcf	3,6	;RP1=0, select bank1
  2524     054E  0099               	movwf	25	;volatile
  2525     054F                     l1324:
  2526                           
  2527                           ;./uart.h: 23:   SYNC = 0;
  2528     054F  1218               	bcf	24,4	;volatile
  2529     0550                     l1326:
  2530                           
  2531                           ;./uart.h: 24:   SPEN = 1;
  2532     0550  1283               	bcf	3,5	;RP0=0, select bank0
  2533     0551  1303               	bcf	3,6	;RP1=0, select bank0
  2534     0552  1798               	bsf	24,7	;volatile
  2535     0553                     l1328:
  2536                           
  2537                           ;./uart.h: 25:   TRISC7 = 1;
  2538     0553  1683               	bsf	3,5	;RP0=1, select bank1
  2539     0554  1303               	bcf	3,6	;RP1=0, select bank1
  2540     0555  1787               	bsf	7,7	;volatile
  2541     0556                     l1330:
  2542                           
  2543                           ;./uart.h: 26:   TRISC6 = 1;
  2544     0556  1707               	bsf	7,6	;volatile
  2545     0557                     l1332:
  2546                           
  2547                           ;./uart.h: 27:   CREN = 1;
  2548     0557  1283               	bcf	3,5	;RP0=0, select bank0
  2549     0558  1303               	bcf	3,6	;RP1=0, select bank0
  2550     0559  1618               	bsf	24,4	;volatile
  2551     055A                     l1334:
  2552                           
  2553                           ;./uart.h: 28:   TXEN = 1;
  2554     055A  1683               	bsf	3,5	;RP0=1, select bank1
  2555     055B  1303               	bcf	3,6	;RP1=0, select bank1
  2556     055C  1698               	bsf	24,5	;volatile
  2557     055D                     l55:
  2558     055D  0008               	return
  2559     055E                     __end_of_UART_init:
  2560                           
  2561                           	psect	text17
  2562     05CF                     __ptext17:	
  2563 ;; *************** function ___aldiv *****************
  2564 ;; Defined at:
  2565 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  divisor         4    0[COMMON] long 
  2568 ;;  dividend        4    4[COMMON] long 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;  quotient        4    2[BANK0 ] long 
  2571 ;;  sign            1    1[BANK0 ] unsigned char 
  2572 ;;  counter         1    0[BANK0 ] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  4    0[COMMON] long 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2, status,0
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2582 ;;      Params:         8       0       0       0       0
  2583 ;;      Locals:         0       6       0       0       0
  2584 ;;      Temps:          1       0       0       0       0
  2585 ;;      Totals:         9       6       0       0       0
  2586 ;;Total ram usage:       15 bytes
  2587 ;; Hardware stack levels used: 1
  2588 ;; This function calls:
  2589 ;;		Nothing
  2590 ;; This function is called by:
  2591 ;;		_UART_init
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595     05CF                     ___aldiv:	
  2596                           ;psect for function ___aldiv
  2597                           
  2598     05CF                     l1280:	
  2599                           ;incstack = 0
  2600                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2601                           
  2602     05CF  1283               	bcf	3,5	;RP0=0, select bank0
  2603     05D0  1303               	bcf	3,6	;RP1=0, select bank0
  2604     05D1  01A1               	clrf	___aldiv@sign
  2605     05D2                     l1282:
  2606     05D2  1FF3               	btfss	___aldiv@divisor+3,7
  2607     05D3  2DD5               	goto	u461
  2608     05D4  2DD6               	goto	u460
  2609     05D5                     u461:
  2610     05D5  2DE3               	goto	l363
  2611     05D6                     u460:
  2612     05D6                     l1284:
  2613     05D6  09F0               	comf	___aldiv@divisor,f
  2614     05D7  09F1               	comf	___aldiv@divisor+1,f
  2615     05D8  09F2               	comf	___aldiv@divisor+2,f
  2616     05D9  09F3               	comf	___aldiv@divisor+3,f
  2617     05DA  0AF0               	incf	___aldiv@divisor,f
  2618     05DB  1903               	skipnz
  2619     05DC  0AF1               	incf	___aldiv@divisor+1,f
  2620     05DD  1903               	skipnz
  2621     05DE  0AF2               	incf	___aldiv@divisor+2,f
  2622     05DF  1903               	skipnz
  2623     05E0  0AF3               	incf	___aldiv@divisor+3,f
  2624     05E1  01A1               	clrf	___aldiv@sign
  2625     05E2  0AA1               	incf	___aldiv@sign,f
  2626     05E3                     l363:
  2627     05E3  1FF7               	btfss	___aldiv@dividend+3,7
  2628     05E4  2DE6               	goto	u471
  2629     05E5  2DE7               	goto	u470
  2630     05E6                     u471:
  2631     05E6  2DF6               	goto	l1290
  2632     05E7                     u470:
  2633     05E7                     l1286:
  2634     05E7  09F4               	comf	___aldiv@dividend,f
  2635     05E8  09F5               	comf	___aldiv@dividend+1,f
  2636     05E9  09F6               	comf	___aldiv@dividend+2,f
  2637     05EA  09F7               	comf	___aldiv@dividend+3,f
  2638     05EB  0AF4               	incf	___aldiv@dividend,f
  2639     05EC  1903               	skipnz
  2640     05ED  0AF5               	incf	___aldiv@dividend+1,f
  2641     05EE  1903               	skipnz
  2642     05EF  0AF6               	incf	___aldiv@dividend+2,f
  2643     05F0  1903               	skipnz
  2644     05F1  0AF7               	incf	___aldiv@dividend+3,f
  2645     05F2                     l1288:
  2646     05F2  3001               	movlw	1
  2647     05F3  00F8               	movwf	??___aldiv
  2648     05F4  0878               	movf	??___aldiv,w
  2649     05F5  06A1               	xorwf	___aldiv@sign,f
  2650     05F6                     l1290:
  2651     05F6  3000               	movlw	0
  2652     05F7  00A5               	movwf	___aldiv@quotient+3
  2653     05F8  3000               	movlw	0
  2654     05F9  00A4               	movwf	___aldiv@quotient+2
  2655     05FA  3000               	movlw	0
  2656     05FB  00A3               	movwf	___aldiv@quotient+1
  2657     05FC  3000               	movlw	0
  2658     05FD  00A2               	movwf	___aldiv@quotient
  2659     05FE                     l1292:
  2660     05FE  0873               	movf	___aldiv@divisor+3,w
  2661     05FF  0472               	iorwf	___aldiv@divisor+2,w
  2662     0600  0471               	iorwf	___aldiv@divisor+1,w
  2663     0601  0470               	iorwf	___aldiv@divisor,w
  2664     0602  1903               	skipnz
  2665     0603  2E05               	goto	u481
  2666     0604  2E06               	goto	u480
  2667     0605                     u481:
  2668     0605  2E53               	goto	l1312
  2669     0606                     u480:
  2670     0606                     l1294:
  2671     0606  01A0               	clrf	___aldiv@counter
  2672     0607  0AA0               	incf	___aldiv@counter,f
  2673     0608  2E16               	goto	l1298
  2674     0609                     l1296:
  2675     0609  3001               	movlw	1
  2676     060A  00F8               	movwf	??___aldiv
  2677     060B                     u495:
  2678     060B  1003               	clrc
  2679     060C  0DF0               	rlf	___aldiv@divisor,f
  2680     060D  0DF1               	rlf	___aldiv@divisor+1,f
  2681     060E  0DF2               	rlf	___aldiv@divisor+2,f
  2682     060F  0DF3               	rlf	___aldiv@divisor+3,f
  2683     0610  0BF8               	decfsz	??___aldiv,f
  2684     0611  2E0B               	goto	u495
  2685     0612  3001               	movlw	1
  2686     0613  00F8               	movwf	??___aldiv
  2687     0614  0878               	movf	??___aldiv,w
  2688     0615  07A0               	addwf	___aldiv@counter,f
  2689     0616                     l1298:
  2690     0616  1FF3               	btfss	___aldiv@divisor+3,7
  2691     0617  2E19               	goto	u501
  2692     0618  2E1A               	goto	u500
  2693     0619                     u501:
  2694     0619  2E09               	goto	l1296
  2695     061A                     u500:
  2696     061A                     l1300:
  2697     061A  3001               	movlw	1
  2698     061B  00F8               	movwf	??___aldiv
  2699     061C                     u515:
  2700     061C  1003               	clrc
  2701     061D  0DA2               	rlf	___aldiv@quotient,f
  2702     061E  0DA3               	rlf	___aldiv@quotient+1,f
  2703     061F  0DA4               	rlf	___aldiv@quotient+2,f
  2704     0620  0DA5               	rlf	___aldiv@quotient+3,f
  2705     0621  0BF8               	decfsz	??___aldiv,f
  2706     0622  2E1C               	goto	u515
  2707     0623                     l1302:
  2708     0623  0873               	movf	___aldiv@divisor+3,w
  2709     0624  0277               	subwf	___aldiv@dividend+3,w
  2710     0625  1D03               	skipz
  2711     0626  2E31               	goto	u525
  2712     0627  0872               	movf	___aldiv@divisor+2,w
  2713     0628  0276               	subwf	___aldiv@dividend+2,w
  2714     0629  1D03               	skipz
  2715     062A  2E31               	goto	u525
  2716     062B  0871               	movf	___aldiv@divisor+1,w
  2717     062C  0275               	subwf	___aldiv@dividend+1,w
  2718     062D  1D03               	skipz
  2719     062E  2E31               	goto	u525
  2720     062F  0870               	movf	___aldiv@divisor,w
  2721     0630  0274               	subwf	___aldiv@dividend,w
  2722     0631                     u525:
  2723     0631  1C03               	skipc
  2724     0632  2E34               	goto	u521
  2725     0633  2E35               	goto	u520
  2726     0634                     u521:
  2727     0634  2E44               	goto	l1308
  2728     0635                     u520:
  2729     0635                     l1304:
  2730     0635  0870               	movf	___aldiv@divisor,w
  2731     0636  02F4               	subwf	___aldiv@dividend,f
  2732     0637  0871               	movf	___aldiv@divisor+1,w
  2733     0638  1C03               	skipc
  2734     0639  0F71               	incfsz	___aldiv@divisor+1,w
  2735     063A  02F5               	subwf	___aldiv@dividend+1,f
  2736     063B  0872               	movf	___aldiv@divisor+2,w
  2737     063C  1C03               	skipc
  2738     063D  0F72               	incfsz	___aldiv@divisor+2,w
  2739     063E  02F6               	subwf	___aldiv@dividend+2,f
  2740     063F  0873               	movf	___aldiv@divisor+3,w
  2741     0640  1C03               	skipc
  2742     0641  0F73               	incfsz	___aldiv@divisor+3,w
  2743     0642  02F7               	subwf	___aldiv@dividend+3,f
  2744     0643                     l1306:
  2745     0643  1422               	bsf	___aldiv@quotient,0
  2746     0644                     l1308:
  2747     0644  3001               	movlw	1
  2748     0645                     u535:
  2749     0645  1003               	clrc
  2750     0646  0CF3               	rrf	___aldiv@divisor+3,f
  2751     0647  0CF2               	rrf	___aldiv@divisor+2,f
  2752     0648  0CF1               	rrf	___aldiv@divisor+1,f
  2753     0649  0CF0               	rrf	___aldiv@divisor,f
  2754     064A  3EFF               	addlw	-1
  2755     064B  1D03               	skipz
  2756     064C  2E45               	goto	u535
  2757     064D                     l1310:
  2758     064D  3001               	movlw	1
  2759     064E  02A0               	subwf	___aldiv@counter,f
  2760     064F  1D03               	btfss	3,2
  2761     0650  2E52               	goto	u541
  2762     0651  2E53               	goto	u540
  2763     0652                     u541:
  2764     0652  2E1A               	goto	l1300
  2765     0653                     u540:
  2766     0653                     l1312:
  2767     0653  0821               	movf	___aldiv@sign,w
  2768     0654  1903               	btfsc	3,2
  2769     0655  2E57               	goto	u551
  2770     0656  2E58               	goto	u550
  2771     0657                     u551:
  2772     0657  2E63               	goto	l1316
  2773     0658                     u550:
  2774     0658                     l1314:
  2775     0658  09A2               	comf	___aldiv@quotient,f
  2776     0659  09A3               	comf	___aldiv@quotient+1,f
  2777     065A  09A4               	comf	___aldiv@quotient+2,f
  2778     065B  09A5               	comf	___aldiv@quotient+3,f
  2779     065C  0AA2               	incf	___aldiv@quotient,f
  2780     065D  1903               	skipnz
  2781     065E  0AA3               	incf	___aldiv@quotient+1,f
  2782     065F  1903               	skipnz
  2783     0660  0AA4               	incf	___aldiv@quotient+2,f
  2784     0661  1903               	skipnz
  2785     0662  0AA5               	incf	___aldiv@quotient+3,f
  2786     0663                     l1316:
  2787     0663  0825               	movf	___aldiv@quotient+3,w
  2788     0664  00F3               	movwf	?___aldiv+3
  2789     0665  0824               	movf	___aldiv@quotient+2,w
  2790     0666  00F2               	movwf	?___aldiv+2
  2791     0667  0823               	movf	___aldiv@quotient+1,w
  2792     0668  00F1               	movwf	?___aldiv+1
  2793     0669  0822               	movf	___aldiv@quotient,w
  2794     066A  00F0               	movwf	?___aldiv
  2795     066B                     l373:
  2796     066B  0008               	return
  2797     066C                     __end_of___aldiv:
  2798                           
  2799                           	psect	text18
  2800     038F                     __ptext18:	
  2801 ;; *************** function _SPI_init_master *****************
  2802 ;; Defined at:
  2803 ;;		line 16 in file "./spi.h"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  1    wreg      void 
  2810 ;; Registers used:
  2811 ;;		wreg
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2817 ;;      Params:         0       0       0       0       0
  2818 ;;      Locals:         0       0       0       0       0
  2819 ;;      Temps:          0       0       0       0       0
  2820 ;;      Totals:         0       0       0       0       0
  2821 ;;Total ram usage:        0 bytes
  2822 ;; Hardware stack levels used: 1
  2823 ;; This function calls:
  2824 ;;		Nothing
  2825 ;; This function is called by:
  2826 ;;		_main
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830     038F                     _SPI_init_master:	
  2831                           ;psect for function _SPI_init_master
  2832                           
  2833     038F                     l1344:	
  2834                           ;incstack = 0
  2835                           ; Regs used in _SPI_init_master: [wreg]
  2836                           
  2837                           
  2838                           ;./spi.h: 18:         SSPCON = 0b01100001;
  2839     038F  3061               	movlw	97
  2840     0390  1283               	bcf	3,5	;RP0=0, select bank0
  2841     0391  1303               	bcf	3,6	;RP1=0, select bank0
  2842     0392  0094               	movwf	20	;volatile
  2843                           
  2844                           ;./spi.h: 19:         SSPSTAT = 0b01000000;
  2845     0393  3040               	movlw	64
  2846     0394  1683               	bsf	3,5	;RP0=1, select bank1
  2847     0395  1303               	bcf	3,6	;RP1=0, select bank1
  2848     0396  0094               	movwf	20	;volatile
  2849     0397                     l1346:
  2850                           
  2851                           ;./spi.h: 20:         TRISC4 = 1;
  2852     0397  1607               	bsf	7,4	;volatile
  2853     0398                     l1348:
  2854                           
  2855                           ;./spi.h: 21:         TRISC5 = 0;
  2856     0398  1287               	bcf	7,5	;volatile
  2857     0399                     l1350:
  2858                           
  2859                           ;./spi.h: 22:         TRISC3 = 0;
  2860     0399  1187               	bcf	7,3	;volatile
  2861     039A                     l79:
  2862     039A  0008               	return
  2863     039B                     __end_of_SPI_init_master:
  2864     007E                     btemp	set	126	;btemp
  2865     007E                     wtemp0	set	126
  2866                           
  2867                           	psect	config
  2868                           
  2869                           ;Config register CONFIG1 @ 0x2007
  2870                           ;	Oscillator Selection bits
  2871                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2872                           ;	Watchdog Timer Enable bit
  2873                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2874                           ;	Power-up Timer Enable bit
  2875                           ;	PWRTE = OFF, PWRT disabled
  2876                           ;	RE3/MCLR pin function select bit
  2877                           ;	MCLRE = 0x1, unprogrammed default
  2878                           ;	Code Protection bit
  2879                           ;	CP = OFF, Program memory code protection is disabled
  2880                           ;	Data Code Protection bit
  2881                           ;	CPD = OFF, Data memory code protection is disabled
  2882                           ;	Brown Out Reset Selection bits
  2883                           ;	BOREN = OFF, BOR disabled
  2884                           ;	Internal External Switchover bit
  2885                           ;	IESO = 0x1, unprogrammed default
  2886                           ;	Fail-Safe Clock Monitor Enabled bit
  2887                           ;	FCMEN = 0x1, unprogrammed default
  2888                           ;	Low Voltage Programming Enable bit
  2889                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2890                           ;	In-Circuit Debugger Mode bit
  2891                           ;	DEBUG = 0x1, unprogrammed default
  2892     2007                     	org	8199
  2893     2007  2CF2               	dw	11506
  2894                           
  2895                           ;Config register CONFIG2 @ 0x2008
  2896                           ;	Brown-out Reset Selection bit
  2897                           ;	BOR4V = 0x1, unprogrammed default
  2898                           ;	Flash Program Memory Self Write Enable bits
  2899                           ;	WRT = OFF, Write protection off
  2900     2008                     	org	8200
  2901     2008  3FFF               	dw	16383

Data Sizes:
    Strings     46
    Constant    0
    Data        5
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      39
    BANK1            80     64      69
    BANK3            96     64      64
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_3(CODE[13]), STR_2(CODE[8]), STR_1(CODE[18]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), ?_sprintf(BANK0[2]), main@data(BANK0[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_197(BANK3[64]), main@buffer(BANK1[64]), char_to_binary_string@output(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    nrf_read@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_setup@addr	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK1[5]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_read@clear(BANK0[1]), nrf_send@clear(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 
		 -> nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command_with_data@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_read@clear(BANK0[1]), nrf_send@clear(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 
		 -> nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command_with_data_overwrite@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK1[5]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_setup@data(BANK0[5]), 

    UART_write_text@text	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_197(BANK3[64]), main@buffer(BANK1[64]), 


Critical Paths under _main in COMMON

    _main->_nrf_setup
    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_set_rx_mode->_nrf_read_register
    _nrf_read->_nrf_read_register
    _nrf_write_register->_nrf_command_with_data
    _nrf_command_with_data->_SPI_write
    _nrf_read_register->_nrf_command_with_data_overwrite
    _nrf_command_with_data_overwrite->_SPI_write
    _nrf_data_available->_nrf_write_command
    _nrf_write_command->_SPI_write
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               131   131      0   16108
                                             26 BANK0      3     3      0
                                              0 BANK1     64    64      0
                                              0 BANK3     64    64      0
                    _SPI_init_master
                          _UART_init
                    _UART_write_text
                 _nrf_data_available
                           _nrf_read
                    _nrf_set_rx_mode
                          _nrf_setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             35    16     19     660
                                              0 COMMON     6     6      0
                                              0 BANK0     19     0     19
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                            9     8      1    6659
                                             11 COMMON     3     2      1
                                              0 BANK0      6     6      0
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    2898
                                             10 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               7     5      2     504
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _nrf_set_rx_mode                                      1     1      0    3753
                                             12 COMMON     1     1      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (1) _nrf_read                                             4     3      1    3933
                                             12 COMMON     1     0      1
                                              0 BANK0      2     2      0
                  _nrf_read_register
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    2807
                                              7 COMMON     3     1      2
              _nrf_command_with_data
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data                                6     4      2     309
                                              1 COMMON     6     4      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2     875
                                              9 COMMON     3     1      2
    _nrf_command_with_data_overwrite
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data_overwrite                      8     6      2     353
                                              1 COMMON     8     6      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_data_available                                   1     1      0      90
                                              3 COMMON     1     1      0
                  _nrf_write_command
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      7     5      2     186
                                              1 COMMON     7     5      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_init
     ___aldiv
   _UART_write_text
     _UART_write
   _nrf_data_available
     _nrf_write_command
       _SPI_write
   _nrf_read
     _nrf_read_register
       _nrf_command_with_data_overwrite
         _SPI_write
     _nrf_write_command
     _nrf_write_register
       _nrf_command_with_data
         _SPI_write
   _nrf_set_rx_mode
     _nrf_read_register
     _nrf_write_register
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     40      40       9       66.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     40      45       7       86.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1D      27       5       48.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      BA      12        0.0%
ABS                  0      0      BA       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Mar 28 13:57:10 2023

                                      pc 0002                                       _BF 04A0  
                                     l61 03A6                                       l55 055D  
                                     l58 039C                                       l82 03D3  
                                     l67 04F2                                       l91 0422  
                                     l85 03DC                                       l79 039A  
                                     l96 04B7                                       l97 04BB  
                                     fsr 0004                                      l102 0486  
                                    l103 048A                                      l121 07CF  
                                    l106 03BF                                      l115 03EC  
                                    l132 03CD                                      l140 0462  
                                    l124 0435                                      l109 03B2  
                                    l125 0440                                      l118 0405  
                                    l363 05E3                                      l373 066B  
                                    l294 0712                                      l287 06B7  
                                    _RD2 0042                                      _RD3 0043  
                                    u410 03D9                                      u411 03D8  
                                    u500 061A                                      u420 0486  
                                    u501 0619                                      u421 0485  
                                    u430 04B7                                      u431 04B6  
                                    u520 0635                                      u440 03A2  
                                    u600 04E6                                      u521 0634  
                                    u441 03A1                                      u610 04F2  
                                    u450 0422                                      u515 061C  
                                    u611 04F1                                      u451 0421  
                                    u540 0653                                      u460 05D6  
                                    u620 0434                                      u541 0652  
                                    u525 0631                                      u461 05D5  
                                    u621 0433                                      u550 0658  
                                    u470 05E7                                      u551 0657  
                                    u535 0645                                      u471 05E6  
                                    u480 0606                                      u560 0506  
                                    u640 03CC                                      u481 0605  
                                    u641 03CA                                      u570 051F  
                                    u650 03CD                                      u660 0675  
                                    u581 0531                                      u565 0501  
                                    u661 0674                                      u582 0532  
                                    u590 04C9                                      u670 0695  
                                    u495 060B                                      u583 0537  
                                    u575 051A                                      u807 071E  
                                    u671 0694                                      u584 0538  
                                    u680 06C5                                      u585 053D  
                                    u817 072B                                      u681 06C4  
                                    u586 053E                                      u690 070C  
                                    u691 070B                                      u790 05AB  
                                    u791 05AA                                      fsr0 0004  
                                    indf 0000                   nrf_command_with_data@i 0076  
                                   l1210 0464                                     l1300 061A  
                                   l1204 03CF                                     l1220 0480  
                                   l1212 0467                                     l1310 064D  
                                   l1302 0623                                     l1206 03D9  
                                   l1230 0496                                     l1222 0489  
                                   l1214 046E                                     l1304 0635  
                                   l1312 0653                                     l1320 04F3  
                                   l1232 0498                                     l1216 0470  
                                   l1314 0658                                     l1306 0643  
                                   l1330 0556                                     l1322 04F6  
                                   l1250 03E8                                     l1234 04AD  
                                   l1226 048C                                     l1218 047C  
                                   l1242 03B4                                     l1402 0436  
                                   l1316 0663                                     l1308 0644  
                                   l1332 0557                                     l1324 054F  
                                   l1340 04D6                                     l1252 03EB  
                                   l1420 03C7                                     l1236 04B1  
                                   l1228 048F                                     l1260 0407  
                                   l1350 0399                                     l1334 055A  
                                   l1326 0550                                     l1342 04DC  
                                   l1246 03DE                                     l1238 04BA  
                                   l1430 0458                                     l1262 0409  
                                   l1344 038F                                     l1280 05CF  
                                   l1328 0553                                     l1256 039C  
                                   l1336 04BC                                     l1248 03E1  
                                   l1424 0444                                     l1264 0418  
                                   l1272 03ED                                     l1360 0716  
                                   l1440 067C                                     l1346 0397  
                                   l1290 05F6                                     l1282 05D2  
                                   l1258 03A2                                     l1338 04BF  
                                   l1418 03C0                                     l1426 044E  
                                   l1266 041C                                     l1274 03EF  
                                   l1370 073E                                     l1362 071A  
                                   l1450 0695                                     l1442 0683  
                                   l1434 066C                                     l1348 0398  
                                   l1292 05FE                                     l1284 05D6  
                                   l1268 03A8                                     l1428 0454  
                                   l1276 03F9                                     l1380 075D  
                                   l1372 0741                                     l1364 0723  
                                   l1460 06CB                                     l1452 069A  
                                   l1444 0684                                     l1436 066F  
                                   l1294 0606                                     l1286 05E7  
                                   l1278 03FF                                     l1390 0786  
                                   l1382 0767                                     l1374 074B  
                                   l1366 0726                                     l1462 06CF  
                                   l1454 06AB                                     l1446 068B  
                                   l1438 0675                                     l1470 06FA  
                                   l1550 0586                                     l1296 0609  
                                   l1288 05F2                                     l1392 0790  
                                   l1384 076A                                     l1376 074F  
                                   l1368 0734                                     l1472 070C  
                                   l1464 06D6                                     l1456 06B1  
                                   l1448 068F                                     l1560 05AB  
                                   l1552 058F                                     l1544 055E  
                                   l1298 0616                                     l1394 0423  
                                   l1386 0774                                     l1378 0759  
                                   l1458 06C6                                     l1562 05B3  
                                   l1554 0594                                     l1546 0562  
                                   l1396 042D                                     l1388 0778  
                                   l1468 06DD                                     l1564 05C2  
                                   l1556 059C                                     l1548 0579  
                                   l1398 0430                                     l1558 05A1  
                                   l1596 06EF                                     STR_1 0013  
                                   STR_2 0032                                     STR_3 0025  
                                   STR_4 003A                                     _BRGH 04C2  
                                   _CREN 00C4                                     _RCIF 0065  
                                   _SPEN 00C7                                     _TRMT 04C1  
                                   _TXEN 04C5                                     _SYNC 04C4  
                                   _main 055E                                     btemp 007E  
                                   start 0000  __end_of_nrf_command_with_data_overwrite 04BC  
      ??_nrf_command_with_data_overwrite 0073         ?_nrf_command_with_data_overwrite 0071  
        _nrf_command_with_data_overwrite 048B                         UART_write_text@i 0076  
                        __end_of___aldiv 066C                                    ?_main 0070  
       nrf_command_with_data_overwrite@i 0078                                    _RCREG 001A  
                                  _SPBRG 0099                                    _TXREG 0019  
          __end_of_nrf_command_with_data 048B                              ?_UART_write 0070  
                                  pclath 000A                                    status 0003  
                                  wtemp0 007E                          __end_of_sprintf 0713  
                        __initialization 07D0                             __end_of_main 05CF  
                                 ??_main 007E                 nrf_command_with_data@len 0072  
                  nrf_setup@payload_size 007B                                   _TRISC3 043B  
                                 _TRISC4 043C                                   _TRISD2 0442  
                                 _TRISC5 043D                                   _TRISD3 0443  
                                 _TRISC6 043E                                   _TRISC7 043F  
                                 _SSPCON 0014                                   _SSPBUF 0013  
                              ??___aldiv 0078                        __end_of_UART_init 055E  
                         _nrf_flush_rxtx 03ED              char_to_binary_string@output 003D  
                                 _arrcpy 0406             nrf_command_with_data@command 0074  
                       __end_of_nrf_read 0463                          _UART_write_text 04BC  
                      __end_of_SPI_write 03DD                                ??_sprintf 0070  
               nrf_data_available@status 0073                       nrf_flush_rxtx@data 007A  
                __end_of__initialization 07FC                   __end_of_nrf_flush_rxtx 0406  
                         __pcstackCOMMON 0070                             __pidataBANK1 038A  
             __end_of_nrf_write_register 03C0                        ??_nrf_set_rx_mode 007C  
                      ??_SPI_init_master 0070                               __pbssBANK0 003D  
                  nrf_write_register@len 0078                    nrf_write_register@reg 0079  
                         main@buffer_197 0190                          ?_nrf_flush_rxtx 0070  
                             __pmaintext 055E                                  ?_arrcpy 0070  
                __end_of_UART_write_text 04F3                              nrf_read@len 007C  
                           ??_UART_write 0070                                  _SSPSTAT 0094  
                             __stringtab 0003                                ?_nrf_read 007C  
                                ___aldiv 05CF                       __end_of_UART_write 03A7  
                                __ptext1 066C                                  __ptext2 0713  
                                __ptext3 03ED                                  __ptext4 0406  
                                __ptext5 0423                                  __ptext6 0441  
                                __ptext7 03B3                                  __ptext8 0463  
                                __ptext9 03A7                     nrf_read_register@len 007A  
                   nrf_read_register@reg 007B                         ___aldiv@dividend 0074  
                  _nrf_command_with_data 0463                                  _sprintf 066C  
                                arrcpy@i 0076                     end_of_initialization 07FC  
                      __end_of_nrf_setup 07D0                      UART_init@_XTAL_FREQ 002A  
                             ??_nrf_read 007D                            nrf_read@clear 0021  
    nrf_command_with_data_overwrite@data 0071                         ___aldiv@quotient 0022  
                       ?_UART_write_text 0071                                _UART_init 04F3  
                              _SPI_write 03CE                               main@buffer 00A0  
                        _nrf_set_rx_mode 0423                          _SPI_init_master 038F  
                          nrf_setup@addr 0020                            nrf_setup@data 0021  
                         __end_of_arrcpy 0423                               ?_UART_init 0026  
                    start_initialization 07D0                   ?_nrf_command_with_data 0071  
             __end_of_nrf_data_available 03CE                       _nrf_write_register 03B3  
                             ?_SPI_write 0070                         ??_nrf_flush_rxtx 007A  
                    ?_nrf_write_register 0077                                 ??_arrcpy 0072  
                            __pdataBANK1 00E0                     ??_nrf_write_register 0079  
                 nrf_write_register@data 0077                                ___latbits 0002  
                          __pcstackBANK0 0020                            __pcstackBANK1 00A0  
                          __pcstackBANK3 0190                      UART_write_text@text 0071  
                __end_of_nrf_set_rx_mode 0441                  __end_of_SPI_init_master 039B  
                          SPI_write@data 0070                                 ?___aldiv 0070  
                              __pstrings 0003                              ??_UART_init 002E  
                               ?_sprintf 0020                              ??_SPI_write 0070  
                        ___aldiv@divisor 0070                          ___aldiv@counter 0020  
                              _nrf_setup 0713                             nrf_read@data 0020  
                      _nrf_read_register 03A7                    nrf_set_rx_mode@config 007C  
                     ?_nrf_read_register 0079                              __stringbase 0012  
                         UART_write@data 0070   nrf_command_with_data_overwrite@command 0076  
                              arrcpy@len 0071                                arrcpy@dst 0075  
                              arrcpy@src 0070                      ??_nrf_read_register 007B  
                      _nrf_write_command 03DD                       ?_nrf_write_command 0070  
                             ?_nrf_setup 007B                         ?_nrf_set_rx_mode 0070  
                       ?_SPI_init_master 0070                __end_of_nrf_read_register 03B3  
                    ??_nrf_write_command 0071                       __end_of__stringtab 0013  
            nrf_command_with_data@status 0075                  ??_nrf_command_with_data 0073  
              __end_of_nrf_write_command 03ED                                 __ptext10 048B  
                               __ptext11 03C0                                 __ptext12 03DD  
                               __ptext13 03CE                                 __ptext14 04BC  
                               __ptext15 039B                                 __ptext16 04F3  
                               __ptext17 05CF                                 __ptext18 038F  
                  nrf_read_register@data 0079                       _nrf_data_available 03C0  
                               _nrf_read 0441                      ?_nrf_data_available 0070  
                               main@data 003A                               _RADIO_ADDR 00E0  
  nrf_command_with_data_overwrite@status 0077                nrf_command_with_data@data 0071  
                   ??_nrf_data_available 0073                                sprintf@ap 0072  
                              sprintf@cp 0073                                sprintf@sp 0020  
               nrf_write_command@command 0071                        UART_init@baudrate 0026  
                            ??_nrf_setup 007C                                stringcode 000D  
                             _OSCCONbits 008F       nrf_command_with_data_overwrite@len 0072  
                               sprintf@c 0075                                 sprintf@f 0022  
                               stringdir 000D                                 stringtab 0003  
                           ___aldiv@sign 0021                  nrf_write_command@status 0072  
                             _UART_write 039B                        ??_UART_write_text 0073  
