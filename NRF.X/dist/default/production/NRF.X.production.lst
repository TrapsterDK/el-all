

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Mar 27 22:28:50 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x7E,2
    33     0000                     
    34                           ; Generated 09/02/2023 GMT
    35                           ; 
    36                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution. Publication is not required when
    50                           ;        this file is used in an embedded application.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68     0000                     	;# 
    69     0001                     	;# 
    70     0002                     	;# 
    71     0003                     	;# 
    72     0004                     	;# 
    73     0005                     	;# 
    74     0006                     	;# 
    75     0007                     	;# 
    76     0008                     	;# 
    77     0009                     	;# 
    78     000A                     	;# 
    79     000B                     	;# 
    80     000C                     	;# 
    81     000D                     	;# 
    82     000E                     	;# 
    83     000E                     	;# 
    84     000F                     	;# 
    85     0010                     	;# 
    86     0011                     	;# 
    87     0012                     	;# 
    88     0013                     	;# 
    89     0014                     	;# 
    90     0015                     	;# 
    91     0015                     	;# 
    92     0016                     	;# 
    93     0017                     	;# 
    94     0018                     	;# 
    95     0019                     	;# 
    96     001A                     	;# 
    97     001B                     	;# 
    98     001B                     	;# 
    99     001C                     	;# 
   100     001D                     	;# 
   101     001E                     	;# 
   102     001F                     	;# 
   103     0081                     	;# 
   104     0085                     	;# 
   105     0086                     	;# 
   106     0087                     	;# 
   107     0088                     	;# 
   108     0089                     	;# 
   109     008C                     	;# 
   110     008D                     	;# 
   111     008E                     	;# 
   112     008F                     	;# 
   113     0090                     	;# 
   114     0091                     	;# 
   115     0092                     	;# 
   116     0093                     	;# 
   117     0093                     	;# 
   118     0093                     	;# 
   119     0094                     	;# 
   120     0095                     	;# 
   121     0096                     	;# 
   122     0097                     	;# 
   123     0098                     	;# 
   124     0099                     	;# 
   125     009A                     	;# 
   126     009B                     	;# 
   127     009C                     	;# 
   128     009D                     	;# 
   129     009E                     	;# 
   130     009F                     	;# 
   131     0105                     	;# 
   132     0107                     	;# 
   133     0108                     	;# 
   134     0109                     	;# 
   135     010C                     	;# 
   136     010C                     	;# 
   137     010D                     	;# 
   138     010E                     	;# 
   139     010F                     	;# 
   140     0185                     	;# 
   141     0187                     	;# 
   142     0188                     	;# 
   143     0189                     	;# 
   144     018C                     	;# 
   145     018D                     	;# 
   146     0000                     	;# 
   147     0001                     	;# 
   148     0002                     	;# 
   149     0003                     	;# 
   150     0004                     	;# 
   151     0005                     	;# 
   152     0006                     	;# 
   153     0007                     	;# 
   154     0008                     	;# 
   155     0009                     	;# 
   156     000A                     	;# 
   157     000B                     	;# 
   158     000C                     	;# 
   159     000D                     	;# 
   160     000E                     	;# 
   161     000E                     	;# 
   162     000F                     	;# 
   163     0010                     	;# 
   164     0011                     	;# 
   165     0012                     	;# 
   166     0013                     	;# 
   167     0014                     	;# 
   168     0015                     	;# 
   169     0015                     	;# 
   170     0016                     	;# 
   171     0017                     	;# 
   172     0018                     	;# 
   173     0019                     	;# 
   174     001A                     	;# 
   175     001B                     	;# 
   176     001B                     	;# 
   177     001C                     	;# 
   178     001D                     	;# 
   179     001E                     	;# 
   180     001F                     	;# 
   181     0081                     	;# 
   182     0085                     	;# 
   183     0086                     	;# 
   184     0087                     	;# 
   185     0088                     	;# 
   186     0089                     	;# 
   187     008C                     	;# 
   188     008D                     	;# 
   189     008E                     	;# 
   190     008F                     	;# 
   191     0090                     	;# 
   192     0091                     	;# 
   193     0092                     	;# 
   194     0093                     	;# 
   195     0093                     	;# 
   196     0093                     	;# 
   197     0094                     	;# 
   198     0095                     	;# 
   199     0096                     	;# 
   200     0097                     	;# 
   201     0098                     	;# 
   202     0099                     	;# 
   203     009A                     	;# 
   204     009B                     	;# 
   205     009C                     	;# 
   206     009D                     	;# 
   207     009E                     	;# 
   208     009F                     	;# 
   209     0105                     	;# 
   210     0107                     	;# 
   211     0108                     	;# 
   212     0109                     	;# 
   213     010C                     	;# 
   214     010C                     	;# 
   215     010D                     	;# 
   216     010E                     	;# 
   217     010F                     	;# 
   218     0185                     	;# 
   219     0187                     	;# 
   220     0188                     	;# 
   221     0189                     	;# 
   222     018C                     	;# 
   223     018D                     	;# 
   224                           
   225                           	psect	idataBANK1
   226     03A7                     __pidataBANK1:
   227                           
   228                           ;initializer for _RADIO_ADDR
   229     03A7  3401               	retlw	1
   230     03A8  3402               	retlw	2
   231     03A9  3403               	retlw	3
   232     03AA  3404               	retlw	4
   233     03AB  3405               	retlw	5
   234     0013                     _SSPBUF	set	19
   235     0014                     _SSPCON	set	20
   236     001A                     _RCREG	set	26
   237     0019                     _TXREG	set	25
   238     0042                     _RD2	set	66
   239     0043                     _RD3	set	67
   240     0065                     _RCIF	set	101
   241     00C4                     _CREN	set	196
   242     00C7                     _SPEN	set	199
   243     008F                     _OSCCONbits	set	143
   244     0087                     _TRISCbits	set	135
   245     0094                     _SSPSTAT	set	148
   246     0099                     _SPBRG	set	153
   247     0442                     _TRISD2	set	1090
   248     0443                     _TRISD3	set	1091
   249     04A0                     _BF	set	1184
   250     04C1                     _TRMT	set	1217
   251     04C5                     _TXEN	set	1221
   252     043E                     _TRISC6	set	1086
   253     043F                     _TRISC7	set	1087
   254     04C4                     _SYNC	set	1220
   255     04C2                     _BRGH	set	1218
   256                           
   257                           	psect	strings
   258     0003                     __pstrings:
   259     0003                     stringtab:
   260     0003                     __stringtab:
   261                           
   262                           ;	String table - string pointers are 1 byte each
   263     0003  1BFF               	btfsc	btemp+1,7
   264     0004  280D               	ljmp	stringcode
   265     0005  1383               	bcf	3,7
   266     0006  187F               	btfsc	btemp+1,0
   267     0007  1783               	bsf	3,7
   268     0008  0800               	movf	0,w
   269     0009  0A84               	incf	4,f
   270     000A  1903               	skipnz
   271     000B  0AFF               	incf	btemp+1,f
   272     000C  0008               	return
   273     000D                     stringcode:
   274     000D                     stringdir:
   275     000D  3000               	movlw	high stringdir
   276     000E  008A               	movwf	10
   277     000F  0804               	movf	4,w
   278     0010  0A84               	incf	4,f
   279     0011  0782               	addwf	2,f
   280     0012                     __stringbase:
   281     0012  3400               	retlw	0
   282     0013                     __end_of__stringtab:
   283     0013                     STR_1:
   284     0013  3425               	retlw	37	;'%'
   285     0014  3463               	retlw	99	;'c'
   286     0015  3425               	retlw	37	;'%'
   287     0016  3463               	retlw	99	;'c'
   288     0017  3425               	retlw	37	;'%'
   289     0018  3463               	retlw	99	;'c'
   290     0019  3425               	retlw	37	;'%'
   291     001A  3463               	retlw	99	;'c'
   292     001B  3425               	retlw	37	;'%'
   293     001C  3463               	retlw	99	;'c'
   294     001D  3425               	retlw	37	;'%'
   295     001E  3463               	retlw	99	;'c'
   296     001F  3425               	retlw	37	;'%'
   297     0020  3463               	retlw	99	;'c'
   298     0021  3425               	retlw	37	;'%'
   299     0022  3463               	retlw	99	;'c'
   300     0023  340A               	retlw	10
   301     0024  3400               	retlw	0
   302     0025                     STR_3:
   303     0025  3452               	retlw	82	;'R'
   304     0026  3465               	retlw	101	;'e'
   305     0027  3463               	retlw	99	;'c'
   306     0028  3469               	retlw	105	;'i'
   307     0029  3465               	retlw	101	;'e'
   308     002A  3476               	retlw	118	;'v'
   309     002B  3465               	retlw	101	;'e'
   310     002C  3464               	retlw	100	;'d'
   311     002D  3420               	retlw	32	;' '
   312     002E  3425               	retlw	37	;'%'
   313     002F  3473               	retlw	115	;'s'
   314     0030  340A               	retlw	10
   315     0031  3400               	retlw	0
   316     0032                     STR_2:
   317     0032  3442               	retlw	66	;'B'
   318     0033  344F               	retlw	79	;'O'
   319     0034  344F               	retlw	79	;'O'
   320     0035  3454               	retlw	84	;'T'
   321     0036  3445               	retlw	69	;'E'
   322     0037  3444               	retlw	68	;'D'
   323     0038  340A               	retlw	10
   324     0039  3400               	retlw	0
   325     003A                     STR_4:
   326     003A  3428               	retlw	40	;'('
   327     003B  346E               	retlw	110	;'n'
   328     003C  3475               	retlw	117	;'u'
   329     003D  346C               	retlw	108	;'l'
   330     003E  346C               	retlw	108	;'l'
   331     003F  3429               	retlw	41	;')'
   332     0040  3400               	retlw	0
   333                           
   334                           	psect	cinit
   335     07D0                     start_initialization:	
   336                           ; #config settings
   337                           
   338     07D0                     __initialization:
   339                           
   340                           ; Initialize objects allocated to BANK1
   341     07D0  1683               	bsf	3,5	;RP0=1, select bank1
   342     07D1  1303               	bcf	3,6	;RP1=0, select bank1
   343     07D2  120A  118A  23A7  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   344     07D7  00E0               	movwf	__pdataBANK1& (0+127)
   345     07D8  120A  118A  23A8  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   346     07DD  00E1               	movwf	(__pdataBANK1+1)& (0+127)
   347     07DE  120A  118A  23A9  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   348     07E3  00E2               	movwf	(__pdataBANK1+2)& (0+127)
   349     07E4  120A  118A  23AA  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   350     07E9  00E3               	movwf	(__pdataBANK1+3)& (0+127)
   351     07EA  120A  118A  23AB  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
   352     07EF  00E4               	movwf	(__pdataBANK1+4)& (0+127)
   353                           
   354                           ; Clear objects allocated to BANK0
   355     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   356     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   357     07F2  01BF               	clrf	__pbssBANK0& (0+127)
   358     07F3  01C0               	clrf	(__pbssBANK0+1)& (0+127)
   359     07F4  01C1               	clrf	(__pbssBANK0+2)& (0+127)
   360     07F5  01C2               	clrf	(__pbssBANK0+3)& (0+127)
   361     07F6  01C3               	clrf	(__pbssBANK0+4)& (0+127)
   362     07F7  01C4               	clrf	(__pbssBANK0+5)& (0+127)
   363     07F8  01C5               	clrf	(__pbssBANK0+6)& (0+127)
   364     07F9  01C6               	clrf	(__pbssBANK0+7)& (0+127)
   365     07FA  01C7               	clrf	(__pbssBANK0+8)& (0+127)
   366     07FB  01C8               	clrf	(__pbssBANK0+9)& (0+127)
   367     07FC                     end_of_initialization:	
   368                           ;End of C runtime variable initialization code
   369                           
   370     07FC                     __end_of__initialization:
   371     07FC  0183               	clrf	3
   372     07FD  120A  118A  2D4F   	ljmp	_main	;jump to C main() function
   373                           
   374                           	psect	bssBANK0
   375     003F                     __pbssBANK0:
   376     003F                     char_to_binary_string@output:
   377     003F                     	ds	10
   378                           
   379                           	psect	dataBANK1
   380     00E0                     __pdataBANK1:
   381     00E0                     _RADIO_ADDR:
   382     00E0                     	ds	5
   383                           
   384                           	psect	cstackBANK3
   385     0190                     __pcstackBANK3:
   386     0190                     main@buffer_216:
   387                           
   388                           ; 64 bytes @ 0x0
   389     0190                     	ds	64
   390                           
   391                           	psect	cstackBANK1
   392     00A0                     __pcstackBANK1:
   393     00A0                     main@buffer:
   394                           
   395                           ; 64 bytes @ 0x0
   396     00A0                     	ds	64
   397                           
   398                           	psect	cstackCOMMON
   399     0070                     __pcstackCOMMON:
   400     0070                     ??_sprintf:
   401     0070                     ?_UART_write:	
   402                           ; 1 bytes @ 0x0
   403                           
   404     0070                     ??_UART_write:	
   405                           ; 1 bytes @ 0x0
   406                           
   407     0070                     ?_SPI_init_master:	
   408                           ; 1 bytes @ 0x0
   409                           
   410     0070                     ??_SPI_init_master:	
   411                           ; 1 bytes @ 0x0
   412                           
   413     0070                     ?_SPI_write:	
   414                           ; 1 bytes @ 0x0
   415                           
   416     0070                     ??_SPI_write:	
   417                           ; 1 bytes @ 0x0
   418                           
   419     0070                     ?_arrcpy:	
   420                           ; 1 bytes @ 0x0
   421                           
   422     0070                     ?_nrf_write_command:	
   423                           ; 1 bytes @ 0x0
   424                           
   425     0070                     ?_nrf_flush_rxtx:	
   426                           ; 1 bytes @ 0x0
   427                           
   428     0070                     ?_nrf_set_rx_mode:	
   429                           ; 1 bytes @ 0x0
   430                           
   431     0070                     ?_nrf_data_available:	
   432                           ; 1 bytes @ 0x0
   433                           
   434     0070                     ?_main:	
   435                           ; 1 bytes @ 0x0
   436                           
   437     0070                     ?___aldiv:	
   438                           ; 2 bytes @ 0x0
   439                           
   440     0070                     UART_write@data:	
   441                           ; 4 bytes @ 0x0
   442                           
   443     0070                     SPI_write@data:	
   444                           ; 1 bytes @ 0x0
   445                           
   446     0070                     arrcpy@src:	
   447                           ; 1 bytes @ 0x0
   448                           
   449     0070                     ___aldiv@divisor:	
   450                           ; 1 bytes @ 0x0
   451                           
   452                           
   453                           ; 4 bytes @ 0x0
   454     0070                     	ds	1
   455     0071                     ?_UART_write_text:
   456     0071                     ?_nrf_command:	
   457                           ; 1 bytes @ 0x1
   458                           
   459     0071                     ??_nrf_write_command:	
   460                           ; 1 bytes @ 0x1
   461                           
   462     0071                     arrcpy@len:	
   463                           ; 1 bytes @ 0x1
   464                           
   465     0071                     nrf_command@data:	
   466                           ; 1 bytes @ 0x1
   467                           
   468     0071                     nrf_write_command@NRF_command:	
   469                           ; 1 bytes @ 0x1
   470                           
   471     0071                     UART_write_text@text:	
   472                           ; 1 bytes @ 0x1
   473                           
   474                           
   475                           ; 2 bytes @ 0x1
   476     0071                     	ds	1
   477     0072                     ??_arrcpy:
   478     0072                     nrf_command@len:	
   479                           ; 1 bytes @ 0x2
   480                           
   481     0072                     nrf_write_command@status:	
   482                           ; 1 bytes @ 0x2
   483                           
   484     0072                     sprintf@ap:	
   485                           ; 1 bytes @ 0x2
   486                           
   487                           
   488                           ; 1 bytes @ 0x2
   489     0072                     	ds	1
   490     0073                     ??_UART_write_text:
   491     0073                     ??_nrf_command:	
   492                           ; 1 bytes @ 0x3
   493                           
   494     0073                     ??_nrf_data_available:	
   495                           ; 1 bytes @ 0x3
   496                           
   497     0073                     nrf_data_available@status:	
   498                           ; 1 bytes @ 0x3
   499                           
   500     0073                     sprintf@cp:	
   501                           ; 1 bytes @ 0x3
   502                           
   503                           
   504                           ; 2 bytes @ 0x3
   505     0073                     	ds	1
   506     0074                     arrcpy@dst:
   507     0074                     ___aldiv@dividend:	
   508                           ; 1 bytes @ 0x4
   509                           
   510                           
   511                           ; 4 bytes @ 0x4
   512     0074                     	ds	1
   513     0075                     arrcpy@i:
   514     0075                     nrf_command@NRF_command:	
   515                           ; 1 bytes @ 0x5
   516                           
   517     0075                     sprintf@c:	
   518                           ; 1 bytes @ 0x5
   519                           
   520                           
   521                           ; 1 bytes @ 0x5
   522     0075                     	ds	1
   523     0076                     nrf_command@status:
   524     0076                     UART_write_text@i:	
   525                           ; 1 bytes @ 0x6
   526                           
   527                           
   528                           ; 2 bytes @ 0x6
   529     0076                     	ds	1
   530     0077                     nrf_command@i:
   531                           
   532                           ; 1 bytes @ 0x7
   533     0077                     	ds	1
   534     0078                     ?_nrf_write_register:
   535     0078                     ?_nrf_read_register:	
   536                           ; 1 bytes @ 0x8
   537                           
   538     0078                     ??___aldiv:	
   539                           ; 1 bytes @ 0x8
   540                           
   541     0078                     nrf_write_register@data:	
   542                           ; 1 bytes @ 0x8
   543                           
   544     0078                     nrf_read_register@data:	
   545                           ; 1 bytes @ 0x8
   546                           
   547                           
   548                           ; 1 bytes @ 0x8
   549     0078                     	ds	1
   550     0079                     nrf_write_register@len:
   551     0079                     nrf_read_register@len:	
   552                           ; 1 bytes @ 0x9
   553                           
   554                           
   555                           ; 1 bytes @ 0x9
   556     0079                     	ds	1
   557     007A                     ??_nrf_write_register:
   558     007A                     ??_nrf_read_register:	
   559                           ; 1 bytes @ 0xA
   560                           
   561     007A                     nrf_write_register@reg:	
   562                           ; 1 bytes @ 0xA
   563                           
   564     007A                     nrf_read_register@reg:	
   565                           ; 1 bytes @ 0xA
   566                           
   567                           
   568                           ; 1 bytes @ 0xA
   569     007A                     	ds	1
   570     007B                     ??_nrf_flush_rxtx:
   571     007B                     ??_nrf_set_rx_mode:	
   572                           ; 1 bytes @ 0xB
   573                           
   574     007B                     ?_nrf_read:	
   575                           ; 1 bytes @ 0xB
   576                           
   577     007B                     nrf_flush_rxtx@data:	
   578                           ; 1 bytes @ 0xB
   579                           
   580     007B                     nrf_set_rx_mode@config:	
   581                           ; 1 bytes @ 0xB
   582                           
   583     007B                     nrf_read@len:	
   584                           ; 1 bytes @ 0xB
   585                           
   586                           
   587                           ; 1 bytes @ 0xB
   588     007B                     	ds	1
   589     007C                     ?_nrf_setup:
   590     007C                     ??_nrf_read:	
   591                           ; 1 bytes @ 0xC
   592                           
   593     007C                     nrf_setup@payload_size:	
   594                           ; 1 bytes @ 0xC
   595                           
   596     007C                     nrf_read@data:	
   597                           ; 1 bytes @ 0xC
   598                           
   599                           
   600                           ; 1 bytes @ 0xC
   601     007C                     	ds	1
   602     007D                     nrf_read@clear:
   603                           
   604                           ; 1 bytes @ 0xD
   605     007D                     	ds	1
   606                           
   607                           	psect	cstackBANK0
   608     0020                     __pcstackBANK0:
   609     0020                     ??_nrf_setup:
   610     0020                     ?_sprintf:	
   611                           ; 1 bytes @ 0x0
   612                           
   613     0020                     ___aldiv@counter:	
   614                           ; 2 bytes @ 0x0
   615                           
   616     0020                     sprintf@sp:	
   617                           ; 1 bytes @ 0x0
   618                           
   619                           
   620                           ; 2 bytes @ 0x0
   621     0020                     	ds	1
   622     0021                     ___aldiv@sign:
   623                           
   624                           ; 1 bytes @ 0x1
   625     0021                     	ds	1
   626     0022                     nrf_setup@addr:
   627     0022                     sprintf@f:	
   628                           ; 1 bytes @ 0x2
   629                           
   630     0022                     ___aldiv@quotient:	
   631                           ; 1 bytes @ 0x2
   632                           
   633                           
   634                           ; 4 bytes @ 0x2
   635     0022                     	ds	1
   636     0023                     nrf_setup@data:
   637                           
   638                           ; 5 bytes @ 0x3
   639     0023                     	ds	3
   640     0026                     ?_UART_init:
   641     0026                     UART_init@baudrate:	
   642                           ; 1 bytes @ 0x6
   643                           
   644                           
   645                           ; 4 bytes @ 0x6
   646     0026                     	ds	4
   647     002A                     UART_init@_XTAL_FREQ:
   648                           
   649                           ; 4 bytes @ 0xA
   650     002A                     	ds	4
   651     002E                     ??_UART_init:
   652                           
   653                           ; 1 bytes @ 0xE
   654     002E                     	ds	12
   655     003A                     ??_main:
   656                           
   657                           ; 1 bytes @ 0x1A
   658     003A                     	ds	2
   659     003C                     main@data:
   660                           
   661                           ; 3 bytes @ 0x1C
   662     003C                     	ds	3
   663                           
   664                           	psect	maintext
   665     054F                     __pmaintext:	
   666 ;;
   667 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   668 ;;
   669 ;; *************** function _main *****************
   670 ;; Defined at:
   671 ;;		line 50 in file "main.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  buffer         64    0[BANK3 ] unsigned char [64]
   676 ;;  data            3   28[BANK0 ] unsigned char [3]
   677 ;;  buffer         64    0[BANK1 ] unsigned char [64]
   678 ;; Return value:  Size  Location     Type
   679 ;;                  2  173[None  ] int 
   680 ;; Registers used:
   681 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   682 ;; Tracked objects:
   683 ;;		On entry : B00/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   687 ;;      Params:         0       0       0       0       0
   688 ;;      Locals:         0       3      64      64       0
   689 ;;      Temps:          0       2       0       0       0
   690 ;;      Totals:         0       5      64      64       0
   691 ;;Total ram usage:      133 bytes
   692 ;; Hardware stack levels required when called: 5
   693 ;; This function calls:
   694 ;;		_SPI_init_master
   695 ;;		_UART_init
   696 ;;		_UART_write_text
   697 ;;		_nrf_data_available
   698 ;;		_nrf_read
   699 ;;		_nrf_set_rx_mode
   700 ;;		_nrf_setup
   701 ;;		_sprintf
   702 ;; This function is called by:
   703 ;;		Startup code after reset
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707     054F                     _main:	
   708                           ;psect for function _main
   709                           
   710     054F                     l1506:	
   711                           ;incstack = 0
   712                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   713                           
   714                           
   715                           ;main.c: 53:     OSCCONbits.IRCF = 111;
   716     054F  3070               	movlw	112
   717     0550  1683               	bsf	3,5	;RP0=1, select bank1
   718     0551  1303               	bcf	3,6	;RP1=0, select bank1
   719     0552  048F               	iorwf	15,f	;volatile
   720     0553                     l1508:
   721                           
   722                           ;main.c: 56:     UART_init(9600, 8000000UL);
   723     0553  3000               	movlw	0
   724     0554  1283               	bcf	3,5	;RP0=0, select bank0
   725     0555  1303               	bcf	3,6	;RP1=0, select bank0
   726     0556  00A9               	movwf	UART_init@baudrate+3
   727     0557  3000               	movlw	0
   728     0558  00A8               	movwf	UART_init@baudrate+2
   729     0559  3025               	movlw	37
   730     055A  00A7               	movwf	UART_init@baudrate+1
   731     055B  3080               	movlw	128
   732     055C  00A6               	movwf	UART_init@baudrate
   733     055D  3000               	movlw	0
   734     055E  00AD               	movwf	UART_init@_XTAL_FREQ+3
   735     055F  307A               	movlw	122
   736     0560  00AC               	movwf	UART_init@_XTAL_FREQ+2
   737     0561  3012               	movlw	18
   738     0562  00AB               	movwf	UART_init@_XTAL_FREQ+1
   739     0563  3000               	movlw	0
   740     0564  00AA               	movwf	UART_init@_XTAL_FREQ
   741     0565  120A  118A  24E4  120A  118A  	fcall	_UART_init
   742     056A                     l1510:
   743                           
   744                           ;main.c: 59:     { char buffer[64]; sprintf(buffer, "BOOTED\n"); UART_write_text(buffer)
      +                          ; };
   745     056A  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   746     056B  1283               	bcf	3,5	;RP0=0, select bank0
   747     056C  1303               	bcf	3,6	;RP1=0, select bank0
   748     056D  00A0               	movwf	sprintf@sp
   749     056E  3000               	movlw	0
   750     056F  00A1               	movwf	sprintf@sp+1
   751     0570  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   752     0571  00A2               	movwf	sprintf@f
   753     0572  120A  118A  2668  120A  118A  	fcall	_sprintf
   754     0577                     l1512:
   755     0577  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   756     0578  00F1               	movwf	UART_write_text@text
   757     0579  3000               	movlw	0
   758     057A  00F2               	movwf	UART_write_text@text+1
   759     057B  120A  118A  24AD  120A  118A  	fcall	_UART_write_text
   760     0580                     l1514:
   761                           
   762                           ;main.c: 62:     SPI_init_master();
   763     0580  120A  118A  23AC  120A  118A  	fcall	_SPI_init_master
   764     0585                     l1516:
   765                           
   766                           ;main.c: 65:     nrf_setup(RADIO_ADDR, 3);
   767     0585  3003               	movlw	3
   768     0586  00FC               	movwf	nrf_setup@payload_size
   769     0587  30E0               	movlw	(low (_RADIO_ADDR| 0))& (0+255)
   770     0588  120A  118A  270F  120A  118A  	fcall	_nrf_setup
   771     058D                     l1518:
   772                           
   773                           ;main.c: 71:     nrf_set_rx_mode();
   774     058D  120A  118A  245E  120A  118A  	fcall	_nrf_set_rx_mode
   775     0592                     l1520:
   776                           
   777                           ;main.c: 74:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   778     0592  3006               	movlw	6
   779     0593  1283               	bcf	3,5	;RP0=0, select bank0
   780     0594  1303               	bcf	3,6	;RP1=0, select bank0
   781     0595  00BB               	movwf	??_main+1
   782     0596  302F               	movlw	47
   783     0597  00BA               	movwf	??_main
   784     0598                     u787:
   785     0598  0BBA               	decfsz	??_main,f
   786     0599  2D98               	goto	u787
   787     059A  0BBB               	decfsz	??_main+1,f
   788     059B  2D98               	goto	u787
   789     059C  2D9D               	nop2
   790     059D                     l1522:
   791                           
   792                           ;main.c: 93:         while (!nrf_data_available())
   793     059D  120A  118A  23DD  120A  118A  	fcall	_nrf_data_available
   794     05A2  3A00               	xorlw	0
   795     05A3  1903               	skipnz
   796     05A4  2DA6               	goto	u771
   797     05A5  2DA7               	goto	u770
   798     05A6                     u771:
   799     05A6  2D9D               	goto	l1522
   800     05A7                     u770:
   801     05A7                     l1524:
   802                           
   803                           ;main.c: 97:         uint8_t data[3];;main.c: 98:         nrf_read(data, 3);
   804     05A7  3003               	movlw	3
   805     05A8  00FB               	movwf	nrf_read@len
   806     05A9  303C               	movlw	(low (main@data| 0))& (0+255)
   807     05AA  120A  118A  2440  120A  118A  	fcall	_nrf_read
   808                           
   809                           ;main.c: 99:         { char buffer[64]; sprintf(buffer, "Recieved %s\n", data); UART_wri
      +                          te_text(buffer); };
   810     05AF  3090               	movlw	(low (main@buffer_216| (0+256)))& (0+255)
   811     05B0  1283               	bcf	3,5	;RP0=0, select bank0
   812     05B1  1303               	bcf	3,6	;RP1=0, select bank0
   813     05B2  00A0               	movwf	sprintf@sp
   814     05B3  3001               	movlw	1
   815     05B4  00A1               	movwf	sprintf@sp+1
   816     05B5  3013               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   817     05B6  00A2               	movwf	sprintf@f
   818     05B7  303C               	movlw	(low (main@data| 0))& (0+255)
   819     05B8  00A3               	movwf	low ((?_sprintf| 0+3))
   820     05B9  120A  118A  2668  120A  118A  	fcall	_sprintf
   821     05BE                     l1526:
   822     05BE  3090               	movlw	(low (main@buffer_216| (0+256)))& (0+255)
   823     05BF  00F1               	movwf	UART_write_text@text
   824     05C0  3001               	movlw	1
   825     05C1  00F2               	movwf	UART_write_text@text+1
   826     05C2  120A  118A  24AD  120A  118A  	fcall	_UART_write_text
   827     05C7  2D9D               	goto	l1522
   828     05C8  120A  118A  2800   	ljmp	start
   829     05CB                     __end_of_main:
   830                           
   831                           	psect	text1
   832     0668                     __ptext1:	
   833 ;; *************** function _sprintf *****************
   834 ;; Defined at:
   835 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;  sp              2    0[BANK0 ] PTR unsigned char 
   838 ;;		 -> main@buffer_216(64), main@buffer(64), char_to_binary_string@output(10), 
   839 ;;  f               1    2[BANK0 ] PTR const unsigned char 
   840 ;;		 -> STR_3(13), STR_2(8), STR_1(18), 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  tmpval          4    0        struct .
   843 ;;  cp              2    3[COMMON] PTR const unsigned char 
   844 ;;		 -> STR_4(7), ?_sprintf(2), main@data(3), 
   845 ;;  len             2    0        unsigned int 
   846 ;;  val             2    0        unsigned int 
   847 ;;  c               1    5[COMMON] unsigned char 
   848 ;;  ap              1    2[COMMON] PTR void [1]
   849 ;;		 -> ?_sprintf(2), 
   850 ;;  flag            1    0        unsigned char 
   851 ;;  prec            1    0        char 
   852 ;; Return value:  Size  Location     Type
   853 ;;                  2    0[BANK0 ] int 
   854 ;; Registers used:
   855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   861 ;;      Params:         0      19       0       0       0
   862 ;;      Locals:         4       0       0       0       0
   863 ;;      Temps:          2       0       0       0       0
   864 ;;      Totals:         6      19       0       0       0
   865 ;;Total ram usage:       25 bytes
   866 ;; Hardware stack levels used: 2
   867 ;; This function calls:
   868 ;;		Nothing
   869 ;; This function is called by:
   870 ;;		_main
   871 ;;		_char_to_binary_string
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875     0668                     _sprintf:	
   876                           ;psect for function _sprintf
   877                           
   878     0668                     l1396:	
   879                           ;incstack = 0
   880                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   881                           
   882                           
   883                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   884     0668  3023               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
   885     0669  00F2               	movwf	sprintf@ap
   886                           
   887                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   888     066A  2EF6               	goto	l1432
   889     066B                     l1398:
   890                           
   891                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   892     066B  3025               	movlw	37
   893     066C  0675               	xorwf	sprintf@c,w
   894     066D  1903               	btfsc	3,2
   895     066E  2E70               	goto	u641
   896     066F  2E71               	goto	u640
   897     0670                     u641:
   898     0670  2E7F               	goto	l1404
   899     0671                     u640:
   900     0671                     l1400:
   901                           
   902                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   903     0671  0820               	movf	sprintf@sp,w
   904     0672  0084               	movwf	4
   905     0673  1783               	bsf	3,7
   906     0674  1C21               	btfss	sprintf@sp+1,0
   907     0675  1383               	bcf	3,7
   908     0676  0875               	movf	sprintf@c,w
   909     0677  0080               	movwf	0
   910     0678                     l1402:
   911     0678  3001               	movlw	1
   912     0679  07A0               	addwf	sprintf@sp,f
   913     067A  1803               	skipnc
   914     067B  0AA1               	incf	sprintf@sp+1,f
   915     067C  3000               	movlw	0
   916     067D  07A1               	addwf	sprintf@sp+1,f
   917                           
   918                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
   919     067E  2EF6               	goto	l1432
   920     067F                     l1404:
   921                           
   922                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   923     067F  2ED9               	goto	l1430
   924     0680                     l1406:
   925                           
   926                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 760:     cp = (*(
      +                          const char * *)__va_arg((*(const char * **)ap), (const char *)0));
   927     0680  0872               	movf	sprintf@ap,w
   928     0681  0084               	movwf	4
   929     0682  1383               	bcf	3,7	;select IRP bank0
   930     0683  0800               	movf	0,w
   931     0684  00F3               	movwf	sprintf@cp
   932     0685  3000               	movlw	0
   933     0686  00F4               	movwf	sprintf@cp+1
   934     0687                     l1408:
   935     0687  3001               	movlw	1
   936     0688  00FF               	movwf	btemp+1
   937     0689  087F               	movf	btemp+1,w
   938     068A  07F2               	addwf	sprintf@ap,f
   939     068B                     l1410:
   940                           
   941                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 766:    if(!cp)
   942     068B  0873               	movf	sprintf@cp,w
   943     068C  0474               	iorwf	sprintf@cp+1,w
   944     068D  1D03               	btfss	3,2
   945     068E  2E90               	goto	u651
   946     068F  2E91               	goto	u650
   947     0690                     u651:
   948     0690  2EB3               	goto	l277
   949     0691                     u650:
   950     0691                     l1412:
   951                           
   952                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 767:     cp = "(n
      +                          ull)";
   953     0691  3028               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   954     0692  00F3               	movwf	sprintf@cp
   955     0693  3080               	movlw	128
   956     0694  00F4               	movwf	sprintf@cp+1
   957     0695  2EB3               	goto	l277
   958     0696                     l1414:
   959                           
   960                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 804:     ((*sp++ 
      +                          = (*cp++)));
   961     0696  0874               	movf	sprintf@cp+1,w
   962     0697  00FF               	movwf	btemp+1
   963     0698  0873               	movf	sprintf@cp,w
   964     0699  0084               	movwf	4
   965     069A  120A  118A  2003  120A  118A  	fcall	stringtab
   966     069F  00FF               	movwf	btemp+1
   967     06A0  0820               	movf	sprintf@sp,w
   968     06A1  0084               	movwf	4
   969     06A2  1783               	bsf	3,7
   970     06A3  1C21               	btfss	sprintf@sp+1,0
   971     06A4  1383               	bcf	3,7
   972     06A5  087F               	movf	btemp+1,w
   973     06A6  0080               	movwf	0
   974     06A7                     l1416:
   975     06A7  3001               	movlw	1
   976     06A8  07F3               	addwf	sprintf@cp,f
   977     06A9  1803               	skipnc
   978     06AA  0AF4               	incf	sprintf@cp+1,f
   979     06AB  3000               	movlw	0
   980     06AC  07F4               	addwf	sprintf@cp+1,f
   981     06AD                     l1418:
   982     06AD  3001               	movlw	1
   983     06AE  07A0               	addwf	sprintf@sp,f
   984     06AF  1803               	skipnc
   985     06B0  0AA1               	incf	sprintf@sp+1,f
   986     06B1  3000               	movlw	0
   987     06B2  07A1               	addwf	sprintf@sp+1,f
   988     06B3                     l277:
   989                           
   990                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 803:    while(*cp
      +                          )
   991     06B3  0874               	movf	sprintf@cp+1,w
   992     06B4  00FF               	movwf	btemp+1
   993     06B5  0873               	movf	sprintf@cp,w
   994     06B6  0084               	movwf	4
   995     06B7  120A  118A  2003  120A  118A  	fcall	stringtab
   996     06BC  3A00               	xorlw	0
   997     06BD  1D03               	skipz
   998     06BE  2EC0               	goto	u661
   999     06BF  2EC1               	goto	u660
  1000     06C0                     u661:
  1001     06C0  2E96               	goto	l1414
  1002     06C1                     u660:
  1003     06C1  2EF6               	goto	l1432
  1004     06C2                     l1420:
  1005                           
  1006                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
  1007     06C2  0872               	movf	sprintf@ap,w
  1008     06C3  0084               	movwf	4
  1009     06C4  1383               	bcf	3,7	;select IRP bank0
  1010     06C5  0800               	movf	0,w
  1011     06C6  00F5               	movwf	sprintf@c
  1012     06C7                     l1422:
  1013     06C7  3002               	movlw	2
  1014     06C8  00FF               	movwf	btemp+1
  1015     06C9  087F               	movf	btemp+1,w
  1016     06CA  07F2               	addwf	sprintf@ap,f
  1017     06CB                     l1424:
  1018                           
  1019                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  1020     06CB  0820               	movf	sprintf@sp,w
  1021     06CC  0084               	movwf	4
  1022     06CD  1783               	bsf	3,7
  1023     06CE  1C21               	btfss	sprintf@sp+1,0
  1024     06CF  1383               	bcf	3,7
  1025     06D0  0875               	movf	sprintf@c,w
  1026     06D1  0080               	movwf	0
  1027     06D2                     l1426:
  1028     06D2  3001               	movlw	1
  1029     06D3  07A0               	addwf	sprintf@sp,f
  1030     06D4  1803               	skipnc
  1031     06D5  0AA1               	incf	sprintf@sp+1,f
  1032     06D6  3000               	movlw	0
  1033     06D7  07A1               	addwf	sprintf@sp+1,f
  1034                           
  1035                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 836:    continue;
  1036     06D8  2EF6               	goto	l1432
  1037     06D9                     l1430:
  1038     06D9  3001               	movlw	1
  1039     06DA  07A2               	addwf	sprintf@f,f
  1040     06DB  30FF               	movlw	-1
  1041     06DC  0722               	addwf	sprintf@f,w
  1042     06DD  0084               	movwf	4
  1043     06DE  120A  118A  200D  120A  118A  	fcall	stringdir
  1044     06E3  00F5               	movwf	sprintf@c
  1045     06E4  00F0               	movwf	??_sprintf
  1046     06E5  01F1               	clrf	??_sprintf+1
  1047                           
  1048                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1049                           ; Switch size 1, requested type "simple"
  1050                           ; Number of cases is 1, Range of values is 0 to 0
  1051                           ; switch strategies available:
  1052                           ; Name         Instructions Cycles
  1053                           ; simple_byte            4     3 (average)
  1054                           ; direct_byte           11     8 (fixed)
  1055                           ; jumptable            260     6 (fixed)
  1056                           ;	Chosen strategy is simple_byte
  1057     06E6  0871               	movf	??_sprintf+1,w
  1058     06E7  3A00               	xorlw	0	; case 0
  1059     06E8  1903               	skipnz
  1060     06E9  2EEB               	goto	l1558
  1061     06EA  2ECB               	goto	l1424
  1062     06EB                     l1558:
  1063                           
  1064                           ; Switch size 1, requested type "simple"
  1065                           ; Number of cases is 3, Range of values is 0 to 115
  1066                           ; switch strategies available:
  1067                           ; Name         Instructions Cycles
  1068                           ; simple_byte           10     6 (average)
  1069                           ; jumptable            260     6 (fixed)
  1070                           ;	Chosen strategy is simple_byte
  1071     06EB  0870               	movf	??_sprintf,w
  1072     06EC  3A00               	xorlw	0	; case 0
  1073     06ED  1903               	skipnz
  1074     06EE  2F08               	goto	l1434
  1075     06EF  3A63               	xorlw	99	; case 99
  1076     06F0  1903               	skipnz
  1077     06F1  2EC2               	goto	l1420
  1078     06F2  3A10               	xorlw	16	; case 115
  1079     06F3  1903               	skipnz
  1080     06F4  2E80               	goto	l1406
  1081     06F5  2ECB               	goto	l1424
  1082     06F6                     l1432:
  1083                           
  1084                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1085     06F6  3001               	movlw	1
  1086     06F7  1283               	bcf	3,5	;RP0=0, select bank0
  1087     06F8  1303               	bcf	3,6	;RP1=0, select bank0
  1088     06F9  07A2               	addwf	sprintf@f,f
  1089     06FA  30FF               	movlw	-1
  1090     06FB  0722               	addwf	sprintf@f,w
  1091     06FC  0084               	movwf	4
  1092     06FD  120A  118A  200D  120A  118A  	fcall	stringdir
  1093     0702  00F5               	movwf	sprintf@c
  1094     0703  0875               	movf	sprintf@c,w
  1095     0704  1D03               	btfss	3,2
  1096     0705  2F07               	goto	u671
  1097     0706  2F08               	goto	u670
  1098     0707                     u671:
  1099     0707  2E6B               	goto	l1398
  1100     0708                     u670:
  1101     0708                     l1434:
  1102                           
  1103                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1104     0708  0820               	movf	sprintf@sp,w
  1105     0709  0084               	movwf	4
  1106     070A  1783               	bsf	3,7
  1107     070B  1C21               	btfss	sprintf@sp+1,0
  1108     070C  1383               	bcf	3,7
  1109     070D  0180               	clrf	0
  1110     070E                     l284:
  1111     070E  0008               	return
  1112     070F                     __end_of_sprintf:
  1113                           
  1114                           	psect	text2
  1115     070F                     __ptext2:	
  1116 ;; *************** function _nrf_setup *****************
  1117 ;; Defined at:
  1118 ;;		line 162 in file "./nrf24l01.h"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  addr            1    wreg     PTR unsigned char 
  1121 ;;		 -> RADIO_ADDR(5), 
  1122 ;;  payload_size    1   12[COMMON] unsigned char 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  addr            1    2[BANK0 ] PTR unsigned char 
  1125 ;;		 -> RADIO_ADDR(5), 
  1126 ;;  data            5    3[BANK0 ] unsigned char [5]
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  1    wreg      void 
  1129 ;; Registers used:
  1130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1136 ;;      Params:         1       0       0       0       0
  1137 ;;      Locals:         0       6       0       0       0
  1138 ;;      Temps:          0       2       0       0       0
  1139 ;;      Totals:         1       8       0       0       0
  1140 ;;Total ram usage:        9 bytes
  1141 ;; Hardware stack levels used: 1
  1142 ;; Hardware stack levels required when called: 4
  1143 ;; This function calls:
  1144 ;;		_arrcpy
  1145 ;;		_nrf_flush_rxtx
  1146 ;;		_nrf_write_register
  1147 ;; This function is called by:
  1148 ;;		_main
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152     070F                     _nrf_setup:	
  1153                           ;psect for function _nrf_setup
  1154                           
  1155                           
  1156                           ;incstack = 0
  1157                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1158                           ;nrf_setup@addr stored from wreg
  1159     070F  1283               	bcf	3,5	;RP0=0, select bank0
  1160     0710  1303               	bcf	3,6	;RP1=0, select bank0
  1161     0711  00A2               	movwf	nrf_setup@addr
  1162     0712                     l1322:
  1163                           
  1164                           ;./nrf24l01.h: 162:     void nrf_setup(uint8_t *addr, uint8_t payload_size);./nrf24l01.h
      +                          : 163:     {;./nrf24l01.h: 165:         TRISD3 = 0;
  1165     0712  1683               	bsf	3,5	;RP0=1, select bank1
  1166     0713  1303               	bcf	3,6	;RP1=0, select bank1
  1167     0714  1188               	bcf	8,3	;volatile
  1168                           
  1169                           ;./nrf24l01.h: 166:         TRISD2 = 0;
  1170     0715  1108               	bcf	8,2	;volatile
  1171     0716                     l1324:
  1172                           
  1173                           ;./nrf24l01.h: 168:         _delay((unsigned long)((2)*(8000000UL/4000.0)));
  1174     0716  3006               	movlw	6
  1175     0717  1283               	bcf	3,5	;RP0=0, select bank0
  1176     0718  1303               	bcf	3,6	;RP1=0, select bank0
  1177     0719  00A1               	movwf	??_nrf_setup+1
  1178     071A  302F               	movlw	47
  1179     071B  00A0               	movwf	??_nrf_setup
  1180     071C                     u797:
  1181     071C  0BA0               	decfsz	??_nrf_setup,f
  1182     071D  2F1C               	goto	u797
  1183     071E  0BA1               	decfsz	??_nrf_setup+1,f
  1184     071F  2F1C               	goto	u797
  1185     0720  2F21               	nop2
  1186     0721                     l1326:
  1187                           
  1188                           ;./nrf24l01.h: 170:         RD3 = 1;
  1189     0721  1283               	bcf	3,5	;RP0=0, select bank0
  1190     0722  1303               	bcf	3,6	;RP1=0, select bank0
  1191     0723  1588               	bsf	8,3	;volatile
  1192     0724                     l1328:
  1193                           
  1194                           ;./nrf24l01.h: 171:         RD2 = 0;
  1195     0724  1108               	bcf	8,2	;volatile
  1196                           
  1197                           ;./nrf24l01.h: 173:         _delay((unsigned long)((2)*(8000000UL/4000.0)));
  1198     0725  3006               	movlw	6
  1199     0726  1283               	bcf	3,5	;RP0=0, select bank0
  1200     0727  1303               	bcf	3,6	;RP1=0, select bank0
  1201     0728  00A1               	movwf	??_nrf_setup+1
  1202     0729  302F               	movlw	47
  1203     072A  00A0               	movwf	??_nrf_setup
  1204     072B                     u807:
  1205     072B  0BA0               	decfsz	??_nrf_setup,f
  1206     072C  2F2B               	goto	u807
  1207     072D  0BA1               	decfsz	??_nrf_setup+1,f
  1208     072E  2F2B               	goto	u807
  1209     072F  2F30               	nop2
  1210                           
  1211                           ;./nrf24l01.h: 175:         uint8_t data[5];;./nrf24l01.h: 177:         data[0] = 0x0B;
  1212     0730  300B               	movlw	11
  1213     0731  1283               	bcf	3,5	;RP0=0, select bank0
  1214     0732  1303               	bcf	3,6	;RP1=0, select bank0
  1215     0733  00A3               	movwf	nrf_setup@data
  1216     0734                     l1330:
  1217                           
  1218                           ;./nrf24l01.h: 178:         nrf_write_register(0x00, &data, 1);
  1219     0734  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1220     0735  00F8               	movwf	nrf_write_register@data
  1221     0736  01F9               	clrf	nrf_write_register@len
  1222     0737  0AF9               	incf	nrf_write_register@len,f
  1223     0738  3000               	movlw	0
  1224     0739  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1225     073E                     l1332:
  1226                           
  1227                           ;./nrf24l01.h: 179:         data[0] = 0x00;
  1228     073E  1283               	bcf	3,5	;RP0=0, select bank0
  1229     073F  1303               	bcf	3,6	;RP1=0, select bank0
  1230     0740  01A3               	clrf	nrf_setup@data
  1231     0741                     l1334:
  1232                           
  1233                           ;./nrf24l01.h: 180:         nrf_write_register(0x01, &data, 1);
  1234     0741  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1235     0742  00F8               	movwf	nrf_write_register@data
  1236     0743  01F9               	clrf	nrf_write_register@len
  1237     0744  0AF9               	incf	nrf_write_register@len,f
  1238     0745  3001               	movlw	1
  1239     0746  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1240     074B                     l1336:
  1241                           
  1242                           ;./nrf24l01.h: 181:         data[0] = 0x01;
  1243     074B  1283               	bcf	3,5	;RP0=0, select bank0
  1244     074C  1303               	bcf	3,6	;RP1=0, select bank0
  1245     074D  01A3               	clrf	nrf_setup@data
  1246     074E  0AA3               	incf	nrf_setup@data,f
  1247     074F                     l1338:
  1248                           
  1249                           ;./nrf24l01.h: 182:         nrf_write_register(0x02, &data, 1);
  1250     074F  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1251     0750  00F8               	movwf	nrf_write_register@data
  1252     0751  01F9               	clrf	nrf_write_register@len
  1253     0752  0AF9               	incf	nrf_write_register@len,f
  1254     0753  3002               	movlw	2
  1255     0754  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1256     0759                     l1340:
  1257                           
  1258                           ;./nrf24l01.h: 183:         data[0] = 0x01;
  1259     0759  1283               	bcf	3,5	;RP0=0, select bank0
  1260     075A  1303               	bcf	3,6	;RP1=0, select bank0
  1261     075B  01A3               	clrf	nrf_setup@data
  1262     075C  0AA3               	incf	nrf_setup@data,f
  1263     075D                     l1342:
  1264                           
  1265                           ;./nrf24l01.h: 184:         nrf_write_register(0x03, &data, 1);
  1266     075D  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1267     075E  00F8               	movwf	nrf_write_register@data
  1268     075F  01F9               	clrf	nrf_write_register@len
  1269     0760  0AF9               	incf	nrf_write_register@len,f
  1270     0761  3003               	movlw	3
  1271     0762  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1272     0767                     l1344:
  1273                           
  1274                           ;./nrf24l01.h: 185:         data[0] = 0x00;
  1275     0767  1283               	bcf	3,5	;RP0=0, select bank0
  1276     0768  1303               	bcf	3,6	;RP1=0, select bank0
  1277     0769  01A3               	clrf	nrf_setup@data
  1278     076A                     l1346:
  1279                           
  1280                           ;./nrf24l01.h: 186:         nrf_write_register(0x04, &data, 1);
  1281     076A  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1282     076B  00F8               	movwf	nrf_write_register@data
  1283     076C  01F9               	clrf	nrf_write_register@len
  1284     076D  0AF9               	incf	nrf_write_register@len,f
  1285     076E  3004               	movlw	4
  1286     076F  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1287     0774                     l1348:
  1288                           
  1289                           ;./nrf24l01.h: 187:         data[0] = 0x01;
  1290     0774  1283               	bcf	3,5	;RP0=0, select bank0
  1291     0775  1303               	bcf	3,6	;RP1=0, select bank0
  1292     0776  01A3               	clrf	nrf_setup@data
  1293     0777  0AA3               	incf	nrf_setup@data,f
  1294     0778                     l1350:
  1295                           
  1296                           ;./nrf24l01.h: 188:         nrf_write_register(0x05, &data, 1);
  1297     0778  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1298     0779  00F8               	movwf	nrf_write_register@data
  1299     077A  01F9               	clrf	nrf_write_register@len
  1300     077B  0AF9               	incf	nrf_write_register@len,f
  1301     077C  3005               	movlw	5
  1302     077D  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1303                           
  1304                           ;./nrf24l01.h: 189:         data[0] = 0x26;
  1305     0782  3026               	movlw	38
  1306     0783  1283               	bcf	3,5	;RP0=0, select bank0
  1307     0784  1303               	bcf	3,6	;RP1=0, select bank0
  1308     0785  00A3               	movwf	nrf_setup@data
  1309     0786                     l1352:
  1310                           
  1311                           ;./nrf24l01.h: 190:         nrf_write_register(0x06, &data, 1);
  1312     0786  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1313     0787  00F8               	movwf	nrf_write_register@data
  1314     0788  01F9               	clrf	nrf_write_register@len
  1315     0789  0AF9               	incf	nrf_write_register@len,f
  1316     078A  3006               	movlw	6
  1317     078B  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1318     0790                     l1354:
  1319                           
  1320                           ;./nrf24l01.h: 191:         data[0] = payload_size;
  1321     0790  087C               	movf	nrf_setup@payload_size,w
  1322     0791  1283               	bcf	3,5	;RP0=0, select bank0
  1323     0792  1303               	bcf	3,6	;RP1=0, select bank0
  1324     0793  00A3               	movwf	nrf_setup@data
  1325                           
  1326                           ;./nrf24l01.h: 192:         nrf_write_register(0x11, &data, 1);
  1327     0794  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1328     0795  00F8               	movwf	nrf_write_register@data
  1329     0796  01F9               	clrf	nrf_write_register@len
  1330     0797  0AF9               	incf	nrf_write_register@len,f
  1331     0798  3011               	movlw	17
  1332     0799  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1333                           
  1334                           ;./nrf24l01.h: 194:         arrcpy(data, addr, sizeof(addr));
  1335     079E  1283               	bcf	3,5	;RP0=0, select bank0
  1336     079F  1303               	bcf	3,6	;RP1=0, select bank0
  1337     07A0  0822               	movf	nrf_setup@addr,w
  1338     07A1  00F0               	movwf	arrcpy@src
  1339     07A2  01F1               	clrf	arrcpy@len
  1340     07A3  0AF1               	incf	arrcpy@len,f
  1341     07A4  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1342     07A5  120A  118A  2423  120A  118A  	fcall	_arrcpy
  1343                           
  1344                           ;./nrf24l01.h: 195:         nrf_write_register(0x0A, data, sizeof(addr));
  1345     07AA  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1346     07AB  00F8               	movwf	nrf_write_register@data
  1347     07AC  01F9               	clrf	nrf_write_register@len
  1348     07AD  0AF9               	incf	nrf_write_register@len,f
  1349     07AE  300A               	movlw	10
  1350     07AF  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1351                           
  1352                           ;./nrf24l01.h: 197:         arrcpy(data, addr, sizeof(addr));
  1353     07B4  1283               	bcf	3,5	;RP0=0, select bank0
  1354     07B5  1303               	bcf	3,6	;RP1=0, select bank0
  1355     07B6  0822               	movf	nrf_setup@addr,w
  1356     07B7  00F0               	movwf	arrcpy@src
  1357     07B8  01F1               	clrf	arrcpy@len
  1358     07B9  0AF1               	incf	arrcpy@len,f
  1359     07BA  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1360     07BB  120A  118A  2423  120A  118A  	fcall	_arrcpy
  1361                           
  1362                           ;./nrf24l01.h: 198:         nrf_write_register(0x10, data, sizeof(addr));
  1363     07C0  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1364     07C1  00F8               	movwf	nrf_write_register@data
  1365     07C2  01F9               	clrf	nrf_write_register@len
  1366     07C3  0AF9               	incf	nrf_write_register@len,f
  1367     07C4  3010               	movlw	16
  1368     07C5  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1369                           
  1370                           ;./nrf24l01.h: 200:         nrf_flush_rxtx();
  1371     07CA  120A  118A  240A  120A  118A  	fcall	_nrf_flush_rxtx
  1372     07CF                     l111:
  1373     07CF  0008               	return
  1374     07D0                     __end_of_nrf_setup:
  1375                           
  1376                           	psect	text3
  1377     040A                     __ptext3:	
  1378 ;; *************** function _nrf_flush_rxtx *****************
  1379 ;; Defined at:
  1380 ;;		line 152 in file "./nrf24l01.h"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  data            1   11[COMMON] unsigned char 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1394 ;;      Params:         0       0       0       0       0
  1395 ;;      Locals:         1       0       0       0       0
  1396 ;;      Temps:          0       0       0       0       0
  1397 ;;      Totals:         1       0       0       0       0
  1398 ;;Total ram usage:        1 bytes
  1399 ;; Hardware stack levels used: 1
  1400 ;; Hardware stack levels required when called: 3
  1401 ;; This function calls:
  1402 ;;		_nrf_write_command
  1403 ;;		_nrf_write_register
  1404 ;; This function is called by:
  1405 ;;		_nrf_setup
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409     040A                     _nrf_flush_rxtx:	
  1410                           ;psect for function _nrf_flush_rxtx
  1411                           
  1412     040A                     l1232:	
  1413                           ;incstack = 0
  1414                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1415                           
  1416                           
  1417                           ;./nrf24l01.h: 154:         uint8_t data = 0b01110000;
  1418     040A  3070               	movlw	112
  1419     040B  00FB               	movwf	nrf_flush_rxtx@data
  1420     040C                     l1234:
  1421                           
  1422                           ;./nrf24l01.h: 155:         nrf_write_register(0x07, &data, 1);
  1423     040C  307B               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1424     040D  00F8               	movwf	nrf_write_register@data
  1425     040E  01F9               	clrf	nrf_write_register@len
  1426     040F  0AF9               	incf	nrf_write_register@len,f
  1427     0410  3007               	movlw	7
  1428     0411  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1429     0416                     l1236:
  1430                           
  1431                           ;./nrf24l01.h: 156:         nrf_write_command(0b11100001);
  1432     0416  30E1               	movlw	225
  1433     0417  120A  118A  23FA  120A  118A  	fcall	_nrf_write_command
  1434     041C                     l1238:
  1435                           
  1436                           ;./nrf24l01.h: 157:         nrf_write_command(0b11100010);
  1437     041C  30E2               	movlw	226
  1438     041D  120A  118A  23FA  120A  118A  	fcall	_nrf_write_command
  1439     0422                     l108:
  1440     0422  0008               	return
  1441     0423                     __end_of_nrf_flush_rxtx:
  1442                           
  1443                           	psect	text4
  1444     0423                     __ptext4:	
  1445 ;; *************** function _arrcpy *****************
  1446 ;; Defined at:
  1447 ;;		line 95 in file "./nrf24l01.h"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;  dst             1    wreg     PTR unsigned char 
  1450 ;;		 -> nrf_setup@data(5), 
  1451 ;;  src             1    0[COMMON] PTR unsigned char 
  1452 ;;		 -> RADIO_ADDR(5), 
  1453 ;;  len             1    1[COMMON] unsigned char 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  dst             1    4[COMMON] PTR unsigned char 
  1456 ;;		 -> nrf_setup@data(5), 
  1457 ;;  i               1    5[COMMON] unsigned char 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1467 ;;      Params:         2       0       0       0       0
  1468 ;;      Locals:         2       0       0       0       0
  1469 ;;      Temps:          2       0       0       0       0
  1470 ;;      Totals:         6       0       0       0       0
  1471 ;;Total ram usage:        6 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; This function calls:
  1474 ;;		Nothing
  1475 ;; This function is called by:
  1476 ;;		_nrf_setup
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480     0423                     _arrcpy:	
  1481                           ;psect for function _arrcpy
  1482                           
  1483                           
  1484                           ;incstack = 0
  1485                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0+btemp+1]
  1486                           ;arrcpy@dst stored from wreg
  1487     0423  00F4               	movwf	arrcpy@dst
  1488     0424                     l1220:
  1489                           
  1490                           ;./nrf24l01.h: 95:     void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);./nrf24l01.h
      +                          : 96:     {;./nrf24l01.h: 97:         for (uint8_t i = 0; i < len; i++)
  1491     0424  01F5               	clrf	arrcpy@i
  1492     0425  2C39               	goto	l1226
  1493     0426                     l1222:
  1494                           
  1495                           ;./nrf24l01.h: 98:         {;./nrf24l01.h: 99:             dst[i] = src[i];
  1496     0426  0875               	movf	arrcpy@i,w
  1497     0427  0770               	addwf	arrcpy@src,w
  1498     0428  00F2               	movwf	??_arrcpy
  1499     0429  0872               	movf	??_arrcpy,w
  1500     042A  0084               	movwf	4
  1501     042B  1383               	bcf	3,7	;select IRP bank0
  1502     042C  0800               	movf	0,w
  1503     042D  00FF               	movwf	btemp+1
  1504     042E  0875               	movf	arrcpy@i,w
  1505     042F  0774               	addwf	arrcpy@dst,w
  1506     0430  00F3               	movwf	??_arrcpy+1
  1507     0431  0873               	movf	??_arrcpy+1,w
  1508     0432  0084               	movwf	4
  1509     0433  087F               	movf	btemp+1,w
  1510     0434  0080               	movwf	0
  1511     0435                     l1224:
  1512                           
  1513                           ;./nrf24l01.h: 100:         }
  1514     0435  3001               	movlw	1
  1515     0436  00FF               	movwf	btemp+1
  1516     0437  087F               	movf	btemp+1,w
  1517     0438  07F5               	addwf	arrcpy@i,f
  1518     0439                     l1226:
  1519     0439  0871               	movf	arrcpy@len,w
  1520     043A  0275               	subwf	arrcpy@i,w
  1521     043B  1C03               	skipc
  1522     043C  2C3E               	goto	u431
  1523     043D  2C3F               	goto	u430
  1524     043E                     u431:
  1525     043E  2C26               	goto	l1222
  1526     043F                     u430:
  1527     043F                     l87:
  1528     043F  0008               	return
  1529     0440                     __end_of_arrcpy:
  1530                           
  1531                           	psect	text5
  1532     045E                     __ptext5:	
  1533 ;; *************** function _nrf_set_rx_mode *****************
  1534 ;; Defined at:
  1535 ;;		line 204 in file "./nrf24l01.h"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  config          1   11[COMMON] unsigned char 
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1549 ;;      Params:         0       0       0       0       0
  1550 ;;      Locals:         1       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0
  1552 ;;      Totals:         1       0       0       0       0
  1553 ;;Total ram usage:        1 bytes
  1554 ;; Hardware stack levels used: 1
  1555 ;; Hardware stack levels required when called: 3
  1556 ;; This function calls:
  1557 ;;		_nrf_read_register
  1558 ;;		_nrf_write_register
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564     045E                     _nrf_set_rx_mode:	
  1565                           ;psect for function _nrf_set_rx_mode
  1566                           
  1567     045E                     l1356:	
  1568                           ;incstack = 0
  1569                           ; Regs used in _nrf_set_rx_mode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1570                           
  1571                           
  1572                           ;./nrf24l01.h: 206:         uint8_t config;;./nrf24l01.h: 207:         nrf_read_register
      +                          (0x00, &config, 1);
  1573     045E  307B               	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1574     045F  00F8               	movwf	nrf_read_register@data
  1575     0460  01F9               	clrf	nrf_read_register@len
  1576     0461  0AF9               	incf	nrf_read_register@len,f
  1577     0462  3000               	movlw	0
  1578     0463  120A  118A  23C4  120A  118A  	fcall	_nrf_read_register
  1579     0468                     l1358:
  1580                           
  1581                           ;./nrf24l01.h: 209:         RD2 = 1;
  1582     0468  1283               	bcf	3,5	;RP0=0, select bank0
  1583     0469  1303               	bcf	3,6	;RP1=0, select bank0
  1584     046A  1508               	bsf	8,2	;volatile
  1585     046B                     l1360:
  1586                           
  1587                           ;./nrf24l01.h: 211:         if (config & 0x01)
  1588     046B  1C7B               	btfss	nrf_set_rx_mode@config,0
  1589     046C  2C6E               	goto	u601
  1590     046D  2C6F               	goto	u600
  1591     046E                     u601:
  1592     046E  2C70               	goto	l114
  1593     046F                     u600:
  1594     046F  2C7B               	goto	l115
  1595     0470                     l114:
  1596                           
  1597                           ;./nrf24l01.h: 214:         config |= 0x01;
  1598     0470  147B               	bsf	nrf_set_rx_mode@config,0
  1599     0471                     l1364:
  1600                           
  1601                           ;./nrf24l01.h: 215:         nrf_write_register(0x00, &config, 1);
  1602     0471  307B               	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1603     0472  00F8               	movwf	nrf_write_register@data
  1604     0473  01F9               	clrf	nrf_write_register@len
  1605     0474  0AF9               	incf	nrf_write_register@len,f
  1606     0475  3000               	movlw	0
  1607     0476  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1608     047B                     l115:
  1609     047B  0008               	return
  1610     047C                     __end_of_nrf_set_rx_mode:
  1611                           
  1612                           	psect	text6
  1613     0440                     __ptext6:	
  1614 ;; *************** function _nrf_read *****************
  1615 ;; Defined at:
  1616 ;;		line 261 in file "./nrf24l01.h"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  data            1    wreg     PTR unsigned char 
  1619 ;;		 -> main@data(3), 
  1620 ;;  len             1   11[COMMON] unsigned char 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  data            1   12[COMMON] PTR unsigned char 
  1623 ;;		 -> main@data(3), 
  1624 ;;  clear           1   13[COMMON] unsigned char 
  1625 ;;  status          1    0        unsigned char 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      unsigned char 
  1628 ;; Registers used:
  1629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1635 ;;      Params:         1       0       0       0       0
  1636 ;;      Locals:         2       0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0
  1638 ;;      Totals:         3       0       0       0       0
  1639 ;;Total ram usage:        3 bytes
  1640 ;; Hardware stack levels used: 1
  1641 ;; Hardware stack levels required when called: 3
  1642 ;; This function calls:
  1643 ;;		_nrf_read_register
  1644 ;;		_nrf_write_command
  1645 ;;		_nrf_write_register
  1646 ;; This function is called by:
  1647 ;;		_main
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651     0440                     _nrf_read:	
  1652                           ;psect for function _nrf_read
  1653                           
  1654                           
  1655                           ;incstack = 0
  1656                           ; Regs used in _nrf_read: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1657                           ;nrf_read@data stored from wreg
  1658     0440  00FC               	movwf	nrf_read@data
  1659     0441                     l1386:
  1660     0441  087C               	movf	nrf_read@data,w
  1661     0442  00F8               	movwf	nrf_read_register@data
  1662     0443  087B               	movf	nrf_read@len,w
  1663     0444  00F9               	movwf	nrf_read_register@len
  1664     0445  3061               	movlw	97
  1665     0446  120A  118A  23C4  120A  118A  	fcall	_nrf_read_register
  1666     044B                     l1388:
  1667                           
  1668                           ;./nrf24l01.h: 266:         nrf_write_command(0b11100010);
  1669     044B  30E2               	movlw	226
  1670     044C  120A  118A  23FA  120A  118A  	fcall	_nrf_write_command
  1671     0451                     l1390:
  1672                           
  1673                           ;./nrf24l01.h: 267:         uint8_t clear = 0x40;
  1674     0451  3040               	movlw	64
  1675     0452  00FD               	movwf	nrf_read@clear
  1676     0453                     l1392:
  1677                           
  1678                           ;./nrf24l01.h: 268:         nrf_write_register(0x07, &clear, 1);
  1679     0453  307D               	movlw	(low (nrf_read@clear| 0))& (0+255)
  1680     0454  00F8               	movwf	nrf_write_register@data
  1681     0455  01F9               	clrf	nrf_write_register@len
  1682     0456  0AF9               	incf	nrf_write_register@len,f
  1683     0457  3007               	movlw	7
  1684     0458  120A  118A  23D0  120A  118A  	fcall	_nrf_write_register
  1685     045D                     l130:
  1686     045D  0008               	return
  1687     045E                     __end_of_nrf_read:
  1688                           
  1689                           	psect	text7
  1690     03D0                     __ptext7:	
  1691 ;; *************** function _nrf_write_register *****************
  1692 ;; Defined at:
  1693 ;;		line 119 in file "./nrf24l01.h"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;  reg             1    wreg     unsigned char 
  1696 ;;  data            1    8[COMMON] PTR unsigned char 
  1697 ;;		 -> nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1698 ;;		 -> nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1699 ;;  len             1    9[COMMON] unsigned char 
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  reg             1   10[COMMON] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      unsigned char 
  1704 ;; Registers used:
  1705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1711 ;;      Params:         2       0       0       0       0
  1712 ;;      Locals:         1       0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0
  1714 ;;      Totals:         3       0       0       0       0
  1715 ;;Total ram usage:        3 bytes
  1716 ;; Hardware stack levels used: 1
  1717 ;; Hardware stack levels required when called: 2
  1718 ;; This function calls:
  1719 ;;		_nrf_command
  1720 ;; This function is called by:
  1721 ;;		_nrf_flush_rxtx
  1722 ;;		_nrf_setup
  1723 ;;		_nrf_set_rx_mode
  1724 ;;		_nrf_read
  1725 ;;		_nrf_write_payload
  1726 ;;		_nrf_set_tx_mode
  1727 ;;		_nrf_send
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731     03D0                     _nrf_write_register:	
  1732                           ;psect for function _nrf_write_register
  1733                           
  1734                           
  1735                           ;incstack = 0
  1736                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1737                           ;nrf_write_register@reg stored from wreg
  1738     03D0  00FA               	movwf	nrf_write_register@reg
  1739     03D1                     l1202:
  1740                           
  1741                           ;./nrf24l01.h: 119:     uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t l
      +                          en);./nrf24l01.h: 120:     {;./nrf24l01.h: 121:         return nrf_command(reg | 0b00100
      +                          000, data, len);
  1742     03D1  0878               	movf	nrf_write_register@data,w
  1743     03D2  00F1               	movwf	nrf_command@data
  1744     03D3  0879               	movf	nrf_write_register@len,w
  1745     03D4  00F2               	movwf	nrf_command@len
  1746     03D5  087A               	movf	nrf_write_register@reg,w
  1747     03D6  3820               	iorlw	32
  1748     03D7  120A  118A  247C  120A  118A  	fcall	_nrf_command
  1749     03DC                     l96:
  1750     03DC  0008               	return
  1751     03DD                     __end_of_nrf_write_register:
  1752                           
  1753                           	psect	text8
  1754     03C4                     __ptext8:	
  1755 ;; *************** function _nrf_read_register *****************
  1756 ;; Defined at:
  1757 ;;		line 125 in file "./nrf24l01.h"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  reg             1    wreg     unsigned char 
  1760 ;;  data            1    8[COMMON] PTR unsigned char 
  1761 ;;		 -> main@data(3), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1762 ;;  len             1    9[COMMON] unsigned char 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  reg             1   10[COMMON] unsigned char 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      unsigned char 
  1767 ;; Registers used:
  1768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1774 ;;      Params:         2       0       0       0       0
  1775 ;;      Locals:         1       0       0       0       0
  1776 ;;      Temps:          0       0       0       0       0
  1777 ;;      Totals:         3       0       0       0       0
  1778 ;;Total ram usage:        3 bytes
  1779 ;; Hardware stack levels used: 1
  1780 ;; Hardware stack levels required when called: 2
  1781 ;; This function calls:
  1782 ;;		_nrf_command
  1783 ;; This function is called by:
  1784 ;;		_nrf_set_rx_mode
  1785 ;;		_nrf_read
  1786 ;;		_nrf_set_tx_mode
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790     03C4                     _nrf_read_register:	
  1791                           ;psect for function _nrf_read_register
  1792                           
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1796                           ;nrf_read_register@reg stored from wreg
  1797     03C4  00FA               	movwf	nrf_read_register@reg
  1798     03C5                     l1228:
  1799                           
  1800                           ;./nrf24l01.h: 125:     uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t le
      +                          n);./nrf24l01.h: 126:     {;./nrf24l01.h: 127:         return nrf_command(reg | 0b000000
      +                          00, data, len);
  1801     03C5  0878               	movf	nrf_read_register@data,w
  1802     03C6  00F1               	movwf	nrf_command@data
  1803     03C7  0879               	movf	nrf_read_register@len,w
  1804     03C8  00F2               	movwf	nrf_command@len
  1805     03C9  087A               	movf	nrf_read_register@reg,w
  1806     03CA  120A  118A  247C  120A  118A  	fcall	_nrf_command
  1807     03CF                     l99:
  1808     03CF  0008               	return
  1809     03D0                     __end_of_nrf_read_register:
  1810                           
  1811                           	psect	text9
  1812     047C                     __ptext9:	
  1813 ;; *************** function _nrf_command *****************
  1814 ;; Defined at:
  1815 ;;		line 105 in file "./nrf24l01.h"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;  NRF_command     1    wreg     unsigned char 
  1818 ;;  data            1    1[COMMON] PTR unsigned char 
  1819 ;;		 -> main@data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1820 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1821 ;;  len             1    2[COMMON] unsigned char 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  NRF_command     1    5[COMMON] unsigned char 
  1824 ;;  i               1    7[COMMON] unsigned char 
  1825 ;;  status          1    6[COMMON] unsigned char 
  1826 ;; Return value:  Size  Location     Type
  1827 ;;                  1    wreg      unsigned char 
  1828 ;; Registers used:
  1829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1835 ;;      Params:         2       0       0       0       0
  1836 ;;      Locals:         3       0       0       0       0
  1837 ;;      Temps:          2       0       0       0       0
  1838 ;;      Totals:         7       0       0       0       0
  1839 ;;Total ram usage:        7 bytes
  1840 ;; Hardware stack levels used: 1
  1841 ;; Hardware stack levels required when called: 1
  1842 ;; This function calls:
  1843 ;;		_SPI_write
  1844 ;; This function is called by:
  1845 ;;		_nrf_write_register
  1846 ;;		_nrf_read_register
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850     047C                     _nrf_command:	
  1851                           ;psect for function _nrf_command
  1852                           
  1853                           
  1854                           ;incstack = 0
  1855                           ; Regs used in _nrf_command: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1856                           ;nrf_command@NRF_command stored from wreg
  1857     047C  00F5               	movwf	nrf_command@NRF_command
  1858     047D                     l1186:
  1859                           
  1860                           ;./nrf24l01.h: 105:     uint8_t nrf_command(uint8_t NRF_command, uint8_t *data, uint8_t 
      +                          len);./nrf24l01.h: 106:     {;./nrf24l01.h: 107:         RD3 = 0;
  1861     047D  1283               	bcf	3,5	;RP0=0, select bank0
  1862     047E  1303               	bcf	3,6	;RP1=0, select bank0
  1863     047F  1188               	bcf	8,3	;volatile
  1864     0480                     l1188:
  1865                           
  1866                           ;./nrf24l01.h: 109:         uint8_t status = SPI_write(NRF_command);
  1867     0480  0875               	movf	nrf_command@NRF_command,w
  1868     0481  120A  118A  23EB  120A  118A  	fcall	_SPI_write
  1869     0486  00F6               	movwf	nrf_command@status
  1870     0487                     l1190:
  1871                           
  1872                           ;./nrf24l01.h: 110:         for (uint8_t i = 0; i < len; i++)
  1873     0487  01F7               	clrf	nrf_command@i
  1874     0488  2CA2               	goto	l1196
  1875     0489                     l1192:
  1876                           
  1877                           ;./nrf24l01.h: 111:             data[i] = SPI_write(data[i]);
  1878     0489  0877               	movf	nrf_command@i,w
  1879     048A  0771               	addwf	nrf_command@data,w
  1880     048B  00F3               	movwf	??_nrf_command
  1881     048C  0873               	movf	??_nrf_command,w
  1882     048D  0084               	movwf	4
  1883     048E  1383               	bcf	3,7	;select IRP bank0
  1884     048F  0800               	movf	0,w
  1885     0490  120A  118A  23EB  120A  118A  	fcall	_SPI_write
  1886     0495  00FF               	movwf	btemp+1
  1887     0496  0877               	movf	nrf_command@i,w
  1888     0497  0771               	addwf	nrf_command@data,w
  1889     0498  00F4               	movwf	??_nrf_command+1
  1890     0499  0874               	movf	??_nrf_command+1,w
  1891     049A  0084               	movwf	4
  1892     049B  087F               	movf	btemp+1,w
  1893     049C  1383               	bcf	3,7	;select IRP bank0
  1894     049D  0080               	movwf	0
  1895     049E                     l1194:
  1896     049E  3001               	movlw	1
  1897     049F  00FF               	movwf	btemp+1
  1898     04A0  087F               	movf	btemp+1,w
  1899     04A1  07F7               	addwf	nrf_command@i,f
  1900     04A2                     l1196:
  1901     04A2  0872               	movf	nrf_command@len,w
  1902     04A3  0277               	subwf	nrf_command@i,w
  1903     04A4  1C03               	skipc
  1904     04A5  2CA7               	goto	u411
  1905     04A6  2CA8               	goto	u410
  1906     04A7                     u411:
  1907     04A7  2C89               	goto	l1192
  1908     04A8                     u410:
  1909     04A8                     l92:
  1910                           
  1911                           ;./nrf24l01.h: 113:         RD3 = 1;
  1912     04A8  1283               	bcf	3,5	;RP0=0, select bank0
  1913     04A9  1303               	bcf	3,6	;RP1=0, select bank0
  1914     04AA  1588               	bsf	8,3	;volatile
  1915     04AB                     l1198:
  1916                           
  1917                           ;./nrf24l01.h: 115:         return status;
  1918     04AB  0876               	movf	nrf_command@status,w
  1919     04AC                     l93:
  1920     04AC  0008               	return
  1921     04AD                     __end_of_nrf_command:
  1922                           
  1923                           	psect	text10
  1924     03DD                     __ptext10:	
  1925 ;; *************** function _nrf_data_available *****************
  1926 ;; Defined at:
  1927 ;;		line 236 in file "./nrf24l01.h"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;		None
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;  status          1    3[COMMON] unsigned char 
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  1    wreg      unsigned char 
  1934 ;; Registers used:
  1935 ;;		wreg, pclath, cstack
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1941 ;;      Params:         0       0       0       0       0
  1942 ;;      Locals:         1       0       0       0       0
  1943 ;;      Temps:          0       0       0       0       0
  1944 ;;      Totals:         1       0       0       0       0
  1945 ;;Total ram usage:        1 bytes
  1946 ;; Hardware stack levels used: 1
  1947 ;; Hardware stack levels required when called: 2
  1948 ;; This function calls:
  1949 ;;		_nrf_write_command
  1950 ;; This function is called by:
  1951 ;;		_main
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955     03DD                     _nrf_data_available:	
  1956                           ;psect for function _nrf_data_available
  1957                           
  1958     03DD                     l1380:	
  1959                           ;incstack = 0
  1960                           ; Regs used in _nrf_data_available: [wreg+pclath+cstack]
  1961                           
  1962                           
  1963                           ;./nrf24l01.h: 238:         uint8_t status = nrf_write_command(0b11111111);
  1964     03DD  30FF               	movlw	255
  1965     03DE  120A  118A  23FA  120A  118A  	fcall	_nrf_write_command
  1966     03E3  00F3               	movwf	nrf_data_available@status
  1967     03E4                     l1382:
  1968                           
  1969                           ;./nrf24l01.h: 239:         return (status & 0x40) != 0;
  1970     03E4  1B73               	btfsc	nrf_data_available@status,6
  1971     03E5  2BE7               	goto	u621
  1972     03E6  2BE9               	goto	u620
  1973     03E7                     u621:
  1974     03E7  3001               	movlw	1
  1975     03E8  2BEA               	goto	u630
  1976     03E9                     u620:
  1977     03E9  3000               	movlw	0
  1978     03EA                     u630:
  1979     03EA                     l122:
  1980     03EA  0008               	return
  1981     03EB                     __end_of_nrf_data_available:
  1982                           
  1983                           	psect	text11
  1984     03FA                     __ptext11:	
  1985 ;; *************** function _nrf_write_command *****************
  1986 ;; Defined at:
  1987 ;;		line 140 in file "./nrf24l01.h"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  NRF_command     1    wreg     unsigned char 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  NRF_command     1    1[COMMON] unsigned char 
  1992 ;;  status          1    2[COMMON] unsigned char 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      unsigned char 
  1995 ;; Registers used:
  1996 ;;		wreg, pclath, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2002 ;;      Params:         0       0       0       0       0
  2003 ;;      Locals:         2       0       0       0       0
  2004 ;;      Temps:          0       0       0       0       0
  2005 ;;      Totals:         2       0       0       0       0
  2006 ;;Total ram usage:        2 bytes
  2007 ;; Hardware stack levels used: 1
  2008 ;; Hardware stack levels required when called: 1
  2009 ;; This function calls:
  2010 ;;		_SPI_write
  2011 ;; This function is called by:
  2012 ;;		_nrf_flush_rxtx
  2013 ;;		_nrf_data_available
  2014 ;;		_nrf_read
  2015 ;;		_nrf_send
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019     03FA                     _nrf_write_command:	
  2020                           ;psect for function _nrf_write_command
  2021                           
  2022                           
  2023                           ;incstack = 0
  2024                           ; Regs used in _nrf_write_command: [wreg+pclath+cstack]
  2025                           ;nrf_write_command@NRF_command stored from wreg
  2026     03FA  00F1               	movwf	nrf_write_command@NRF_command
  2027     03FB                     l1206:
  2028                           
  2029                           ;./nrf24l01.h: 140:     uint8_t nrf_write_command(uint8_t NRF_command);./nrf24l01.h: 141
      +                          :     {;./nrf24l01.h: 142:         RD3 = 0;
  2030     03FB  1283               	bcf	3,5	;RP0=0, select bank0
  2031     03FC  1303               	bcf	3,6	;RP1=0, select bank0
  2032     03FD  1188               	bcf	8,3	;volatile
  2033     03FE                     l1208:
  2034                           
  2035                           ;./nrf24l01.h: 143:         uint8_t status = SPI_write(NRF_command);
  2036     03FE  0871               	movf	nrf_write_command@NRF_command,w
  2037     03FF  120A  118A  23EB  120A  118A  	fcall	_SPI_write
  2038     0404  00F2               	movwf	nrf_write_command@status
  2039     0405                     l1210:
  2040                           
  2041                           ;./nrf24l01.h: 144:         RD3 = 1;
  2042     0405  1283               	bcf	3,5	;RP0=0, select bank0
  2043     0406  1303               	bcf	3,6	;RP1=0, select bank0
  2044     0407  1588               	bsf	8,3	;volatile
  2045     0408                     l1212:
  2046                           
  2047                           ;./nrf24l01.h: 145:         return status;
  2048     0408  0872               	movf	nrf_write_command@status,w
  2049     0409                     l105:
  2050     0409  0008               	return
  2051     040A                     __end_of_nrf_write_command:
  2052                           
  2053                           	psect	text12
  2054     03EB                     __ptext12:	
  2055 ;; *************** function _SPI_write *****************
  2056 ;; Defined at:
  2057 ;;		line 26 in file "./spi.h"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;  data            1    wreg     unsigned char 
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  data            1    0[COMMON] unsigned char 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      unsigned char 
  2064 ;; Registers used:
  2065 ;;		wreg
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2071 ;;      Params:         0       0       0       0       0
  2072 ;;      Locals:         1       0       0       0       0
  2073 ;;      Temps:          0       0       0       0       0
  2074 ;;      Totals:         1       0       0       0       0
  2075 ;;Total ram usage:        1 bytes
  2076 ;; Hardware stack levels used: 1
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_nrf_command
  2081 ;;		_nrf_write_command
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085     03EB                     _SPI_write:	
  2086                           ;psect for function _SPI_write
  2087                           
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in _SPI_write: [wreg]
  2091                           ;SPI_write@data stored from wreg
  2092     03EB  00F0               	movwf	SPI_write@data
  2093     03EC                     l1180:
  2094                           
  2095                           ;./spi.h: 26:     uint8_t SPI_write(uint8_t data);./spi.h: 27:     {;./spi.h: 28:       
      +                            SSPBUF = data;
  2096     03EC  0870               	movf	SPI_write@data,w
  2097     03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2098     03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2099     03EF  0093               	movwf	19	;volatile
  2100     03F0                     l78:	
  2101                           ;./spi.h: 30:             ;
  2102                           
  2103                           
  2104                           ;./spi.h: 29:         while (!BF)
  2105     03F0  1683               	bsf	3,5	;RP0=1, select bank1
  2106     03F1  1303               	bcf	3,6	;RP1=0, select bank1
  2107     03F2  1C14               	btfss	20,0	;volatile
  2108     03F3  2BF5               	goto	u401
  2109     03F4  2BF6               	goto	u400
  2110     03F5                     u401:
  2111     03F5  2BF0               	goto	l78
  2112     03F6                     u400:
  2113     03F6                     l1182:
  2114                           
  2115                           ;./spi.h: 31:         return SSPBUF;
  2116     03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2117     03F7  1303               	bcf	3,6	;RP1=0, select bank0
  2118     03F8  0813               	movf	19,w	;volatile
  2119     03F9                     l81:
  2120     03F9  0008               	return
  2121     03FA                     __end_of_SPI_write:
  2122                           
  2123                           	psect	text13
  2124     04AD                     __ptext13:	
  2125 ;; *************** function _UART_write_text *****************
  2126 ;; Defined at:
  2127 ;;		line 41 in file "./uart.h"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;  text            2    1[COMMON] PTR unsigned char 
  2130 ;;		 -> main@buffer_216(64), main@buffer(64), 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  i               2    6[COMMON] int 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2142 ;;      Params:         2       0       0       0       0
  2143 ;;      Locals:         2       0       0       0       0
  2144 ;;      Temps:          3       0       0       0       0
  2145 ;;      Totals:         7       0       0       0       0
  2146 ;;Total ram usage:        7 bytes
  2147 ;; Hardware stack levels used: 1
  2148 ;; Hardware stack levels required when called: 1
  2149 ;; This function calls:
  2150 ;;		_UART_write
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156     04AD                     _UART_write_text:	
  2157                           ;psect for function _UART_write_text
  2158                           
  2159     04AD                     l1298:	
  2160                           ;incstack = 0
  2161                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2162                           
  2163                           
  2164                           ;./uart.h: 41:  void UART_write_text(char *text);./uart.h: 42:  {;./uart.h: 43:   for (i
      +                          nt i = 0; text[i] != '\0'; i++)
  2165     04AD  01F6               	clrf	UART_write_text@i
  2166     04AE  01F7               	clrf	UART_write_text@i+1
  2167     04AF  2CCD               	goto	l1304
  2168     04B0                     l1300:
  2169                           
  2170                           ;./uart.h: 44:    UART_write(text[i]);
  2171     04B0  0876               	movf	UART_write_text@i,w
  2172     04B1  0771               	addwf	UART_write_text@text,w
  2173     04B2  00F4               	movwf	??_UART_write_text+1
  2174     04B3  0872               	movf	UART_write_text@text+1,w
  2175     04B4  00F3               	movwf	??_UART_write_text
  2176     04B5  1803               	skipnc
  2177     04B6  0AF3               	incf	??_UART_write_text,f
  2178     04B7  1FF6               	btfss	UART_write_text@i,7
  2179     04B8  2CBA               	goto	u570
  2180     04B9  03F3               	decf	??_UART_write_text,f
  2181     04BA                     u570:
  2182     04BA  0873               	movf	??_UART_write_text,w
  2183     04BB  00F5               	movwf	??_UART_write_text+2
  2184     04BC  0874               	movf	??_UART_write_text+1,w
  2185     04BD  0084               	movwf	4
  2186     04BE  1783               	bsf	3,7
  2187     04BF  1C75               	btfss	??_UART_write_text+2,0
  2188     04C0  1383               	bcf	3,7
  2189     04C1  0800               	movf	0,w
  2190     04C2  120A  118A  23B8  120A  118A  	fcall	_UART_write
  2191     04C7                     l1302:
  2192     04C7  3001               	movlw	1
  2193     04C8  07F6               	addwf	UART_write_text@i,f
  2194     04C9  1803               	skipnc
  2195     04CA  0AF7               	incf	UART_write_text@i+1,f
  2196     04CB  3000               	movlw	0
  2197     04CC  07F7               	addwf	UART_write_text@i+1,f
  2198     04CD                     l1304:
  2199     04CD  0876               	movf	UART_write_text@i,w
  2200     04CE  0771               	addwf	UART_write_text@text,w
  2201     04CF  00F4               	movwf	??_UART_write_text+1
  2202     04D0  0872               	movf	UART_write_text@text+1,w
  2203     04D1  00F3               	movwf	??_UART_write_text
  2204     04D2  1803               	skipnc
  2205     04D3  0AF3               	incf	??_UART_write_text,f
  2206     04D4  1FF6               	btfss	UART_write_text@i,7
  2207     04D5  2CD7               	goto	u580
  2208     04D6  03F3               	decf	??_UART_write_text,f
  2209     04D7                     u580:
  2210     04D7  0873               	movf	??_UART_write_text,w
  2211     04D8  00F5               	movwf	??_UART_write_text+2
  2212     04D9  0874               	movf	??_UART_write_text+1,w
  2213     04DA  0084               	movwf	4
  2214     04DB  1783               	bsf	3,7
  2215     04DC  1C75               	btfss	??_UART_write_text+2,0
  2216     04DD  1383               	bcf	3,7
  2217     04DE  0800               	movf	0,w
  2218     04DF  1D03               	btfss	3,2
  2219     04E0  2CE2               	goto	u591
  2220     04E1  2CE3               	goto	u590
  2221     04E2                     u591:
  2222     04E2  2CB0               	goto	l1300
  2223     04E3                     u590:
  2224     04E3                     l63:
  2225     04E3  0008               	return
  2226     04E4                     __end_of_UART_write_text:
  2227                           
  2228                           	psect	text14
  2229     03B8                     __ptext14:	
  2230 ;; *************** function _UART_write *****************
  2231 ;; Defined at:
  2232 ;;		line 33 in file "./uart.h"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  data            1    wreg     unsigned char 
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  data            1    0[COMMON] unsigned char 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		wreg
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2246 ;;      Params:         0       0       0       0       0
  2247 ;;      Locals:         1       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0
  2249 ;;      Totals:         1       0       0       0       0
  2250 ;;Total ram usage:        1 bytes
  2251 ;; Hardware stack levels used: 1
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_UART_write_text
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259     03B8                     _UART_write:	
  2260                           ;psect for function _UART_write
  2261                           
  2262                           
  2263                           ;incstack = 0
  2264                           ; Regs used in _UART_write: [wreg]
  2265                           ;UART_write@data stored from wreg
  2266     03B8  00F0               	movwf	UART_write@data
  2267     03B9                     l1216:
  2268     03B9                     l54:	
  2269                           ;./uart.h: 36:    ;
  2270                           
  2271                           
  2272                           ;./uart.h: 35:   while (!TRMT)
  2273     03B9  1683               	bsf	3,5	;RP0=1, select bank1
  2274     03BA  1303               	bcf	3,6	;RP1=0, select bank1
  2275     03BB  1C98               	btfss	24,1	;volatile
  2276     03BC  2BBE               	goto	u421
  2277     03BD  2BBF               	goto	u420
  2278     03BE                     u421:
  2279     03BE  2BB9               	goto	l54
  2280     03BF                     u420:
  2281     03BF                     l1218:
  2282                           
  2283                           ;./uart.h: 37:   TXREG = data;
  2284     03BF  0870               	movf	UART_write@data,w
  2285     03C0  1283               	bcf	3,5	;RP0=0, select bank0
  2286     03C1  1303               	bcf	3,6	;RP1=0, select bank0
  2287     03C2  0099               	movwf	25	;volatile
  2288     03C3                     l57:
  2289     03C3  0008               	return
  2290     03C4                     __end_of_UART_write:
  2291                           
  2292                           	psect	text15
  2293     04E4                     __ptext15:	
  2294 ;; *************** function _UART_init *****************
  2295 ;; Defined at:
  2296 ;;		line 19 in file "./uart.h"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  baudrate        4    6[BANK0 ] const long 
  2299 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2311 ;;      Params:         0       8       0       0       0
  2312 ;;      Locals:         0       0       0       0       0
  2313 ;;      Temps:          0      12       0       0       0
  2314 ;;      Totals:         0      20       0       0       0
  2315 ;;Total ram usage:       20 bytes
  2316 ;; Hardware stack levels used: 1
  2317 ;; Hardware stack levels required when called: 1
  2318 ;; This function calls:
  2319 ;;		___aldiv
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325     04E4                     _UART_init:	
  2326                           ;psect for function _UART_init
  2327                           
  2328     04E4                     l1282:	
  2329                           ;incstack = 0
  2330                           ; Regs used in _UART_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2331                           
  2332                           
  2333                           ;./uart.h: 19:  void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 20:  
      +                          {;./uart.h: 21:   BRGH = 1;
  2334     04E4  1683               	bsf	3,5	;RP0=1, select bank1
  2335     04E5  1303               	bcf	3,6	;RP1=0, select bank1
  2336     04E6  1518               	bsf	24,2	;volatile
  2337     04E7                     l1284:
  2338                           
  2339                           ;./uart.h: 22:   SPBRG = (_XTAL_FREQ - baudrate * 16) / (baudrate * 16);
  2340     04E7  1283               	bcf	3,5	;RP0=0, select bank0
  2341     04E8  1303               	bcf	3,6	;RP1=0, select bank0
  2342     04E9  0826               	movf	UART_init@baudrate,w
  2343     04EA  00AE               	movwf	??_UART_init
  2344     04EB  0827               	movf	UART_init@baudrate+1,w
  2345     04EC  00AF               	movwf	??_UART_init+1
  2346     04ED  0828               	movf	UART_init@baudrate+2,w
  2347     04EE  00B0               	movwf	??_UART_init+2
  2348     04EF  0829               	movf	UART_init@baudrate+3,w
  2349     04F0  00B1               	movwf	??_UART_init+3
  2350     04F1  3004               	movlw	4
  2351     04F2                     u545:
  2352     04F2  1003               	clrc
  2353     04F3  0DAE               	rlf	??_UART_init,f
  2354     04F4  0DAF               	rlf	??_UART_init+1,f
  2355     04F5  0DB0               	rlf	??_UART_init+2,f
  2356     04F6  0DB1               	rlf	??_UART_init+3,f
  2357     04F7                     u540:
  2358     04F7  3EFF               	addlw	-1
  2359     04F8  1D03               	skipz
  2360     04F9  2CF2               	goto	u545
  2361     04FA  0831               	movf	??_UART_init+3,w
  2362     04FB  00F3               	movwf	___aldiv@divisor+3
  2363     04FC  0830               	movf	??_UART_init+2,w
  2364     04FD  00F2               	movwf	___aldiv@divisor+2
  2365     04FE  082F               	movf	??_UART_init+1,w
  2366     04FF  00F1               	movwf	___aldiv@divisor+1
  2367     0500  082E               	movf	??_UART_init,w
  2368     0501  00F0               	movwf	___aldiv@divisor
  2369     0502  0826               	movf	UART_init@baudrate,w
  2370     0503  00B2               	movwf	??_UART_init+4
  2371     0504  0827               	movf	UART_init@baudrate+1,w
  2372     0505  00B3               	movwf	??_UART_init+5
  2373     0506  0828               	movf	UART_init@baudrate+2,w
  2374     0507  00B4               	movwf	??_UART_init+6
  2375     0508  0829               	movf	UART_init@baudrate+3,w
  2376     0509  00B5               	movwf	??_UART_init+7
  2377     050A  3004               	movlw	4
  2378     050B                     u555:
  2379     050B  1003               	clrc
  2380     050C  0DB2               	rlf	??_UART_init+4,f
  2381     050D  0DB3               	rlf	??_UART_init+5,f
  2382     050E  0DB4               	rlf	??_UART_init+6,f
  2383     050F  0DB5               	rlf	??_UART_init+7,f
  2384     0510                     u550:
  2385     0510  3EFF               	addlw	-1
  2386     0511  1D03               	skipz
  2387     0512  2D0B               	goto	u555
  2388     0513  082A               	movf	UART_init@_XTAL_FREQ,w
  2389     0514  00B6               	movwf	??_UART_init+8
  2390     0515  082B               	movf	UART_init@_XTAL_FREQ+1,w
  2391     0516  00B7               	movwf	??_UART_init+9
  2392     0517  082C               	movf	UART_init@_XTAL_FREQ+2,w
  2393     0518  00B8               	movwf	??_UART_init+10
  2394     0519  082D               	movf	UART_init@_XTAL_FREQ+3,w
  2395     051A  00B9               	movwf	??_UART_init+11
  2396     051B  0832               	movf	??_UART_init+4,w
  2397     051C  02B6               	subwf	??_UART_init+8,f
  2398     051D  0833               	movf	??_UART_init+5,w
  2399     051E  1C03               	skipc
  2400     051F  0F33               	incfsz	??_UART_init+5,w
  2401     0520  2D22               	goto	u561
  2402     0521  2D23               	goto	u562
  2403     0522                     u561:
  2404     0522  02B7               	subwf	??_UART_init+9,f
  2405     0523                     u562:
  2406     0523  0834               	movf	??_UART_init+6,w
  2407     0524  1C03               	skipc
  2408     0525  0F34               	incfsz	??_UART_init+6,w
  2409     0526  2D28               	goto	u563
  2410     0527  2D29               	goto	u564
  2411     0528                     u563:
  2412     0528  02B8               	subwf	??_UART_init+10,f
  2413     0529                     u564:
  2414     0529  0835               	movf	??_UART_init+7,w
  2415     052A  1C03               	skipc
  2416     052B  0F35               	incfsz	??_UART_init+7,w
  2417     052C  2D2E               	goto	u565
  2418     052D  2D2F               	goto	u566
  2419     052E                     u565:
  2420     052E  02B9               	subwf	??_UART_init+11,f
  2421     052F                     u566:
  2422     052F  0839               	movf	??_UART_init+11,w
  2423     0530  00F7               	movwf	___aldiv@dividend+3
  2424     0531  0838               	movf	??_UART_init+10,w
  2425     0532  00F6               	movwf	___aldiv@dividend+2
  2426     0533  0837               	movf	??_UART_init+9,w
  2427     0534  00F5               	movwf	___aldiv@dividend+1
  2428     0535  0836               	movf	??_UART_init+8,w
  2429     0536  00F4               	movwf	___aldiv@dividend
  2430     0537  120A  118A  25CB  120A  118A  	fcall	___aldiv
  2431     053C  0870               	movf	?___aldiv,w
  2432     053D  1683               	bsf	3,5	;RP0=1, select bank1
  2433     053E  1303               	bcf	3,6	;RP1=0, select bank1
  2434     053F  0099               	movwf	25	;volatile
  2435     0540                     l1286:
  2436                           
  2437                           ;./uart.h: 23:   SYNC = 0;
  2438     0540  1218               	bcf	24,4	;volatile
  2439     0541                     l1288:
  2440                           
  2441                           ;./uart.h: 24:   SPEN = 1;
  2442     0541  1283               	bcf	3,5	;RP0=0, select bank0
  2443     0542  1303               	bcf	3,6	;RP1=0, select bank0
  2444     0543  1798               	bsf	24,7	;volatile
  2445     0544                     l1290:
  2446                           
  2447                           ;./uart.h: 25:   TRISC7 = 1;
  2448     0544  1683               	bsf	3,5	;RP0=1, select bank1
  2449     0545  1303               	bcf	3,6	;RP1=0, select bank1
  2450     0546  1787               	bsf	7,7	;volatile
  2451     0547                     l1292:
  2452                           
  2453                           ;./uart.h: 26:   TRISC6 = 1;
  2454     0547  1707               	bsf	7,6	;volatile
  2455     0548                     l1294:
  2456                           
  2457                           ;./uart.h: 27:   CREN = 1;
  2458     0548  1283               	bcf	3,5	;RP0=0, select bank0
  2459     0549  1303               	bcf	3,6	;RP1=0, select bank0
  2460     054A  1618               	bsf	24,4	;volatile
  2461     054B                     l1296:
  2462                           
  2463                           ;./uart.h: 28:   TXEN = 1;
  2464     054B  1683               	bsf	3,5	;RP0=1, select bank1
  2465     054C  1303               	bcf	3,6	;RP1=0, select bank1
  2466     054D  1698               	bsf	24,5	;volatile
  2467     054E                     l51:
  2468     054E  0008               	return
  2469     054F                     __end_of_UART_init:
  2470                           
  2471                           	psect	text16
  2472     05CB                     __ptext16:	
  2473 ;; *************** function ___aldiv *****************
  2474 ;; Defined at:
  2475 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;  divisor         4    0[COMMON] long 
  2478 ;;  dividend        4    4[COMMON] long 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  quotient        4    2[BANK0 ] long 
  2481 ;;  sign            1    1[BANK0 ] unsigned char 
  2482 ;;  counter         1    0[BANK0 ] unsigned char 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  4    0[COMMON] long 
  2485 ;; Registers used:
  2486 ;;		wreg, status,2, status,0, btemp+1
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2492 ;;      Params:         8       0       0       0       0
  2493 ;;      Locals:         0       6       0       0       0
  2494 ;;      Temps:          1       0       0       0       0
  2495 ;;      Totals:         9       6       0       0       0
  2496 ;;Total ram usage:       15 bytes
  2497 ;; Hardware stack levels used: 1
  2498 ;; This function calls:
  2499 ;;		Nothing
  2500 ;; This function is called by:
  2501 ;;		_UART_init
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505     05CB                     ___aldiv:	
  2506                           ;psect for function ___aldiv
  2507                           
  2508     05CB                     l1240:	
  2509                           ;incstack = 0
  2510                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  2511                           
  2512     05CB  1283               	bcf	3,5	;RP0=0, select bank0
  2513     05CC  1303               	bcf	3,6	;RP1=0, select bank0
  2514     05CD  01A1               	clrf	___aldiv@sign
  2515     05CE                     l1242:
  2516     05CE  1FF3               	btfss	___aldiv@divisor+3,7
  2517     05CF  2DD1               	goto	u441
  2518     05D0  2DD2               	goto	u440
  2519     05D1                     u441:
  2520     05D1  2DDF               	goto	l353
  2521     05D2                     u440:
  2522     05D2                     l1244:
  2523     05D2  09F0               	comf	___aldiv@divisor,f
  2524     05D3  09F1               	comf	___aldiv@divisor+1,f
  2525     05D4  09F2               	comf	___aldiv@divisor+2,f
  2526     05D5  09F3               	comf	___aldiv@divisor+3,f
  2527     05D6  0AF0               	incf	___aldiv@divisor,f
  2528     05D7  1903               	skipnz
  2529     05D8  0AF1               	incf	___aldiv@divisor+1,f
  2530     05D9  1903               	skipnz
  2531     05DA  0AF2               	incf	___aldiv@divisor+2,f
  2532     05DB  1903               	skipnz
  2533     05DC  0AF3               	incf	___aldiv@divisor+3,f
  2534     05DD  01A1               	clrf	___aldiv@sign
  2535     05DE  0AA1               	incf	___aldiv@sign,f
  2536     05DF                     l353:
  2537     05DF  1FF7               	btfss	___aldiv@dividend+3,7
  2538     05E0  2DE2               	goto	u451
  2539     05E1  2DE3               	goto	u450
  2540     05E2                     u451:
  2541     05E2  2DF2               	goto	l1250
  2542     05E3                     u450:
  2543     05E3                     l1246:
  2544     05E3  09F4               	comf	___aldiv@dividend,f
  2545     05E4  09F5               	comf	___aldiv@dividend+1,f
  2546     05E5  09F6               	comf	___aldiv@dividend+2,f
  2547     05E6  09F7               	comf	___aldiv@dividend+3,f
  2548     05E7  0AF4               	incf	___aldiv@dividend,f
  2549     05E8  1903               	skipnz
  2550     05E9  0AF5               	incf	___aldiv@dividend+1,f
  2551     05EA  1903               	skipnz
  2552     05EB  0AF6               	incf	___aldiv@dividend+2,f
  2553     05EC  1903               	skipnz
  2554     05ED  0AF7               	incf	___aldiv@dividend+3,f
  2555     05EE                     l1248:
  2556     05EE  3001               	movlw	1
  2557     05EF  00FF               	movwf	btemp+1
  2558     05F0  087F               	movf	btemp+1,w
  2559     05F1  06A1               	xorwf	___aldiv@sign,f
  2560     05F2                     l1250:
  2561     05F2  3000               	movlw	0
  2562     05F3  00A5               	movwf	___aldiv@quotient+3
  2563     05F4  3000               	movlw	0
  2564     05F5  00A4               	movwf	___aldiv@quotient+2
  2565     05F6  3000               	movlw	0
  2566     05F7  00A3               	movwf	___aldiv@quotient+1
  2567     05F8  3000               	movlw	0
  2568     05F9  00A2               	movwf	___aldiv@quotient
  2569     05FA                     l1252:
  2570     05FA  0873               	movf	___aldiv@divisor+3,w
  2571     05FB  0472               	iorwf	___aldiv@divisor+2,w
  2572     05FC  0471               	iorwf	___aldiv@divisor+1,w
  2573     05FD  0470               	iorwf	___aldiv@divisor,w
  2574     05FE  1903               	skipnz
  2575     05FF  2E01               	goto	u461
  2576     0600  2E02               	goto	u460
  2577     0601                     u461:
  2578     0601  2E4F               	goto	l1274
  2579     0602                     u460:
  2580     0602                     l1254:
  2581     0602  01A0               	clrf	___aldiv@counter
  2582     0603  0AA0               	incf	___aldiv@counter,f
  2583     0604  2E12               	goto	l1260
  2584     0605                     l1256:
  2585     0605  3001               	movlw	1
  2586     0606  00F8               	movwf	??___aldiv
  2587     0607                     u475:
  2588     0607  1003               	clrc
  2589     0608  0DF0               	rlf	___aldiv@divisor,f
  2590     0609  0DF1               	rlf	___aldiv@divisor+1,f
  2591     060A  0DF2               	rlf	___aldiv@divisor+2,f
  2592     060B  0DF3               	rlf	___aldiv@divisor+3,f
  2593     060C  0BF8               	decfsz	??___aldiv,f
  2594     060D  2E07               	goto	u475
  2595     060E                     l1258:
  2596     060E  3001               	movlw	1
  2597     060F  00FF               	movwf	btemp+1
  2598     0610  087F               	movf	btemp+1,w
  2599     0611  07A0               	addwf	___aldiv@counter,f
  2600     0612                     l1260:
  2601     0612  1FF3               	btfss	___aldiv@divisor+3,7
  2602     0613  2E15               	goto	u481
  2603     0614  2E16               	goto	u480
  2604     0615                     u481:
  2605     0615  2E05               	goto	l1256
  2606     0616                     u480:
  2607     0616                     l1262:
  2608     0616  3001               	movlw	1
  2609     0617  00F8               	movwf	??___aldiv
  2610     0618                     u495:
  2611     0618  1003               	clrc
  2612     0619  0DA2               	rlf	___aldiv@quotient,f
  2613     061A  0DA3               	rlf	___aldiv@quotient+1,f
  2614     061B  0DA4               	rlf	___aldiv@quotient+2,f
  2615     061C  0DA5               	rlf	___aldiv@quotient+3,f
  2616     061D  0BF8               	decfsz	??___aldiv,f
  2617     061E  2E18               	goto	u495
  2618     061F                     l1264:
  2619     061F  0873               	movf	___aldiv@divisor+3,w
  2620     0620  0277               	subwf	___aldiv@dividend+3,w
  2621     0621  1D03               	skipz
  2622     0622  2E2D               	goto	u505
  2623     0623  0872               	movf	___aldiv@divisor+2,w
  2624     0624  0276               	subwf	___aldiv@dividend+2,w
  2625     0625  1D03               	skipz
  2626     0626  2E2D               	goto	u505
  2627     0627  0871               	movf	___aldiv@divisor+1,w
  2628     0628  0275               	subwf	___aldiv@dividend+1,w
  2629     0629  1D03               	skipz
  2630     062A  2E2D               	goto	u505
  2631     062B  0870               	movf	___aldiv@divisor,w
  2632     062C  0274               	subwf	___aldiv@dividend,w
  2633     062D                     u505:
  2634     062D  1C03               	skipc
  2635     062E  2E30               	goto	u501
  2636     062F  2E31               	goto	u500
  2637     0630                     u501:
  2638     0630  2E40               	goto	l1270
  2639     0631                     u500:
  2640     0631                     l1266:
  2641     0631  0870               	movf	___aldiv@divisor,w
  2642     0632  02F4               	subwf	___aldiv@dividend,f
  2643     0633  0871               	movf	___aldiv@divisor+1,w
  2644     0634  1C03               	skipc
  2645     0635  0F71               	incfsz	___aldiv@divisor+1,w
  2646     0636  02F5               	subwf	___aldiv@dividend+1,f
  2647     0637  0872               	movf	___aldiv@divisor+2,w
  2648     0638  1C03               	skipc
  2649     0639  0F72               	incfsz	___aldiv@divisor+2,w
  2650     063A  02F6               	subwf	___aldiv@dividend+2,f
  2651     063B  0873               	movf	___aldiv@divisor+3,w
  2652     063C  1C03               	skipc
  2653     063D  0F73               	incfsz	___aldiv@divisor+3,w
  2654     063E  02F7               	subwf	___aldiv@dividend+3,f
  2655     063F                     l1268:
  2656     063F  1422               	bsf	___aldiv@quotient,0
  2657     0640                     l1270:
  2658     0640  3001               	movlw	1
  2659     0641                     u515:
  2660     0641  1003               	clrc
  2661     0642  0CF3               	rrf	___aldiv@divisor+3,f
  2662     0643  0CF2               	rrf	___aldiv@divisor+2,f
  2663     0644  0CF1               	rrf	___aldiv@divisor+1,f
  2664     0645  0CF0               	rrf	___aldiv@divisor,f
  2665     0646  3EFF               	addlw	-1
  2666     0647  1D03               	skipz
  2667     0648  2E41               	goto	u515
  2668     0649                     l1272:
  2669     0649  3001               	movlw	1
  2670     064A  02A0               	subwf	___aldiv@counter,f
  2671     064B  1D03               	btfss	3,2
  2672     064C  2E4E               	goto	u521
  2673     064D  2E4F               	goto	u520
  2674     064E                     u521:
  2675     064E  2E16               	goto	l1262
  2676     064F                     u520:
  2677     064F                     l1274:
  2678     064F  0821               	movf	___aldiv@sign,w
  2679     0650  1903               	btfsc	3,2
  2680     0651  2E53               	goto	u531
  2681     0652  2E54               	goto	u530
  2682     0653                     u531:
  2683     0653  2E5F               	goto	l1278
  2684     0654                     u530:
  2685     0654                     l1276:
  2686     0654  09A2               	comf	___aldiv@quotient,f
  2687     0655  09A3               	comf	___aldiv@quotient+1,f
  2688     0656  09A4               	comf	___aldiv@quotient+2,f
  2689     0657  09A5               	comf	___aldiv@quotient+3,f
  2690     0658  0AA2               	incf	___aldiv@quotient,f
  2691     0659  1903               	skipnz
  2692     065A  0AA3               	incf	___aldiv@quotient+1,f
  2693     065B  1903               	skipnz
  2694     065C  0AA4               	incf	___aldiv@quotient+2,f
  2695     065D  1903               	skipnz
  2696     065E  0AA5               	incf	___aldiv@quotient+3,f
  2697     065F                     l1278:
  2698     065F  0825               	movf	___aldiv@quotient+3,w
  2699     0660  00F3               	movwf	?___aldiv+3
  2700     0661  0824               	movf	___aldiv@quotient+2,w
  2701     0662  00F2               	movwf	?___aldiv+2
  2702     0663  0823               	movf	___aldiv@quotient+1,w
  2703     0664  00F1               	movwf	?___aldiv+1
  2704     0665  0822               	movf	___aldiv@quotient,w
  2705     0666  00F0               	movwf	?___aldiv
  2706     0667                     l363:
  2707     0667  0008               	return
  2708     0668                     __end_of___aldiv:
  2709                           
  2710                           	psect	text17
  2711     03AC                     __ptext17:	
  2712 ;; *************** function _SPI_init_master *****************
  2713 ;; Defined at:
  2714 ;;		line 16 in file "./spi.h"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2728 ;;      Params:         0       0       0       0       0
  2729 ;;      Locals:         0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0
  2731 ;;      Totals:         0       0       0       0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used: 1
  2734 ;; This function calls:
  2735 ;;		Nothing
  2736 ;; This function is called by:
  2737 ;;		_main
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741     03AC                     _SPI_init_master:	
  2742                           ;psect for function _SPI_init_master
  2743                           
  2744     03AC                     l1306:	
  2745                           ;incstack = 0
  2746                           ; Regs used in _SPI_init_master: [wreg]
  2747                           
  2748                           
  2749                           ;./spi.h: 18:         SSPCON = 0b01100001;
  2750     03AC  3061               	movlw	97
  2751     03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2752     03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2753     03AF  0094               	movwf	20	;volatile
  2754                           
  2755                           ;./spi.h: 19:         SSPSTAT = 0b01000000;
  2756     03B0  3040               	movlw	64
  2757     03B1  1683               	bsf	3,5	;RP0=1, select bank1
  2758     03B2  1303               	bcf	3,6	;RP1=0, select bank1
  2759     03B3  0094               	movwf	20	;volatile
  2760     03B4                     l1308:
  2761                           
  2762                           ;./spi.h: 20:         TRISCbits.TRISC5 = 0;
  2763     03B4  1287               	bcf	7,5	;volatile
  2764     03B5                     l1310:
  2765                           
  2766                           ;./spi.h: 21:         TRISCbits.TRISC4 = 1;
  2767     03B5  1607               	bsf	7,4	;volatile
  2768     03B6                     l1312:
  2769                           
  2770                           ;./spi.h: 22:         TRISCbits.TRISC3 = 0;
  2771     03B6  1187               	bcf	7,3	;volatile
  2772     03B7                     l75:
  2773     03B7  0008               	return
  2774     03B8                     __end_of_SPI_init_master:
  2775     007E                     btemp	set	126	;btemp
  2776     007E                     wtemp0	set	126
  2777                           
  2778                           	psect	config
  2779                           
  2780                           ;Config register CONFIG1 @ 0x2007
  2781                           ;	Oscillator Selection bits
  2782                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2783                           ;	Watchdog Timer Enable bit
  2784                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2785                           ;	Power-up Timer Enable bit
  2786                           ;	PWRTE = OFF, PWRT disabled
  2787                           ;	RE3/MCLR pin function select bit
  2788                           ;	MCLRE = 0x1, unprogrammed default
  2789                           ;	Code Protection bit
  2790                           ;	CP = OFF, Program memory code protection is disabled
  2791                           ;	Data Code Protection bit
  2792                           ;	CPD = OFF, Data memory code protection is disabled
  2793                           ;	Brown Out Reset Selection bits
  2794                           ;	BOREN = OFF, BOR disabled
  2795                           ;	Internal External Switchover bit
  2796                           ;	IESO = 0x1, unprogrammed default
  2797                           ;	Fail-Safe Clock Monitor Enabled bit
  2798                           ;	FCMEN = 0x1, unprogrammed default
  2799                           ;	Low Voltage Programming Enable bit
  2800                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2801                           ;	In-Circuit Debugger Mode bit
  2802                           ;	DEBUG = 0x1, unprogrammed default
  2803     2007                     	org	8199
  2804     2007  2CF2               	dw	11506
  2805                           
  2806                           ;Config register CONFIG2 @ 0x2008
  2807                           ;	Brown-out Reset Selection bit
  2808                           ;	BOR4V = 0x1, unprogrammed default
  2809                           ;	Flash Program Memory Self Write Enable bits
  2810                           ;	WRT = OFF, Write protection off
  2811     2008                     	org	8200
  2812     2008  3FFF               	dw	16383

Data Sizes:
    Strings     46
    Constant    0
    Data        5
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     31      41
    BANK1            80     64      69
    BANK3            96     64      64
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_3(CODE[13]), STR_2(CODE[8]), STR_1(CODE[18]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), ?_sprintf(BANK0[2]), main@data(BANK0[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_216(BANK3[64]), main@buffer(BANK1[64]), char_to_binary_string@output(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    nrf_read@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_setup@addr	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK1[5]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_read@clear(COMMON[1]), nrf_send@clear(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 
		 -> nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[3]), nrf_read@clear(COMMON[1]), nrf_send@clear(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK1[5]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_setup@data(BANK0[5]), 

    UART_write_text@text	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_216(BANK3[64]), main@buffer(BANK1[64]), 


Critical Paths under _main in COMMON

    _main->_nrf_read
    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_set_rx_mode->_nrf_read_register
    _nrf_set_rx_mode->_nrf_write_register
    _nrf_read->_nrf_read_register
    _nrf_read->_nrf_write_register
    _nrf_write_register->_nrf_command
    _nrf_read_register->_nrf_command
    _nrf_command->_SPI_write
    _nrf_data_available->_nrf_write_command
    _nrf_write_command->_SPI_write
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               133   133      0   17201
                                             26 BANK0      5     5      0
                                              0 BANK1     64    64      0
                                              0 BANK3     64    64      0
                    _SPI_init_master
                          _UART_init
                    _UART_write_text
                 _nrf_data_available
                           _nrf_read
                    _nrf_set_rx_mode
                          _nrf_setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             35    16     19     660
                                              0 COMMON     6     6      0
                                              0 BANK0     19     0     19
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                            9     8      1    7055
                                             12 COMMON     1     0      1
                                              0 BANK0      8     8      0
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3096
                                             11 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               6     4      2     504
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _nrf_set_rx_mode                                      1     1      0    4100
                                             11 COMMON     1     1      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (1) _nrf_read                                             4     3      1    4283
                                             11 COMMON     3     2      1
                  _nrf_read_register
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    3003
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2    1027
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (3) _nrf_command                                          7     5      2     505
                                              1 COMMON     7     5      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_data_available                                   1     1      0      90
                                              3 COMMON     1     1      0
                  _nrf_write_command
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      7     5      2     186
                                              1 COMMON     7     5      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_init
     ___aldiv
   _UART_write_text
     _UART_write
   _nrf_data_available
     _nrf_write_command
       _SPI_write
   _nrf_read
     _nrf_read_register
       _nrf_command
         _SPI_write
     _nrf_write_command
     _nrf_write_register
       _nrf_command
   _nrf_set_rx_mode
     _nrf_read_register
     _nrf_write_register
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     40      40       9       66.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     40      45       7       86.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1F      29       5       51.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      BC      12        0.0%
ABS                  0      0      BC       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Mar 27 22:28:50 2023

                           pc 0002                            _BF 04A0                            l51 054E  
                          l54 03B9                            l63 04E3                            l57 03C3  
                          l81 03F9                            l75 03B7                            l92 04A8  
                          l93 04AC                            l78 03F0                            l87 043F  
                          l96 03DC                            l99 03CF                            fsr 0004  
                         l111 07CF                           l105 0409                           l122 03EA  
                         l130 045D                           l114 0470                           l115 047B  
                         l108 0422                           l353 05DF                           l363 0667  
                         l284 070E                           l277 06B3                           _RD2 0042  
                         _RD3 0043                           u400 03F6                           u401 03F5  
                         u410 04A8                           u411 04A7                           u500 0631  
                         u420 03BF                           u501 0630                           u421 03BE  
                         u430 043F                           u431 043E                           u520 064F  
                         u440 05D2                           u600 046F                           u521 064E  
                         u505 062D                           u441 05D1                           u601 046E  
                         u530 0654                           u450 05E3                           u531 0653  
                         u515 0641                           u451 05E2                           u460 0602  
                         u540 04F7                           u620 03E9                           u461 0601  
                         u621 03E7                           u550 0510                           u630 03EA  
                         u480 0616                           u640 0671                           u481 0615  
                         u561 0522                           u545 04F2                           u641 0670  
                         u562 0523                           u570 04BA                           u650 0691  
                         u475 0607                           u563 0528                           u555 050B  
                         u651 0690                           u564 0529                           u580 04D7  
                         u660 06C1                           u565 052E                           u661 06C0  
                         u566 052F                           u590 04E3                           u670 0708  
                         u495 0618                           u591 04E2                           u807 072B  
                         u671 0707                           u770 05A7                           u771 05A6  
                         u787 0598                           u797 071C                           fsr0 0004  
                         indf 0000                          l1210 0405                          l1202 03D1  
                        l1300 04B0                          l1212 0408                          l1220 0424  
                        l1310 03B5                          l1302 04C7                          l1206 03FB  
                        l1222 0426                          l1312 03B6                          l1240 05CB  
                        l1216 03B9                          l1304 04CD                          l1208 03FE  
                        l1224 0435                          l1232 040A                          l1400 0671  
                        l1306 03AC                          l1250 05F2                          l1242 05CE  
                        l1218 03BF                          l1226 0439                          l1234 040C  
                        l1330 0734                          l1322 0712                          l1410 068B  
                        l1402 0678                          l1308 03B4                          l1260 0612  
                        l1252 05FA                          l1244 05D2                          l1180 03EC  
                        l1228 03C5                          l1236 0416                          l1340 0759  
                        l1332 073E                          l1324 0716                          l1420 06C2  
                        l1412 0691                          l1404 067F                          l1270 0640  
                        l1262 0616                          l1254 0602                          l1246 05E3  
                        l1182 03F6                          l1190 0487                          l1238 041C  
                        l1350 0778                          l1342 075D                          l1334 0741  
                        l1326 0721                          l1422 06C7                          l1414 0696  
                        l1406 0680                          l1430 06D9                          l1510 056A  
                        l1272 0649                          l1264 061F                          l1256 0605  
                        l1248 05EE                          l1192 0489                          l1360 046B  
                        l1352 0786                          l1344 0767                          l1336 074B  
                        l1328 0724                          l1424 06CB                          l1416 06A7  
                        l1408 0687                          l1432 06F6                          l1520 0592  
                        l1512 0577                          l1266 0631                          l1258 060E  
                        l1274 064F                          l1290 0544                          l1282 04E4  
                        l1194 049E                          l1186 047D                          l1354 0790  
                        l1346 076A                          l1338 074F                          l1434 0708  
                        l1426 06D2                          l1418 06AD                          l1522 059D  
                        l1514 0580                          l1506 054F                          l1276 0654  
                        l1268 063F                          l1292 0547                          l1284 04E7  
                        l1380 03DD                          l1196 04A2                          l1188 0480  
                        l1364 0471                          l1356 045E                          l1348 0774  
                        l1524 05A7                          l1516 0585                          l1508 0553  
                        l1278 065F                          l1294 0548                          l1286 0540  
                        l1382 03E4                          l1198 04AB                          l1390 0451  
                        l1358 0468                          l1526 05BE                          l1518 058D  
                        l1296 054B                          l1288 0541                          l1392 0453  
                        l1298 04AD                          l1386 0441                          l1388 044B  
                        l1396 0668                          l1558 06EB                          l1398 066B  
                        STR_1 0013                          STR_2 0032                          STR_3 0025  
                        STR_4 003A                          _BRGH 04C2                          _CREN 00C4  
                        _RCIF 0065                          _SPEN 00C7                          _TRMT 04C1  
                        _TXEN 04C5                          _SYNC 04C4                          _main 054F  
                        btemp 007E                          start 0000              UART_write_text@i 0076  
             __end_of___aldiv 0668                         ?_main 0070                         _RCREG 001A  
                       _SPBRG 0099                         _TXREG 0019                   ?_UART_write 0070  
                       pclath 000A                         status 0003                         wtemp0 007E  
             __end_of_sprintf 070F               __initialization 07D0                  __end_of_main 05CB  
                      ??_main 003A                  ?_nrf_command 0071         nrf_setup@payload_size 007C  
                      _TRISD2 0442                        _TRISD3 0443                        _TRISC6 043E  
                      _TRISC7 043F                        _SSPCON 0014                        _SSPBUF 0013  
                   ??___aldiv 0078             __end_of_UART_init 054F                _nrf_flush_rxtx 040A  
 char_to_binary_string@output 003F                        _arrcpy 0423              __end_of_nrf_read 045E  
             _UART_write_text 04AD             __end_of_SPI_write 03FA                     ??_sprintf 0070  
    nrf_data_available@status 0073            nrf_flush_rxtx@data 007B       __end_of__initialization 07FC  
      __end_of_nrf_flush_rxtx 0423                __pcstackCOMMON 0070                  __pidataBANK1 03A7  
  __end_of_nrf_write_register 03DD             ??_nrf_set_rx_mode 007B             ??_SPI_init_master 0070  
                  __pbssBANK0 003F         nrf_write_register@len 0079         nrf_write_register@reg 007A  
              main@buffer_216 0190               ?_nrf_flush_rxtx 0070                    __pmaintext 054F  
                     ?_arrcpy 0070       __end_of_UART_write_text 04E4                   nrf_read@len 007B  
                ??_UART_write 0070                       _SSPSTAT 0094                    __stringtab 0003  
                   ?_nrf_read 007B                       ___aldiv 05CB            __end_of_UART_write 03C4  
                     __ptext1 0668                       __ptext2 070F                       __ptext3 040A  
                     __ptext4 0423                       __ptext5 045E                       __ptext6 0440  
                     __ptext7 03D0                       __ptext8 03C4                       __ptext9 047C  
        nrf_read_register@len 0079          nrf_read_register@reg 007A              ___aldiv@dividend 0074  
                     _sprintf 0668                       arrcpy@i 0075          end_of_initialization 07FC  
           __end_of_nrf_setup 07D0           UART_init@_XTAL_FREQ 002A                    ??_nrf_read 007C  
               nrf_read@clear 007D              ___aldiv@quotient 0022              ?_UART_write_text 0071  
                   _UART_init 04E4                     _TRISCbits 0087                     _SPI_write 03EB  
nrf_write_command@NRF_command 0071                    main@buffer 00A0               _nrf_set_rx_mode 045E  
             _SPI_init_master 03AC                 nrf_setup@addr 0022                 nrf_setup@data 0023  
              __end_of_arrcpy 0440                    ?_UART_init 0026           start_initialization 07D0  
  __end_of_nrf_data_available 03EB            _nrf_write_register 03D0                    ?_SPI_write 0070  
            ??_nrf_flush_rxtx 007B           ?_nrf_write_register 0078                      ??_arrcpy 0072  
                 __pdataBANK1 00E0          ??_nrf_write_register 007A        nrf_write_register@data 0078  
                   ___latbits 0002                 __pcstackBANK0 0020                 __pcstackBANK1 00A0  
               __pcstackBANK3 0190           UART_write_text@text 0071       __end_of_nrf_set_rx_mode 047C  
     __end_of_SPI_init_master 03B8                 SPI_write@data 0070                      ?___aldiv 0070  
                   __pstrings 0003                   ??_UART_init 002E                 ??_nrf_command 0073  
                    ?_sprintf 0020                   ??_SPI_write 0070               ___aldiv@divisor 0070  
                nrf_command@i 0077               ___aldiv@counter 0020                     _nrf_setup 070F  
                nrf_read@data 007C               nrf_command@data 0071             _nrf_read_register 03C4  
       nrf_set_rx_mode@config 007B            ?_nrf_read_register 0078                   __stringbase 0012  
              UART_write@data 0070                     arrcpy@len 0071                     arrcpy@dst 0074  
                   arrcpy@src 0070           ??_nrf_read_register 007A             _nrf_write_command 03FA  
         __end_of_nrf_command 04AD            ?_nrf_write_command 0070                    ?_nrf_setup 007C  
            ?_nrf_set_rx_mode 0070              ?_SPI_init_master 0070     __end_of_nrf_read_register 03D0  
         ??_nrf_write_command 0071            __end_of__stringtab 0013     __end_of_nrf_write_command 040A  
                    __ptext10 03DD                      __ptext11 03FA                      __ptext12 03EB  
                    __ptext13 04AD                      __ptext14 03B8                      __ptext15 04E4  
                    __ptext16 05CB                      __ptext17 03AC         nrf_read_register@data 0078  
          _nrf_data_available 03DD                      _nrf_read 0440                nrf_command@len 0072  
         ?_nrf_data_available 0070                      main@data 003C                    _RADIO_ADDR 00E0  
                 _nrf_command 047C        nrf_command@NRF_command 0075          ??_nrf_data_available 0073  
                   sprintf@ap 0072                     sprintf@cp 0073                     sprintf@sp 0020  
           UART_init@baudrate 0026                   ??_nrf_setup 0020                     stringcode 000D  
                  _OSCCONbits 008F                      sprintf@c 0075                      sprintf@f 0022  
                    stringdir 000D                      stringtab 0003                  ___aldiv@sign 0021  
     nrf_write_command@status 0072             nrf_command@status 0076                    _UART_write 03B8  
           ??_UART_write_text 0073  
