

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Mar 27 02:41:48 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31     0000                     
    32                           ; Generated 09/02/2023 GMT
    33                           ; 
    34                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66     0000                     	;# 
    67     0001                     	;# 
    68     0002                     	;# 
    69     0003                     	;# 
    70     0004                     	;# 
    71     0005                     	;# 
    72     0006                     	;# 
    73     0007                     	;# 
    74     0008                     	;# 
    75     0009                     	;# 
    76     000A                     	;# 
    77     000B                     	;# 
    78     000C                     	;# 
    79     000D                     	;# 
    80     000E                     	;# 
    81     000E                     	;# 
    82     000F                     	;# 
    83     0010                     	;# 
    84     0011                     	;# 
    85     0012                     	;# 
    86     0013                     	;# 
    87     0014                     	;# 
    88     0015                     	;# 
    89     0015                     	;# 
    90     0016                     	;# 
    91     0017                     	;# 
    92     0018                     	;# 
    93     0019                     	;# 
    94     001A                     	;# 
    95     001B                     	;# 
    96     001B                     	;# 
    97     001C                     	;# 
    98     001D                     	;# 
    99     001E                     	;# 
   100     001F                     	;# 
   101     0081                     	;# 
   102     0085                     	;# 
   103     0086                     	;# 
   104     0087                     	;# 
   105     0088                     	;# 
   106     0089                     	;# 
   107     008C                     	;# 
   108     008D                     	;# 
   109     008E                     	;# 
   110     008F                     	;# 
   111     0090                     	;# 
   112     0091                     	;# 
   113     0092                     	;# 
   114     0093                     	;# 
   115     0093                     	;# 
   116     0093                     	;# 
   117     0094                     	;# 
   118     0095                     	;# 
   119     0096                     	;# 
   120     0097                     	;# 
   121     0098                     	;# 
   122     0099                     	;# 
   123     009A                     	;# 
   124     009B                     	;# 
   125     009C                     	;# 
   126     009D                     	;# 
   127     009E                     	;# 
   128     009F                     	;# 
   129     0105                     	;# 
   130     0107                     	;# 
   131     0108                     	;# 
   132     0109                     	;# 
   133     010C                     	;# 
   134     010C                     	;# 
   135     010D                     	;# 
   136     010E                     	;# 
   137     010F                     	;# 
   138     0185                     	;# 
   139     0187                     	;# 
   140     0188                     	;# 
   141     0189                     	;# 
   142     018C                     	;# 
   143     018D                     	;# 
   144     0000                     	;# 
   145     0001                     	;# 
   146     0002                     	;# 
   147     0003                     	;# 
   148     0004                     	;# 
   149     0005                     	;# 
   150     0006                     	;# 
   151     0007                     	;# 
   152     0008                     	;# 
   153     0009                     	;# 
   154     000A                     	;# 
   155     000B                     	;# 
   156     000C                     	;# 
   157     000D                     	;# 
   158     000E                     	;# 
   159     000E                     	;# 
   160     000F                     	;# 
   161     0010                     	;# 
   162     0011                     	;# 
   163     0012                     	;# 
   164     0013                     	;# 
   165     0014                     	;# 
   166     0015                     	;# 
   167     0015                     	;# 
   168     0016                     	;# 
   169     0017                     	;# 
   170     0018                     	;# 
   171     0019                     	;# 
   172     001A                     	;# 
   173     001B                     	;# 
   174     001B                     	;# 
   175     001C                     	;# 
   176     001D                     	;# 
   177     001E                     	;# 
   178     001F                     	;# 
   179     0081                     	;# 
   180     0085                     	;# 
   181     0086                     	;# 
   182     0087                     	;# 
   183     0088                     	;# 
   184     0089                     	;# 
   185     008C                     	;# 
   186     008D                     	;# 
   187     008E                     	;# 
   188     008F                     	;# 
   189     0090                     	;# 
   190     0091                     	;# 
   191     0092                     	;# 
   192     0093                     	;# 
   193     0093                     	;# 
   194     0093                     	;# 
   195     0094                     	;# 
   196     0095                     	;# 
   197     0096                     	;# 
   198     0097                     	;# 
   199     0098                     	;# 
   200     0099                     	;# 
   201     009A                     	;# 
   202     009B                     	;# 
   203     009C                     	;# 
   204     009D                     	;# 
   205     009E                     	;# 
   206     009F                     	;# 
   207     0105                     	;# 
   208     0107                     	;# 
   209     0108                     	;# 
   210     0109                     	;# 
   211     010C                     	;# 
   212     010C                     	;# 
   213     010D                     	;# 
   214     010E                     	;# 
   215     010F                     	;# 
   216     0185                     	;# 
   217     0187                     	;# 
   218     0188                     	;# 
   219     0189                     	;# 
   220     018C                     	;# 
   221     018D                     	;# 
   222                           
   223                           	psect	idataBANK0
   224     0439                     __pidataBANK0:
   225                           
   226                           ;initializer for _RXTX_ADDR
   227     0439  34B5               	retlw	181
   228     043A  3423               	retlw	35
   229     043B  34A5               	retlw	165
   230     0013                     _SSPBUF	set	19
   231     0014                     _SSPCON	set	20
   232     001A                     _RCREG	set	26
   233     0019                     _TXREG	set	25
   234     0042                     _RD2	set	66
   235     0043                     _RD3	set	67
   236     0065                     _RCIF	set	101
   237     00C4                     _CREN	set	196
   238     00C7                     _SPEN	set	199
   239     008F                     _OSCCONbits	set	143
   240     0088                     _TRISDbits	set	136
   241     0087                     _TRISCbits	set	135
   242     0094                     _SSPSTAT	set	148
   243     0099                     _SPBRG	set	153
   244     04A0                     _BF	set	1184
   245     04A7                     _SMP	set	1191
   246     04A6                     _CKE	set	1190
   247     04C1                     _TRMT	set	1217
   248     04C5                     _TXEN	set	1221
   249     043E                     _TRISC6	set	1086
   250     043F                     _TRISC7	set	1087
   251     04C4                     _SYNC	set	1220
   252     04C2                     _BRGH	set	1218
   253                           
   254                           	psect	strings
   255     0003                     __pstrings:
   256     0003                     stringtab:
   257     0003                     __stringtab:
   258     0003                     stringcode:	
   259                           ;	String table - string pointers are 1 byte each
   260                           
   261     0003                     stringdir:
   262     0003  3000               	movlw	high stringdir
   263     0004  008A               	movwf	10
   264     0005  0804               	movf	4,w
   265     0006  0A84               	incf	4,f
   266     0007  0782               	addwf	2,f
   267     0008                     __stringbase:
   268     0008  3400               	retlw	0
   269     0009                     __end_of__stringtab:
   270     0009                     STR_1:
   271     0009  3425               	retlw	37	;'%'
   272     000A  3463               	retlw	99	;'c'
   273     000B  3425               	retlw	37	;'%'
   274     000C  3463               	retlw	99	;'c'
   275     000D  3425               	retlw	37	;'%'
   276     000E  3463               	retlw	99	;'c'
   277     000F  3425               	retlw	37	;'%'
   278     0010  3463               	retlw	99	;'c'
   279     0011  3425               	retlw	37	;'%'
   280     0012  3463               	retlw	99	;'c'
   281     0013  3425               	retlw	37	;'%'
   282     0014  3463               	retlw	99	;'c'
   283     0015  3425               	retlw	37	;'%'
   284     0016  3463               	retlw	99	;'c'
   285     0017  3425               	retlw	37	;'%'
   286     0018  3463               	retlw	99	;'c'
   287     0019  340A               	retlw	10
   288     001A  3400               	retlw	0
   289     001B                     STR_3:
   290     001B  3443               	retlw	67	;'C'
   291     001C  3468               	retlw	104	;'h'
   292     001D  3461               	retlw	97	;'a'
   293     001E  3472               	retlw	114	;'r'
   294     001F  3420               	retlw	32	;' '
   295     0020  3473               	retlw	115	;'s'
   296     0021  3465               	retlw	101	;'e'
   297     0022  346E               	retlw	110	;'n'
   298     0023  3474               	retlw	116	;'t'
   299     0024  340A               	retlw	10
   300     0025  3400               	retlw	0
   301     0026                     STR_6:
   302     0026  3442               	retlw	66	;'B'
   303     0027  344F               	retlw	79	;'O'
   304     0028  344F               	retlw	79	;'O'
   305     0029  3454               	retlw	84	;'T'
   306     002A  3445               	retlw	69	;'E'
   307     002B  3444               	retlw	68	;'D'
   308     002C  340A               	retlw	10
   309     002D  3400               	retlw	0
   310     002E                     STR_2:
   311     002E  3449               	retlw	73	;'I'
   312     002F  346E               	retlw	110	;'n'
   313     0030  3469               	retlw	105	;'i'
   314     0031  3474               	retlw	116	;'t'
   315     0032  340A               	retlw	10
   316     0033  3400               	retlw	0
   317     0034                     STR_4:
   318     0034  3452               	retlw	82	;'R'
   319     0035  3458               	retlw	88	;'X'
   320     0036  3420               	retlw	32	;' '
   321     0037  343D               	retlw	61	;'='
   322     0038  3420               	retlw	32	;' '
   323     0039  3400               	retlw	0
   324     003A                     STR_9:
   325     003A  3442               	retlw	66	;'B'
   326     003B  3400               	retlw	0
   327     003C                     STR_7:
   328     003C  344B               	retlw	75	;'K'
   329     003D  3400               	retlw	0
   330     003E                     STR_10:
   331     003E  344C               	retlw	76	;'L'
   332     003F  3400               	retlw	0
   333     0040                     STR_8:
   334     0040  3456               	retlw	86	;'V'
   335     0041  3400               	retlw	0
   336     002C                     
   337                           	psect	cinit
   338     07E0                     start_initialization:	
   339                           ; #config settings
   340                           
   341     07E0                     __initialization:
   342                           
   343                           ; Initialize objects allocated to BANK0
   344     07E0  120A  118A  2439  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   345     07E5  00C7               	movwf	__pdataBANK0& (0+127)
   346     07E6  120A  118A  243A  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   347     07EB  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   348     07EC  120A  118A  243B  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   349     07F1  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   350                           
   351                           ; Clear objects allocated to BANK0
   352     07F2  01BD               	clrf	__pbssBANK0& (0+127)
   353     07F3  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   354     07F4  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   355     07F5  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   356     07F6  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   357     07F7  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   358     07F8  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   359     07F9  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   360     07FA  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   361     07FB  01C6               	clrf	(__pbssBANK0+9)& (0+127)
   362     07FC                     end_of_initialization:	
   363                           ;End of C runtime variable initialization code
   364                           
   365     07FC                     __end_of__initialization:
   366     07FC  0183               	clrf	3
   367     07FD  120A  118A  2DFD   	ljmp	_main	;jump to C main() function
   368                           
   369                           	psect	bssBANK0
   370     003D                     __pbssBANK0:
   371     003D                     char_to_binary_string@output:
   372     003D                     	ds	10
   373                           
   374                           	psect	dataBANK0
   375     0047                     __pdataBANK0:
   376     0047                     _RXTX_ADDR:
   377     0047                     	ds	3
   378                           
   379                           	psect	cstackCOMMON
   380     0070                     __pcstackCOMMON:
   381     0070                     ?_UART_Write:
   382     0070                     ??_UART_Write:	
   383                           ; 1 bytes @ 0x0
   384                           
   385     0070                     ?_UART_Write_Text:	
   386                           ; 1 bytes @ 0x0
   387                           
   388     0070                     ?_SPI_init_master:	
   389                           ; 1 bytes @ 0x0
   390                           
   391     0070                     ??_SPI_init_master:	
   392                           ; 1 bytes @ 0x0
   393                           
   394     0070                     ?_SPI_write:	
   395                           ; 1 bytes @ 0x0
   396                           
   397     0070                     ??_SPI_write:	
   398                           ; 1 bytes @ 0x0
   399                           
   400     0070                     ?_arrcpy:	
   401                           ; 1 bytes @ 0x0
   402                           
   403     0070                     ?_nrf_write_command:	
   404                           ; 1 bytes @ 0x0
   405                           
   406     0070                     ?_nrf_flush_rxtx:	
   407                           ; 1 bytes @ 0x0
   408                           
   409     0070                     ?_nrf_set_tx_mode:	
   410                           ; 1 bytes @ 0x0
   411                           
   412     0070                     ?_nrf_setup:	
   413                           ; 1 bytes @ 0x0
   414                           
   415     0070                     ?_nrf_tx_char:	
   416                           ; 1 bytes @ 0x0
   417                           
   418     0070                     ?_SendChar:	
   419                           ; 1 bytes @ 0x0
   420                           
   421     0070                     ?_main:	
   422                           ; 1 bytes @ 0x0
   423                           
   424     0070                     ?___aldiv:	
   425                           ; 2 bytes @ 0x0
   426                           
   427     0070                     UART_Write@data:	
   428                           ; 4 bytes @ 0x0
   429                           
   430     0070                     SPI_write@data:	
   431                           ; 1 bytes @ 0x0
   432                           
   433     0070                     arrcpy@src:	
   434                           ; 1 bytes @ 0x0
   435                           
   436     0070                     ___aldiv@divisor:	
   437                           ; 1 bytes @ 0x0
   438                           
   439                           
   440                           ; 4 bytes @ 0x0
   441     0070                     	ds	1
   442     0071                     ??_UART_Write_Text:
   443     0071                     ?_nrf_command:	
   444                           ; 1 bytes @ 0x1
   445                           
   446     0071                     ??_nrf_write_command:	
   447                           ; 1 bytes @ 0x1
   448                           
   449     0071                     arrcpy@len:	
   450                           ; 1 bytes @ 0x1
   451                           
   452     0071                     nrf_command@data:	
   453                           ; 1 bytes @ 0x1
   454                           
   455     0071                     nrf_write_command@command:	
   456                           ; 1 bytes @ 0x1
   457                           
   458     0071                     UART_Write_Text@i:	
   459                           ; 1 bytes @ 0x1
   460                           
   461                           
   462                           ; 2 bytes @ 0x1
   463     0071                     	ds	1
   464     0072                     ??_arrcpy:
   465     0072                     nrf_command@len:	
   466                           ; 1 bytes @ 0x2
   467                           
   468     0072                     nrf_write_command@status:	
   469                           ; 1 bytes @ 0x2
   470                           
   471                           
   472                           ; 1 bytes @ 0x2
   473     0072                     	ds	1
   474     0073                     ??_nrf_command:
   475     0073                     UART_Write_Text@text:	
   476                           ; 1 bytes @ 0x3
   477                           
   478                           
   479                           ; 1 bytes @ 0x3
   480     0073                     	ds	1
   481     0074                     arrcpy@dst:
   482     0074                     ___aldiv@dividend:	
   483                           ; 1 bytes @ 0x4
   484                           
   485                           
   486                           ; 4 bytes @ 0x4
   487     0074                     	ds	1
   488     0075                     arrcpy@i:
   489     0075                     nrf_command@command:	
   490                           ; 1 bytes @ 0x5
   491                           
   492                           
   493                           ; 1 bytes @ 0x5
   494     0075                     	ds	1
   495     0076                     nrf_command@status:
   496                           
   497                           ; 1 bytes @ 0x6
   498     0076                     	ds	1
   499     0077                     nrf_command@i:
   500                           
   501                           ; 1 bytes @ 0x7
   502     0077                     	ds	1
   503     0078                     ?_nrf_write_register:
   504     0078                     ?_nrf_read_register:	
   505                           ; 1 bytes @ 0x8
   506                           
   507     0078                     ??___aldiv:	
   508                           ; 1 bytes @ 0x8
   509                           
   510     0078                     nrf_write_register@data:	
   511                           ; 1 bytes @ 0x8
   512                           
   513     0078                     nrf_read_register@data:	
   514                           ; 1 bytes @ 0x8
   515                           
   516                           
   517                           ; 1 bytes @ 0x8
   518     0078                     	ds	1
   519     0079                     nrf_write_register@len:
   520     0079                     nrf_read_register@len:	
   521                           ; 1 bytes @ 0x9
   522                           
   523                           
   524                           ; 1 bytes @ 0x9
   525     0079                     	ds	1
   526     007A                     ??_nrf_write_register:
   527     007A                     ??_nrf_read_register:	
   528                           ; 1 bytes @ 0xA
   529                           
   530     007A                     nrf_write_register@reg:	
   531                           ; 1 bytes @ 0xA
   532                           
   533     007A                     nrf_read_register@reg:	
   534                           ; 1 bytes @ 0xA
   535                           
   536                           
   537                           ; 1 bytes @ 0xA
   538     007A                     	ds	1
   539     007B                     ?_nrf_write_payload:
   540     007B                     ??_nrf_flush_rxtx:	
   541                           ; 1 bytes @ 0xB
   542                           
   543     007B                     ??_nrf_set_tx_mode:	
   544                           ; 1 bytes @ 0xB
   545                           
   546     007B                     nrf_write_payload@len:	
   547                           ; 1 bytes @ 0xB
   548                           
   549     007B                     nrf_flush_rxtx@data:	
   550                           ; 1 bytes @ 0xB
   551                           
   552     007B                     nrf_set_tx_mode@config:	
   553                           ; 1 bytes @ 0xB
   554                           
   555                           
   556                           ; 1 bytes @ 0xB
   557     007B                     	ds	1
   558     007C                     ??_nrf_write_payload:
   559     007C                     ??_nrf_setup:	
   560                           ; 1 bytes @ 0xC
   561                           
   562                           
   563                           ; 1 bytes @ 0xC
   564     007C                     	ds	1
   565     007D                     nrf_write_payload@data:
   566                           
   567                           ; 1 bytes @ 0xD
   568     007D                     	ds	1
   569     007E                     ??_nrf_tx_char:
   570     007E                     ??_SendChar:	
   571                           ; 1 bytes @ 0xE
   572                           
   573                           
   574                           	psect	cstackBANK0
   575     0020                     __pcstackBANK0:	
   576                           ; 1 bytes @ 0xE
   577                           
   578     0020                     nrf_tx_char@stat:
   579     0020                     ___aldiv@counter:	
   580                           ; 1 bytes @ 0x0
   581                           
   582     0020                     nrf_setup@data:	
   583                           ; 1 bytes @ 0x0
   584                           
   585                           
   586                           ; 5 bytes @ 0x0
   587     0020                     	ds	1
   588     0021                     nrf_tx_char@ch:
   589     0021                     ___aldiv@sign:	
   590                           ; 1 bytes @ 0x1
   591                           
   592                           
   593                           ; 1 bytes @ 0x1
   594     0021                     	ds	1
   595     0022                     nrf_tx_char@data:
   596     0022                     ___aldiv@quotient:	
   597                           ; 1 bytes @ 0x2
   598                           
   599                           
   600                           ; 4 bytes @ 0x2
   601     0022                     	ds	1
   602     0023                     SendChar@args:
   603                           
   604                           ; 1 bytes @ 0x3
   605     0023                     	ds	3
   606     0026                     ?_UART_Init:
   607     0026                     UART_Init@baudrate:	
   608                           ; 1 bytes @ 0x6
   609                           
   610                           
   611                           ; 4 bytes @ 0x6
   612     0026                     	ds	4
   613     002A                     UART_Init@_XTAL_FREQ:
   614                           
   615                           ; 4 bytes @ 0xA
   616     002A                     	ds	4
   617     002E                     ??_UART_Init:
   618                           
   619                           ; 1 bytes @ 0xE
   620     002E                     	ds	12
   621     003A                     ??_main:
   622                           
   623                           ; 1 bytes @ 0x1A
   624     003A                     	ds	3
   625                           
   626                           	psect	maintext
   627     05FD                     __pmaintext:	
   628 ;;
   629 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   630 ;;
   631 ;; *************** function _main *****************
   632 ;; Defined at:
   633 ;;		line 317 in file "main.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;		None
   636 ;; Auto vars:     Size  Location     Type
   637 ;;		None
   638 ;; Return value:  Size  Location     Type
   639 ;;                  2  181[None  ] int 
   640 ;; Registers used:
   641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   642 ;; Tracked objects:
   643 ;;		On entry : B00/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   647 ;;      Params:         0       0       0       0       0
   648 ;;      Locals:         0       0       0       0       0
   649 ;;      Temps:          0       3       0       0       0
   650 ;;      Totals:         0       3       0       0       0
   651 ;;Total ram usage:        3 bytes
   652 ;; Hardware stack levels required when called: 6
   653 ;; This function calls:
   654 ;;		_SPI_init_master
   655 ;;		_SendChar
   656 ;;		_UART_Init
   657 ;;		_UART_Write_Text
   658 ;;		_nrf_setup
   659 ;; This function is called by:
   660 ;;		Startup code after reset
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664     05FD                     _main:	
   665                           ;psect for function _main
   666                           
   667     05FD                     l1422:	
   668                           ;incstack = 0
   669                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   670                           
   671                           
   672                           ;main.c: 319:     TRISDbits.TRISD2 = 0;
   673     05FD  1683               	bsf	3,5	;RP0=1, select bank1
   674     05FE  1303               	bcf	3,6	;RP1=0, select bank1
   675     05FF  1108               	bcf	8,2	;volatile
   676                           
   677                           ;main.c: 320:     TRISDbits.TRISD3 = 0;
   678     0600  1188               	bcf	8,3	;volatile
   679     0601                     l1424:
   680                           
   681                           ;main.c: 322:     OSCCONbits.IRCF = 111;
   682     0601  3070               	movlw	112
   683     0602  048F               	iorwf	15,f	;volatile
   684     0603                     l1426:
   685                           
   686                           ;main.c: 324:     UART_Init(9600, 8000000UL);
   687     0603  3000               	movlw	0
   688     0604  1283               	bcf	3,5	;RP0=0, select bank0
   689     0605  1303               	bcf	3,6	;RP1=0, select bank0
   690     0606  00A9               	movwf	UART_Init@baudrate+3
   691     0607  3000               	movlw	0
   692     0608  00A8               	movwf	UART_Init@baudrate+2
   693     0609  3025               	movlw	37
   694     060A  00A7               	movwf	UART_Init@baudrate+1
   695     060B  3080               	movlw	128
   696     060C  00A6               	movwf	UART_Init@baudrate
   697     060D  3000               	movlw	0
   698     060E  00AD               	movwf	UART_Init@_XTAL_FREQ+3
   699     060F  307A               	movlw	122
   700     0610  00AC               	movwf	UART_Init@_XTAL_FREQ+2
   701     0611  3012               	movlw	18
   702     0612  00AB               	movwf	UART_Init@_XTAL_FREQ+1
   703     0613  3000               	movlw	0
   704     0614  00AA               	movwf	UART_Init@_XTAL_FREQ
   705     0615  120A  118A  2592  120A  118A  	fcall	_UART_Init
   706     061A                     l1428:
   707                           
   708                           ;main.c: 326:     UART_Write_Text("BOOTED\n");
   709     061A  301E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   710     061B  120A  118A  2517  120A  118A  	fcall	_UART_Write_Text
   711     0620                     l1430:
   712                           
   713                           ;main.c: 328:     SPI_init_master();
   714     0620  120A  118A  2454  120A  118A  	fcall	_SPI_init_master
   715     0625                     l1432:
   716                           
   717                           ;main.c: 330:     _delay((unsigned long)((10)*(8000000UL/4000.0)));
   718     0625  301A               	movlw	26
   719     0626  1283               	bcf	3,5	;RP0=0, select bank0
   720     0627  1303               	bcf	3,6	;RP1=0, select bank0
   721     0628  00BB               	movwf	??_main+1
   722     0629  30F7               	movlw	247
   723     062A  00BA               	movwf	??_main
   724     062B                     u607:
   725     062B  0BBA               	decfsz	??_main,f
   726     062C  2E2B               	goto	u607
   727     062D  0BBB               	decfsz	??_main+1,f
   728     062E  2E2B               	goto	u607
   729     062F  2E30               	nop2
   730     0630                     l1434:
   731                           
   732                           ;main.c: 331:     nrf_setup();
   733     0630  120A  118A  2731  120A  118A  	fcall	_nrf_setup
   734     0635                     l1436:
   735                           
   736                           ;main.c: 333:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   737     0635  3006               	movlw	6
   738     0636  1283               	bcf	3,5	;RP0=0, select bank0
   739     0637  1303               	bcf	3,6	;RP1=0, select bank0
   740     0638  00BB               	movwf	??_main+1
   741     0639  302F               	movlw	47
   742     063A  00BA               	movwf	??_main
   743     063B                     u617:
   744     063B  0BBA               	decfsz	??_main,f
   745     063C  2E3B               	goto	u617
   746     063D  0BBB               	decfsz	??_main+1,f
   747     063E  2E3B               	goto	u617
   748     063F  2E40               	nop2
   749     0640                     l1438:
   750                           
   751                           ;main.c: 336:     {;main.c: 338:         SendChar("K");
   752     0640  3034               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   753     0641  120A  118A  24BC  120A  118A  	fcall	_SendChar
   754     0646                     l1440:
   755                           
   756                           ;main.c: 339:         _delay((unsigned long)((500)*(8000000UL/4000.0)));
   757     0646  3006               	movlw	6
   758     0647  1283               	bcf	3,5	;RP0=0, select bank0
   759     0648  1303               	bcf	3,6	;RP1=0, select bank0
   760     0649  00BC               	movwf	??_main+2
   761     064A  3013               	movlw	19
   762     064B  00BB               	movwf	??_main+1
   763     064C  30AD               	movlw	173
   764     064D  00BA               	movwf	??_main
   765     064E                     u627:
   766     064E  0BBA               	decfsz	??_main,f
   767     064F  2E4E               	goto	u627
   768     0650  0BBB               	decfsz	??_main+1,f
   769     0651  2E4E               	goto	u627
   770     0652  0BBC               	decfsz	??_main+2,f
   771     0653  2E4E               	goto	u627
   772     0654                     l1442:
   773                           
   774                           ;main.c: 340:         SendChar("V");
   775     0654  3038               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   776     0655  120A  118A  24BC  120A  118A  	fcall	_SendChar
   777     065A                     l1444:
   778                           
   779                           ;main.c: 341:         _delay((unsigned long)((500)*(8000000UL/4000.0)));
   780     065A  3006               	movlw	6
   781     065B  1283               	bcf	3,5	;RP0=0, select bank0
   782     065C  1303               	bcf	3,6	;RP1=0, select bank0
   783     065D  00BC               	movwf	??_main+2
   784     065E  3013               	movlw	19
   785     065F  00BB               	movwf	??_main+1
   786     0660  30AD               	movlw	173
   787     0661  00BA               	movwf	??_main
   788     0662                     u637:
   789     0662  0BBA               	decfsz	??_main,f
   790     0663  2E62               	goto	u637
   791     0664  0BBB               	decfsz	??_main+1,f
   792     0665  2E62               	goto	u637
   793     0666  0BBC               	decfsz	??_main+2,f
   794     0667  2E62               	goto	u637
   795     0668                     l1446:
   796                           
   797                           ;main.c: 342:         SendChar("B");
   798     0668  3032               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   799     0669  120A  118A  24BC  120A  118A  	fcall	_SendChar
   800     066E                     l1448:
   801                           
   802                           ;main.c: 343:         _delay((unsigned long)((500)*(8000000UL/4000.0)));
   803     066E  3006               	movlw	6
   804     066F  1283               	bcf	3,5	;RP0=0, select bank0
   805     0670  1303               	bcf	3,6	;RP1=0, select bank0
   806     0671  00BC               	movwf	??_main+2
   807     0672  3013               	movlw	19
   808     0673  00BB               	movwf	??_main+1
   809     0674  30AD               	movlw	173
   810     0675  00BA               	movwf	??_main
   811     0676                     u647:
   812     0676  0BBA               	decfsz	??_main,f
   813     0677  2E76               	goto	u647
   814     0678  0BBB               	decfsz	??_main+1,f
   815     0679  2E76               	goto	u647
   816     067A  0BBC               	decfsz	??_main+2,f
   817     067B  2E76               	goto	u647
   818     067C                     l1450:
   819                           
   820                           ;main.c: 344:         SendChar("L");
   821     067C  3036               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
   822     067D  120A  118A  24BC  120A  118A  	fcall	_SendChar
   823     0682                     l1452:
   824                           
   825                           ;main.c: 345:         _delay((unsigned long)((500)*(8000000UL/4000.0)));
   826     0682  3006               	movlw	6
   827     0683  1283               	bcf	3,5	;RP0=0, select bank0
   828     0684  1303               	bcf	3,6	;RP1=0, select bank0
   829     0685  00BC               	movwf	??_main+2
   830     0686  3013               	movlw	19
   831     0687  00BB               	movwf	??_main+1
   832     0688  30AD               	movlw	173
   833     0689  00BA               	movwf	??_main
   834     068A                     u657:
   835     068A  0BBA               	decfsz	??_main,f
   836     068B  2E8A               	goto	u657
   837     068C  0BBB               	decfsz	??_main+1,f
   838     068D  2E8A               	goto	u657
   839     068E  0BBC               	decfsz	??_main+2,f
   840     068F  2E8A               	goto	u657
   841     0690  2E40               	goto	l1438
   842     0691  120A  118A  2800   	ljmp	start
   843     0694                     __end_of_main:
   844                           
   845                           	psect	text1
   846     0731                     __ptext1:	
   847 ;; *************** function _nrf_setup *****************
   848 ;; Defined at:
   849 ;;		line 233 in file "main.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  data            5    0[BANK0 ] unsigned char [5]
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   863 ;;      Params:         0       0       0       0       0
   864 ;;      Locals:         0       5       0       0       0
   865 ;;      Temps:          2       0       0       0       0
   866 ;;      Totals:         2       5       0       0       0
   867 ;;Total ram usage:        7 bytes
   868 ;; Hardware stack levels used: 1
   869 ;; Hardware stack levels required when called: 4
   870 ;; This function calls:
   871 ;;		_UART_Write_Text
   872 ;;		_arrcpy
   873 ;;		_nrf_flush_rxtx
   874 ;;		_nrf_write_register
   875 ;; This function is called by:
   876 ;;		_main
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880     0731                     _nrf_setup:	
   881                           ;psect for function _nrf_setup
   882                           
   883     0731                     l1290:	
   884                           ;incstack = 0
   885                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   886                           
   887                           
   888                           ;main.c: 235:     RD3 = 1;
   889     0731  1283               	bcf	3,5	;RP0=0, select bank0
   890     0732  1303               	bcf	3,6	;RP1=0, select bank0
   891     0733  1588               	bsf	8,3	;volatile
   892                           
   893                           ;main.c: 236:     RD2 = 0;
   894     0734  1108               	bcf	8,2	;volatile
   895     0735                     l1292:
   896                           
   897                           ;main.c: 239:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   898     0735  3006               	movlw	6
   899     0736  00FD               	movwf	??_nrf_setup+1
   900     0737  3030               	movlw	48
   901     0738  00FC               	movwf	??_nrf_setup
   902     0739                     u667:
   903     0739  0BFC               	decfsz	??_nrf_setup,f
   904     073A  2F39               	goto	u667
   905     073B  0BFD               	decfsz	??_nrf_setup+1,f
   906     073C  2F39               	goto	u667
   907     073D  0000               	nop
   908                           
   909                           ;main.c: 241:     uint8_t data[5];;main.c: 243:     data[0] = 0x0B;
   910     073E  300B               	movlw	11
   911     073F  1283               	bcf	3,5	;RP0=0, select bank0
   912     0740  1303               	bcf	3,6	;RP1=0, select bank0
   913     0741  00A0               	movwf	nrf_setup@data
   914     0742                     l1294:
   915                           
   916                           ;main.c: 244:     nrf_write_register(0x00, &data, 1);
   917     0742  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
   918     0743  00F8               	movwf	nrf_write_register@data
   919     0744  01F9               	clrf	nrf_write_register@len
   920     0745  0AF9               	incf	nrf_write_register@len,f
   921     0746  3000               	movlw	0
   922     0747  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
   923     074C                     l1296:
   924                           
   925                           ;main.c: 245:     data[0] = 0x00;
   926     074C  1283               	bcf	3,5	;RP0=0, select bank0
   927     074D  1303               	bcf	3,6	;RP1=0, select bank0
   928     074E  01A0               	clrf	nrf_setup@data
   929     074F                     l1298:
   930                           
   931                           ;main.c: 246:     nrf_write_register(0x01, &data, 1);
   932     074F  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
   933     0750  00F8               	movwf	nrf_write_register@data
   934     0751  01F9               	clrf	nrf_write_register@len
   935     0752  0AF9               	incf	nrf_write_register@len,f
   936     0753  3001               	movlw	1
   937     0754  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
   938     0759                     l1300:
   939                           
   940                           ;main.c: 247:     data[0] = 0x01;
   941     0759  1283               	bcf	3,5	;RP0=0, select bank0
   942     075A  1303               	bcf	3,6	;RP1=0, select bank0
   943     075B  01A0               	clrf	nrf_setup@data
   944     075C  0AA0               	incf	nrf_setup@data,f
   945     075D                     l1302:
   946                           
   947                           ;main.c: 248:     nrf_write_register(0x02, &data, 1);
   948     075D  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
   949     075E  00F8               	movwf	nrf_write_register@data
   950     075F  01F9               	clrf	nrf_write_register@len
   951     0760  0AF9               	incf	nrf_write_register@len,f
   952     0761  3002               	movlw	2
   953     0762  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
   954     0767                     l1304:
   955                           
   956                           ;main.c: 249:     data[0] = 0x01;
   957     0767  1283               	bcf	3,5	;RP0=0, select bank0
   958     0768  1303               	bcf	3,6	;RP1=0, select bank0
   959     0769  01A0               	clrf	nrf_setup@data
   960     076A  0AA0               	incf	nrf_setup@data,f
   961     076B                     l1306:
   962                           
   963                           ;main.c: 250:     nrf_write_register(0x03, &data, 1);
   964     076B  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
   965     076C  00F8               	movwf	nrf_write_register@data
   966     076D  01F9               	clrf	nrf_write_register@len
   967     076E  0AF9               	incf	nrf_write_register@len,f
   968     076F  3003               	movlw	3
   969     0770  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
   970     0775                     l1308:
   971                           
   972                           ;main.c: 251:     data[0] = 0x00;
   973     0775  1283               	bcf	3,5	;RP0=0, select bank0
   974     0776  1303               	bcf	3,6	;RP1=0, select bank0
   975     0777  01A0               	clrf	nrf_setup@data
   976     0778                     l1310:
   977                           
   978                           ;main.c: 252:     nrf_write_register(0x04, &data, 1);
   979     0778  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
   980     0779  00F8               	movwf	nrf_write_register@data
   981     077A  01F9               	clrf	nrf_write_register@len
   982     077B  0AF9               	incf	nrf_write_register@len,f
   983     077C  3004               	movlw	4
   984     077D  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
   985     0782                     l1312:
   986                           
   987                           ;main.c: 253:     data[0] = 0x01;
   988     0782  1283               	bcf	3,5	;RP0=0, select bank0
   989     0783  1303               	bcf	3,6	;RP1=0, select bank0
   990     0784  01A0               	clrf	nrf_setup@data
   991     0785  0AA0               	incf	nrf_setup@data,f
   992     0786                     l1314:
   993                           
   994                           ;main.c: 254:     nrf_write_register(0x05, &data, 1);
   995     0786  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
   996     0787  00F8               	movwf	nrf_write_register@data
   997     0788  01F9               	clrf	nrf_write_register@len
   998     0789  0AF9               	incf	nrf_write_register@len,f
   999     078A  3005               	movlw	5
  1000     078B  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
  1001                           
  1002                           ;main.c: 255:     data[0] = 0x26;
  1003     0790  3026               	movlw	38
  1004     0791  1283               	bcf	3,5	;RP0=0, select bank0
  1005     0792  1303               	bcf	3,6	;RP1=0, select bank0
  1006     0793  00A0               	movwf	nrf_setup@data
  1007     0794                     l1316:
  1008                           
  1009                           ;main.c: 256:     nrf_write_register(0x06, &data, 1);
  1010     0794  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1011     0795  00F8               	movwf	nrf_write_register@data
  1012     0796  01F9               	clrf	nrf_write_register@len
  1013     0797  0AF9               	incf	nrf_write_register@len,f
  1014     0798  3006               	movlw	6
  1015     0799  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
  1016     079E                     l1318:
  1017                           
  1018                           ;main.c: 257:     data[0] = 0x01;
  1019     079E  1283               	bcf	3,5	;RP0=0, select bank0
  1020     079F  1303               	bcf	3,6	;RP1=0, select bank0
  1021     07A0  01A0               	clrf	nrf_setup@data
  1022     07A1  0AA0               	incf	nrf_setup@data,f
  1023     07A2                     l1320:
  1024                           
  1025                           ;main.c: 258:     nrf_write_register(0x11, &data, 1);
  1026     07A2  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1027     07A3  00F8               	movwf	nrf_write_register@data
  1028     07A4  01F9               	clrf	nrf_write_register@len
  1029     07A5  0AF9               	incf	nrf_write_register@len,f
  1030     07A6  3011               	movlw	17
  1031     07A7  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
  1032     07AC                     l1322:
  1033                           
  1034                           ;main.c: 260:     arrcpy(data, RXTX_ADDR, sizeof(RXTX_ADDR));
  1035     07AC  3047               	movlw	(low (_RXTX_ADDR| 0))& (0+255)
  1036     07AD  00F0               	movwf	arrcpy@src
  1037     07AE  3003               	movlw	3
  1038     07AF  00F1               	movwf	arrcpy@len
  1039     07B0  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1040     07B1  120A  118A  24D9  120A  118A  	fcall	_arrcpy
  1041     07B6                     l1324:
  1042                           
  1043                           ;main.c: 261:     nrf_write_register(0x0A, data, sizeof(RXTX_ADDR));
  1044     07B6  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1045     07B7  00F8               	movwf	nrf_write_register@data
  1046     07B8  3003               	movlw	3
  1047     07B9  00F9               	movwf	nrf_write_register@len
  1048     07BA  300A               	movlw	10
  1049     07BB  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
  1050     07C0                     l1326:
  1051                           
  1052                           ;main.c: 263:     arrcpy(data, RXTX_ADDR, sizeof(RXTX_ADDR));
  1053     07C0  3047               	movlw	(low (_RXTX_ADDR| 0))& (0+255)
  1054     07C1  00F0               	movwf	arrcpy@src
  1055     07C2  3003               	movlw	3
  1056     07C3  00F1               	movwf	arrcpy@len
  1057     07C4  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1058     07C5  120A  118A  24D9  120A  118A  	fcall	_arrcpy
  1059     07CA                     l1328:
  1060                           
  1061                           ;main.c: 264:     nrf_write_register(0x10, data, sizeof(RXTX_ADDR));
  1062     07CA  3020               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1063     07CB  00F8               	movwf	nrf_write_register@data
  1064     07CC  3003               	movlw	3
  1065     07CD  00F9               	movwf	nrf_write_register@len
  1066     07CE  3010               	movlw	16
  1067     07CF  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
  1068     07D4                     l1330:
  1069                           
  1070                           ;main.c: 266:     nrf_flush_rxtx();
  1071     07D4  120A  118A  24A3  120A  118A  	fcall	_nrf_flush_rxtx
  1072     07D9                     l1332:
  1073                           
  1074                           ;main.c: 268:     UART_Write_Text("Init\n");
  1075     07D9  3026               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1076     07DA  120A  118A  2517  120A  118A  	fcall	_UART_Write_Text
  1077     07DF                     l163:
  1078     07DF  0008               	return
  1079     07E0                     __end_of_nrf_setup:
  1080                           
  1081                           	psect	text2
  1082     04A3                     __ptext2:	
  1083 ;; *************** function _nrf_flush_rxtx *****************
  1084 ;; Defined at:
  1085 ;;		line 180 in file "main.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;		None
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;  data            1   11[COMMON] unsigned char 
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      void 
  1092 ;; Registers used:
  1093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1099 ;;      Params:         0       0       0       0       0
  1100 ;;      Locals:         1       0       0       0       0
  1101 ;;      Temps:          0       0       0       0       0
  1102 ;;      Totals:         1       0       0       0       0
  1103 ;;Total ram usage:        1 bytes
  1104 ;; Hardware stack levels used: 1
  1105 ;; Hardware stack levels required when called: 3
  1106 ;; This function calls:
  1107 ;;		_nrf_write_command
  1108 ;;		_nrf_write_register
  1109 ;; This function is called by:
  1110 ;;		_nrf_setup
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114     04A3                     _nrf_flush_rxtx:	
  1115                           ;psect for function _nrf_flush_rxtx
  1116                           
  1117     04A3                     l1192:	
  1118                           ;incstack = 0
  1119                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1120                           
  1121                           
  1122                           ;main.c: 182:     uint8_t data = 0b01110000;
  1123     04A3  3070               	movlw	112
  1124     04A4  00FB               	movwf	nrf_flush_rxtx@data
  1125     04A5                     l1194:
  1126                           
  1127                           ;main.c: 183:     nrf_write_register(0x07, &data, 1);
  1128     04A5  307B               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1129     04A6  00F8               	movwf	nrf_write_register@data
  1130     04A7  01F9               	clrf	nrf_write_register@len
  1131     04A8  0AF9               	incf	nrf_write_register@len,f
  1132     04A9  3007               	movlw	7
  1133     04AA  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
  1134     04AF                     l1196:
  1135                           
  1136                           ;main.c: 184:     nrf_write_command(0b11100001);
  1137     04AF  30E1               	movlw	225
  1138     04B0  120A  118A  247D  120A  118A  	fcall	_nrf_write_command
  1139     04B5                     l1198:
  1140                           
  1141                           ;main.c: 185:     nrf_write_command(0b11100010);
  1142     04B5  30E2               	movlw	226
  1143     04B6  120A  118A  247D  120A  118A  	fcall	_nrf_write_command
  1144     04BB                     l149:
  1145     04BB  0008               	return
  1146     04BC                     __end_of_nrf_flush_rxtx:
  1147                           
  1148                           	psect	text3
  1149     04D9                     __ptext3:	
  1150 ;; *************** function _arrcpy *****************
  1151 ;; Defined at:
  1152 ;;		line 116 in file "main.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  dst             1    wreg     PTR unsigned char 
  1155 ;;		 -> nrf_setup@data(5), 
  1156 ;;  src             1    0[COMMON] PTR unsigned char 
  1157 ;;		 -> RXTX_ADDR(3), 
  1158 ;;  len             1    1[COMMON] unsigned char 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;  dst             1    4[COMMON] PTR unsigned char 
  1161 ;;		 -> nrf_setup@data(5), 
  1162 ;;  i               1    5[COMMON] unsigned char 
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1172 ;;      Params:         2       0       0       0       0
  1173 ;;      Locals:         2       0       0       0       0
  1174 ;;      Temps:          2       0       0       0       0
  1175 ;;      Totals:         6       0       0       0       0
  1176 ;;Total ram usage:        6 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_nrf_setup
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185     04D9                     _arrcpy:	
  1186                           ;psect for function _arrcpy
  1187                           
  1188                           
  1189                           ;incstack = 0
  1190                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0+btemp+1]
  1191                           ;arrcpy@dst stored from wreg
  1192     04D9  00F4               	movwf	arrcpy@dst
  1193     04DA                     l1184:
  1194                           
  1195                           ;main.c: 116: void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);main.c: 117: {;main.c
      +                          : 118:     for (uint8_t i = 0; i < len; i++)
  1196     04DA  01F5               	clrf	arrcpy@i
  1197     04DB  2CEF               	goto	l1190
  1198     04DC                     l1186:
  1199                           
  1200                           ;main.c: 119:     {;main.c: 120:         dst[i] = src[i];
  1201     04DC  0875               	movf	arrcpy@i,w
  1202     04DD  0770               	addwf	arrcpy@src,w
  1203     04DE  00F2               	movwf	??_arrcpy
  1204     04DF  0872               	movf	??_arrcpy,w
  1205     04E0  0084               	movwf	4
  1206     04E1  1383               	bcf	3,7	;select IRP bank0
  1207     04E2  0800               	movf	0,w
  1208     04E3  00FF               	movwf	btemp+1
  1209     04E4  0875               	movf	arrcpy@i,w
  1210     04E5  0774               	addwf	arrcpy@dst,w
  1211     04E6  00F3               	movwf	??_arrcpy+1
  1212     04E7  0873               	movf	??_arrcpy+1,w
  1213     04E8  0084               	movwf	4
  1214     04E9  087F               	movf	btemp+1,w
  1215     04EA  0080               	movwf	0
  1216     04EB                     l1188:
  1217                           
  1218                           ;main.c: 121:     }
  1219     04EB  3001               	movlw	1
  1220     04EC  00FF               	movwf	btemp+1
  1221     04ED  087F               	movf	btemp+1,w
  1222     04EE  07F5               	addwf	arrcpy@i,f
  1223     04EF                     l1190:
  1224     04EF  0871               	movf	arrcpy@len,w
  1225     04F0  0275               	subwf	arrcpy@i,w
  1226     04F1  1C03               	skipc
  1227     04F2  2CF4               	goto	u351
  1228     04F3  2CF5               	goto	u350
  1229     04F4                     u351:
  1230     04F4  2CDC               	goto	l1186
  1231     04F5                     u350:
  1232     04F5                     l128:
  1233     04F5  0008               	return
  1234     04F6                     __end_of_arrcpy:
  1235                           
  1236                           	psect	text4
  1237     0592                     __ptext4:	
  1238 ;; *************** function _UART_Init *****************
  1239 ;; Defined at:
  1240 ;;		line 15 in file "./uart.h"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;  baudrate        4    6[BANK0 ] const long 
  1243 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;		None
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1255 ;;      Params:         0       8       0       0       0
  1256 ;;      Locals:         0       0       0       0       0
  1257 ;;      Temps:          0      12       0       0       0
  1258 ;;      Totals:         0      20       0       0       0
  1259 ;;Total ram usage:       20 bytes
  1260 ;; Hardware stack levels used: 1
  1261 ;; Hardware stack levels required when called: 1
  1262 ;; This function calls:
  1263 ;;		___aldiv
  1264 ;; This function is called by:
  1265 ;;		_main
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269     0592                     _UART_Init:	
  1270                           ;psect for function _UART_Init
  1271                           
  1272     0592                     l1264:	
  1273                           ;incstack = 0
  1274                           ; Regs used in _UART_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1275                           
  1276                           
  1277                           ;./uart.h: 15: void UART_Init(const long int baudrate, long _XTAL_FREQ);./uart.h: 16: {;
      +                          ./uart.h: 17:     BRGH = 1;
  1278     0592  1683               	bsf	3,5	;RP0=1, select bank1
  1279     0593  1303               	bcf	3,6	;RP1=0, select bank1
  1280     0594  1518               	bsf	24,2	;volatile
  1281     0595                     l1266:
  1282                           
  1283                           ;./uart.h: 18:     SPBRG = (_XTAL_FREQ - baudrate*16)/(baudrate*16);
  1284     0595  1283               	bcf	3,5	;RP0=0, select bank0
  1285     0596  1303               	bcf	3,6	;RP1=0, select bank0
  1286     0597  0826               	movf	UART_Init@baudrate,w
  1287     0598  00AE               	movwf	??_UART_Init
  1288     0599  0827               	movf	UART_Init@baudrate+1,w
  1289     059A  00AF               	movwf	??_UART_Init+1
  1290     059B  0828               	movf	UART_Init@baudrate+2,w
  1291     059C  00B0               	movwf	??_UART_Init+2
  1292     059D  0829               	movf	UART_Init@baudrate+3,w
  1293     059E  00B1               	movwf	??_UART_Init+3
  1294     059F  3004               	movlw	4
  1295     05A0                     u485:
  1296     05A0  1003               	clrc
  1297     05A1  0DAE               	rlf	??_UART_Init,f
  1298     05A2  0DAF               	rlf	??_UART_Init+1,f
  1299     05A3  0DB0               	rlf	??_UART_Init+2,f
  1300     05A4  0DB1               	rlf	??_UART_Init+3,f
  1301     05A5                     u480:
  1302     05A5  3EFF               	addlw	-1
  1303     05A6  1D03               	skipz
  1304     05A7  2DA0               	goto	u485
  1305     05A8  0831               	movf	??_UART_Init+3,w
  1306     05A9  00F3               	movwf	___aldiv@divisor+3
  1307     05AA  0830               	movf	??_UART_Init+2,w
  1308     05AB  00F2               	movwf	___aldiv@divisor+2
  1309     05AC  082F               	movf	??_UART_Init+1,w
  1310     05AD  00F1               	movwf	___aldiv@divisor+1
  1311     05AE  082E               	movf	??_UART_Init,w
  1312     05AF  00F0               	movwf	___aldiv@divisor
  1313     05B0  0826               	movf	UART_Init@baudrate,w
  1314     05B1  00B2               	movwf	??_UART_Init+4
  1315     05B2  0827               	movf	UART_Init@baudrate+1,w
  1316     05B3  00B3               	movwf	??_UART_Init+5
  1317     05B4  0828               	movf	UART_Init@baudrate+2,w
  1318     05B5  00B4               	movwf	??_UART_Init+6
  1319     05B6  0829               	movf	UART_Init@baudrate+3,w
  1320     05B7  00B5               	movwf	??_UART_Init+7
  1321     05B8  3004               	movlw	4
  1322     05B9                     u495:
  1323     05B9  1003               	clrc
  1324     05BA  0DB2               	rlf	??_UART_Init+4,f
  1325     05BB  0DB3               	rlf	??_UART_Init+5,f
  1326     05BC  0DB4               	rlf	??_UART_Init+6,f
  1327     05BD  0DB5               	rlf	??_UART_Init+7,f
  1328     05BE                     u490:
  1329     05BE  3EFF               	addlw	-1
  1330     05BF  1D03               	skipz
  1331     05C0  2DB9               	goto	u495
  1332     05C1  082A               	movf	UART_Init@_XTAL_FREQ,w
  1333     05C2  00B6               	movwf	??_UART_Init+8
  1334     05C3  082B               	movf	UART_Init@_XTAL_FREQ+1,w
  1335     05C4  00B7               	movwf	??_UART_Init+9
  1336     05C5  082C               	movf	UART_Init@_XTAL_FREQ+2,w
  1337     05C6  00B8               	movwf	??_UART_Init+10
  1338     05C7  082D               	movf	UART_Init@_XTAL_FREQ+3,w
  1339     05C8  00B9               	movwf	??_UART_Init+11
  1340     05C9  0832               	movf	??_UART_Init+4,w
  1341     05CA  02B6               	subwf	??_UART_Init+8,f
  1342     05CB  0833               	movf	??_UART_Init+5,w
  1343     05CC  1C03               	skipc
  1344     05CD  0F33               	incfsz	??_UART_Init+5,w
  1345     05CE  2DD0               	goto	u501
  1346     05CF  2DD1               	goto	u502
  1347     05D0                     u501:
  1348     05D0  02B7               	subwf	??_UART_Init+9,f
  1349     05D1                     u502:
  1350     05D1  0834               	movf	??_UART_Init+6,w
  1351     05D2  1C03               	skipc
  1352     05D3  0F34               	incfsz	??_UART_Init+6,w
  1353     05D4  2DD6               	goto	u503
  1354     05D5  2DD7               	goto	u504
  1355     05D6                     u503:
  1356     05D6  02B8               	subwf	??_UART_Init+10,f
  1357     05D7                     u504:
  1358     05D7  0835               	movf	??_UART_Init+7,w
  1359     05D8  1C03               	skipc
  1360     05D9  0F35               	incfsz	??_UART_Init+7,w
  1361     05DA  2DDC               	goto	u505
  1362     05DB  2DDD               	goto	u506
  1363     05DC                     u505:
  1364     05DC  02B9               	subwf	??_UART_Init+11,f
  1365     05DD                     u506:
  1366     05DD  0839               	movf	??_UART_Init+11,w
  1367     05DE  00F7               	movwf	___aldiv@dividend+3
  1368     05DF  0838               	movf	??_UART_Init+10,w
  1369     05E0  00F6               	movwf	___aldiv@dividend+2
  1370     05E1  0837               	movf	??_UART_Init+9,w
  1371     05E2  00F5               	movwf	___aldiv@dividend+1
  1372     05E3  0836               	movf	??_UART_Init+8,w
  1373     05E4  00F4               	movwf	___aldiv@dividend
  1374     05E5  120A  118A  2694  120A  118A  	fcall	___aldiv
  1375     05EA  0870               	movf	?___aldiv,w
  1376     05EB  1683               	bsf	3,5	;RP0=1, select bank1
  1377     05EC  1303               	bcf	3,6	;RP1=0, select bank1
  1378     05ED  0099               	movwf	25	;volatile
  1379     05EE                     l1268:
  1380                           
  1381                           ;./uart.h: 19:     SYNC = 0;
  1382     05EE  1218               	bcf	24,4	;volatile
  1383     05EF                     l1270:
  1384                           
  1385                           ;./uart.h: 20:     SPEN = 1;
  1386     05EF  1283               	bcf	3,5	;RP0=0, select bank0
  1387     05F0  1303               	bcf	3,6	;RP1=0, select bank0
  1388     05F1  1798               	bsf	24,7	;volatile
  1389     05F2                     l1272:
  1390                           
  1391                           ;./uart.h: 21:     TRISC7 = 1;
  1392     05F2  1683               	bsf	3,5	;RP0=1, select bank1
  1393     05F3  1303               	bcf	3,6	;RP1=0, select bank1
  1394     05F4  1787               	bsf	7,7	;volatile
  1395     05F5                     l1274:
  1396                           
  1397                           ;./uart.h: 22:     TRISC6 = 1;
  1398     05F5  1707               	bsf	7,6	;volatile
  1399     05F6                     l1276:
  1400                           
  1401                           ;./uart.h: 23:     CREN = 1;
  1402     05F6  1283               	bcf	3,5	;RP0=0, select bank0
  1403     05F7  1303               	bcf	3,6	;RP1=0, select bank0
  1404     05F8  1618               	bsf	24,4	;volatile
  1405     05F9                     l1278:
  1406                           
  1407                           ;./uart.h: 24:     TXEN = 1;
  1408     05F9  1683               	bsf	3,5	;RP0=1, select bank1
  1409     05FA  1303               	bcf	3,6	;RP1=0, select bank1
  1410     05FB  1698               	bsf	24,5	;volatile
  1411     05FC                     l53:
  1412     05FC  0008               	return
  1413     05FD                     __end_of_UART_Init:
  1414                           
  1415                           	psect	text5
  1416     0694                     __ptext5:	
  1417 ;; *************** function ___aldiv *****************
  1418 ;; Defined at:
  1419 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  divisor         4    0[COMMON] long 
  1422 ;;  dividend        4    4[COMMON] long 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  quotient        4    2[BANK0 ] long 
  1425 ;;  sign            1    1[BANK0 ] unsigned char 
  1426 ;;  counter         1    0[BANK0 ] unsigned char 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  4    0[COMMON] long 
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, status,0, btemp+1
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1436 ;;      Params:         8       0       0       0       0
  1437 ;;      Locals:         0       6       0       0       0
  1438 ;;      Temps:          1       0       0       0       0
  1439 ;;      Totals:         9       6       0       0       0
  1440 ;;Total ram usage:       15 bytes
  1441 ;; Hardware stack levels used: 1
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_UART_Init
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449     0694                     ___aldiv:	
  1450                           ;psect for function ___aldiv
  1451                           
  1452     0694                     l1222:	
  1453                           ;incstack = 0
  1454                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  1455                           
  1456     0694  1283               	bcf	3,5	;RP0=0, select bank0
  1457     0695  1303               	bcf	3,6	;RP1=0, select bank0
  1458     0696  01A1               	clrf	___aldiv@sign
  1459     0697                     l1224:
  1460     0697  1FF3               	btfss	___aldiv@divisor+3,7
  1461     0698  2E9A               	goto	u381
  1462     0699  2E9B               	goto	u380
  1463     069A                     u381:
  1464     069A  2EA8               	goto	l336
  1465     069B                     u380:
  1466     069B                     l1226:
  1467     069B  09F0               	comf	___aldiv@divisor,f
  1468     069C  09F1               	comf	___aldiv@divisor+1,f
  1469     069D  09F2               	comf	___aldiv@divisor+2,f
  1470     069E  09F3               	comf	___aldiv@divisor+3,f
  1471     069F  0AF0               	incf	___aldiv@divisor,f
  1472     06A0  1903               	skipnz
  1473     06A1  0AF1               	incf	___aldiv@divisor+1,f
  1474     06A2  1903               	skipnz
  1475     06A3  0AF2               	incf	___aldiv@divisor+2,f
  1476     06A4  1903               	skipnz
  1477     06A5  0AF3               	incf	___aldiv@divisor+3,f
  1478     06A6  01A1               	clrf	___aldiv@sign
  1479     06A7  0AA1               	incf	___aldiv@sign,f
  1480     06A8                     l336:
  1481     06A8  1FF7               	btfss	___aldiv@dividend+3,7
  1482     06A9  2EAB               	goto	u391
  1483     06AA  2EAC               	goto	u390
  1484     06AB                     u391:
  1485     06AB  2EBB               	goto	l1232
  1486     06AC                     u390:
  1487     06AC                     l1228:
  1488     06AC  09F4               	comf	___aldiv@dividend,f
  1489     06AD  09F5               	comf	___aldiv@dividend+1,f
  1490     06AE  09F6               	comf	___aldiv@dividend+2,f
  1491     06AF  09F7               	comf	___aldiv@dividend+3,f
  1492     06B0  0AF4               	incf	___aldiv@dividend,f
  1493     06B1  1903               	skipnz
  1494     06B2  0AF5               	incf	___aldiv@dividend+1,f
  1495     06B3  1903               	skipnz
  1496     06B4  0AF6               	incf	___aldiv@dividend+2,f
  1497     06B5  1903               	skipnz
  1498     06B6  0AF7               	incf	___aldiv@dividend+3,f
  1499     06B7                     l1230:
  1500     06B7  3001               	movlw	1
  1501     06B8  00FF               	movwf	btemp+1
  1502     06B9  087F               	movf	btemp+1,w
  1503     06BA  06A1               	xorwf	___aldiv@sign,f
  1504     06BB                     l1232:
  1505     06BB  3000               	movlw	0
  1506     06BC  00A5               	movwf	___aldiv@quotient+3
  1507     06BD  3000               	movlw	0
  1508     06BE  00A4               	movwf	___aldiv@quotient+2
  1509     06BF  3000               	movlw	0
  1510     06C0  00A3               	movwf	___aldiv@quotient+1
  1511     06C1  3000               	movlw	0
  1512     06C2  00A2               	movwf	___aldiv@quotient
  1513     06C3                     l1234:
  1514     06C3  0873               	movf	___aldiv@divisor+3,w
  1515     06C4  0472               	iorwf	___aldiv@divisor+2,w
  1516     06C5  0471               	iorwf	___aldiv@divisor+1,w
  1517     06C6  0470               	iorwf	___aldiv@divisor,w
  1518     06C7  1903               	skipnz
  1519     06C8  2ECA               	goto	u401
  1520     06C9  2ECB               	goto	u400
  1521     06CA                     u401:
  1522     06CA  2F18               	goto	l1256
  1523     06CB                     u400:
  1524     06CB                     l1236:
  1525     06CB  01A0               	clrf	___aldiv@counter
  1526     06CC  0AA0               	incf	___aldiv@counter,f
  1527     06CD  2EDB               	goto	l1242
  1528     06CE                     l1238:
  1529     06CE  3001               	movlw	1
  1530     06CF  00F8               	movwf	??___aldiv
  1531     06D0                     u415:
  1532     06D0  1003               	clrc
  1533     06D1  0DF0               	rlf	___aldiv@divisor,f
  1534     06D2  0DF1               	rlf	___aldiv@divisor+1,f
  1535     06D3  0DF2               	rlf	___aldiv@divisor+2,f
  1536     06D4  0DF3               	rlf	___aldiv@divisor+3,f
  1537     06D5  0BF8               	decfsz	??___aldiv,f
  1538     06D6  2ED0               	goto	u415
  1539     06D7                     l1240:
  1540     06D7  3001               	movlw	1
  1541     06D8  00FF               	movwf	btemp+1
  1542     06D9  087F               	movf	btemp+1,w
  1543     06DA  07A0               	addwf	___aldiv@counter,f
  1544     06DB                     l1242:
  1545     06DB  1FF3               	btfss	___aldiv@divisor+3,7
  1546     06DC  2EDE               	goto	u421
  1547     06DD  2EDF               	goto	u420
  1548     06DE                     u421:
  1549     06DE  2ECE               	goto	l1238
  1550     06DF                     u420:
  1551     06DF                     l1244:
  1552     06DF  3001               	movlw	1
  1553     06E0  00F8               	movwf	??___aldiv
  1554     06E1                     u435:
  1555     06E1  1003               	clrc
  1556     06E2  0DA2               	rlf	___aldiv@quotient,f
  1557     06E3  0DA3               	rlf	___aldiv@quotient+1,f
  1558     06E4  0DA4               	rlf	___aldiv@quotient+2,f
  1559     06E5  0DA5               	rlf	___aldiv@quotient+3,f
  1560     06E6  0BF8               	decfsz	??___aldiv,f
  1561     06E7  2EE1               	goto	u435
  1562     06E8                     l1246:
  1563     06E8  0873               	movf	___aldiv@divisor+3,w
  1564     06E9  0277               	subwf	___aldiv@dividend+3,w
  1565     06EA  1D03               	skipz
  1566     06EB  2EF6               	goto	u445
  1567     06EC  0872               	movf	___aldiv@divisor+2,w
  1568     06ED  0276               	subwf	___aldiv@dividend+2,w
  1569     06EE  1D03               	skipz
  1570     06EF  2EF6               	goto	u445
  1571     06F0  0871               	movf	___aldiv@divisor+1,w
  1572     06F1  0275               	subwf	___aldiv@dividend+1,w
  1573     06F2  1D03               	skipz
  1574     06F3  2EF6               	goto	u445
  1575     06F4  0870               	movf	___aldiv@divisor,w
  1576     06F5  0274               	subwf	___aldiv@dividend,w
  1577     06F6                     u445:
  1578     06F6  1C03               	skipc
  1579     06F7  2EF9               	goto	u441
  1580     06F8  2EFA               	goto	u440
  1581     06F9                     u441:
  1582     06F9  2F09               	goto	l1252
  1583     06FA                     u440:
  1584     06FA                     l1248:
  1585     06FA  0870               	movf	___aldiv@divisor,w
  1586     06FB  02F4               	subwf	___aldiv@dividend,f
  1587     06FC  0871               	movf	___aldiv@divisor+1,w
  1588     06FD  1C03               	skipc
  1589     06FE  0F71               	incfsz	___aldiv@divisor+1,w
  1590     06FF  02F5               	subwf	___aldiv@dividend+1,f
  1591     0700  0872               	movf	___aldiv@divisor+2,w
  1592     0701  1C03               	skipc
  1593     0702  0F72               	incfsz	___aldiv@divisor+2,w
  1594     0703  02F6               	subwf	___aldiv@dividend+2,f
  1595     0704  0873               	movf	___aldiv@divisor+3,w
  1596     0705  1C03               	skipc
  1597     0706  0F73               	incfsz	___aldiv@divisor+3,w
  1598     0707  02F7               	subwf	___aldiv@dividend+3,f
  1599     0708                     l1250:
  1600     0708  1422               	bsf	___aldiv@quotient,0
  1601     0709                     l1252:
  1602     0709  3001               	movlw	1
  1603     070A                     u455:
  1604     070A  1003               	clrc
  1605     070B  0CF3               	rrf	___aldiv@divisor+3,f
  1606     070C  0CF2               	rrf	___aldiv@divisor+2,f
  1607     070D  0CF1               	rrf	___aldiv@divisor+1,f
  1608     070E  0CF0               	rrf	___aldiv@divisor,f
  1609     070F  3EFF               	addlw	-1
  1610     0710  1D03               	skipz
  1611     0711  2F0A               	goto	u455
  1612     0712                     l1254:
  1613     0712  3001               	movlw	1
  1614     0713  02A0               	subwf	___aldiv@counter,f
  1615     0714  1D03               	btfss	3,2
  1616     0715  2F17               	goto	u461
  1617     0716  2F18               	goto	u460
  1618     0717                     u461:
  1619     0717  2EDF               	goto	l1244
  1620     0718                     u460:
  1621     0718                     l1256:
  1622     0718  0821               	movf	___aldiv@sign,w
  1623     0719  1903               	btfsc	3,2
  1624     071A  2F1C               	goto	u471
  1625     071B  2F1D               	goto	u470
  1626     071C                     u471:
  1627     071C  2F28               	goto	l1260
  1628     071D                     u470:
  1629     071D                     l1258:
  1630     071D  09A2               	comf	___aldiv@quotient,f
  1631     071E  09A3               	comf	___aldiv@quotient+1,f
  1632     071F  09A4               	comf	___aldiv@quotient+2,f
  1633     0720  09A5               	comf	___aldiv@quotient+3,f
  1634     0721  0AA2               	incf	___aldiv@quotient,f
  1635     0722  1903               	skipnz
  1636     0723  0AA3               	incf	___aldiv@quotient+1,f
  1637     0724  1903               	skipnz
  1638     0725  0AA4               	incf	___aldiv@quotient+2,f
  1639     0726  1903               	skipnz
  1640     0727  0AA5               	incf	___aldiv@quotient+3,f
  1641     0728                     l1260:
  1642     0728  0825               	movf	___aldiv@quotient+3,w
  1643     0729  00F3               	movwf	?___aldiv+3
  1644     072A  0824               	movf	___aldiv@quotient+2,w
  1645     072B  00F2               	movwf	?___aldiv+2
  1646     072C  0823               	movf	___aldiv@quotient+1,w
  1647     072D  00F1               	movwf	?___aldiv+1
  1648     072E  0822               	movf	___aldiv@quotient,w
  1649     072F  00F0               	movwf	?___aldiv
  1650     0730                     l346:
  1651     0730  0008               	return
  1652     0731                     __end_of___aldiv:
  1653                           
  1654                           	psect	text6
  1655     04BC                     __ptext6:	
  1656 ;; *************** function _SendChar *****************
  1657 ;; Defined at:
  1658 ;;		line 301 in file "main.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  args            1    wreg     PTR unsigned char 
  1661 ;;		 -> STR_10(2), STR_9(2), STR_8(2), STR_7(2), 
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;  args            1    3[BANK0 ] PTR unsigned char 
  1664 ;;		 -> STR_10(2), STR_9(2), STR_8(2), STR_7(2), 
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  1    wreg      void 
  1667 ;; Registers used:
  1668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1674 ;;      Params:         0       0       0       0       0
  1675 ;;      Locals:         0       1       0       0       0
  1676 ;;      Temps:          0       0       0       0       0
  1677 ;;      Totals:         0       1       0       0       0
  1678 ;;Total ram usage:        1 bytes
  1679 ;; Hardware stack levels used: 1
  1680 ;; Hardware stack levels required when called: 5
  1681 ;; This function calls:
  1682 ;;		_UART_Write_Text
  1683 ;;		_nrf_set_tx_mode
  1684 ;;		_nrf_tx_char
  1685 ;; This function is called by:
  1686 ;;		_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690     04BC                     _SendChar:	
  1691                           ;psect for function _SendChar
  1692                           
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in _SendChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1696                           ;SendChar@args stored from wreg
  1697     04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1698     04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1699     04BE  00A3               	movwf	SendChar@args
  1700     04BF                     l1342:
  1701                           
  1702                           ;main.c: 301: void SendChar(char *args);main.c: 302: {;main.c: 303:     nrf_set_tx_mode(
      +                          );
  1703     04BF  120A  118A  24F6  120A  118A  	fcall	_nrf_set_tx_mode
  1704                           
  1705                           ;main.c: 304:     nrf_tx_char(args[0]);
  1706     04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1707     04C5  1303               	bcf	3,6	;RP1=0, select bank0
  1708     04C6  0823               	movf	SendChar@args,w
  1709     04C7  0084               	movwf	4
  1710     04C8  120A  118A  2003  120A  118A  	fcall	stringdir
  1711     04CD  120A  118A  253C  120A  118A  	fcall	_nrf_tx_char
  1712     04D2                     l1344:
  1713                           
  1714                           ;main.c: 305:     UART_Write_Text("Char sent\n");
  1715     04D2  3013               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1716     04D3  120A  118A  2517  120A  118A  	fcall	_UART_Write_Text
  1717     04D8                     l174:
  1718     04D8  0008               	return
  1719     04D9                     __end_of_SendChar:
  1720                           
  1721                           	psect	text7
  1722     053C                     __ptext7:	
  1723 ;; *************** function _nrf_tx_char *****************
  1724 ;; Defined at:
  1725 ;;		line 273 in file "main.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  ch              1    wreg     unsigned char 
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;  ch              1    1[BANK0 ] unsigned char 
  1730 ;;  data            1    2[BANK0 ] unsigned char 
  1731 ;;  stat            1    0[BANK0 ] unsigned char 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1741 ;;      Params:         0       0       0       0       0
  1742 ;;      Locals:         0       3       0       0       0
  1743 ;;      Temps:          0       0       0       0       0
  1744 ;;      Totals:         0       3       0       0       0
  1745 ;;Total ram usage:        3 bytes
  1746 ;; Hardware stack levels used: 1
  1747 ;; Hardware stack levels required when called: 4
  1748 ;; This function calls:
  1749 ;;		_nrf_write_command
  1750 ;;		_nrf_write_payload
  1751 ;;		_nrf_write_register
  1752 ;; This function is called by:
  1753 ;;		_SendChar
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757     053C                     _nrf_tx_char:	
  1758                           ;psect for function _nrf_tx_char
  1759                           
  1760                           
  1761                           ;incstack = 0
  1762                           ; Regs used in _nrf_tx_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1763                           ;nrf_tx_char@ch stored from wreg
  1764     053C  1283               	bcf	3,5	;RP0=0, select bank0
  1765     053D  1303               	bcf	3,6	;RP1=0, select bank0
  1766     053E  00A1               	movwf	nrf_tx_char@ch
  1767     053F                     l1212:
  1768                           
  1769                           ;main.c: 273: void nrf_tx_char(uint8_t ch);main.c: 274: {;main.c: 275:     nrf_write_pay
      +                          load(&ch, 1);
  1770     053F  01FB               	clrf	nrf_write_payload@len
  1771     0540  0AFB               	incf	nrf_write_payload@len,f
  1772     0541  3021               	movlw	(low (nrf_tx_char@ch| 0))& (0+255)
  1773     0542  120A  118A  248D  120A  118A  	fcall	_nrf_write_payload
  1774     0547                     l1214:
  1775                           
  1776                           ;main.c: 280:     {;main.c: 281:         stat = nrf_write_command(0b11111111);
  1777     0547  30FF               	movlw	255
  1778     0548  120A  118A  247D  120A  118A  	fcall	_nrf_write_command
  1779     054D  1283               	bcf	3,5	;RP0=0, select bank0
  1780     054E  1303               	bcf	3,6	;RP1=0, select bank0
  1781     054F  00A0               	movwf	nrf_tx_char@stat
  1782     0550                     l1216:
  1783                           
  1784                           ;main.c: 282:     } while ((stat & 0x20) == 0);
  1785     0550  1EA0               	btfss	nrf_tx_char@stat,5
  1786     0551  2D53               	goto	u371
  1787     0552  2D54               	goto	u370
  1788     0553                     u371:
  1789     0553  2D47               	goto	l1214
  1790     0554                     u370:
  1791     0554                     l1218:
  1792                           
  1793                           ;main.c: 285:     uint8_t data = 0x20;
  1794     0554  3020               	movlw	32
  1795     0555  00A2               	movwf	nrf_tx_char@data
  1796     0556                     l1220:
  1797                           
  1798                           ;main.c: 286:     nrf_write_register(0x07, &data, 1);
  1799     0556  3022               	movlw	(low (nrf_tx_char@data| 0))& (0+255)
  1800     0557  00F8               	movwf	nrf_write_register@data
  1801     0558  01F9               	clrf	nrf_write_register@len
  1802     0559  0AF9               	incf	nrf_write_register@len,f
  1803     055A  3007               	movlw	7
  1804     055B  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
  1805     0560                     l168:
  1806     0560  0008               	return
  1807     0561                     __end_of_nrf_tx_char:
  1808                           
  1809                           	psect	text8
  1810     048D                     __ptext8:	
  1811 ;; *************** function _nrf_write_payload *****************
  1812 ;; Defined at:
  1813 ;;		line 156 in file "main.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  data            1    wreg     PTR unsigned char 
  1816 ;;		 -> nrf_tx_char@ch(1), 
  1817 ;;  len             1   11[COMMON] unsigned char 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  data            1   13[COMMON] PTR unsigned char 
  1820 ;;		 -> nrf_tx_char@ch(1), 
  1821 ;;  status          1    0        unsigned char 
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      unsigned char 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1831 ;;      Params:         1       0       0       0       0
  1832 ;;      Locals:         1       0       0       0       0
  1833 ;;      Temps:          1       0       0       0       0
  1834 ;;      Totals:         3       0       0       0       0
  1835 ;;Total ram usage:        3 bytes
  1836 ;; Hardware stack levels used: 1
  1837 ;; Hardware stack levels required when called: 3
  1838 ;; This function calls:
  1839 ;;		_nrf_write_register
  1840 ;; This function is called by:
  1841 ;;		_nrf_tx_char
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845     048D                     _nrf_write_payload:	
  1846                           ;psect for function _nrf_write_payload
  1847                           
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in _nrf_write_payload: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1851                           ;nrf_write_payload@data stored from wreg
  1852     048D  00FD               	movwf	nrf_write_payload@data
  1853     048E                     l1158:
  1854     048E  087D               	movf	nrf_write_payload@data,w
  1855     048F  00F8               	movwf	nrf_write_register@data
  1856     0490  087B               	movf	nrf_write_payload@len,w
  1857     0491  00F9               	movwf	nrf_write_register@len
  1858     0492  30A0               	movlw	160
  1859     0493  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
  1860     0498                     l1160:
  1861                           
  1862                           ;main.c: 159:     RD2 = 1;
  1863     0498  1283               	bcf	3,5	;RP0=0, select bank0
  1864     0499  1303               	bcf	3,6	;RP1=0, select bank0
  1865     049A  1508               	bsf	8,2	;volatile
  1866     049B                     l1162:
  1867                           
  1868                           ;main.c: 160:     _delay((unsigned long)((20)*(8000000UL/4000000.0)));
  1869     049B  300D               	movlw	13
  1870     049C  00FC               	movwf	??_nrf_write_payload
  1871     049D                     u677:
  1872     049D  0BFC               	decfsz	??_nrf_write_payload,f
  1873     049E  2C9D               	goto	u677
  1874     049F                     l1164:
  1875                           
  1876                           ;main.c: 161:     RD2 = 0;
  1877     049F  1283               	bcf	3,5	;RP0=0, select bank0
  1878     04A0  1303               	bcf	3,6	;RP1=0, select bank0
  1879     04A1  1108               	bcf	8,2	;volatile
  1880     04A2                     l143:
  1881     04A2  0008               	return
  1882     04A3                     __end_of_nrf_write_payload:
  1883                           
  1884                           	psect	text9
  1885     047D                     __ptext9:	
  1886 ;; *************** function _nrf_write_command *****************
  1887 ;; Defined at:
  1888 ;;		line 166 in file "main.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  command         1    wreg     unsigned char 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  command         1    1[COMMON] unsigned char 
  1893 ;;  status          1    2[COMMON] unsigned char 
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  1    wreg      unsigned char 
  1896 ;; Registers used:
  1897 ;;		wreg, pclath, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1903 ;;      Params:         0       0       0       0       0
  1904 ;;      Locals:         2       0       0       0       0
  1905 ;;      Temps:          0       0       0       0       0
  1906 ;;      Totals:         2       0       0       0       0
  1907 ;;Total ram usage:        2 bytes
  1908 ;; Hardware stack levels used: 1
  1909 ;; Hardware stack levels required when called: 1
  1910 ;; This function calls:
  1911 ;;		_SPI_write
  1912 ;; This function is called by:
  1913 ;;		_nrf_flush_rxtx
  1914 ;;		_nrf_tx_char
  1915 ;;		_nrf_data_available
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919     047D                     _nrf_write_command:	
  1920                           ;psect for function _nrf_write_command
  1921                           
  1922                           
  1923                           ;incstack = 0
  1924                           ; Regs used in _nrf_write_command: [wreg+pclath+cstack]
  1925                           ;nrf_write_command@command stored from wreg
  1926     047D  00F1               	movwf	nrf_write_command@command
  1927     047E                     l1166:
  1928                           
  1929                           ;main.c: 166: uint8_t nrf_write_command(uint8_t command);main.c: 167: {;main.c: 168:    
      +                           RD3 = 0;
  1930     047E  1283               	bcf	3,5	;RP0=0, select bank0
  1931     047F  1303               	bcf	3,6	;RP1=0, select bank0
  1932     0480  1188               	bcf	8,3	;volatile
  1933     0481                     l1168:
  1934                           
  1935                           ;main.c: 169:     uint8_t status = SPI_write(command);
  1936     0481  0871               	movf	nrf_write_command@command,w
  1937     0482  120A  118A  246E  120A  118A  	fcall	_SPI_write
  1938     0487  00F2               	movwf	nrf_write_command@status
  1939     0488                     l1170:
  1940                           
  1941                           ;main.c: 170:     RD3 = 1;
  1942     0488  1283               	bcf	3,5	;RP0=0, select bank0
  1943     0489  1303               	bcf	3,6	;RP1=0, select bank0
  1944     048A  1588               	bsf	8,3	;volatile
  1945     048B                     l1172:
  1946                           
  1947                           ;main.c: 171:     return status;
  1948     048B  0872               	movf	nrf_write_command@status,w
  1949     048C                     l146:
  1950     048C  0008               	return
  1951     048D                     __end_of_nrf_write_command:
  1952                           
  1953                           	psect	text10
  1954     04F6                     __ptext10:	
  1955 ;; *************** function _nrf_set_tx_mode *****************
  1956 ;; Defined at:
  1957 ;;		line 209 in file "main.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;		None
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  config          1   11[COMMON] unsigned char 
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  1    wreg      void 
  1964 ;; Registers used:
  1965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1971 ;;      Params:         0       0       0       0       0
  1972 ;;      Locals:         1       0       0       0       0
  1973 ;;      Temps:          0       0       0       0       0
  1974 ;;      Totals:         1       0       0       0       0
  1975 ;;Total ram usage:        1 bytes
  1976 ;; Hardware stack levels used: 1
  1977 ;; Hardware stack levels required when called: 3
  1978 ;; This function calls:
  1979 ;;		_nrf_read_register
  1980 ;;		_nrf_write_register
  1981 ;; This function is called by:
  1982 ;;		_SendChar
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986     04F6                     _nrf_set_tx_mode:	
  1987                           ;psect for function _nrf_set_tx_mode
  1988                           
  1989     04F6                     l1200:	
  1990                           ;incstack = 0
  1991                           ; Regs used in _nrf_set_tx_mode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1992                           
  1993                           
  1994                           ;main.c: 211:     uint8_t config;;main.c: 212:     nrf_read_register(0x00, &config, 1);
  1995     04F6  307B               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1996     04F7  00F8               	movwf	nrf_read_register@data
  1997     04F8  01F9               	clrf	nrf_read_register@len
  1998     04F9  0AF9               	incf	nrf_read_register@len,f
  1999     04FA  3000               	movlw	0
  2000     04FB  120A  118A  2448  120A  118A  	fcall	_nrf_read_register
  2001     0500                     l1202:
  2002                           
  2003                           ;main.c: 214:     if (!(config & 0x01))
  2004     0500  187B               	btfsc	nrf_set_tx_mode@config,0
  2005     0501  2D03               	goto	u361
  2006     0502  2D04               	goto	u360
  2007     0503                     u361:
  2008     0503  2D05               	goto	l1206
  2009     0504                     u360:
  2010     0504  2D16               	goto	l157
  2011     0505                     l1206:
  2012                           
  2013                           ;main.c: 217:     config &= ~0x01;
  2014     0505  30FE               	movlw	254
  2015     0506  00FF               	movwf	btemp+1
  2016     0507  087F               	movf	btemp+1,w
  2017     0508  05FB               	andwf	nrf_set_tx_mode@config,f
  2018     0509                     l1208:
  2019                           
  2020                           ;main.c: 218:     nrf_write_register(0x00, &config, 1);
  2021     0509  307B               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  2022     050A  00F8               	movwf	nrf_write_register@data
  2023     050B  01F9               	clrf	nrf_write_register@len
  2024     050C  0AF9               	incf	nrf_write_register@len,f
  2025     050D  3000               	movlw	0
  2026     050E  120A  118A  2461  120A  118A  	fcall	_nrf_write_register
  2027     0513                     l1210:
  2028                           
  2029                           ;main.c: 220:     RD2 = 0;
  2030     0513  1283               	bcf	3,5	;RP0=0, select bank0
  2031     0514  1303               	bcf	3,6	;RP1=0, select bank0
  2032     0515  1108               	bcf	8,2	;volatile
  2033     0516                     l157:
  2034     0516  0008               	return
  2035     0517                     __end_of_nrf_set_tx_mode:
  2036                           
  2037                           	psect	text11
  2038     0461                     __ptext11:	
  2039 ;; *************** function _nrf_write_register *****************
  2040 ;; Defined at:
  2041 ;;		line 142 in file "main.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;  reg             1    wreg     unsigned char 
  2044 ;;  data            1    8[COMMON] PTR unsigned char 
  2045 ;;		 -> nrf_rx_char@clear(1), nrf_tx_char@data(1), nrf_tx_char@ch(1), nrf_setup@data(5), 
  2046 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), nrf_flush_rxtx@data(1), 
  2047 ;;  len             1    9[COMMON] unsigned char 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  reg             1   10[COMMON] unsigned char 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      unsigned char 
  2052 ;; Registers used:
  2053 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2059 ;;      Params:         2       0       0       0       0
  2060 ;;      Locals:         1       0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0
  2062 ;;      Totals:         3       0       0       0       0
  2063 ;;Total ram usage:        3 bytes
  2064 ;; Hardware stack levels used: 1
  2065 ;; Hardware stack levels required when called: 2
  2066 ;; This function calls:
  2067 ;;		_nrf_command
  2068 ;; This function is called by:
  2069 ;;		_nrf_write_payload
  2070 ;;		_nrf_flush_rxtx
  2071 ;;		_nrf_set_tx_mode
  2072 ;;		_nrf_setup
  2073 ;;		_nrf_tx_char
  2074 ;;		_nrf_set_rx_mode
  2075 ;;		_nrf_rx_char
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079     0461                     _nrf_write_register:	
  2080                           ;psect for function _nrf_write_register
  2081                           
  2082                           
  2083                           ;incstack = 0
  2084                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2085                           ;nrf_write_register@reg stored from wreg
  2086     0461  00FA               	movwf	nrf_write_register@reg
  2087     0462                     l1146:
  2088                           
  2089                           ;main.c: 142: uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t len);main.c
      +                          : 143: {;main.c: 144:     return nrf_command(reg | 0b00100000, data, len);
  2090     0462  0878               	movf	nrf_write_register@data,w
  2091     0463  00F1               	movwf	nrf_command@data
  2092     0464  0879               	movf	nrf_write_register@len,w
  2093     0465  00F2               	movwf	nrf_command@len
  2094     0466  087A               	movf	nrf_write_register@reg,w
  2095     0467  3820               	iorlw	32
  2096     0468  120A  118A  2561  120A  118A  	fcall	_nrf_command
  2097     046D                     l137:
  2098     046D  0008               	return
  2099     046E                     __end_of_nrf_write_register:
  2100                           
  2101                           	psect	text12
  2102     0448                     __ptext12:	
  2103 ;; *************** function _nrf_read_register *****************
  2104 ;; Defined at:
  2105 ;;		line 149 in file "main.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;  reg             1    wreg     unsigned char 
  2108 ;;  data            1    8[COMMON] PTR unsigned char 
  2109 ;;		 -> nrf_rx_char@data(1), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  2110 ;;  len             1    9[COMMON] unsigned char 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  reg             1   10[COMMON] unsigned char 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      unsigned char 
  2115 ;; Registers used:
  2116 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2122 ;;      Params:         2       0       0       0       0
  2123 ;;      Locals:         1       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0
  2125 ;;      Totals:         3       0       0       0       0
  2126 ;;Total ram usage:        3 bytes
  2127 ;; Hardware stack levels used: 1
  2128 ;; Hardware stack levels required when called: 2
  2129 ;; This function calls:
  2130 ;;		_nrf_command
  2131 ;; This function is called by:
  2132 ;;		_nrf_set_tx_mode
  2133 ;;		_nrf_set_rx_mode
  2134 ;;		_nrf_rx_char
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138     0448                     _nrf_read_register:	
  2139                           ;psect for function _nrf_read_register
  2140                           
  2141                           
  2142                           ;incstack = 0
  2143                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2144                           ;nrf_read_register@reg stored from wreg
  2145     0448  00FA               	movwf	nrf_read_register@reg
  2146     0449                     l1154:
  2147                           
  2148                           ;main.c: 149: uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t len);main.c:
      +                           150: {;main.c: 151:     return nrf_command(reg | 0b00000000, data, len);;	Return value 
      +                          of _nrf_read_register is never used
  2149     0449  0878               	movf	nrf_read_register@data,w
  2150     044A  00F1               	movwf	nrf_command@data
  2151     044B  0879               	movf	nrf_read_register@len,w
  2152     044C  00F2               	movwf	nrf_command@len
  2153     044D  087A               	movf	nrf_read_register@reg,w
  2154     044E  120A  118A  2561  120A  118A  	fcall	_nrf_command
  2155     0453                     l140:
  2156     0453  0008               	return
  2157     0454                     __end_of_nrf_read_register:
  2158                           
  2159                           	psect	text13
  2160     0561                     __ptext13:	
  2161 ;; *************** function _nrf_command *****************
  2162 ;; Defined at:
  2163 ;;		line 127 in file "main.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  command         1    wreg     unsigned char 
  2166 ;;  data            1    1[COMMON] PTR unsigned char 
  2167 ;;		 -> nrf_rx_char@clear(1), nrf_rx_char@data(1), nrf_tx_char@data(1), nrf_tx_char@ch(1), 
  2168 ;;		 -> nrf_setup@data(5), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), nrf_flush_rxtx@data(1), 
  2169 ;;  len             1    2[COMMON] unsigned char 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  command         1    5[COMMON] unsigned char 
  2172 ;;  i               1    7[COMMON] unsigned char 
  2173 ;;  status          1    6[COMMON] unsigned char 
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  1    wreg      unsigned char 
  2176 ;; Registers used:
  2177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2183 ;;      Params:         2       0       0       0       0
  2184 ;;      Locals:         3       0       0       0       0
  2185 ;;      Temps:          2       0       0       0       0
  2186 ;;      Totals:         7       0       0       0       0
  2187 ;;Total ram usage:        7 bytes
  2188 ;; Hardware stack levels used: 1
  2189 ;; Hardware stack levels required when called: 1
  2190 ;; This function calls:
  2191 ;;		_SPI_write
  2192 ;; This function is called by:
  2193 ;;		_nrf_write_register
  2194 ;;		_nrf_read_register
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198     0561                     _nrf_command:	
  2199                           ;psect for function _nrf_command
  2200                           
  2201                           
  2202                           ;incstack = 0
  2203                           ; Regs used in _nrf_command: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2204                           ;nrf_command@command stored from wreg
  2205     0561  00F5               	movwf	nrf_command@command
  2206     0562                     l1130:
  2207                           
  2208                           ;main.c: 127: uint8_t nrf_command(uint8_t command, uint8_t *data, uint8_t len);main.c: 1
      +                          28: {;main.c: 129:     RD3 = 0;
  2209     0562  1283               	bcf	3,5	;RP0=0, select bank0
  2210     0563  1303               	bcf	3,6	;RP1=0, select bank0
  2211     0564  1188               	bcf	8,3	;volatile
  2212     0565                     l1132:
  2213                           
  2214                           ;main.c: 131:     uint8_t status = SPI_write(command);
  2215     0565  0875               	movf	nrf_command@command,w
  2216     0566  120A  118A  246E  120A  118A  	fcall	_SPI_write
  2217     056B  00F6               	movwf	nrf_command@status
  2218     056C                     l1134:
  2219                           
  2220                           ;main.c: 132:     for (uint8_t i = 0; i < len; i++)
  2221     056C  01F7               	clrf	nrf_command@i
  2222     056D  2D87               	goto	l1140
  2223     056E                     l1136:
  2224                           
  2225                           ;main.c: 133:         data[i] = SPI_write(data[i]);
  2226     056E  0877               	movf	nrf_command@i,w
  2227     056F  0771               	addwf	nrf_command@data,w
  2228     0570  00F3               	movwf	??_nrf_command
  2229     0571  0873               	movf	??_nrf_command,w
  2230     0572  0084               	movwf	4
  2231     0573  1383               	bcf	3,7	;select IRP bank0
  2232     0574  0800               	movf	0,w
  2233     0575  120A  118A  246E  120A  118A  	fcall	_SPI_write
  2234     057A  00FF               	movwf	btemp+1
  2235     057B  0877               	movf	nrf_command@i,w
  2236     057C  0771               	addwf	nrf_command@data,w
  2237     057D  00F4               	movwf	??_nrf_command+1
  2238     057E  0874               	movf	??_nrf_command+1,w
  2239     057F  0084               	movwf	4
  2240     0580  087F               	movf	btemp+1,w
  2241     0581  1383               	bcf	3,7	;select IRP bank0
  2242     0582  0080               	movwf	0
  2243     0583                     l1138:
  2244     0583  3001               	movlw	1
  2245     0584  00FF               	movwf	btemp+1
  2246     0585  087F               	movf	btemp+1,w
  2247     0586  07F7               	addwf	nrf_command@i,f
  2248     0587                     l1140:
  2249     0587  0872               	movf	nrf_command@len,w
  2250     0588  0277               	subwf	nrf_command@i,w
  2251     0589  1C03               	skipc
  2252     058A  2D8C               	goto	u321
  2253     058B  2D8D               	goto	u320
  2254     058C                     u321:
  2255     058C  2D6E               	goto	l1136
  2256     058D                     u320:
  2257     058D                     l133:
  2258                           
  2259                           ;main.c: 135:     RD3 = 1;
  2260     058D  1283               	bcf	3,5	;RP0=0, select bank0
  2261     058E  1303               	bcf	3,6	;RP1=0, select bank0
  2262     058F  1588               	bsf	8,3	;volatile
  2263     0590                     l1142:
  2264                           
  2265                           ;main.c: 137:     return status;
  2266     0590  0876               	movf	nrf_command@status,w
  2267     0591                     l134:
  2268     0591  0008               	return
  2269     0592                     __end_of_nrf_command:
  2270                           
  2271                           	psect	text14
  2272     046E                     __ptext14:	
  2273 ;; *************** function _SPI_write *****************
  2274 ;; Defined at:
  2275 ;;		line 25 in file "./spi.h"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  data            1    wreg     unsigned char 
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  data            1    0[COMMON] unsigned char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      unsigned char 
  2282 ;; Registers used:
  2283 ;;		wreg
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2289 ;;      Params:         0       0       0       0       0
  2290 ;;      Locals:         1       0       0       0       0
  2291 ;;      Temps:          0       0       0       0       0
  2292 ;;      Totals:         1       0       0       0       0
  2293 ;;Total ram usage:        1 bytes
  2294 ;; Hardware stack levels used: 1
  2295 ;; This function calls:
  2296 ;;		Nothing
  2297 ;; This function is called by:
  2298 ;;		_nrf_command
  2299 ;;		_nrf_write_command
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303     046E                     _SPI_write:	
  2304                           ;psect for function _SPI_write
  2305                           
  2306                           
  2307                           ;incstack = 0
  2308                           ; Regs used in _SPI_write: [wreg]
  2309                           ;SPI_write@data stored from wreg
  2310     046E  00F0               	movwf	SPI_write@data
  2311     046F                     l1124:
  2312                           
  2313                           ;./spi.h: 25: uint8_t SPI_write(uint8_t data);./spi.h: 26: {;./spi.h: 27:     SSPBUF = d
      +                          ata;
  2314     046F  0870               	movf	SPI_write@data,w
  2315     0470  1283               	bcf	3,5	;RP0=0, select bank0
  2316     0471  1303               	bcf	3,6	;RP1=0, select bank0
  2317     0472  0093               	movwf	19	;volatile
  2318     0473                     l80:	
  2319                           ;./spi.h: 28:     while (!BF);
  2320                           
  2321     0473  1683               	bsf	3,5	;RP0=1, select bank1
  2322     0474  1303               	bcf	3,6	;RP1=0, select bank1
  2323     0475  1C14               	btfss	20,0	;volatile
  2324     0476  2C78               	goto	u311
  2325     0477  2C79               	goto	u310
  2326     0478                     u311:
  2327     0478  2C73               	goto	l80
  2328     0479                     u310:
  2329     0479                     l1126:
  2330                           
  2331                           ;./spi.h: 29:     return SSPBUF;
  2332     0479  1283               	bcf	3,5	;RP0=0, select bank0
  2333     047A  1303               	bcf	3,6	;RP1=0, select bank0
  2334     047B  0813               	movf	19,w	;volatile
  2335     047C                     l83:
  2336     047C  0008               	return
  2337     047D                     __end_of_SPI_write:
  2338                           
  2339                           	psect	text15
  2340     0517                     __ptext15:	
  2341 ;; *************** function _UART_Write_Text *****************
  2342 ;; Defined at:
  2343 ;;		line 33 in file "./uart.h"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  text            1    wreg     PTR unsigned char 
  2346 ;;		 -> STR_6(8), STR_5(2), STR_4(6), STR_3(11), 
  2347 ;;		 -> STR_2(6), 
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  text            1    3[COMMON] PTR unsigned char 
  2350 ;;		 -> STR_6(8), STR_5(2), STR_4(6), STR_3(11), 
  2351 ;;		 -> STR_2(6), 
  2352 ;;  i               2    1[COMMON] int 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2362 ;;      Params:         0       0       0       0       0
  2363 ;;      Locals:         3       0       0       0       0
  2364 ;;      Temps:          0       0       0       0       0
  2365 ;;      Totals:         3       0       0       0       0
  2366 ;;Total ram usage:        3 bytes
  2367 ;; Hardware stack levels used: 1
  2368 ;; Hardware stack levels required when called: 1
  2369 ;; This function calls:
  2370 ;;		_UART_Write
  2371 ;; This function is called by:
  2372 ;;		_nrf_setup
  2373 ;;		_SendChar
  2374 ;;		_main
  2375 ;;		_ReceiveChar
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379     0517                     _UART_Write_Text:	
  2380                           ;psect for function _UART_Write_Text
  2381                           
  2382                           
  2383                           ;incstack = 0
  2384                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2385                           ;UART_Write_Text@text stored from wreg
  2386     0517  00F3               	movwf	UART_Write_Text@text
  2387     0518                     l1176:
  2388                           
  2389                           ;./uart.h: 33: void UART_Write_Text(char *text);./uart.h: 34: {;./uart.h: 35:   for(int 
      +                          i=0;text[i]!='\0';i++)
  2390     0518  01F1               	clrf	UART_Write_Text@i
  2391     0519  01F2               	clrf	UART_Write_Text@i+1
  2392     051A  2D2E               	goto	l1182
  2393     051B                     l1178:
  2394                           
  2395                           ;./uart.h: 36:     UART_Write(text[i]);
  2396     051B  0871               	movf	UART_Write_Text@i,w
  2397     051C  0773               	addwf	UART_Write_Text@text,w
  2398     051D  0084               	movwf	4
  2399     051E  120A  118A  2003  120A  118A  	fcall	stringdir
  2400     0523  120A  118A  243C  120A  118A  	fcall	_UART_Write
  2401     0528                     l1180:
  2402     0528  3001               	movlw	1
  2403     0529  07F1               	addwf	UART_Write_Text@i,f
  2404     052A  1803               	skipnc
  2405     052B  0AF2               	incf	UART_Write_Text@i+1,f
  2406     052C  3000               	movlw	0
  2407     052D  07F2               	addwf	UART_Write_Text@i+1,f
  2408     052E                     l1182:
  2409     052E  0871               	movf	UART_Write_Text@i,w
  2410     052F  0773               	addwf	UART_Write_Text@text,w
  2411     0530  0084               	movwf	4
  2412     0531  120A  118A  2003  120A  118A  	fcall	stringdir
  2413     0536  3A00               	xorlw	0
  2414     0537  1D03               	skipz
  2415     0538  2D3A               	goto	u341
  2416     0539  2D3B               	goto	u340
  2417     053A                     u341:
  2418     053A  2D1B               	goto	l1178
  2419     053B                     u340:
  2420     053B                     l65:
  2421     053B  0008               	return
  2422     053C                     __end_of_UART_Write_Text:
  2423                           
  2424                           	psect	text16
  2425     043C                     __ptext16:	
  2426 ;; *************** function _UART_Write *****************
  2427 ;; Defined at:
  2428 ;;		line 27 in file "./uart.h"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  data            1    wreg     unsigned char 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  data            1    0[COMMON] unsigned char 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  1    wreg      void 
  2435 ;; Registers used:
  2436 ;;		wreg
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2442 ;;      Params:         0       0       0       0       0
  2443 ;;      Locals:         1       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0
  2445 ;;      Totals:         1       0       0       0       0
  2446 ;;Total ram usage:        1 bytes
  2447 ;; Hardware stack levels used: 1
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_UART_Write_Text
  2452 ;;		_ReceiveChar
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456     043C                     _UART_Write:	
  2457                           ;psect for function _UART_Write
  2458                           
  2459                           
  2460                           ;incstack = 0
  2461                           ; Regs used in _UART_Write: [wreg]
  2462                           ;UART_Write@data stored from wreg
  2463     043C  00F0               	movwf	UART_Write@data
  2464     043D                     l1150:
  2465     043D                     l56:	
  2466                           ;./uart.h: 27: void UART_Write(char data);./uart.h: 28: {;./uart.h: 29:   while(!TRMT);
  2467                           
  2468     043D  1683               	bsf	3,5	;RP0=1, select bank1
  2469     043E  1303               	bcf	3,6	;RP1=0, select bank1
  2470     043F  1C98               	btfss	24,1	;volatile
  2471     0440  2C42               	goto	u331
  2472     0441  2C43               	goto	u330
  2473     0442                     u331:
  2474     0442  2C3D               	goto	l56
  2475     0443                     u330:
  2476     0443                     l1152:
  2477                           
  2478                           ;./uart.h: 30:   TXREG = data;
  2479     0443  0870               	movf	UART_Write@data,w
  2480     0444  1283               	bcf	3,5	;RP0=0, select bank0
  2481     0445  1303               	bcf	3,6	;RP1=0, select bank0
  2482     0446  0099               	movwf	25	;volatile
  2483     0447                     l59:
  2484     0447  0008               	return
  2485     0448                     __end_of_UART_Write:
  2486                           
  2487                           	psect	text17
  2488     0454                     __ptext17:	
  2489 ;; *************** function _SPI_init_master *****************
  2490 ;; Defined at:
  2491 ;;		line 15 in file "./spi.h"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;		None
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2505 ;;      Params:         0       0       0       0       0
  2506 ;;      Locals:         0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0
  2508 ;;      Totals:         0       0       0       0       0
  2509 ;;Total ram usage:        0 bytes
  2510 ;; Hardware stack levels used: 1
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_main
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518     0454                     _SPI_init_master:	
  2519                           ;psect for function _SPI_init_master
  2520                           
  2521     0454                     l940:	
  2522                           ;incstack = 0
  2523                           ; Regs used in _SPI_init_master: [wreg+status,2]
  2524                           
  2525                           
  2526                           ;./spi.h: 16:     SSPCON = 0b01100001;
  2527     0454  3061               	movlw	97
  2528     0455  1283               	bcf	3,5	;RP0=0, select bank0
  2529     0456  1303               	bcf	3,6	;RP1=0, select bank0
  2530     0457  0094               	movwf	20	;volatile
  2531     0458                     l942:
  2532                           
  2533                           ;./spi.h: 17:     SSPSTAT = 0b00000000;
  2534     0458  1683               	bsf	3,5	;RP0=1, select bank1
  2535     0459  1303               	bcf	3,6	;RP1=0, select bank1
  2536     045A  0194               	clrf	20	;volatile
  2537     045B                     l944:
  2538                           
  2539                           ;./spi.h: 18:     CKE = 1;
  2540     045B  1714               	bsf	20,6	;volatile
  2541     045C                     l946:
  2542                           
  2543                           ;./spi.h: 19:     SMP = 1;
  2544     045C  1794               	bsf	20,7	;volatile
  2545     045D                     l948:
  2546                           
  2547                           ;./spi.h: 20:     TRISCbits.TRISC5 = 0;
  2548     045D  1287               	bcf	7,5	;volatile
  2549     045E                     l950:
  2550                           
  2551                           ;./spi.h: 21:     TRISCbits.TRISC4 = 1;
  2552     045E  1607               	bsf	7,4	;volatile
  2553     045F                     l952:
  2554                           
  2555                           ;./spi.h: 22:     TRISCbits.TRISC3 = 0;
  2556     045F  1187               	bcf	7,3	;volatile
  2557     0460                     l77:
  2558     0460  0008               	return
  2559     0461                     __end_of_SPI_init_master:
  2560     007E                     btemp	set	126	;btemp
  2561     007E                     wtemp0	set	126
  2562                           
  2563                           	psect	config
  2564                           
  2565                           ;Config register CONFIG1 @ 0x2007
  2566                           ;	Oscillator Selection bits
  2567                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2568                           ;	Watchdog Timer Enable bit
  2569                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2570                           ;	Power-up Timer Enable bit
  2571                           ;	PWRTE = OFF, PWRT disabled
  2572                           ;	RE3/MCLR pin function select bit
  2573                           ;	MCLRE = 0x1, unprogrammed default
  2574                           ;	Code Protection bit
  2575                           ;	CP = OFF, Program memory code protection is disabled
  2576                           ;	Data Code Protection bit
  2577                           ;	CPD = OFF, Data memory code protection is disabled
  2578                           ;	Brown Out Reset Selection bits
  2579                           ;	BOREN = OFF, BOR disabled
  2580                           ;	Internal External Switchover bit
  2581                           ;	IESO = 0x1, unprogrammed default
  2582                           ;	Fail-Safe Clock Monitor Enabled bit
  2583                           ;	FCMEN = 0x1, unprogrammed default
  2584                           ;	Low Voltage Programming Enable bit
  2585                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2586                           ;	In-Circuit Debugger Mode bit
  2587                           ;	DEBUG = 0x1, unprogrammed default
  2588     2007                     	org	8199
  2589     2007  2CF2               	dw	11506
  2590                           
  2591                           ;Config register CONFIG2 @ 0x2008
  2592                           ;	Brown-out Reset Selection bit
  2593                           ;	BOR4V = 0x1, unprogrammed default
  2594                           ;	Flash Program Memory Self Write Enable bits
  2595                           ;	WRT = OFF, Write protection off
  2596     2008                     	org	8200
  2597     2008  3FFF               	dw	16383

Data Sizes:
    Strings     57
    Constant    0
    Data        3
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      42
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    _doprnt$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 

    _doprnt$1	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    _doprnt$0	PTR struct __prbuf size(1) Largest target is 3
		 -> sprintf@pb(COMMON[2]), 

    S693__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> NULL(), 

    pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> NULL(), 

    S693__prbuf$ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    SendChar@args	PTR unsigned char  size(1) Largest target is 2
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 

    nrf_write_payload@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_tx_char@ch(BANK0[1]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_rx_char@data(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_rx_char@clear(COMMON[1]), nrf_tx_char@data(BANK0[1]), nrf_tx_char@ch(BANK0[1]), nrf_setup@data(BANK0[5]), 
		 -> nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_rx_char@clear(COMMON[1]), nrf_rx_char@data(COMMON[1]), nrf_tx_char@data(BANK0[1]), nrf_tx_char@ch(BANK0[1]), 
		 -> nrf_setup@data(BANK0[5]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), nrf_flush_rxtx@data(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 3
		 -> RXTX_ADDR(BANK0[3]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_setup@data(BANK0[5]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 11
		 -> STR_6(CODE[8]), STR_5(CODE[2]), STR_4(CODE[6]), STR_3(CODE[11]), 
		 -> STR_2(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_nrf_setup
    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _UART_Init->___aldiv
    _nrf_tx_char->_nrf_write_payload
    _nrf_write_payload->_nrf_write_register
    _nrf_write_command->_SPI_write
    _nrf_set_tx_mode->_nrf_read_register
    _nrf_set_tx_mode->_nrf_write_register
    _nrf_write_register->_nrf_command
    _nrf_read_register->_nrf_command
    _nrf_command->_SPI_write
    _UART_Write_Text->_UART_Write

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv
    _SendChar->_nrf_tx_char

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   18936
                                             26 BANK0      3     3      0
                    _SPI_init_master
                           _SendChar
                          _UART_Init
                    _UART_Write_Text
                          _nrf_setup
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                            7     7      0    7157
                                             12 COMMON     2     2      0
                                              0 BANK0      5     5      0
                    _UART_Write_Text
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3096
                                             11 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               6     4      2     504
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SendChar                                             1     1      0   10832
                                              3 BANK0      1     1      0
                    _UART_Write_Text
                    _nrf_set_tx_mode
                        _nrf_tx_char
 ---------------------------------------------------------------------------------
 (2) _nrf_tx_char                                          3     3      0    6301
                                              0 BANK0      3     3      0
                  _nrf_write_command
                  _nrf_write_payload
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (3) _nrf_write_payload                                    4     3      1    3157
                                             11 COMMON     3     2      1
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (2) _nrf_set_tx_mode                                      1     1      0    4100
                                             11 COMMON     1     1      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    3003
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (3) _nrf_read_register                                    3     1      2    1027
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (3) _nrf_command                                          7     5      2     505
                                              1 COMMON     7     5      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      3     3      0     277
                                              1 COMMON     3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _SendChar
     _UART_Write_Text
       _UART_Write
     _nrf_set_tx_mode
       _nrf_read_register
         _nrf_command
           _SPI_write
       _nrf_write_register
         _nrf_command
     _nrf_tx_char
       _nrf_write_command
         _SPI_write
       _nrf_write_payload
         _nrf_write_register
       _nrf_write_register
   _UART_Init
     ___aldiv
   _UART_Write_Text
   _nrf_setup
     _UART_Write_Text
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1D      2A       5       52.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      38      12        0.0%
ABS                  0      0      38       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Mar 27 02:41:48 2023

                          pc 0002                           _BF 04A0                           l53 05FC  
                         l56 043D                           l80 0473                           l65 053B  
                         l59 0447                           l83 047C                           l77 0460  
                         fsr 0004        nrf_set_tx_mode@config 007B                          l140 0453  
                        l133 058D                          l134 0591                          l143 04A2  
                        l128 04F5                          l137 046D                          l146 048C  
                        l163 07DF                          l157 0516                          l149 04BB  
                        l174 04D8                          l168 0560                          l336 06A8  
                        l346 0730                          l940 0454                          l950 045E  
                        l942 0458                          _CKE 04A6                          l952 045F  
                        l944 045B                          l946 045C                          l948 045D  
                        _RD2 0042                          _RD3 0043                          u310 0479  
                        u311 0478                          u320 058D                          u400 06CB  
                        u321 058C                          u401 06CA                          u330 0443  
                        u331 0442                          u340 053B                          u420 06DF  
                        u341 053A                          u421 06DE                          u501 05D0  
                        u502 05D1                          u350 04F5                          u415 06D0  
                        u503 05D6                          u351 04F4                          u360 0504  
                        u440 06FA                          u504 05D7                          u361 0503  
                        u441 06F9                          u505 05DC                          u370 0554  
                        u506 05DD                          u371 0553                          u435 06E1  
                        u460 0718                          u380 069B                          u461 0717  
                        u445 06F6                          u381 069A                          u470 071D  
                        u390 06AC                          u471 071C                          u455 070A  
                        u391 06AB                          u607 062B                          u480 05A5  
                        u617 063B                          u490 05BE                          u627 064E  
                        u485 05A0                          u637 0662                          u495 05B9  
                        u647 0676                          u657 068A                          u667 0739  
                        u677 049D                          _SMP 04A7                          fsr0 0004  
                        indf 0000                         l1200 04F6                         l1130 0562  
                       l1210 0513                         l1202 0500                         l1124 046F  
                       l1140 0587                         l1132 0565                         l1220 0556  
                       l1212 053F                         l1300 0759                         l1150 043D  
                       l1126 0479                         l1142 0590                         l1134 056C  
                       l1206 0505                         l1214 0547                         l1230 06B7  
                       l1222 0694                         l1310 0778                         l1302 075D  
                       l1152 0443                         l1136 056E                         l1208 0509  
                       l1160 0498                         l1216 0550                         l1240 06D7  
                       l1232 06BB                         l1224 0697                         l1320 07A2  
                       l1312 0782                         l1304 0767                         l1138 0583  
                       l1154 0449                         l1146 0462                         l1170 0488  
                       l1162 049B                         l1218 0554                         l1250 0708  
                       l1242 06DB                         l1234 06C3                         l1226 069B  
                       l1330 07D4                         l1322 07AC                         l1314 0786  
                       l1306 076B                         l1180 0528                         l1172 048B  
                       l1164 049F                         l1260 0728                         l1252 0709  
                       l1244 06DF                         l1236 06CB                         l1228 06AC  
                       l1332 07D9                         l1324 07B6                         l1316 0794  
                       l1308 0775                         l1182 052E                         l1166 047E  
                       l1158 048E                         l1342 04BF                         l1254 0712  
                       l1246 06E8                         l1238 06CE                         l1270 05EF  
                       l1190 04EF                         l1326 07C0                         l1318 079E  
                       l1430 0620                         l1422 05FD                         l1176 0518  
                       l1168 0481                         l1344 04D2                         l1248 06FA  
                       l1256 0718                         l1272 05F2                         l1264 0592  
                       l1184 04DA                         l1192 04A3                         l1328 07CA  
                       l1440 0646                         l1432 0625                         l1424 0601  
                       l1178 051B                         l1258 071D                         l1274 05F5  
                       l1266 0595                         l1186 04DC                         l1194 04A5  
                       l1290 0731                         l1450 067C                         l1442 0654  
                       l1434 0630                         l1426 0603                         l1276 05F6  
                       l1268 05EE                         l1188 04EB                         l1196 04AF  
                       l1292 0735                         l1452 0682                         l1444 065A  
                       l1436 0635                         l1428 061A                         l1278 05F9  
                       l1198 04B5                         l1294 0742                         l1446 0668  
                       l1438 0640                         l1296 074C                         l1448 066E  
                       l1298 074F                         STR_1 0009                         STR_2 002E  
                       STR_3 001B                         STR_4 0034                         STR_6 0026  
                       STR_7 003C                         STR_8 0040                         STR_9 003A  
                       _BRGH 04C2                         _CREN 00C4                         _RCIF 0065  
                       _SPEN 00C7                         _TRMT 04C1                         _TXEN 04C5  
                       _SYNC 04C4                         _main 05FD                         btemp 007E  
                       start 0000      __end_of_UART_Write_Text 053C              __end_of___aldiv 0731  
                      ?_main 0070                        STR_10 003E                        _RCREG 001A  
                      _SPBRG 0099                        _TXREG 0019                  ?_UART_Write 0070  
                      pclath 000A                        status 0003                        wtemp0 007E  
            __initialization 07E0                 __end_of_main 0694             __end_of_SendChar 04D9  
                     ??_main 003A         nrf_write_payload@len 007B                 ?_nrf_command 0071  
               ?_nrf_tx_char 0070                       _TRISC6 043E                       _TRISC7 043F  
                     _SSPCON 0014                       _SSPBUF 0013            __end_of_UART_Init 05FD  
                  ??___aldiv 0078               _nrf_flush_rxtx 04A3             ?_UART_Write_Text 0070  
char_to_binary_string@output 003D                       _arrcpy 04D9            __end_of_SPI_write 047D  
         nrf_flush_rxtx@data 007B      __end_of__initialization 07FC       __end_of_nrf_flush_rxtx 04BC  
             __pcstackCOMMON 0070                 __pidataBANK0 0439   __end_of_nrf_write_register 046E  
          ??_SPI_init_master 0070            ??_nrf_set_tx_mode 007B        nrf_write_payload@data 007D  
                 __pbssBANK0 003D        nrf_write_register@len 0079        nrf_write_register@reg 007A  
            nrf_tx_char@data 0022              nrf_tx_char@stat 0020                    ?_SendChar 0070  
            ?_nrf_flush_rxtx 0070                   __pmaintext 05FD                      ?_arrcpy 0070  
               ??_UART_Write 0070                      _SSPSTAT 0094                   __stringtab 0003  
                 ??_SendChar 007E                      ___aldiv 0694           __end_of_UART_Write 0448  
                    __ptext1 0731                      __ptext2 04A3                      __ptext3 04D9  
                    __ptext4 0592                      __ptext5 0694                      __ptext6 04BC  
                    __ptext7 053C                      __ptext8 048D                      __ptext9 047D  
       nrf_read_register@len 0079         nrf_read_register@reg 007A             ___aldiv@dividend 0074  
                    arrcpy@i 0075         end_of_initialization 07FC            __end_of_nrf_setup 07E0  
               SendChar@args 0023             ___aldiv@quotient 0022                    _UART_Init 0592  
             UART_Write@data 0070                    _TRISCbits 0087                    _TRISDbits 0088  
                  _SPI_write 046E                    _RXTX_ADDR 0047              _SPI_init_master 0454  
            _nrf_set_tx_mode 04F6                   ?_UART_Init 0026                nrf_setup@data 0020  
             __end_of_arrcpy 04F6          start_initialization 07E0           _nrf_write_register 0461  
              nrf_tx_char@ch 0021                   ?_SPI_write 0070             ??_nrf_flush_rxtx 007B  
        ?_nrf_write_register 0078                     ??_arrcpy 0072                  __pdataBANK0 0047  
       ??_nrf_write_register 007A       nrf_write_register@data 0078                    ___latbits 0002  
              __pcstackBANK0 0020      __end_of_SPI_init_master 0461      __end_of_nrf_set_tx_mode 0517  
              SPI_write@data 0070                     ?___aldiv 0070                  ??_UART_Init 002E  
                  __pstrings 0003                ??_nrf_command 0073                ??_nrf_tx_char 007E  
          ??_UART_Write_Text 0071                  ??_SPI_write 0070              ___aldiv@divisor 0070  
               nrf_command@i 0077              ___aldiv@counter 0020                    _nrf_setup 0731  
            nrf_command@data 0071            _nrf_read_register 0448            UART_Init@baudrate 0026  
         ?_nrf_read_register 0078                  __stringbase 0008                    arrcpy@len 0071  
                  arrcpy@dst 0074                    arrcpy@src 0070          ??_nrf_read_register 007A  
          _nrf_write_command 047D          __end_of_nrf_command 0592           ?_nrf_write_command 0070  
          _nrf_write_payload 048D                     _SendChar 04BC          UART_Init@_XTAL_FREQ 002A  
                 ?_nrf_setup 0070           ?_nrf_write_payload 007B          __end_of_nrf_tx_char 0561  
           ?_SPI_init_master 0070             ?_nrf_set_tx_mode 0070    __end_of_nrf_read_register 0454  
        ??_nrf_write_command 0071          ??_nrf_write_payload 007C           __end_of__stringtab 0009  
  __end_of_nrf_write_command 048D                     __ptext10 04F6                     __ptext11 0461  
                   __ptext12 0448                     __ptext13 0561                     __ptext14 046E  
                   __ptext15 0517                     __ptext16 043C                     __ptext17 0454  
      nrf_read_register@data 0078    __end_of_nrf_write_payload 04A3          UART_Write_Text@text 0073  
             nrf_command@len 0072                  _nrf_command 0561                  _nrf_tx_char 053C  
   nrf_write_command@command 0071           nrf_command@command 0075                  ??_nrf_setup 007C  
                  stringcode 0003                   _OSCCONbits 008F              _UART_Write_Text 0517  
                   stringdir 0003                     stringtab 0003                 ___aldiv@sign 0021  
    nrf_write_command@status 0072                   _UART_Write 043C            nrf_command@status 0076  
           UART_Write_Text@i 0071  
