

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Mar 17 13:42:39 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21     0000                     
    22                           ; Version 2.40
    23                           ; Generated 04/07/2022 GMT
    24                           ; 
    25                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0000                     	;# 
    58     0001                     	;# 
    59     0002                     	;# 
    60     0003                     	;# 
    61     0004                     	;# 
    62     0005                     	;# 
    63     0006                     	;# 
    64     0007                     	;# 
    65     0008                     	;# 
    66     0009                     	;# 
    67     000A                     	;# 
    68     000B                     	;# 
    69     000C                     	;# 
    70     000D                     	;# 
    71     000E                     	;# 
    72     000E                     	;# 
    73     000F                     	;# 
    74     0010                     	;# 
    75     0011                     	;# 
    76     0012                     	;# 
    77     0013                     	;# 
    78     0014                     	;# 
    79     0015                     	;# 
    80     0015                     	;# 
    81     0016                     	;# 
    82     0017                     	;# 
    83     0018                     	;# 
    84     0019                     	;# 
    85     001A                     	;# 
    86     001B                     	;# 
    87     001B                     	;# 
    88     001C                     	;# 
    89     001D                     	;# 
    90     001E                     	;# 
    91     001F                     	;# 
    92     0081                     	;# 
    93     0085                     	;# 
    94     0086                     	;# 
    95     0087                     	;# 
    96     0088                     	;# 
    97     0089                     	;# 
    98     008C                     	;# 
    99     008D                     	;# 
   100     008E                     	;# 
   101     008F                     	;# 
   102     0090                     	;# 
   103     0091                     	;# 
   104     0092                     	;# 
   105     0093                     	;# 
   106     0093                     	;# 
   107     0093                     	;# 
   108     0094                     	;# 
   109     0095                     	;# 
   110     0096                     	;# 
   111     0097                     	;# 
   112     0098                     	;# 
   113     0099                     	;# 
   114     009A                     	;# 
   115     009B                     	;# 
   116     009C                     	;# 
   117     009D                     	;# 
   118     009E                     	;# 
   119     009F                     	;# 
   120     0105                     	;# 
   121     0107                     	;# 
   122     0108                     	;# 
   123     0109                     	;# 
   124     010C                     	;# 
   125     010C                     	;# 
   126     010D                     	;# 
   127     010E                     	;# 
   128     010F                     	;# 
   129     0185                     	;# 
   130     0187                     	;# 
   131     0188                     	;# 
   132     0189                     	;# 
   133     018C                     	;# 
   134     018D                     	;# 
   135     0000                     	;# 
   136     0001                     	;# 
   137     0002                     	;# 
   138     0003                     	;# 
   139     0004                     	;# 
   140     0005                     	;# 
   141     0006                     	;# 
   142     0007                     	;# 
   143     0008                     	;# 
   144     0009                     	;# 
   145     000A                     	;# 
   146     000B                     	;# 
   147     000C                     	;# 
   148     000D                     	;# 
   149     000E                     	;# 
   150     000E                     	;# 
   151     000F                     	;# 
   152     0010                     	;# 
   153     0011                     	;# 
   154     0012                     	;# 
   155     0013                     	;# 
   156     0014                     	;# 
   157     0015                     	;# 
   158     0015                     	;# 
   159     0016                     	;# 
   160     0017                     	;# 
   161     0018                     	;# 
   162     0019                     	;# 
   163     001A                     	;# 
   164     001B                     	;# 
   165     001B                     	;# 
   166     001C                     	;# 
   167     001D                     	;# 
   168     001E                     	;# 
   169     001F                     	;# 
   170     0081                     	;# 
   171     0085                     	;# 
   172     0086                     	;# 
   173     0087                     	;# 
   174     0088                     	;# 
   175     0089                     	;# 
   176     008C                     	;# 
   177     008D                     	;# 
   178     008E                     	;# 
   179     008F                     	;# 
   180     0090                     	;# 
   181     0091                     	;# 
   182     0092                     	;# 
   183     0093                     	;# 
   184     0093                     	;# 
   185     0093                     	;# 
   186     0094                     	;# 
   187     0095                     	;# 
   188     0096                     	;# 
   189     0097                     	;# 
   190     0098                     	;# 
   191     0099                     	;# 
   192     009A                     	;# 
   193     009B                     	;# 
   194     009C                     	;# 
   195     009D                     	;# 
   196     009E                     	;# 
   197     009F                     	;# 
   198     0105                     	;# 
   199     0107                     	;# 
   200     0108                     	;# 
   201     0109                     	;# 
   202     010C                     	;# 
   203     010C                     	;# 
   204     010D                     	;# 
   205     010E                     	;# 
   206     010F                     	;# 
   207     0185                     	;# 
   208     0187                     	;# 
   209     0188                     	;# 
   210     0189                     	;# 
   211     018C                     	;# 
   212     018D                     	;# 
   213     0013                     _SSPBUF	set	19
   214     0014                     _SSPCON	set	20
   215     001A                     _RCREG	set	26
   216     0019                     _TXREG	set	25
   217     0043                     _RD3	set	67
   218     0065                     _RCIF	set	101
   219     00C4                     _CREN	set	196
   220     00C7                     _SPEN	set	199
   221     008F                     _OSCCONbits	set	143
   222     0088                     _TRISDbits	set	136
   223     0094                     _SSPSTATbits	set	148
   224     0087                     _TRISCbits	set	135
   225     0094                     _SSPSTAT	set	148
   226     0099                     _SPBRG	set	153
   227     04C1                     _TRMT	set	1217
   228     04C5                     _TXEN	set	1221
   229     043E                     _TRISC6	set	1086
   230     043F                     _TRISC7	set	1087
   231     04C4                     _SYNC	set	1220
   232     04C2                     _BRGH	set	1218
   233                           
   234                           	psect	strings
   235     0003                     __pstrings:
   236     0003                     stringtab:
   237     0003                     __stringtab:
   238                           
   239                           ;	String table - string pointers are 1 byte each
   240     0003  1BFF               	btfsc	btemp+1,7
   241     0004  280D               	ljmp	stringcode
   242     0005  1383               	bcf	3,7
   243     0006  187F               	btfsc	btemp+1,0
   244     0007  1783               	bsf	3,7
   245     0008  0800               	movf	0,w
   246     0009  0A84               	incf	4,f
   247     000A  1903               	skipnz
   248     000B  0AFF               	incf	btemp+1,f
   249     000C  0008               	return
   250     000D                     stringcode:
   251     000D                     stringdir:
   252     000D  3000               	movlw	high stringdir
   253     000E  008A               	movwf	10
   254     000F  0804               	movf	4,w
   255     0010  0A84               	incf	4,f
   256     0011  0782               	addwf	2,f
   257     0012                     __stringbase:
   258     0012  3400               	retlw	0
   259     0013                     __end_of__stringtab:
   260     0013                     STR_1:
   261     0013  3425               	retlw	37	;'%'
   262     0014  3463               	retlw	99	;'c'
   263     0015  3425               	retlw	37	;'%'
   264     0016  3463               	retlw	99	;'c'
   265     0017  3425               	retlw	37	;'%'
   266     0018  3463               	retlw	99	;'c'
   267     0019  3425               	retlw	37	;'%'
   268     001A  3463               	retlw	99	;'c'
   269     001B  3425               	retlw	37	;'%'
   270     001C  3463               	retlw	99	;'c'
   271     001D  3425               	retlw	37	;'%'
   272     001E  3463               	retlw	99	;'c'
   273     001F  3425               	retlw	37	;'%'
   274     0020  3463               	retlw	99	;'c'
   275     0021  3425               	retlw	37	;'%'
   276     0022  3463               	retlw	99	;'c'
   277     0023  340A               	retlw	10
   278     0024  3400               	retlw	0
   279     0025                     STR_2:
   280     0025  344E               	retlw	78	;'N'
   281     0026  3465               	retlw	101	;'e'
   282     0027  3477               	retlw	119	;'w'
   283     0028  340A               	retlw	10
   284     0029  3400               	retlw	0
   285                           
   286                           	psect	cinit
   287     07F0                     start_initialization:	
   288                           ; #config settings
   289                           
   290     07F0                     __initialization:
   291                           
   292                           ; Clear objects allocated to BANK0
   293     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   294     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   295     07F2  01C5               	clrf	__pbssBANK0& (0+127)
   296     07F3  01C6               	clrf	(__pbssBANK0+1)& (0+127)
   297     07F4  01C7               	clrf	(__pbssBANK0+2)& (0+127)
   298     07F5  01C8               	clrf	(__pbssBANK0+3)& (0+127)
   299     07F6  01C9               	clrf	(__pbssBANK0+4)& (0+127)
   300     07F7  01CA               	clrf	(__pbssBANK0+5)& (0+127)
   301     07F8  01CB               	clrf	(__pbssBANK0+6)& (0+127)
   302     07F9  01CC               	clrf	(__pbssBANK0+7)& (0+127)
   303     07FA  01CD               	clrf	(__pbssBANK0+8)& (0+127)
   304     07FB  01CE               	clrf	(__pbssBANK0+9)& (0+127)
   305     07FC                     end_of_initialization:	
   306                           ;End of C runtime variable initialization code
   307                           
   308     07FC                     __end_of__initialization:
   309     07FC  0183               	clrf	3
   310     07FD  120A  118A  2D69   	ljmp	_main	;jump to C main() function
   311                           
   312                           	psect	bssBANK0
   313     0045                     __pbssBANK0:
   314     0045                     char_to_binary_string@output:
   315     0045                     	ds	10
   316                           
   317                           	psect	cstackCOMMON
   318     0070                     __pcstackCOMMON:
   319     0070                     ??_sprintf:
   320     0070                     ?_char_to_binary_string:	
   321                           ; 1 bytes @ 0x0
   322                           
   323     0070                     ?_UART_Write:	
   324                           ; 1 bytes @ 0x0
   325                           
   326     0070                     ??_UART_Write:	
   327                           ; 1 bytes @ 0x0
   328                           
   329     0070                     ?_SPI_init_master:	
   330                           ; 1 bytes @ 0x0
   331                           
   332     0070                     ??_SPI_init_master:	
   333                           ; 1 bytes @ 0x0
   334                           
   335     0070                     ?_SPI_write:	
   336                           ; 1 bytes @ 0x0
   337                           
   338     0070                     ??_SPI_write:	
   339                           ; 1 bytes @ 0x0
   340                           
   341     0070                     ?_send:	
   342                           ; 1 bytes @ 0x0
   343                           
   344     0070                     ?_main:	
   345                           ; 1 bytes @ 0x0
   346                           
   347     0070                     ?___aldiv:	
   348                           ; 2 bytes @ 0x0
   349                           
   350     0070                     UART_Write@data:	
   351                           ; 4 bytes @ 0x0
   352                           
   353     0070                     SPI_write@write:	
   354                           ; 1 bytes @ 0x0
   355                           
   356     0070                     ___aldiv@divisor:	
   357                           ; 1 bytes @ 0x0
   358                           
   359                           
   360                           ; 4 bytes @ 0x0
   361     0070                     	ds	2
   362     0072                     sprintf@ap:
   363                           
   364                           ; 1 bytes @ 0x2
   365     0072                     	ds	1
   366     0073                     sprintf@c:
   367                           
   368                           ; 1 bytes @ 0x3
   369     0073                     	ds	1
   370     0074                     sprintf@sp:
   371     0074                     ___aldiv@dividend:	
   372                           ; 1 bytes @ 0x4
   373                           
   374                           
   375                           ; 4 bytes @ 0x4
   376     0074                     	ds	1
   377     0075                     ??_char_to_binary_string:
   378     0075                     ?_UART_Write_Text:	
   379                           ; 1 bytes @ 0x5
   380                           
   381     0075                     UART_Write_Text@text:	
   382                           ; 1 bytes @ 0x5
   383                           
   384                           
   385                           ; 2 bytes @ 0x5
   386     0075                     	ds	2
   387     0077                     ??_UART_Write_Text:
   388                           
   389                           ; 1 bytes @ 0x7
   390     0077                     	ds	1
   391     0078                     ??___aldiv:
   392                           
   393                           ; 1 bytes @ 0x8
   394     0078                     	ds	2
   395     007A                     UART_Write_Text@i:
   396                           
   397                           ; 2 bytes @ 0xA
   398     007A                     	ds	2
   399     007C                     ??_send:
   400                           
   401                           ; 1 bytes @ 0xC
   402     007C                     	ds	2
   403                           
   404                           	psect	cstackBANK0
   405     0020                     __pcstackBANK0:
   406     0020                     ?_sprintf:
   407     0020                     sprintf@f:	
   408                           ; 2 bytes @ 0x0
   409                           
   410     0020                     ___aldiv@counter:	
   411                           ; 1 bytes @ 0x0
   412                           
   413                           
   414                           ; 1 bytes @ 0x0
   415     0020                     	ds	1
   416     0021                     ___aldiv@sign:
   417                           
   418                           ; 1 bytes @ 0x1
   419     0021                     	ds	1
   420     0022                     ___aldiv@quotient:
   421                           
   422                           ; 4 bytes @ 0x2
   423     0022                     	ds	4
   424     0026                     ?_UART_Init:
   425     0026                     UART_Init@baudrate:	
   426                           ; 1 bytes @ 0x6
   427                           
   428                           
   429                           ; 4 bytes @ 0x6
   430     0026                     	ds	4
   431     002A                     UART_Init@_XTAL_FREQ:
   432                           
   433                           ; 4 bytes @ 0xA
   434     002A                     	ds	4
   435     002E                     ??_UART_Init:
   436                           
   437                           ; 1 bytes @ 0xE
   438     002E                     	ds	3
   439     0031                     _char_to_binary_string$244:
   440                           
   441                           ; 2 bytes @ 0x11
   442     0031                     	ds	2
   443     0033                     _char_to_binary_string$245:
   444                           
   445                           ; 2 bytes @ 0x13
   446     0033                     	ds	2
   447     0035                     _char_to_binary_string$246:
   448                           
   449                           ; 2 bytes @ 0x15
   450     0035                     	ds	2
   451     0037                     _char_to_binary_string$247:
   452                           
   453                           ; 2 bytes @ 0x17
   454     0037                     	ds	2
   455     0039                     _char_to_binary_string$248:
   456                           
   457                           ; 2 bytes @ 0x19
   458     0039                     	ds	2
   459     003B                     _char_to_binary_string$249:
   460                           
   461                           ; 2 bytes @ 0x1B
   462     003B                     	ds	2
   463     003D                     _char_to_binary_string$250:
   464                           
   465                           ; 2 bytes @ 0x1D
   466     003D                     	ds	2
   467     003F                     _char_to_binary_string$251:
   468                           
   469                           ; 2 bytes @ 0x1F
   470     003F                     	ds	2
   471     0041                     char_to_binary_string@character:
   472                           
   473                           ; 1 bytes @ 0x21
   474     0041                     	ds	1
   475     0042                     ??_main:
   476                           
   477                           ; 1 bytes @ 0x22
   478     0042                     	ds	3
   479                           
   480                           	psect	maintext
   481     0569                     __pmaintext:	
   482 ;;
   483 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   484 ;;
   485 ;; *************** function _main *****************
   486 ;; Defined at:
   487 ;;		line 138 in file "main.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;		None
   492 ;; Return value:  Size  Location     Type
   493 ;;                  2  136[None  ] int 
   494 ;; Registers used:
   495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   496 ;; Tracked objects:
   497 ;;		On entry : B00/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   501 ;;      Params:         0       0       0       0       0
   502 ;;      Locals:         0       0       0       0       0
   503 ;;      Temps:          0       3       0       0       0
   504 ;;      Totals:         0       3       0       0       0
   505 ;;Total ram usage:        3 bytes
   506 ;; Hardware stack levels required when called: 4
   507 ;; This function calls:
   508 ;;		_SPI_init_master
   509 ;;		_UART_Init
   510 ;;		_UART_Write_Text
   511 ;;		_send
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517     0569                     _main:	
   518                           ;psect for function _main
   519                           
   520     0569                     l1181:	
   521                           ;incstack = 0
   522                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   523                           
   524                           
   525                           ;main.c: 140:     TRISDbits.TRISD2 = 0;
   526     0569  1683               	bsf	3,5	;RP0=1, select bank1
   527     056A  1303               	bcf	3,6	;RP1=0, select bank1
   528     056B  1108               	bcf	8,2	;volatile
   529                           
   530                           ;main.c: 141:     TRISDbits.TRISD3 = 0;
   531     056C  1188               	bcf	8,3	;volatile
   532                           
   533                           ;main.c: 143:     RD3 = 1;
   534     056D  1283               	bcf	3,5	;RP0=0, select bank0
   535     056E  1303               	bcf	3,6	;RP1=0, select bank0
   536     056F  1588               	bsf	8,3	;volatile
   537     0570                     l1183:
   538                           
   539                           ;main.c: 145:     OSCCONbits.IRCF = 111;
   540     0570  3070               	movlw	112
   541     0571  1683               	bsf	3,5	;RP0=1, select bank1
   542     0572  1303               	bcf	3,6	;RP1=0, select bank1
   543     0573  048F               	iorwf	15,f	;volatile
   544     0574                     l1185:
   545                           
   546                           ;main.c: 147:     UART_Init(9600, 8000000);
   547     0574  3000               	movlw	0
   548     0575  1283               	bcf	3,5	;RP0=0, select bank0
   549     0576  1303               	bcf	3,6	;RP1=0, select bank0
   550     0577  00A9               	movwf	UART_Init@baudrate+3
   551     0578  3000               	movlw	0
   552     0579  00A8               	movwf	UART_Init@baudrate+2
   553     057A  3025               	movlw	37
   554     057B  00A7               	movwf	UART_Init@baudrate+1
   555     057C  3080               	movlw	128
   556     057D  00A6               	movwf	UART_Init@baudrate
   557     057E  3000               	movlw	0
   558     057F  00AD               	movwf	UART_Init@_XTAL_FREQ+3
   559     0580  307A               	movlw	122
   560     0581  00AC               	movwf	UART_Init@_XTAL_FREQ+2
   561     0582  3012               	movlw	18
   562     0583  00AB               	movwf	UART_Init@_XTAL_FREQ+1
   563     0584  3000               	movlw	0
   564     0585  00AA               	movwf	UART_Init@_XTAL_FREQ
   565     0586  120A  118A  2653  120A  118A  	fcall	_UART_Init
   566     058B                     l1187:
   567                           
   568                           ;main.c: 149:     SPI_init_master();
   569     058B  120A  118A  2504  120A  118A  	fcall	_SPI_init_master
   570     0590                     l1189:
   571                           
   572                           ;main.c: 151:         send();
   573     0590  120A  118A  25B0  120A  118A  	fcall	_send
   574     0595                     l1191:
   575                           
   576                           ;main.c: 152:         UART_Write_Text("New\n");
   577     0595  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   578     0596  00F5               	movwf	UART_Write_Text@text
   579     0597  3080               	movlw	128
   580     0598  00F6               	movwf	UART_Write_Text@text+1
   581     0599  120A  118A  2527  120A  118A  	fcall	_UART_Write_Text
   582     059E                     l1193:
   583                           
   584                           ;main.c: 154:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   585     059E  300B               	movlw	11
   586     059F  1283               	bcf	3,5	;RP0=0, select bank0
   587     05A0  1303               	bcf	3,6	;RP1=0, select bank0
   588     05A1  00C4               	movwf	??_main+2
   589     05A2  3026               	movlw	38
   590     05A3  00C3               	movwf	??_main+1
   591     05A4  305D               	movlw	93
   592     05A5  00C2               	movwf	??_main
   593     05A6                     u607:
   594     05A6  0BC2               	decfsz	??_main,f
   595     05A7  2DA6               	goto	u607
   596     05A8  0BC3               	decfsz	??_main+1,f
   597     05A9  2DA6               	goto	u607
   598     05AA  0BC4               	decfsz	??_main+2,f
   599     05AB  2DA6               	goto	u607
   600     05AC  2D90               	goto	l1189
   601     05AD  120A  118A  2800   	ljmp	start
   602     05B0                     __end_of_main:
   603                           
   604                           	psect	text1
   605     05B0                     __ptext1:	
   606 ;; *************** function _send *****************
   607 ;; Defined at:
   608 ;;		line 107 in file "main.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;		None
   611 ;; Auto vars:     Size  Location     Type
   612 ;;		None
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   622 ;;      Params:         0       0       0       0       0
   623 ;;      Locals:         0       0       0       0       0
   624 ;;      Temps:          2       0       0       0       0
   625 ;;      Totals:         2       0       0       0       0
   626 ;;Total ram usage:        2 bytes
   627 ;; Hardware stack levels used: 1
   628 ;; Hardware stack levels required when called: 3
   629 ;; This function calls:
   630 ;;		_SPI_write
   631 ;;		_UART_Write_Text
   632 ;;		_char_to_binary_string
   633 ;; This function is called by:
   634 ;;		_main
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638     05B0                     _send:	
   639                           ;psect for function _send
   640                           
   641     05B0                     l1157:	
   642                           ;incstack = 0
   643                           ; Regs used in _send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   644                           
   645                           
   646                           ;main.c: 108:     RD3 = 0;
   647     05B0  1283               	bcf	3,5	;RP0=0, select bank0
   648     05B1  1303               	bcf	3,6	;RP1=0, select bank0
   649     05B2  1188               	bcf	8,3	;volatile
   650     05B3                     l1159:
   651                           
   652                           ;main.c: 110:     SPI_write((0b00000000 | 0x00));
   653     05B3  3000               	movlw	0
   654     05B4  120A  118A  250F  120A  118A  	fcall	_SPI_write
   655     05B9                     l1161:
   656                           
   657                           ;main.c: 114:     _delay((unsigned long)((20)*(8000000/4000000.0)));
   658     05B9  300D               	movlw	13
   659     05BA  00FC               	movwf	??_send
   660     05BB                     u617:
   661     05BB  0BFC               	decfsz	??_send,f
   662     05BC  2DBB               	goto	u617
   663     05BD                     l1163:
   664                           
   665                           ;main.c: 116:     SSPBUF = 0b1001100;
   666     05BD  304C               	movlw	76
   667     05BE  1283               	bcf	3,5	;RP0=0, select bank0
   668     05BF  1303               	bcf	3,6	;RP1=0, select bank0
   669     05C0  0093               	movwf	19	;volatile
   670     05C1                     l129:	
   671                           ;main.c: 118:     while(!SSPSTATbits.BF);
   672                           
   673     05C1  1683               	bsf	3,5	;RP0=1, select bank1
   674     05C2  1303               	bcf	3,6	;RP1=0, select bank1
   675     05C3  1C14               	btfss	20,0	;volatile
   676     05C4  2DC6               	goto	u591
   677     05C5  2DC7               	goto	u590
   678     05C6                     u591:
   679     05C6  2DC1               	goto	l129
   680     05C7                     u590:
   681     05C7                     l1165:
   682                           
   683                           ;main.c: 120:     UART_Write_Text((char *)char_to_binary_string((char)SSPBUF));
   684     05C7  1283               	bcf	3,5	;RP0=0, select bank0
   685     05C8  1303               	bcf	3,6	;RP1=0, select bank0
   686     05C9  0813               	movf	19,w	;volatile
   687     05CA  120A  118A  26BE  120A  118A  	fcall	_char_to_binary_string
   688     05CF  00F5               	movwf	UART_Write_Text@text
   689     05D0  3000               	movlw	0
   690     05D1  00F6               	movwf	UART_Write_Text@text+1
   691     05D2  120A  118A  2527  120A  118A  	fcall	_UART_Write_Text
   692     05D7                     l1167:
   693                           
   694                           ;main.c: 122:     RD3 = 1;
   695     05D7  1283               	bcf	3,5	;RP0=0, select bank0
   696     05D8  1303               	bcf	3,6	;RP1=0, select bank0
   697     05D9  1588               	bsf	8,3	;volatile
   698     05DA                     l1169:
   699                           
   700                           ;main.c: 123:     _delay((unsigned long)((10)*(8000000/4000.0)));
   701     05DA  301A               	movlw	26
   702     05DB  00FD               	movwf	??_send+1
   703     05DC  30F8               	movlw	248
   704     05DD  00FC               	movwf	??_send
   705     05DE                     u627:
   706     05DE  0BFC               	decfsz	??_send,f
   707     05DF  2DDE               	goto	u627
   708     05E0  0BFD               	decfsz	??_send+1,f
   709     05E1  2DDE               	goto	u627
   710     05E2  0000               	nop
   711     05E3                     l1171:
   712                           
   713                           ;main.c: 125:     RD3 = 0;
   714     05E3  1283               	bcf	3,5	;RP0=0, select bank0
   715     05E4  1303               	bcf	3,6	;RP1=0, select bank0
   716     05E5  1188               	bcf	8,3	;volatile
   717     05E6                     l1173:
   718                           
   719                           ;main.c: 127:     SPI_write((0b00100000 | 0x00));
   720     05E6  3020               	movlw	32
   721     05E7  120A  118A  250F  120A  118A  	fcall	_SPI_write
   722     05EC                     l1175:
   723                           
   724                           ;main.c: 131:     _delay((unsigned long)((20)*(8000000/4000000.0)));
   725     05EC  300D               	movlw	13
   726     05ED  00FC               	movwf	??_send
   727     05EE                     u637:
   728     05EE  0BFC               	decfsz	??_send,f
   729     05EF  2DEE               	goto	u637
   730     05F0                     l1177:
   731                           
   732                           ;main.c: 133:     SPI_write(0b00110011);
   733     05F0  3033               	movlw	51
   734     05F1  120A  118A  250F  120A  118A  	fcall	_SPI_write
   735     05F6                     l1179:
   736                           
   737                           ;main.c: 135:     RD3 = 1;
   738     05F6  1283               	bcf	3,5	;RP0=0, select bank0
   739     05F7  1303               	bcf	3,6	;RP1=0, select bank0
   740     05F8  1588               	bsf	8,3	;volatile
   741     05F9                     l132:
   742     05F9  0008               	return
   743     05FA                     __end_of_send:
   744                           
   745                           	psect	text2
   746     06BE                     __ptext2:	
   747 ;; *************** function _char_to_binary_string *****************
   748 ;; Defined at:
   749 ;;		line 99 in file "main.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;  character       1    wreg     unsigned char 
   752 ;; Auto vars:     Size  Location     Type
   753 ;;  character       1   33[BANK0 ] unsigned char 
   754 ;; Return value:  Size  Location     Type
   755 ;;                  1    wreg      PTR unsigned char 
   756 ;; Registers used:
   757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   763 ;;      Params:         0       0       0       0       0
   764 ;;      Locals:         0      17       0       0       0
   765 ;;      Temps:          0       0       0       0       0
   766 ;;      Totals:         0      17       0       0       0
   767 ;;Total ram usage:       17 bytes
   768 ;; Hardware stack levels used: 1
   769 ;; Hardware stack levels required when called: 2
   770 ;; This function calls:
   771 ;;		_sprintf
   772 ;; This function is called by:
   773 ;;		_send
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777     06BE                     _char_to_binary_string:	
   778                           ;psect for function _char_to_binary_string
   779                           
   780                           
   781                           ;incstack = 0
   782                           ; Regs used in _char_to_binary_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   783                           ;char_to_binary_string@character stored from wreg
   784     06BE  1283               	bcf	3,5	;RP0=0, select bank0
   785     06BF  1303               	bcf	3,6	;RP1=0, select bank0
   786     06C0  00C1               	movwf	char_to_binary_string@character
   787     06C1                     l1047:
   788                           
   789                           ;main.c: 100:     static char output[10];;main.c: 102:     sprintf(output, "%c%c%c%c%c%c
      +                          %c%c""\n", (character & 0x80 ? '1' : '0'), (character & 0x40 ? '1' : '0'), (character & 
      +                          0x20 ? '1' : '0'), (character & 0x10 ? '1' : '0'), (character & 0x08 ? '1' : '0'), (char
      +                          acter & 0x04 ? '1' : '0'), (character & 0x02 ? '1' : '0'), (character & 0x01 ? '1' : '0'
      +                          ));
   790     06C1  1841               	btfsc	char_to_binary_string@character,0
   791     06C2  2EC4               	goto	u381
   792     06C3  2EC5               	goto	u380
   793     06C4                     u381:
   794     06C4  2ECA               	goto	l1051
   795     06C5                     u380:
   796     06C5                     l1049:
   797     06C5  3030               	movlw	48
   798     06C6  00B1               	movwf	_char_to_binary_string$244
   799     06C7  3000               	movlw	0
   800     06C8  00B2               	movwf	_char_to_binary_string$244+1
   801     06C9  2ECE               	goto	l1053
   802     06CA                     l1051:
   803     06CA  3031               	movlw	49
   804     06CB  00B1               	movwf	_char_to_binary_string$244
   805     06CC  3000               	movlw	0
   806     06CD  00B2               	movwf	_char_to_binary_string$244+1
   807     06CE                     l1053:
   808     06CE  18C1               	btfsc	char_to_binary_string@character,1
   809     06CF  2ED1               	goto	u391
   810     06D0  2ED2               	goto	u390
   811     06D1                     u391:
   812     06D1  2ED7               	goto	l1057
   813     06D2                     u390:
   814     06D2                     l1055:
   815     06D2  3030               	movlw	48
   816     06D3  00B3               	movwf	_char_to_binary_string$245
   817     06D4  3000               	movlw	0
   818     06D5  00B4               	movwf	_char_to_binary_string$245+1
   819     06D6  2EDB               	goto	l1059
   820     06D7                     l1057:
   821     06D7  3031               	movlw	49
   822     06D8  00B3               	movwf	_char_to_binary_string$245
   823     06D9  3000               	movlw	0
   824     06DA  00B4               	movwf	_char_to_binary_string$245+1
   825     06DB                     l1059:
   826     06DB  1941               	btfsc	char_to_binary_string@character,2
   827     06DC  2EDE               	goto	u401
   828     06DD  2EDF               	goto	u400
   829     06DE                     u401:
   830     06DE  2EE4               	goto	l1063
   831     06DF                     u400:
   832     06DF                     l1061:
   833     06DF  3030               	movlw	48
   834     06E0  00B5               	movwf	_char_to_binary_string$246
   835     06E1  3000               	movlw	0
   836     06E2  00B6               	movwf	_char_to_binary_string$246+1
   837     06E3  2EE8               	goto	l1065
   838     06E4                     l1063:
   839     06E4  3031               	movlw	49
   840     06E5  00B5               	movwf	_char_to_binary_string$246
   841     06E6  3000               	movlw	0
   842     06E7  00B6               	movwf	_char_to_binary_string$246+1
   843     06E8                     l1065:
   844     06E8  19C1               	btfsc	char_to_binary_string@character,3
   845     06E9  2EEB               	goto	u411
   846     06EA  2EEC               	goto	u410
   847     06EB                     u411:
   848     06EB  2EF1               	goto	l1069
   849     06EC                     u410:
   850     06EC                     l1067:
   851     06EC  3030               	movlw	48
   852     06ED  00B7               	movwf	_char_to_binary_string$247
   853     06EE  3000               	movlw	0
   854     06EF  00B8               	movwf	_char_to_binary_string$247+1
   855     06F0  2EF5               	goto	l1071
   856     06F1                     l1069:
   857     06F1  3031               	movlw	49
   858     06F2  00B7               	movwf	_char_to_binary_string$247
   859     06F3  3000               	movlw	0
   860     06F4  00B8               	movwf	_char_to_binary_string$247+1
   861     06F5                     l1071:
   862     06F5  1A41               	btfsc	char_to_binary_string@character,4
   863     06F6  2EF8               	goto	u421
   864     06F7  2EF9               	goto	u420
   865     06F8                     u421:
   866     06F8  2EFE               	goto	l1075
   867     06F9                     u420:
   868     06F9                     l1073:
   869     06F9  3030               	movlw	48
   870     06FA  00B9               	movwf	_char_to_binary_string$248
   871     06FB  3000               	movlw	0
   872     06FC  00BA               	movwf	_char_to_binary_string$248+1
   873     06FD  2F02               	goto	l1077
   874     06FE                     l1075:
   875     06FE  3031               	movlw	49
   876     06FF  00B9               	movwf	_char_to_binary_string$248
   877     0700  3000               	movlw	0
   878     0701  00BA               	movwf	_char_to_binary_string$248+1
   879     0702                     l1077:
   880     0702  1AC1               	btfsc	char_to_binary_string@character,5
   881     0703  2F05               	goto	u431
   882     0704  2F06               	goto	u430
   883     0705                     u431:
   884     0705  2F0B               	goto	l1081
   885     0706                     u430:
   886     0706                     l1079:
   887     0706  3030               	movlw	48
   888     0707  00BB               	movwf	_char_to_binary_string$249
   889     0708  3000               	movlw	0
   890     0709  00BC               	movwf	_char_to_binary_string$249+1
   891     070A  2F0F               	goto	l1083
   892     070B                     l1081:
   893     070B  3031               	movlw	49
   894     070C  00BB               	movwf	_char_to_binary_string$249
   895     070D  3000               	movlw	0
   896     070E  00BC               	movwf	_char_to_binary_string$249+1
   897     070F                     l1083:
   898     070F  1B41               	btfsc	char_to_binary_string@character,6
   899     0710  2F12               	goto	u441
   900     0711  2F13               	goto	u440
   901     0712                     u441:
   902     0712  2F18               	goto	l1087
   903     0713                     u440:
   904     0713                     l1085:
   905     0713  3030               	movlw	48
   906     0714  00BD               	movwf	_char_to_binary_string$250
   907     0715  3000               	movlw	0
   908     0716  00BE               	movwf	_char_to_binary_string$250+1
   909     0717  2F1C               	goto	l1089
   910     0718                     l1087:
   911     0718  3031               	movlw	49
   912     0719  00BD               	movwf	_char_to_binary_string$250
   913     071A  3000               	movlw	0
   914     071B  00BE               	movwf	_char_to_binary_string$250+1
   915     071C                     l1089:
   916     071C  1BC1               	btfsc	char_to_binary_string@character,7
   917     071D  2F1F               	goto	u451
   918     071E  2F20               	goto	u450
   919     071F                     u451:
   920     071F  2F25               	goto	l1093
   921     0720                     u450:
   922     0720                     l1091:
   923     0720  3030               	movlw	48
   924     0721  00BF               	movwf	_char_to_binary_string$251
   925     0722  3000               	movlw	0
   926     0723  00C0               	movwf	_char_to_binary_string$251+1
   927     0724  2F29               	goto	l1095
   928     0725                     l1093:
   929     0725  3031               	movlw	49
   930     0726  00BF               	movwf	_char_to_binary_string$251
   931     0727  3000               	movlw	0
   932     0728  00C0               	movwf	_char_to_binary_string$251+1
   933     0729                     l1095:
   934     0729  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   935     072A  00A0               	movwf	sprintf@f
   936     072B  0840               	movf	_char_to_binary_string$251+1,w
   937     072C  00A2               	movwf	?_sprintf+2
   938     072D  083F               	movf	_char_to_binary_string$251,w
   939     072E  00A1               	movwf	?_sprintf+1
   940     072F  083E               	movf	_char_to_binary_string$250+1,w
   941     0730  00A4               	movwf	?_sprintf+4
   942     0731  083D               	movf	_char_to_binary_string$250,w
   943     0732  00A3               	movwf	?_sprintf+3
   944     0733  083C               	movf	_char_to_binary_string$249+1,w
   945     0734  00A6               	movwf	?_sprintf+6
   946     0735  083B               	movf	_char_to_binary_string$249,w
   947     0736  00A5               	movwf	?_sprintf+5
   948     0737  083A               	movf	_char_to_binary_string$248+1,w
   949     0738  00A8               	movwf	?_sprintf+8
   950     0739  0839               	movf	_char_to_binary_string$248,w
   951     073A  00A7               	movwf	?_sprintf+7
   952     073B  0838               	movf	_char_to_binary_string$247+1,w
   953     073C  00AA               	movwf	?_sprintf+10
   954     073D  0837               	movf	_char_to_binary_string$247,w
   955     073E  00A9               	movwf	?_sprintf+9
   956     073F  0836               	movf	_char_to_binary_string$246+1,w
   957     0740  00AC               	movwf	?_sprintf+12
   958     0741  0835               	movf	_char_to_binary_string$246,w
   959     0742  00AB               	movwf	?_sprintf+11
   960     0743  0834               	movf	_char_to_binary_string$245+1,w
   961     0744  00AE               	movwf	?_sprintf+14
   962     0745  0833               	movf	_char_to_binary_string$245,w
   963     0746  00AD               	movwf	?_sprintf+13
   964     0747  0832               	movf	_char_to_binary_string$244+1,w
   965     0748  00B0               	movwf	?_sprintf+16
   966     0749  0831               	movf	_char_to_binary_string$244,w
   967     074A  00AF               	movwf	?_sprintf+15
   968     074B  3045               	movlw	(low (char_to_binary_string@output| 0))& (0+255)
   969     074C  120A  118A  25FA  120A  118A  	fcall	_sprintf
   970     0751                     l1097:
   971                           
   972                           ;main.c: 104:     return output;
   973     0751  3045               	movlw	(low (char_to_binary_string@output| 0))& (0+255)
   974     0752                     l126:
   975     0752  0008               	return
   976     0753                     __end_of_char_to_binary_string:
   977                           
   978                           	psect	text3
   979     05FA                     __ptext3:	
   980 ;; *************** function _sprintf *****************
   981 ;; Defined at:
   982 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  sp              1    wreg     PTR unsigned char 
   985 ;;		 -> char_to_binary_string@output(10), 
   986 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   987 ;;		 -> STR_1(18), 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  sp              1    4[COMMON] PTR unsigned char 
   990 ;;		 -> char_to_binary_string@output(10), 
   991 ;;  tmpval          4    0        struct .
   992 ;;  cp              2    0        PTR const unsigned char 
   993 ;;  len             2    0        unsigned int 
   994 ;;  val             2    0        unsigned int 
   995 ;;  c               1    3[COMMON] unsigned char 
   996 ;;  ap              1    2[COMMON] PTR void [1]
   997 ;;		 -> ?_sprintf(2), 
   998 ;;  flag            1    0        unsigned char 
   999 ;;  prec            1    0        char 
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  2    0[BANK0 ] int 
  1002 ;; Registers used:
  1003 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1009 ;;      Params:         0      17       0       0       0
  1010 ;;      Locals:         3       0       0       0       0
  1011 ;;      Temps:          2       0       0       0       0
  1012 ;;      Totals:         5      17       0       0       0
  1013 ;;Total ram usage:       22 bytes
  1014 ;; Hardware stack levels used: 2
  1015 ;; This function calls:
  1016 ;;		Nothing
  1017 ;; This function is called by:
  1018 ;;		_char_to_binary_string
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022     05FA                     _sprintf:	
  1023                           ;psect for function _sprintf
  1024                           
  1025                           
  1026                           ;incstack = 0
  1027                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath]
  1028                           ;sprintf@sp stored from wreg
  1029     05FA  00F4               	movwf	sprintf@sp
  1030     05FB                     l1007:
  1031                           
  1032                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1033     05FB  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1034     05FC  00F2               	movwf	sprintf@ap
  1035                           
  1036                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1037     05FD  2E3C               	goto	l1027
  1038     05FE                     l1009:
  1039                           
  1040                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1041     05FE  3025               	movlw	37
  1042     05FF  0673               	xorwf	sprintf@c,w
  1043     0600  1903               	btfsc	3,2
  1044     0601  2E03               	goto	u331
  1045     0602  2E04               	goto	u330
  1046     0603                     u331:
  1047     0603  2E0E               	goto	l1015
  1048     0604                     u330:
  1049     0604                     l1011:
  1050                           
  1051                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1052     0604  0874               	movf	sprintf@sp,w
  1053     0605  0084               	movwf	4
  1054     0606  0873               	movf	sprintf@c,w
  1055     0607  1383               	bcf	3,7	;select IRP bank0
  1056     0608  0080               	movwf	0
  1057     0609                     l1013:
  1058     0609  3001               	movlw	1
  1059     060A  00F0               	movwf	??_sprintf
  1060     060B  0870               	movf	??_sprintf,w
  1061     060C  07F4               	addwf	sprintf@sp,f
  1062                           
  1063                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1064     060D  2E3C               	goto	l1027
  1065     060E                     l1015:
  1066                           
  1067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1068     060E  2E22               	goto	l1025
  1069     060F                     l1017:
  1070                           
  1071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
  1072     060F  0872               	movf	sprintf@ap,w
  1073     0610  0084               	movwf	4
  1074     0611  1383               	bcf	3,7	;select IRP bank0
  1075     0612  0800               	movf	0,w
  1076     0613  00F3               	movwf	sprintf@c
  1077     0614                     l1019:
  1078     0614  3002               	movlw	2
  1079     0615  00F0               	movwf	??_sprintf
  1080     0616  0870               	movf	??_sprintf,w
  1081     0617  07F2               	addwf	sprintf@ap,f
  1082     0618                     l1021:
  1083                           
  1084                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  1085     0618  0874               	movf	sprintf@sp,w
  1086     0619  0084               	movwf	4
  1087     061A  0873               	movf	sprintf@c,w
  1088     061B  1383               	bcf	3,7	;select IRP bank0
  1089     061C  0080               	movwf	0
  1090     061D  3001               	movlw	1
  1091     061E  00F0               	movwf	??_sprintf
  1092     061F  0870               	movf	??_sprintf,w
  1093     0620  07F4               	addwf	sprintf@sp,f
  1094                           
  1095                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 836:    continue;
  1096     0621  2E3C               	goto	l1027
  1097     0622                     l1025:
  1098     0622  3001               	movlw	1
  1099     0623  07A0               	addwf	sprintf@f,f
  1100     0624  30FF               	movlw	-1
  1101     0625  0720               	addwf	sprintf@f,w
  1102     0626  0084               	movwf	4
  1103     0627  120A  118A  200D  120A  118A  	fcall	stringdir
  1104     062C  00F3               	movwf	sprintf@c
  1105     062D  00F0               	movwf	??_sprintf
  1106     062E  01F1               	clrf	??_sprintf+1
  1107                           
  1108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1109                           ; Switch size 1, requested type "simple"
  1110                           ; Number of cases is 1, Range of values is 0 to 0
  1111                           ; switch strategies available:
  1112                           ; Name         Instructions Cycles
  1113                           ; simple_byte            4     3 (average)
  1114                           ; direct_byte           11     8 (fixed)
  1115                           ; jumptable            260     6 (fixed)
  1116                           ;	Chosen strategy is simple_byte
  1117     062F  0871               	movf	??_sprintf+1,w
  1118     0630  3A00               	xorlw	0	; case 0
  1119     0631  1903               	skipnz
  1120     0632  2E34               	goto	l1225
  1121     0633  2E18               	goto	l1021
  1122     0634                     l1225:
  1123                           
  1124                           ; Switch size 1, requested type "simple"
  1125                           ; Number of cases is 2, Range of values is 0 to 99
  1126                           ; switch strategies available:
  1127                           ; Name         Instructions Cycles
  1128                           ; simple_byte            7     4 (average)
  1129                           ; jumptable            260     6 (fixed)
  1130                           ;	Chosen strategy is simple_byte
  1131     0634  0870               	movf	??_sprintf,w
  1132     0635  3A00               	xorlw	0	; case 0
  1133     0636  1903               	skipnz
  1134     0637  2E4E               	goto	l1029
  1135     0638  3A63               	xorlw	99	; case 99
  1136     0639  1903               	skipnz
  1137     063A  2E0F               	goto	l1017
  1138     063B  2E18               	goto	l1021
  1139     063C                     l1027:
  1140                           
  1141                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1142     063C  3001               	movlw	1
  1143     063D  1283               	bcf	3,5	;RP0=0, select bank0
  1144     063E  1303               	bcf	3,6	;RP1=0, select bank0
  1145     063F  07A0               	addwf	sprintf@f,f
  1146     0640  30FF               	movlw	-1
  1147     0641  0720               	addwf	sprintf@f,w
  1148     0642  0084               	movwf	4
  1149     0643  120A  118A  200D  120A  118A  	fcall	stringdir
  1150     0648  00F3               	movwf	sprintf@c
  1151     0649  0873               	movf	sprintf@c,w
  1152     064A  1D03               	btfss	3,2
  1153     064B  2E4D               	goto	u341
  1154     064C  2E4E               	goto	u340
  1155     064D                     u341:
  1156     064D  2DFE               	goto	l1009
  1157     064E                     u340:
  1158     064E                     l1029:
  1159                           
  1160                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1161     064E  0874               	movf	sprintf@sp,w
  1162     064F  0084               	movwf	4
  1163     0650  1383               	bcf	3,7	;select IRP bank0
  1164     0651  0180               	clrf	0
  1165     0652                     l239:
  1166     0652  0008               	return
  1167     0653                     __end_of_sprintf:
  1168                           
  1169                           	psect	text4
  1170     0527                     __ptext4:	
  1171 ;; *************** function _UART_Write_Text *****************
  1172 ;; Defined at:
  1173 ;;		line 33 in file "./uart.h"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;  text            2    5[COMMON] PTR unsigned char 
  1176 ;;		 -> STR_2(5), char_to_binary_string@output(10), 
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  i               2   10[COMMON] int 
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1188 ;;      Params:         2       0       0       0       0
  1189 ;;      Locals:         2       0       0       0       0
  1190 ;;      Temps:          3       0       0       0       0
  1191 ;;      Totals:         7       0       0       0       0
  1192 ;;Total ram usage:        7 bytes
  1193 ;; Hardware stack levels used: 1
  1194 ;; Hardware stack levels required when called: 1
  1195 ;; This function calls:
  1196 ;;		_UART_Write
  1197 ;; This function is called by:
  1198 ;;		_send
  1199 ;;		_main
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203     0527                     _UART_Write_Text:	
  1204                           ;psect for function _UART_Write_Text
  1205                           
  1206     0527                     l1039:	
  1207                           ;incstack = 0
  1208                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1209                           
  1210                           
  1211                           ;./uart.h: 33: void UART_Write_Text(char *text);./uart.h: 34: {;./uart.h: 35:   for(int 
      +                          i=0;text[i]!='\0';i++)
  1212     0527  01FA               	clrf	UART_Write_Text@i
  1213     0528  01FB               	clrf	UART_Write_Text@i+1
  1214     0529  2D4C               	goto	l1045
  1215     052A                     l1041:
  1216                           
  1217                           ;./uart.h: 36:     UART_Write(text[i]);
  1218     052A  087A               	movf	UART_Write_Text@i,w
  1219     052B  0775               	addwf	UART_Write_Text@text,w
  1220     052C  00F8               	movwf	??_UART_Write_Text+1
  1221     052D  0876               	movf	UART_Write_Text@text+1,w
  1222     052E  00F7               	movwf	??_UART_Write_Text
  1223     052F  1803               	skipnc
  1224     0530  0AF7               	incf	??_UART_Write_Text,f
  1225     0531  1FFA               	btfss	UART_Write_Text@i,7
  1226     0532  2D34               	goto	u350
  1227     0533  03F7               	decf	??_UART_Write_Text,f
  1228     0534                     u350:
  1229     0534  0877               	movf	??_UART_Write_Text,w
  1230     0535  00F9               	movwf	??_UART_Write_Text+2
  1231     0536  0879               	movf	??_UART_Write_Text+2,w
  1232     0537  1283               	bcf	3,5	;RP0=0, select bank0
  1233     0538  1303               	bcf	3,6	;RP1=0, select bank0
  1234     0539  00FF               	movwf	btemp+1
  1235     053A  0878               	movf	??_UART_Write_Text+1,w
  1236     053B  0084               	movwf	4
  1237     053C  120A  118A  2003  120A  118A  	fcall	stringtab
  1238     0541  120A  118A  251B  120A  118A  	fcall	_UART_Write
  1239     0546                     l1043:
  1240     0546  3001               	movlw	1
  1241     0547  07FA               	addwf	UART_Write_Text@i,f
  1242     0548  1803               	skipnc
  1243     0549  0AFB               	incf	UART_Write_Text@i+1,f
  1244     054A  3000               	movlw	0
  1245     054B  07FB               	addwf	UART_Write_Text@i+1,f
  1246     054C                     l1045:
  1247     054C  087A               	movf	UART_Write_Text@i,w
  1248     054D  0775               	addwf	UART_Write_Text@text,w
  1249     054E  00F8               	movwf	??_UART_Write_Text+1
  1250     054F  0876               	movf	UART_Write_Text@text+1,w
  1251     0550  00F7               	movwf	??_UART_Write_Text
  1252     0551  1803               	skipnc
  1253     0552  0AF7               	incf	??_UART_Write_Text,f
  1254     0553  1FFA               	btfss	UART_Write_Text@i,7
  1255     0554  2D56               	goto	u360
  1256     0555  03F7               	decf	??_UART_Write_Text,f
  1257     0556                     u360:
  1258     0556  0877               	movf	??_UART_Write_Text,w
  1259     0557  00F9               	movwf	??_UART_Write_Text+2
  1260     0558  0879               	movf	??_UART_Write_Text+2,w
  1261     0559  1283               	bcf	3,5	;RP0=0, select bank0
  1262     055A  1303               	bcf	3,6	;RP1=0, select bank0
  1263     055B  00FF               	movwf	btemp+1
  1264     055C  0878               	movf	??_UART_Write_Text+1,w
  1265     055D  0084               	movwf	4
  1266     055E  120A  118A  2003  120A  118A  	fcall	stringtab
  1267     0563  3A00               	xorlw	0
  1268     0564  1D03               	skipz
  1269     0565  2D67               	goto	u371
  1270     0566  2D68               	goto	u370
  1271     0567                     u371:
  1272     0567  2D2A               	goto	l1041
  1273     0568                     u370:
  1274     0568                     l59:
  1275     0568  0008               	return
  1276     0569                     __end_of_UART_Write_Text:
  1277                           
  1278                           	psect	text5
  1279     051B                     __ptext5:	
  1280 ;; *************** function _UART_Write *****************
  1281 ;; Defined at:
  1282 ;;		line 27 in file "./uart.h"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  data            1    wreg     unsigned char 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  data            1    0[COMMON] unsigned char 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      void 
  1289 ;; Registers used:
  1290 ;;		wreg
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1296 ;;      Params:         0       0       0       0       0
  1297 ;;      Locals:         1       0       0       0       0
  1298 ;;      Temps:          0       0       0       0       0
  1299 ;;      Totals:         1       0       0       0       0
  1300 ;;Total ram usage:        1 bytes
  1301 ;; Hardware stack levels used: 1
  1302 ;; This function calls:
  1303 ;;		Nothing
  1304 ;; This function is called by:
  1305 ;;		_UART_Write_Text
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309     051B                     _UART_Write:	
  1310                           ;psect for function _UART_Write
  1311                           
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in _UART_Write: [wreg]
  1315                           ;UART_Write@data stored from wreg
  1316     051B  00F0               	movwf	UART_Write@data
  1317     051C                     l1003:
  1318     051C                     l50:	
  1319                           ;./uart.h: 27: void UART_Write(char data);./uart.h: 28: {;./uart.h: 29:   while(!TRMT);
  1320                           
  1321     051C  1683               	bsf	3,5	;RP0=1, select bank1
  1322     051D  1303               	bcf	3,6	;RP1=0, select bank1
  1323     051E  1C98               	btfss	24,1	;volatile
  1324     051F  2D21               	goto	u321
  1325     0520  2D22               	goto	u320
  1326     0521                     u321:
  1327     0521  2D1C               	goto	l50
  1328     0522                     u320:
  1329     0522                     l1005:
  1330                           
  1331                           ;./uart.h: 30:   TXREG = data;
  1332     0522  0870               	movf	UART_Write@data,w
  1333     0523  1283               	bcf	3,5	;RP0=0, select bank0
  1334     0524  1303               	bcf	3,6	;RP1=0, select bank0
  1335     0525  0099               	movwf	25	;volatile
  1336     0526                     l53:
  1337     0526  0008               	return
  1338     0527                     __end_of_UART_Write:
  1339                           
  1340                           	psect	text6
  1341     050F                     __ptext6:	
  1342 ;; *************** function _SPI_write *****************
  1343 ;; Defined at:
  1344 ;;		line 24 in file "./spi.h"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  write           1    wreg     unsigned char 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  write           1    0[COMMON] unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      void 
  1351 ;; Registers used:
  1352 ;;		wreg
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1358 ;;      Params:         0       0       0       0       0
  1359 ;;      Locals:         1       0       0       0       0
  1360 ;;      Temps:          0       0       0       0       0
  1361 ;;      Totals:         1       0       0       0       0
  1362 ;;Total ram usage:        1 bytes
  1363 ;; Hardware stack levels used: 1
  1364 ;; This function calls:
  1365 ;;		Nothing
  1366 ;; This function is called by:
  1367 ;;		_send
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371     050F                     _SPI_write:	
  1372                           ;psect for function _SPI_write
  1373                           
  1374                           
  1375                           ;incstack = 0
  1376                           ; Regs used in _SPI_write: [wreg]
  1377                           ;SPI_write@write stored from wreg
  1378     050F  00F0               	movwf	SPI_write@write
  1379     0510                     l793:
  1380                           
  1381                           ;./spi.h: 25:     SSPBUF = write;
  1382     0510  0870               	movf	SPI_write@write,w
  1383     0511  1283               	bcf	3,5	;RP0=0, select bank0
  1384     0512  1303               	bcf	3,6	;RP1=0, select bank0
  1385     0513  0093               	movwf	19	;volatile
  1386     0514                     l74:	
  1387                           ;./spi.h: 27:     while(!SSPSTATbits.BF);
  1388                           
  1389     0514  1683               	bsf	3,5	;RP0=1, select bank1
  1390     0515  1303               	bcf	3,6	;RP1=0, select bank1
  1391     0516  1C14               	btfss	20,0	;volatile
  1392     0517  2D19               	goto	u71
  1393     0518  2D1A               	goto	u70
  1394     0519                     u71:
  1395     0519  2D14               	goto	l74
  1396     051A                     u70:
  1397     051A                     l77:
  1398     051A  0008               	return
  1399     051B                     __end_of_SPI_write:
  1400                           
  1401                           	psect	text7
  1402     0653                     __ptext7:	
  1403 ;; *************** function _UART_Init *****************
  1404 ;; Defined at:
  1405 ;;		line 15 in file "./uart.h"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  baudrate        4    6[BANK0 ] const long 
  1408 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;		None
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, status,2, status,0, pclath, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1420 ;;      Params:         0       8       0       0       0
  1421 ;;      Locals:         0       0       0       0       0
  1422 ;;      Temps:          0      12       0       0       0
  1423 ;;      Totals:         0      20       0       0       0
  1424 ;;Total ram usage:       20 bytes
  1425 ;; Hardware stack levels used: 1
  1426 ;; Hardware stack levels required when called: 1
  1427 ;; This function calls:
  1428 ;;		___aldiv
  1429 ;; This function is called by:
  1430 ;;		_main
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434     0653                     _UART_Init:	
  1435                           ;psect for function _UART_Init
  1436                           
  1437     0653                     l1141:	
  1438                           ;incstack = 0
  1439                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  1440                           
  1441                           
  1442                           ;./uart.h: 15: void UART_Init(const long int baudrate, long _XTAL_FREQ);./uart.h: 16: {;
      +                          ./uart.h: 17:     BRGH = 1;
  1443     0653  1683               	bsf	3,5	;RP0=1, select bank1
  1444     0654  1303               	bcf	3,6	;RP1=0, select bank1
  1445     0655  1518               	bsf	24,2	;volatile
  1446     0656                     l1143:
  1447                           
  1448                           ;./uart.h: 18:     SPBRG = (_XTAL_FREQ - baudrate*16)/(baudrate*16);
  1449     0656  1283               	bcf	3,5	;RP0=0, select bank0
  1450     0657  1303               	bcf	3,6	;RP1=0, select bank0
  1451     0658  0826               	movf	UART_Init@baudrate,w
  1452     0659  00AE               	movwf	??_UART_Init
  1453     065A  0827               	movf	UART_Init@baudrate+1,w
  1454     065B  00AF               	movwf	??_UART_Init+1
  1455     065C  0828               	movf	UART_Init@baudrate+2,w
  1456     065D  00B0               	movwf	??_UART_Init+2
  1457     065E  0829               	movf	UART_Init@baudrate+3,w
  1458     065F  00B1               	movwf	??_UART_Init+3
  1459     0660  3004               	movlw	4
  1460     0661                     u565:
  1461     0661  1003               	clrc
  1462     0662  0DAE               	rlf	??_UART_Init,f
  1463     0663  0DAF               	rlf	??_UART_Init+1,f
  1464     0664  0DB0               	rlf	??_UART_Init+2,f
  1465     0665  0DB1               	rlf	??_UART_Init+3,f
  1466     0666                     u560:
  1467     0666  3EFF               	addlw	-1
  1468     0667  1D03               	skipz
  1469     0668  2E61               	goto	u565
  1470     0669  0831               	movf	??_UART_Init+3,w
  1471     066A  00F3               	movwf	___aldiv@divisor+3
  1472     066B  0830               	movf	??_UART_Init+2,w
  1473     066C  00F2               	movwf	___aldiv@divisor+2
  1474     066D  082F               	movf	??_UART_Init+1,w
  1475     066E  00F1               	movwf	___aldiv@divisor+1
  1476     066F  082E               	movf	??_UART_Init,w
  1477     0670  00F0               	movwf	___aldiv@divisor
  1478     0671  0826               	movf	UART_Init@baudrate,w
  1479     0672  00B2               	movwf	??_UART_Init+4
  1480     0673  0827               	movf	UART_Init@baudrate+1,w
  1481     0674  00B3               	movwf	??_UART_Init+5
  1482     0675  0828               	movf	UART_Init@baudrate+2,w
  1483     0676  00B4               	movwf	??_UART_Init+6
  1484     0677  0829               	movf	UART_Init@baudrate+3,w
  1485     0678  00B5               	movwf	??_UART_Init+7
  1486     0679  3004               	movlw	4
  1487     067A                     u575:
  1488     067A  1003               	clrc
  1489     067B  0DB2               	rlf	??_UART_Init+4,f
  1490     067C  0DB3               	rlf	??_UART_Init+5,f
  1491     067D  0DB4               	rlf	??_UART_Init+6,f
  1492     067E  0DB5               	rlf	??_UART_Init+7,f
  1493     067F                     u570:
  1494     067F  3EFF               	addlw	-1
  1495     0680  1D03               	skipz
  1496     0681  2E7A               	goto	u575
  1497     0682  082A               	movf	UART_Init@_XTAL_FREQ,w
  1498     0683  00B6               	movwf	??_UART_Init+8
  1499     0684  082B               	movf	UART_Init@_XTAL_FREQ+1,w
  1500     0685  00B7               	movwf	??_UART_Init+9
  1501     0686  082C               	movf	UART_Init@_XTAL_FREQ+2,w
  1502     0687  00B8               	movwf	??_UART_Init+10
  1503     0688  082D               	movf	UART_Init@_XTAL_FREQ+3,w
  1504     0689  00B9               	movwf	??_UART_Init+11
  1505     068A  0832               	movf	??_UART_Init+4,w
  1506     068B  02B6               	subwf	??_UART_Init+8,f
  1507     068C  0833               	movf	??_UART_Init+5,w
  1508     068D  1C03               	skipc
  1509     068E  0F33               	incfsz	??_UART_Init+5,w
  1510     068F  2E91               	goto	u581
  1511     0690  2E92               	goto	u582
  1512     0691                     u581:
  1513     0691  02B7               	subwf	??_UART_Init+9,f
  1514     0692                     u582:
  1515     0692  0834               	movf	??_UART_Init+6,w
  1516     0693  1C03               	skipc
  1517     0694  0F34               	incfsz	??_UART_Init+6,w
  1518     0695  2E97               	goto	u583
  1519     0696  2E98               	goto	u584
  1520     0697                     u583:
  1521     0697  02B8               	subwf	??_UART_Init+10,f
  1522     0698                     u584:
  1523     0698  0835               	movf	??_UART_Init+7,w
  1524     0699  1C03               	skipc
  1525     069A  0F35               	incfsz	??_UART_Init+7,w
  1526     069B  2E9D               	goto	u585
  1527     069C  2E9E               	goto	u586
  1528     069D                     u585:
  1529     069D  02B9               	subwf	??_UART_Init+11,f
  1530     069E                     u586:
  1531     069E  0839               	movf	??_UART_Init+11,w
  1532     069F  00F7               	movwf	___aldiv@dividend+3
  1533     06A0  0838               	movf	??_UART_Init+10,w
  1534     06A1  00F6               	movwf	___aldiv@dividend+2
  1535     06A2  0837               	movf	??_UART_Init+9,w
  1536     06A3  00F5               	movwf	___aldiv@dividend+1
  1537     06A4  0836               	movf	??_UART_Init+8,w
  1538     06A5  00F4               	movwf	___aldiv@dividend
  1539     06A6  120A  118A  2753  120A  118A  	fcall	___aldiv
  1540     06AB  0870               	movf	?___aldiv,w
  1541     06AC  1683               	bsf	3,5	;RP0=1, select bank1
  1542     06AD  1303               	bcf	3,6	;RP1=0, select bank1
  1543     06AE  0099               	movwf	25	;volatile
  1544     06AF                     l1145:
  1545                           
  1546                           ;./uart.h: 19:     SYNC = 0;
  1547     06AF  1218               	bcf	24,4	;volatile
  1548     06B0                     l1147:
  1549                           
  1550                           ;./uart.h: 20:     SPEN = 1;
  1551     06B0  1283               	bcf	3,5	;RP0=0, select bank0
  1552     06B1  1303               	bcf	3,6	;RP1=0, select bank0
  1553     06B2  1798               	bsf	24,7	;volatile
  1554     06B3                     l1149:
  1555                           
  1556                           ;./uart.h: 21:     TRISC7 = 1;
  1557     06B3  1683               	bsf	3,5	;RP0=1, select bank1
  1558     06B4  1303               	bcf	3,6	;RP1=0, select bank1
  1559     06B5  1787               	bsf	7,7	;volatile
  1560     06B6                     l1151:
  1561                           
  1562                           ;./uart.h: 22:     TRISC6 = 1;
  1563     06B6  1707               	bsf	7,6	;volatile
  1564     06B7                     l1153:
  1565                           
  1566                           ;./uart.h: 23:     CREN = 1;
  1567     06B7  1283               	bcf	3,5	;RP0=0, select bank0
  1568     06B8  1303               	bcf	3,6	;RP1=0, select bank0
  1569     06B9  1618               	bsf	24,4	;volatile
  1570     06BA                     l1155:
  1571                           
  1572                           ;./uart.h: 24:     TXEN = 1;
  1573     06BA  1683               	bsf	3,5	;RP0=1, select bank1
  1574     06BB  1303               	bcf	3,6	;RP1=0, select bank1
  1575     06BC  1698               	bsf	24,5	;volatile
  1576     06BD                     l47:
  1577     06BD  0008               	return
  1578     06BE                     __end_of_UART_Init:
  1579                           
  1580                           	psect	text8
  1581     0753                     __ptext8:	
  1582 ;; *************** function ___aldiv *****************
  1583 ;; Defined at:
  1584 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;  divisor         4    0[COMMON] long 
  1587 ;;  dividend        4    4[COMMON] long 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  quotient        4    2[BANK0 ] long 
  1590 ;;  sign            1    1[BANK0 ] unsigned char 
  1591 ;;  counter         1    0[BANK0 ] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  4    0[COMMON] long 
  1594 ;; Registers used:
  1595 ;;		wreg, status,2, status,0
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1601 ;;      Params:         8       0       0       0       0
  1602 ;;      Locals:         0       6       0       0       0
  1603 ;;      Temps:          1       0       0       0       0
  1604 ;;      Totals:         9       6       0       0       0
  1605 ;;Total ram usage:       15 bytes
  1606 ;; Hardware stack levels used: 1
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_UART_Init
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614     0753                     ___aldiv:	
  1615                           ;psect for function ___aldiv
  1616                           
  1617     0753                     l1101:	
  1618                           ;incstack = 0
  1619                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1620                           
  1621     0753  1283               	bcf	3,5	;RP0=0, select bank0
  1622     0754  1303               	bcf	3,6	;RP1=0, select bank0
  1623     0755  01A1               	clrf	___aldiv@sign
  1624     0756                     l1103:
  1625     0756  1FF3               	btfss	___aldiv@divisor+3,7
  1626     0757  2F59               	goto	u461
  1627     0758  2F5A               	goto	u460
  1628     0759                     u461:
  1629     0759  2F67               	goto	l308
  1630     075A                     u460:
  1631     075A                     l1105:
  1632     075A  09F0               	comf	___aldiv@divisor,f
  1633     075B  09F1               	comf	___aldiv@divisor+1,f
  1634     075C  09F2               	comf	___aldiv@divisor+2,f
  1635     075D  09F3               	comf	___aldiv@divisor+3,f
  1636     075E  0AF0               	incf	___aldiv@divisor,f
  1637     075F  1903               	skipnz
  1638     0760  0AF1               	incf	___aldiv@divisor+1,f
  1639     0761  1903               	skipnz
  1640     0762  0AF2               	incf	___aldiv@divisor+2,f
  1641     0763  1903               	skipnz
  1642     0764  0AF3               	incf	___aldiv@divisor+3,f
  1643     0765  01A1               	clrf	___aldiv@sign
  1644     0766  0AA1               	incf	___aldiv@sign,f
  1645     0767                     l308:
  1646     0767  1FF7               	btfss	___aldiv@dividend+3,7
  1647     0768  2F6A               	goto	u471
  1648     0769  2F6B               	goto	u470
  1649     076A                     u471:
  1650     076A  2F7A               	goto	l1111
  1651     076B                     u470:
  1652     076B                     l1107:
  1653     076B  09F4               	comf	___aldiv@dividend,f
  1654     076C  09F5               	comf	___aldiv@dividend+1,f
  1655     076D  09F6               	comf	___aldiv@dividend+2,f
  1656     076E  09F7               	comf	___aldiv@dividend+3,f
  1657     076F  0AF4               	incf	___aldiv@dividend,f
  1658     0770  1903               	skipnz
  1659     0771  0AF5               	incf	___aldiv@dividend+1,f
  1660     0772  1903               	skipnz
  1661     0773  0AF6               	incf	___aldiv@dividend+2,f
  1662     0774  1903               	skipnz
  1663     0775  0AF7               	incf	___aldiv@dividend+3,f
  1664     0776                     l1109:
  1665     0776  3001               	movlw	1
  1666     0777  00F8               	movwf	??___aldiv
  1667     0778  0878               	movf	??___aldiv,w
  1668     0779  06A1               	xorwf	___aldiv@sign,f
  1669     077A                     l1111:
  1670     077A  3000               	movlw	0
  1671     077B  00A5               	movwf	___aldiv@quotient+3
  1672     077C  3000               	movlw	0
  1673     077D  00A4               	movwf	___aldiv@quotient+2
  1674     077E  3000               	movlw	0
  1675     077F  00A3               	movwf	___aldiv@quotient+1
  1676     0780  3000               	movlw	0
  1677     0781  00A2               	movwf	___aldiv@quotient
  1678     0782                     l1113:
  1679     0782  0873               	movf	___aldiv@divisor+3,w
  1680     0783  0472               	iorwf	___aldiv@divisor+2,w
  1681     0784  0471               	iorwf	___aldiv@divisor+1,w
  1682     0785  0470               	iorwf	___aldiv@divisor,w
  1683     0786  1903               	skipnz
  1684     0787  2F89               	goto	u481
  1685     0788  2F8A               	goto	u480
  1686     0789                     u481:
  1687     0789  2FD7               	goto	l1133
  1688     078A                     u480:
  1689     078A                     l1115:
  1690     078A  01A0               	clrf	___aldiv@counter
  1691     078B  0AA0               	incf	___aldiv@counter,f
  1692     078C  2F9A               	goto	l1119
  1693     078D                     l1117:
  1694     078D  3001               	movlw	1
  1695     078E  00F8               	movwf	??___aldiv
  1696     078F                     u495:
  1697     078F  1003               	clrc
  1698     0790  0DF0               	rlf	___aldiv@divisor,f
  1699     0791  0DF1               	rlf	___aldiv@divisor+1,f
  1700     0792  0DF2               	rlf	___aldiv@divisor+2,f
  1701     0793  0DF3               	rlf	___aldiv@divisor+3,f
  1702     0794  0BF8               	decfsz	??___aldiv,f
  1703     0795  2F8F               	goto	u495
  1704     0796  3001               	movlw	1
  1705     0797  00F8               	movwf	??___aldiv
  1706     0798  0878               	movf	??___aldiv,w
  1707     0799  07A0               	addwf	___aldiv@counter,f
  1708     079A                     l1119:
  1709     079A  1FF3               	btfss	___aldiv@divisor+3,7
  1710     079B  2F9D               	goto	u501
  1711     079C  2F9E               	goto	u500
  1712     079D                     u501:
  1713     079D  2F8D               	goto	l1117
  1714     079E                     u500:
  1715     079E                     l1121:
  1716     079E  3001               	movlw	1
  1717     079F  00F8               	movwf	??___aldiv
  1718     07A0                     u515:
  1719     07A0  1003               	clrc
  1720     07A1  0DA2               	rlf	___aldiv@quotient,f
  1721     07A2  0DA3               	rlf	___aldiv@quotient+1,f
  1722     07A3  0DA4               	rlf	___aldiv@quotient+2,f
  1723     07A4  0DA5               	rlf	___aldiv@quotient+3,f
  1724     07A5  0BF8               	decfsz	??___aldiv,f
  1725     07A6  2FA0               	goto	u515
  1726     07A7                     l1123:
  1727     07A7  0873               	movf	___aldiv@divisor+3,w
  1728     07A8  0277               	subwf	___aldiv@dividend+3,w
  1729     07A9  1D03               	skipz
  1730     07AA  2FB5               	goto	u525
  1731     07AB  0872               	movf	___aldiv@divisor+2,w
  1732     07AC  0276               	subwf	___aldiv@dividend+2,w
  1733     07AD  1D03               	skipz
  1734     07AE  2FB5               	goto	u525
  1735     07AF  0871               	movf	___aldiv@divisor+1,w
  1736     07B0  0275               	subwf	___aldiv@dividend+1,w
  1737     07B1  1D03               	skipz
  1738     07B2  2FB5               	goto	u525
  1739     07B3  0870               	movf	___aldiv@divisor,w
  1740     07B4  0274               	subwf	___aldiv@dividend,w
  1741     07B5                     u525:
  1742     07B5  1C03               	skipc
  1743     07B6  2FB8               	goto	u521
  1744     07B7  2FB9               	goto	u520
  1745     07B8                     u521:
  1746     07B8  2FC8               	goto	l1129
  1747     07B9                     u520:
  1748     07B9                     l1125:
  1749     07B9  0870               	movf	___aldiv@divisor,w
  1750     07BA  02F4               	subwf	___aldiv@dividend,f
  1751     07BB  0871               	movf	___aldiv@divisor+1,w
  1752     07BC  1C03               	skipc
  1753     07BD  0F71               	incfsz	___aldiv@divisor+1,w
  1754     07BE  02F5               	subwf	___aldiv@dividend+1,f
  1755     07BF  0872               	movf	___aldiv@divisor+2,w
  1756     07C0  1C03               	skipc
  1757     07C1  0F72               	incfsz	___aldiv@divisor+2,w
  1758     07C2  02F6               	subwf	___aldiv@dividend+2,f
  1759     07C3  0873               	movf	___aldiv@divisor+3,w
  1760     07C4  1C03               	skipc
  1761     07C5  0F73               	incfsz	___aldiv@divisor+3,w
  1762     07C6  02F7               	subwf	___aldiv@dividend+3,f
  1763     07C7                     l1127:
  1764     07C7  1422               	bsf	___aldiv@quotient,0
  1765     07C8                     l1129:
  1766     07C8  3001               	movlw	1
  1767     07C9                     u535:
  1768     07C9  1003               	clrc
  1769     07CA  0CF3               	rrf	___aldiv@divisor+3,f
  1770     07CB  0CF2               	rrf	___aldiv@divisor+2,f
  1771     07CC  0CF1               	rrf	___aldiv@divisor+1,f
  1772     07CD  0CF0               	rrf	___aldiv@divisor,f
  1773     07CE  3EFF               	addlw	-1
  1774     07CF  1D03               	skipz
  1775     07D0  2FC9               	goto	u535
  1776     07D1                     l1131:
  1777     07D1  3001               	movlw	1
  1778     07D2  02A0               	subwf	___aldiv@counter,f
  1779     07D3  1D03               	btfss	3,2
  1780     07D4  2FD6               	goto	u541
  1781     07D5  2FD7               	goto	u540
  1782     07D6                     u541:
  1783     07D6  2F9E               	goto	l1121
  1784     07D7                     u540:
  1785     07D7                     l1133:
  1786     07D7  0821               	movf	___aldiv@sign,w
  1787     07D8  1903               	btfsc	3,2
  1788     07D9  2FDB               	goto	u551
  1789     07DA  2FDC               	goto	u550
  1790     07DB                     u551:
  1791     07DB  2FE7               	goto	l1137
  1792     07DC                     u550:
  1793     07DC                     l1135:
  1794     07DC  09A2               	comf	___aldiv@quotient,f
  1795     07DD  09A3               	comf	___aldiv@quotient+1,f
  1796     07DE  09A4               	comf	___aldiv@quotient+2,f
  1797     07DF  09A5               	comf	___aldiv@quotient+3,f
  1798     07E0  0AA2               	incf	___aldiv@quotient,f
  1799     07E1  1903               	skipnz
  1800     07E2  0AA3               	incf	___aldiv@quotient+1,f
  1801     07E3  1903               	skipnz
  1802     07E4  0AA4               	incf	___aldiv@quotient+2,f
  1803     07E5  1903               	skipnz
  1804     07E6  0AA5               	incf	___aldiv@quotient+3,f
  1805     07E7                     l1137:
  1806     07E7  0825               	movf	___aldiv@quotient+3,w
  1807     07E8  00F3               	movwf	?___aldiv+3
  1808     07E9  0824               	movf	___aldiv@quotient+2,w
  1809     07EA  00F2               	movwf	?___aldiv+2
  1810     07EB  0823               	movf	___aldiv@quotient+1,w
  1811     07EC  00F1               	movwf	?___aldiv+1
  1812     07ED  0822               	movf	___aldiv@quotient,w
  1813     07EE  00F0               	movwf	?___aldiv
  1814     07EF                     l318:
  1815     07EF  0008               	return
  1816     07F0                     __end_of___aldiv:
  1817                           
  1818                           	psect	text9
  1819     0504                     __ptext9:	
  1820 ;; *************** function _SPI_init_master *****************
  1821 ;; Defined at:
  1822 ;;		line 16 in file "./spi.h"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, status,2
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1836 ;;      Params:         0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0
  1838 ;;      Temps:          0       0       0       0       0
  1839 ;;      Totals:         0       0       0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used: 1
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_main
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849     0504                     _SPI_init_master:	
  1850                           ;psect for function _SPI_init_master
  1851                           
  1852     0504                     l905:	
  1853                           ;incstack = 0
  1854                           ; Regs used in _SPI_init_master: [wreg+status,2]
  1855                           
  1856                           
  1857                           ;./spi.h: 17:     SSPCON = 0b00100010;
  1858     0504  3022               	movlw	34
  1859     0505  1283               	bcf	3,5	;RP0=0, select bank0
  1860     0506  1303               	bcf	3,6	;RP1=0, select bank0
  1861     0507  0094               	movwf	20	;volatile
  1862     0508                     l907:
  1863                           
  1864                           ;./spi.h: 18:     SSPSTAT = 0b00000000;
  1865     0508  1683               	bsf	3,5	;RP0=1, select bank1
  1866     0509  1303               	bcf	3,6	;RP1=0, select bank1
  1867     050A  0194               	clrf	20	;volatile
  1868     050B                     l909:
  1869                           
  1870                           ;./spi.h: 19:     TRISCbits.TRISC5 = 0;
  1871     050B  1287               	bcf	7,5	;volatile
  1872     050C                     l911:
  1873                           
  1874                           ;./spi.h: 20:     TRISCbits.TRISC4 = 1;
  1875     050C  1607               	bsf	7,4	;volatile
  1876     050D                     l913:
  1877                           
  1878                           ;./spi.h: 21:     TRISCbits.TRISC3 = 0;
  1879     050D  1187               	bcf	7,3	;volatile
  1880     050E                     l71:
  1881     050E  0008               	return
  1882     050F                     __end_of_SPI_init_master:
  1883     007E                     btemp	set	126	;btemp
  1884     007E                     wtemp0	set	126
  1885                           
  1886                           	psect	config
  1887                           
  1888                           ;Config register CONFIG1 @ 0x2007
  1889                           ;	Oscillator Selection bits
  1890                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1891                           ;	Watchdog Timer Enable bit
  1892                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1893                           ;	Power-up Timer Enable bit
  1894                           ;	PWRTE = OFF, PWRT disabled
  1895                           ;	RE3/MCLR pin function select bit
  1896                           ;	MCLRE = 0x1, unprogrammed default
  1897                           ;	Code Protection bit
  1898                           ;	CP = OFF, Program memory code protection is disabled
  1899                           ;	Data Code Protection bit
  1900                           ;	CPD = OFF, Data memory code protection is disabled
  1901                           ;	Brown Out Reset Selection bits
  1902                           ;	BOREN = OFF, BOR disabled
  1903                           ;	Internal External Switchover bit
  1904                           ;	IESO = 0x1, unprogrammed default
  1905                           ;	Fail-Safe Clock Monitor Enabled bit
  1906                           ;	FCMEN = 0x1, unprogrammed default
  1907                           ;	Low Voltage Programming Enable bit
  1908                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1909                           ;	In-Circuit Debugger Mode bit
  1910                           ;	DEBUG = 0x1, unprogrammed default
  1911     2007                     	org	8199
  1912     2007  2CF2               	dw	11506
  1913                           
  1914                           ;Config register CONFIG2 @ 0x2008
  1915                           ;	Brown-out Reset Selection bit
  1916                           ;	BOR4V = 0x1, unprogrammed default
  1917                           ;	Flash Program Memory Self Write Enable bits
  1918                           ;	WRT = OFF, Write protection off
  1919     2008                     	org	8200
  1920     2008  3FFF               	dw	16383

Data Sizes:
    Strings     23
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      47
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[5]), char_to_binary_string@output(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_send
    _send->_UART_Write_Text
    _char_to_binary_string->_sprintf
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _send->_char_to_binary_string
    _char_to_binary_string->_sprintf
    _UART_Write_Text->_char_to_binary_string
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1896
                                             34 BANK0      3     3      0
                    _SPI_init_master
                          _UART_Init
                    _UART_Write_Text
                               _send
 ---------------------------------------------------------------------------------
 (1) _send                                                 2     2      0     962
                                             12 COMMON     2     2      0
                          _SPI_write
                    _UART_Write_Text
              _char_to_binary_string
 ---------------------------------------------------------------------------------
 (2) _char_to_binary_string                               17    17      0     683
                                             17 BANK0     17    17      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             34    17     17     315
                                              0 COMMON     5     5      0
                                              0 BANK0     17     0     17
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      7     5      2     264
                                              5 COMMON     7     5      2
                         _UART_Write
              _char_to_binary_string (ARG)
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_write                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_Init
     ___aldiv
   _UART_Write_Text
     _UART_Write
     _char_to_binary_string (ARG)
       _sprintf
   _send
     _SPI_write
     _UART_Write_Text
     _char_to_binary_string

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      2F       5       58.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3D      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Mar 17 13:42:39 2023

                             pc 0002                     _SSPSTATbits 0094                              l50 051C  
                            l53 0526                              l71 050E                              l47 06BD  
                            l74 0514                              l59 0568                              l77 051A  
                            u70 051A                              u71 0519                              fsr 0004  
                           l132 05F9                             l126 0752                             l129 05C1  
                           l308 0767                             l318 07EF                             l239 0652  
                           l911 050C                             l913 050D                             l905 0504  
                           l907 0508                             l909 050B                             l793 0510  
                           _RD3 0043                             u320 0522                             u400 06DF  
                           u321 0521                             u401 06DE                             u330 0604  
                           u410 06EC                             u331 0603                             u411 06EB  
                           u500 079E                             u340 064E                             u420 06F9  
                           u501 079D                             u341 064D                             u421 06F8  
                           u350 0534                             u430 0706                             u431 0705  
                           u520 07B9                             u360 0556                             u440 0713  
                           u521 07B8                             u441 0712                             u370 0568  
                           u450 0720                             u515 07A0                             u371 0567  
                           u451 071F                             u540 07D7                             u460 075A  
                           u380 06C5                             u541 07D6                             u525 07B5  
                           u461 0759                             u381 06C4                             u550 07DC  
                           u470 076B                             u390 06D2                             u551 07DB  
                           u535 07C9                             u471 076A                             u391 06D1  
                           u607 05A6                             u480 078A                             u560 0666  
                           u481 0789                             u617 05BB                             u570 067F  
                           u627 05DE                             u581 0691                             u565 0661  
                           u637 05EE                             u582 0692                             u590 05C7  
                           u495 078F                             u583 0697                             u575 067A  
                           u591 05C6                             u584 0698                             u585 069D  
                           u586 069E                             fsr0 0004                             indf 0000  
                          l1003 051C                            l1011 0604                            l1101 0753  
                          l1005 0522                            l1021 0618                            l1013 0609  
                          l1111 077A                            l1103 0756                            l1015 060E  
                          l1007 05FB                            l1121 079E                            l1113 0782  
                          l1105 075A                            l1041 052A                            l1017 060F  
                          l1025 0622                            l1009 05FE                            l1131 07D1  
                          l1123 07A7                            l1115 078A                            l1107 076B  
                          l1043 0546                            l1019 0614                            l1027 063C  
                          l1051 06CA                            l1125 07B9                            l1117 078D  
                          l1133 07D7                            l1109 0776                            l1141 0653  
                          l1045 054C                            l1029 064E                            l1061 06DF  
                          l1053 06CE                            l1135 07DC                            l1127 07C7  
                          l1119 079A                            l1151 06B6                            l1143 0656  
                          l1039 0527                            l1071 06F5                            l1063 06E4  
                          l1055 06D2                            l1047 06C1                            l1137 07E7  
                          l1129 07C8                            l1153 06B7                            l1145 06AF  
                          l1225 0634                            l1081 070B                            l1073 06F9  
                          l1065 06E8                            l1057 06D7                            l1049 06C5  
                          l1161 05B9                            l1155 06BA                            l1147 06B0  
                          l1091 0720                            l1083 070F                            l1075 06FE  
                          l1067 06EC                            l1059 06DB                            l1171 05E3  
                          l1163 05BD                            l1149 06B3                            l1093 0725  
                          l1085 0713                            l1077 0702                            l1069 06F1  
                          l1173 05E6                            l1165 05C7                            l1157 05B0  
                          l1181 0569                            l1095 0729                            l1087 0718  
                          l1079 0706                            l1175 05EC                            l1167 05D7  
                          l1159 05B3                            l1191 0595                            l1183 0570  
                          l1097 0751                            l1089 071C                            l1177 05F0  
                          l1169 05DA                            l1193 059E                            l1185 0574  
                          l1179 05F6                            l1187 058B                            l1189 0590  
                          STR_1 0013                            STR_2 0025                            _BRGH 04C2  
                          _CREN 00C4                            _RCIF 0065                            _SPEN 00C7  
                          _TRMT 04C1                            _TXEN 04C5                            _SYNC 04C4  
                          _main 0569                            _send 05B0                            btemp 007E  
                          start 0000         __end_of_UART_Write_Text 0569                 __end_of___aldiv 07F0  
                         ?_main 0070                           ?_send 0070                           _RCREG 001A  
       ??_char_to_binary_string 0075                           _SPBRG 0099                           _TXREG 0019  
                   ?_UART_Write 0070                           pclath 000A                           status 0003  
                         wtemp0 007E                 __end_of_sprintf 0653                 __initialization 07F0  
                  __end_of_main 05B0                    __end_of_send 05FA                          ??_main 0042  
                        ??_send 007C                          _TRISC6 043E                          _TRISC7 043F  
                        _SSPCON 0014                          _SSPBUF 0013               __end_of_UART_Init 06BE  
                     ??___aldiv 0078                ?_UART_Write_Text 0075     char_to_binary_string@output 0045  
             __end_of_SPI_write 051B                       ??_sprintf 0070         __end_of__initialization 07FC  
                __pcstackCOMMON 0070               ??_SPI_init_master 0070                      __pbssBANK0 0045  
                    __pmaintext 0569                  SPI_write@write 0070                    ??_UART_Write 0070  
 __end_of_char_to_binary_string 0753                         _SSPSTAT 0094                      __stringtab 0003  
                       ___aldiv 0753              __end_of_UART_Write 0527                         __ptext1 05B0  
                       __ptext2 06BE                         __ptext3 05FA                         __ptext4 0527  
                       __ptext5 051B                         __ptext6 050F                         __ptext7 0653  
                       __ptext8 0753                         __ptext9 0504                ___aldiv@dividend 0074  
                       _sprintf 05FA            end_of_initialization 07FC                ___aldiv@quotient 0022  
                     _UART_Init 0653                  UART_Write@data 0070                       _TRISCbits 0087  
                     _TRISDbits 0088                       _SPI_write 050F                 _SPI_init_master 0504  
                    ?_UART_Init 0026             start_initialization 07F0                      ?_SPI_write 0070  
                     ___latbits 0002                   __pcstackBANK0 0020         __end_of_SPI_init_master 050F  
                      ?___aldiv 0070                     ??_UART_Init 002E                       __pstrings 0003  
                      ?_sprintf 0020           _char_to_binary_string 06BE               ??_UART_Write_Text 0077  
                   ??_SPI_write 0070                 ___aldiv@divisor 0070                 ___aldiv@counter 0020  
             UART_Init@baudrate 0026  char_to_binary_string@character 0041                     __stringbase 0012  
           UART_Init@_XTAL_FREQ 002A                ?_SPI_init_master 0070              __end_of__stringtab 0013  
        ?_char_to_binary_string 0070             UART_Write_Text@text 0075       _char_to_binary_string$250 003D  
     _char_to_binary_string$251 003F       _char_to_binary_string$244 0031       _char_to_binary_string$245 0033  
     _char_to_binary_string$246 0035       _char_to_binary_string$247 0037       _char_to_binary_string$248 0039  
     _char_to_binary_string$249 003B                       sprintf@ap 0072                       sprintf@sp 0074  
                     stringcode 000D                      _OSCCONbits 008F                 _UART_Write_Text 0527  
                      sprintf@c 0073                        sprintf@f 0020                        stringdir 000D  
                      stringtab 0003                    ___aldiv@sign 0021                      _UART_Write 051B  
              UART_Write_Text@i 007A  
