

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun Mar 19 23:57:45 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Generated 09/02/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0000                     	;# 
    59     0001                     	;# 
    60     0002                     	;# 
    61     0003                     	;# 
    62     0004                     	;# 
    63     0005                     	;# 
    64     0006                     	;# 
    65     0007                     	;# 
    66     0008                     	;# 
    67     0009                     	;# 
    68     000A                     	;# 
    69     000B                     	;# 
    70     000C                     	;# 
    71     000D                     	;# 
    72     000E                     	;# 
    73     000E                     	;# 
    74     000F                     	;# 
    75     0010                     	;# 
    76     0011                     	;# 
    77     0012                     	;# 
    78     0013                     	;# 
    79     0014                     	;# 
    80     0015                     	;# 
    81     0015                     	;# 
    82     0016                     	;# 
    83     0017                     	;# 
    84     0018                     	;# 
    85     0019                     	;# 
    86     001A                     	;# 
    87     001B                     	;# 
    88     001B                     	;# 
    89     001C                     	;# 
    90     001D                     	;# 
    91     001E                     	;# 
    92     001F                     	;# 
    93     0081                     	;# 
    94     0085                     	;# 
    95     0086                     	;# 
    96     0087                     	;# 
    97     0088                     	;# 
    98     0089                     	;# 
    99     008C                     	;# 
   100     008D                     	;# 
   101     008E                     	;# 
   102     008F                     	;# 
   103     0090                     	;# 
   104     0091                     	;# 
   105     0092                     	;# 
   106     0093                     	;# 
   107     0093                     	;# 
   108     0093                     	;# 
   109     0094                     	;# 
   110     0095                     	;# 
   111     0096                     	;# 
   112     0097                     	;# 
   113     0098                     	;# 
   114     0099                     	;# 
   115     009A                     	;# 
   116     009B                     	;# 
   117     009C                     	;# 
   118     009D                     	;# 
   119     009E                     	;# 
   120     009F                     	;# 
   121     0105                     	;# 
   122     0107                     	;# 
   123     0108                     	;# 
   124     0109                     	;# 
   125     010C                     	;# 
   126     010C                     	;# 
   127     010D                     	;# 
   128     010E                     	;# 
   129     010F                     	;# 
   130     0185                     	;# 
   131     0187                     	;# 
   132     0188                     	;# 
   133     0189                     	;# 
   134     018C                     	;# 
   135     018D                     	;# 
   136     0000                     	;# 
   137     0001                     	;# 
   138     0002                     	;# 
   139     0003                     	;# 
   140     0004                     	;# 
   141     0005                     	;# 
   142     0006                     	;# 
   143     0007                     	;# 
   144     0008                     	;# 
   145     0009                     	;# 
   146     000A                     	;# 
   147     000B                     	;# 
   148     000C                     	;# 
   149     000D                     	;# 
   150     000E                     	;# 
   151     000E                     	;# 
   152     000F                     	;# 
   153     0010                     	;# 
   154     0011                     	;# 
   155     0012                     	;# 
   156     0013                     	;# 
   157     0014                     	;# 
   158     0015                     	;# 
   159     0015                     	;# 
   160     0016                     	;# 
   161     0017                     	;# 
   162     0018                     	;# 
   163     0019                     	;# 
   164     001A                     	;# 
   165     001B                     	;# 
   166     001B                     	;# 
   167     001C                     	;# 
   168     001D                     	;# 
   169     001E                     	;# 
   170     001F                     	;# 
   171     0081                     	;# 
   172     0085                     	;# 
   173     0086                     	;# 
   174     0087                     	;# 
   175     0088                     	;# 
   176     0089                     	;# 
   177     008C                     	;# 
   178     008D                     	;# 
   179     008E                     	;# 
   180     008F                     	;# 
   181     0090                     	;# 
   182     0091                     	;# 
   183     0092                     	;# 
   184     0093                     	;# 
   185     0093                     	;# 
   186     0093                     	;# 
   187     0094                     	;# 
   188     0095                     	;# 
   189     0096                     	;# 
   190     0097                     	;# 
   191     0098                     	;# 
   192     0099                     	;# 
   193     009A                     	;# 
   194     009B                     	;# 
   195     009C                     	;# 
   196     009D                     	;# 
   197     009E                     	;# 
   198     009F                     	;# 
   199     0105                     	;# 
   200     0107                     	;# 
   201     0108                     	;# 
   202     0109                     	;# 
   203     010C                     	;# 
   204     010C                     	;# 
   205     010D                     	;# 
   206     010E                     	;# 
   207     010F                     	;# 
   208     0185                     	;# 
   209     0187                     	;# 
   210     0188                     	;# 
   211     0189                     	;# 
   212     018C                     	;# 
   213     018D                     	;# 
   214     0013                     _SSPBUF	set	19
   215     0014                     _SSPCON	set	20
   216     001A                     _RCREG	set	26
   217     0019                     _TXREG	set	25
   218     0042                     _RD2	set	66
   219     0043                     _RD3	set	67
   220     0065                     _RCIF	set	101
   221     00C4                     _CREN	set	196
   222     00C7                     _SPEN	set	199
   223     008F                     _OSCCONbits	set	143
   224     0088                     _TRISDbits	set	136
   225     0094                     _SSPSTATbits	set	148
   226     0087                     _TRISCbits	set	135
   227     0094                     _SSPSTAT	set	148
   228     0099                     _SPBRG	set	153
   229     04C1                     _TRMT	set	1217
   230     04C5                     _TXEN	set	1221
   231     043E                     _TRISC6	set	1086
   232     043F                     _TRISC7	set	1087
   233     04C4                     _SYNC	set	1220
   234     04C2                     _BRGH	set	1218
   235                           
   236                           	psect	strings
   237     0003                     __pstrings:
   238     0003                     stringtab:
   239     0003                     __stringtab:
   240                           
   241                           ;	String table - string pointers are 1 byte each
   242     0003  1BFF               	btfsc	btemp+1,7
   243     0004  280D               	ljmp	stringcode
   244     0005  1383               	bcf	3,7
   245     0006  187F               	btfsc	btemp+1,0
   246     0007  1783               	bsf	3,7
   247     0008  0800               	movf	0,w
   248     0009  0A84               	incf	4,f
   249     000A  1903               	skipnz
   250     000B  0AFF               	incf	btemp+1,f
   251     000C  0008               	return
   252     000D                     stringcode:
   253     000D                     stringdir:
   254     000D  3000               	movlw	high stringdir
   255     000E  008A               	movwf	10
   256     000F  0804               	movf	4,w
   257     0010  0A84               	incf	4,f
   258     0011  0782               	addwf	2,f
   259     0012                     __stringbase:
   260     0012  3400               	retlw	0
   261     0013                     __end_of__stringtab:
   262     0013                     STR_1:
   263     0013  3425               	retlw	37	;'%'
   264     0014  3463               	retlw	99	;'c'
   265     0015  3425               	retlw	37	;'%'
   266     0016  3463               	retlw	99	;'c'
   267     0017  3425               	retlw	37	;'%'
   268     0018  3463               	retlw	99	;'c'
   269     0019  3425               	retlw	37	;'%'
   270     001A  3463               	retlw	99	;'c'
   271     001B  3425               	retlw	37	;'%'
   272     001C  3463               	retlw	99	;'c'
   273     001D  3425               	retlw	37	;'%'
   274     001E  3463               	retlw	99	;'c'
   275     001F  3425               	retlw	37	;'%'
   276     0020  3463               	retlw	99	;'c'
   277     0021  3425               	retlw	37	;'%'
   278     0022  3463               	retlw	99	;'c'
   279     0023  340A               	retlw	10
   280     0024  3400               	retlw	0
   281     0025                     STR_2:
   282     0025  3442               	retlw	66	;'B'
   283     0026  344F               	retlw	79	;'O'
   284     0027  344F               	retlw	79	;'O'
   285     0028  3454               	retlw	84	;'T'
   286     0029  3445               	retlw	69	;'E'
   287     002A  3444               	retlw	68	;'D'
   288     002B  340A               	retlw	10
   289     002C  3400               	retlw	0
   290                           
   291                           	psect	cinit
   292     07F0                     start_initialization:	
   293                           ; #config settings
   294                           
   295     07F0                     __initialization:
   296                           
   297                           ; Clear objects allocated to BANK0
   298     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   299     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   300     07F2  01C5               	clrf	__pbssBANK0& (0+127)
   301     07F3  01C6               	clrf	(__pbssBANK0+1)& (0+127)
   302     07F4  01C7               	clrf	(__pbssBANK0+2)& (0+127)
   303     07F5  01C8               	clrf	(__pbssBANK0+3)& (0+127)
   304     07F6  01C9               	clrf	(__pbssBANK0+4)& (0+127)
   305     07F7  01CA               	clrf	(__pbssBANK0+5)& (0+127)
   306     07F8  01CB               	clrf	(__pbssBANK0+6)& (0+127)
   307     07F9  01CC               	clrf	(__pbssBANK0+7)& (0+127)
   308     07FA  01CD               	clrf	(__pbssBANK0+8)& (0+127)
   309     07FB  01CE               	clrf	(__pbssBANK0+9)& (0+127)
   310     07FC                     end_of_initialization:	
   311                           ;End of C runtime variable initialization code
   312                           
   313     07FC                     __end_of__initialization:
   314     07FC  0183               	clrf	3
   315     07FD  120A  118A  2D5B   	ljmp	_main	;jump to C main() function
   316                           
   317                           	psect	bssBANK0
   318     0045                     __pbssBANK0:
   319     0045                     char_to_binary_string@output:
   320     0045                     	ds	10
   321                           
   322                           	psect	cstackCOMMON
   323     0070                     __pcstackCOMMON:
   324     0070                     ??_sprintf:
   325     0070                     ?_char_to_binary_string:	
   326                           ; 1 bytes @ 0x0
   327                           
   328     0070                     ?_UART_Write:	
   329                           ; 1 bytes @ 0x0
   330                           
   331     0070                     ??_UART_Write:	
   332                           ; 1 bytes @ 0x0
   333                           
   334     0070                     ?_SPI_init_master:	
   335                           ; 1 bytes @ 0x0
   336                           
   337     0070                     ??_SPI_init_master:	
   338                           ; 1 bytes @ 0x0
   339                           
   340     0070                     ?_SPI_write:	
   341                           ; 1 bytes @ 0x0
   342                           
   343     0070                     ??_SPI_write:	
   344                           ; 1 bytes @ 0x0
   345                           
   346     0070                     ?_SPI_wait_data_ready:	
   347                           ; 1 bytes @ 0x0
   348                           
   349     0070                     ??_SPI_wait_data_ready:	
   350                           ; 1 bytes @ 0x0
   351                           
   352     0070                     ?_SPI_read:	
   353                           ; 1 bytes @ 0x0
   354                           
   355     0070                     ??_SPI_read:	
   356                           ; 1 bytes @ 0x0
   357                           
   358     0070                     ?_send:	
   359                           ; 1 bytes @ 0x0
   360                           
   361     0070                     ?_main:	
   362                           ; 1 bytes @ 0x0
   363                           
   364     0070                     ?___aldiv:	
   365                           ; 2 bytes @ 0x0
   366                           
   367     0070                     UART_Write@data:	
   368                           ; 4 bytes @ 0x0
   369                           
   370     0070                     SPI_write@write:	
   371                           ; 1 bytes @ 0x0
   372                           
   373     0070                     ___aldiv@divisor:	
   374                           ; 1 bytes @ 0x0
   375                           
   376                           
   377                           ; 4 bytes @ 0x0
   378     0070                     	ds	2
   379     0072                     sprintf@ap:
   380                           
   381                           ; 1 bytes @ 0x2
   382     0072                     	ds	1
   383     0073                     sprintf@c:
   384                           
   385                           ; 1 bytes @ 0x3
   386     0073                     	ds	1
   387     0074                     sprintf@sp:
   388     0074                     ___aldiv@dividend:	
   389                           ; 1 bytes @ 0x4
   390                           
   391                           
   392                           ; 4 bytes @ 0x4
   393     0074                     	ds	1
   394     0075                     ??_char_to_binary_string:
   395     0075                     ?_UART_Write_Text:	
   396                           ; 1 bytes @ 0x5
   397                           
   398     0075                     UART_Write_Text@text:	
   399                           ; 1 bytes @ 0x5
   400                           
   401                           
   402                           ; 2 bytes @ 0x5
   403     0075                     	ds	2
   404     0077                     ??_UART_Write_Text:
   405                           
   406                           ; 1 bytes @ 0x7
   407     0077                     	ds	1
   408     0078                     ??___aldiv:
   409                           
   410                           ; 1 bytes @ 0x8
   411     0078                     	ds	2
   412     007A                     UART_Write_Text@i:
   413                           
   414                           ; 2 bytes @ 0xA
   415     007A                     	ds	2
   416     007C                     ??_send:
   417                           
   418                           ; 1 bytes @ 0xC
   419     007C                     	ds	2
   420                           
   421                           	psect	cstackBANK0
   422     0020                     __pcstackBANK0:
   423     0020                     ?_sprintf:
   424     0020                     sprintf@f:	
   425                           ; 2 bytes @ 0x0
   426                           
   427     0020                     ___aldiv@counter:	
   428                           ; 1 bytes @ 0x0
   429                           
   430                           
   431                           ; 1 bytes @ 0x0
   432     0020                     	ds	1
   433     0021                     ___aldiv@sign:
   434                           
   435                           ; 1 bytes @ 0x1
   436     0021                     	ds	1
   437     0022                     ___aldiv@quotient:
   438                           
   439                           ; 4 bytes @ 0x2
   440     0022                     	ds	4
   441     0026                     ?_UART_Init:
   442     0026                     UART_Init@baudrate:	
   443                           ; 1 bytes @ 0x6
   444                           
   445                           
   446                           ; 4 bytes @ 0x6
   447     0026                     	ds	4
   448     002A                     UART_Init@_XTAL_FREQ:
   449                           
   450                           ; 4 bytes @ 0xA
   451     002A                     	ds	4
   452     002E                     ??_UART_Init:
   453                           
   454                           ; 1 bytes @ 0xE
   455     002E                     	ds	3
   456     0031                     _char_to_binary_string$245:
   457                           
   458                           ; 2 bytes @ 0x11
   459     0031                     	ds	2
   460     0033                     _char_to_binary_string$246:
   461                           
   462                           ; 2 bytes @ 0x13
   463     0033                     	ds	2
   464     0035                     _char_to_binary_string$247:
   465                           
   466                           ; 2 bytes @ 0x15
   467     0035                     	ds	2
   468     0037                     _char_to_binary_string$248:
   469                           
   470                           ; 2 bytes @ 0x17
   471     0037                     	ds	2
   472     0039                     _char_to_binary_string$249:
   473                           
   474                           ; 2 bytes @ 0x19
   475     0039                     	ds	2
   476     003B                     _char_to_binary_string$250:
   477                           
   478                           ; 2 bytes @ 0x1B
   479     003B                     	ds	2
   480     003D                     _char_to_binary_string$251:
   481                           
   482                           ; 2 bytes @ 0x1D
   483     003D                     	ds	2
   484     003F                     _char_to_binary_string$252:
   485                           
   486                           ; 2 bytes @ 0x1F
   487     003F                     	ds	2
   488     0041                     char_to_binary_string@character:
   489                           
   490                           ; 1 bytes @ 0x21
   491     0041                     	ds	1
   492     0042                     ??_main:
   493                           
   494                           ; 1 bytes @ 0x22
   495     0042                     	ds	3
   496                           
   497                           	psect	maintext
   498     055B                     __pmaintext:	
   499 ;;
   500 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   501 ;;
   502 ;; *************** function _main *****************
   503 ;; Defined at:
   504 ;;		line 137 in file "main.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  2  135[None  ] int 
   511 ;; Registers used:
   512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : B00/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   518 ;;      Params:         0       0       0       0       0
   519 ;;      Locals:         0       0       0       0       0
   520 ;;      Temps:          0       3       0       0       0
   521 ;;      Totals:         0       3       0       0       0
   522 ;;Total ram usage:        3 bytes
   523 ;; Hardware stack levels required when called: 4
   524 ;; This function calls:
   525 ;;		_SPI_init_master
   526 ;;		_UART_Init
   527 ;;		_UART_Write_Text
   528 ;;		_send
   529 ;; This function is called by:
   530 ;;		Startup code after reset
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534     055B                     _main:	
   535                           ;psect for function _main
   536                           
   537     055B                     l1180:	
   538                           ;incstack = 0
   539                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   540                           
   541                           
   542                           ;main.c: 139:     TRISDbits.TRISD2 = 0;
   543     055B  1683               	bsf	3,5	;RP0=1, select bank1
   544     055C  1303               	bcf	3,6	;RP1=0, select bank1
   545     055D  1108               	bcf	8,2	;volatile
   546                           
   547                           ;main.c: 140:     TRISDbits.TRISD3 = 0;
   548     055E  1188               	bcf	8,3	;volatile
   549                           
   550                           ;main.c: 142:     RD3 = 1;
   551     055F  1283               	bcf	3,5	;RP0=0, select bank0
   552     0560  1303               	bcf	3,6	;RP1=0, select bank0
   553     0561  1588               	bsf	8,3	;volatile
   554                           
   555                           ;main.c: 143:     RD2 = 0;
   556     0562  1108               	bcf	8,2	;volatile
   557     0563                     l1182:
   558                           
   559                           ;main.c: 146:     OSCCONbits.IRCF = 111;
   560     0563  3070               	movlw	112
   561     0564  1683               	bsf	3,5	;RP0=1, select bank1
   562     0565  1303               	bcf	3,6	;RP1=0, select bank1
   563     0566  048F               	iorwf	15,f	;volatile
   564     0567                     l1184:
   565                           
   566                           ;main.c: 148:     UART_Init(9600, 8000000);
   567     0567  3000               	movlw	0
   568     0568  1283               	bcf	3,5	;RP0=0, select bank0
   569     0569  1303               	bcf	3,6	;RP1=0, select bank0
   570     056A  00A9               	movwf	UART_Init@baudrate+3
   571     056B  3000               	movlw	0
   572     056C  00A8               	movwf	UART_Init@baudrate+2
   573     056D  3025               	movlw	37
   574     056E  00A7               	movwf	UART_Init@baudrate+1
   575     056F  3080               	movlw	128
   576     0570  00A6               	movwf	UART_Init@baudrate
   577     0571  3000               	movlw	0
   578     0572  00AD               	movwf	UART_Init@_XTAL_FREQ+3
   579     0573  307A               	movlw	122
   580     0574  00AC               	movwf	UART_Init@_XTAL_FREQ+2
   581     0575  3012               	movlw	18
   582     0576  00AB               	movwf	UART_Init@_XTAL_FREQ+1
   583     0577  3000               	movlw	0
   584     0578  00AA               	movwf	UART_Init@_XTAL_FREQ
   585     0579  120A  118A  2653  120A  118A  	fcall	_UART_Init
   586     057E                     l1186:
   587                           
   588                           ;main.c: 150:     SPI_init_master();
   589     057E  120A  118A  24F6  120A  118A  	fcall	_SPI_init_master
   590     0583                     l1188:
   591                           
   592                           ;main.c: 151:     UART_Write_Text("BOOTED\n");
   593     0583  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   594     0584  00F5               	movwf	UART_Write_Text@text
   595     0585  3080               	movlw	128
   596     0586  00F6               	movwf	UART_Write_Text@text+1
   597     0587  120A  118A  2519  120A  118A  	fcall	_UART_Write_Text
   598     058C                     l1190:
   599                           
   600                           ;main.c: 153:         send();
   601     058C  120A  118A  25A3  120A  118A  	fcall	_send
   602     0591                     l1192:
   603                           
   604                           ;main.c: 154:         _delay((unsigned long)((500)*(8000000/4000.0)));
   605     0591  3006               	movlw	6
   606     0592  1283               	bcf	3,5	;RP0=0, select bank0
   607     0593  1303               	bcf	3,6	;RP1=0, select bank0
   608     0594  00C4               	movwf	??_main+2
   609     0595  3013               	movlw	19
   610     0596  00C3               	movwf	??_main+1
   611     0597  30AD               	movlw	173
   612     0598  00C2               	movwf	??_main
   613     0599                     u587:
   614     0599  0BC2               	decfsz	??_main,f
   615     059A  2D99               	goto	u587
   616     059B  0BC3               	decfsz	??_main+1,f
   617     059C  2D99               	goto	u587
   618     059D  0BC4               	decfsz	??_main+2,f
   619     059E  2D99               	goto	u587
   620     059F  2D8C               	goto	l1190
   621     05A0  120A  118A  2800   	ljmp	start
   622     05A3                     __end_of_main:
   623                           
   624                           	psect	text1
   625     05A3                     __ptext1:	
   626 ;; *************** function _send *****************
   627 ;; Defined at:
   628 ;;		line 107 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   642 ;;      Params:         0       0       0       0       0
   643 ;;      Locals:         0       0       0       0       0
   644 ;;      Temps:          2       0       0       0       0
   645 ;;      Totals:         2       0       0       0       0
   646 ;;Total ram usage:        2 bytes
   647 ;; Hardware stack levels used: 1
   648 ;; Hardware stack levels required when called: 3
   649 ;; This function calls:
   650 ;;		_SPI_read
   651 ;;		_SPI_wait_data_ready
   652 ;;		_SPI_write
   653 ;;		_UART_Write_Text
   654 ;;		_char_to_binary_string
   655 ;; This function is called by:
   656 ;;		_main
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660     05A3                     _send:	
   661                           ;psect for function _send
   662                           
   663     05A3                     l1158:	
   664                           ;incstack = 0
   665                           ; Regs used in _send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   666                           
   667                           
   668                           ;main.c: 108:     RD3 = 0;
   669     05A3  1283               	bcf	3,5	;RP0=0, select bank0
   670     05A4  1303               	bcf	3,6	;RP1=0, select bank0
   671     05A5  1188               	bcf	8,3	;volatile
   672     05A6                     l1160:
   673                           
   674                           ;main.c: 110:     SPI_write(0b00100000);
   675     05A6  3020               	movlw	32
   676     05A7  120A  118A  2501  120A  118A  	fcall	_SPI_write
   677     05AC                     l1162:
   678                           
   679                           ;main.c: 114:     _delay((unsigned long)((20)*(8000000/4000.0)));
   680     05AC  3034               	movlw	52
   681     05AD  00FD               	movwf	??_send+1
   682     05AE  30F1               	movlw	241
   683     05AF  00FC               	movwf	??_send
   684     05B0                     u597:
   685     05B0  0BFC               	decfsz	??_send,f
   686     05B1  2DB0               	goto	u597
   687     05B2  0BFD               	decfsz	??_send+1,f
   688     05B3  2DB0               	goto	u597
   689     05B4  2DB5               	nop2
   690     05B5                     l1164:
   691                           
   692                           ;main.c: 116:     SPI_write(0b00001010);
   693     05B5  300A               	movlw	10
   694     05B6  120A  118A  2501  120A  118A  	fcall	_SPI_write
   695     05BB                     l1166:
   696                           
   697                           ;main.c: 119:     RD3 = 1;
   698     05BB  1283               	bcf	3,5	;RP0=0, select bank0
   699     05BC  1303               	bcf	3,6	;RP1=0, select bank0
   700     05BD  1588               	bsf	8,3	;volatile
   701                           
   702                           ;main.c: 121:     _delay((unsigned long)((10)*(8000000/4000.0)));
   703     05BE  301A               	movlw	26
   704     05BF  00FD               	movwf	??_send+1
   705     05C0  30F8               	movlw	248
   706     05C1  00FC               	movwf	??_send
   707     05C2                     u607:
   708     05C2  0BFC               	decfsz	??_send,f
   709     05C3  2DC2               	goto	u607
   710     05C4  0BFD               	decfsz	??_send+1,f
   711     05C5  2DC2               	goto	u607
   712     05C6  0000               	nop
   713     05C7                     l1168:
   714                           
   715                           ;main.c: 123:     RD3 = 0;
   716     05C7  1283               	bcf	3,5	;RP0=0, select bank0
   717     05C8  1303               	bcf	3,6	;RP1=0, select bank0
   718     05C9  1188               	bcf	8,3	;volatile
   719     05CA                     l1170:
   720                           
   721                           ;main.c: 125:     SPI_write((0b00000000 | 0x07));
   722     05CA  3007               	movlw	7
   723     05CB  120A  118A  2501  120A  118A  	fcall	_SPI_write
   724     05D0                     l1172:
   725                           
   726                           ;main.c: 127:     _delay((unsigned long)((20)*(8000000/4000.0)));
   727     05D0  3034               	movlw	52
   728     05D1  00FD               	movwf	??_send+1
   729     05D2  30F1               	movlw	241
   730     05D3  00FC               	movwf	??_send
   731     05D4                     u617:
   732     05D4  0BFC               	decfsz	??_send,f
   733     05D5  2DD4               	goto	u617
   734     05D6  0BFD               	decfsz	??_send+1,f
   735     05D7  2DD4               	goto	u617
   736     05D8  2DD9               	nop2
   737                           
   738                           ;main.c: 129:     SPI_write(0b00110011);
   739     05D9  3033               	movlw	51
   740     05DA  120A  118A  2501  120A  118A  	fcall	_SPI_write
   741     05DF                     l1174:
   742                           
   743                           ;main.c: 131:     SPI_wait_data_ready();
   744     05DF  120A  118A  24EF  120A  118A  	fcall	_SPI_wait_data_ready
   745     05E4                     l1176:
   746                           
   747                           ;main.c: 132:     UART_Write_Text((char *)char_to_binary_string((char)SPI_read()));
   748     05E4  120A  118A  24E8  120A  118A  	fcall	_SPI_read
   749     05E9  120A  118A  26BE  120A  118A  	fcall	_char_to_binary_string
   750     05EE  00F5               	movwf	UART_Write_Text@text
   751     05EF  3000               	movlw	0
   752     05F0  00F6               	movwf	UART_Write_Text@text+1
   753     05F1  120A  118A  2519  120A  118A  	fcall	_UART_Write_Text
   754     05F6                     l1178:
   755                           
   756                           ;main.c: 134:     RD3 = 1;
   757     05F6  1283               	bcf	3,5	;RP0=0, select bank0
   758     05F7  1303               	bcf	3,6	;RP1=0, select bank0
   759     05F8  1588               	bsf	8,3	;volatile
   760     05F9                     l131:
   761     05F9  0008               	return
   762     05FA                     __end_of_send:
   763                           
   764                           	psect	text2
   765     06BE                     __ptext2:	
   766 ;; *************** function _char_to_binary_string *****************
   767 ;; Defined at:
   768 ;;		line 99 in file "main.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  character       1    wreg     unsigned char 
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  character       1   33[BANK0 ] unsigned char 
   773 ;; Return value:  Size  Location     Type
   774 ;;                  1    wreg      PTR unsigned char 
   775 ;; Registers used:
   776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   782 ;;      Params:         0       0       0       0       0
   783 ;;      Locals:         0      17       0       0       0
   784 ;;      Temps:          0       0       0       0       0
   785 ;;      Totals:         0      17       0       0       0
   786 ;;Total ram usage:       17 bytes
   787 ;; Hardware stack levels used: 1
   788 ;; Hardware stack levels required when called: 2
   789 ;; This function calls:
   790 ;;		_sprintf
   791 ;; This function is called by:
   792 ;;		_send
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796     06BE                     _char_to_binary_string:	
   797                           ;psect for function _char_to_binary_string
   798                           
   799                           
   800                           ;incstack = 0
   801                           ; Regs used in _char_to_binary_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
   802                           ;char_to_binary_string@character stored from wreg
   803     06BE  1283               	bcf	3,5	;RP0=0, select bank0
   804     06BF  1303               	bcf	3,6	;RP1=0, select bank0
   805     06C0  00C1               	movwf	char_to_binary_string@character
   806     06C1                     l1046:
   807                           
   808                           ;main.c: 100:     static char output[10];;main.c: 102:     sprintf(output, "%c%c%c%c%c%c
      +                          %c%c""\n", (character & 0x80 ? '1' : '0'), (character & 0x40 ? '1' : '0'), (character & 
      +                          0x20 ? '1' : '0'), (character & 0x10 ? '1' : '0'), (character & 0x08 ? '1' : '0'), (char
      +                          acter & 0x04 ? '1' : '0'), (character & 0x02 ? '1' : '0'), (character & 0x01 ? '1' : '0'
      +                          ));
   809     06C1  1841               	btfsc	char_to_binary_string@character,0
   810     06C2  2EC4               	goto	u371
   811     06C3  2EC5               	goto	u370
   812     06C4                     u371:
   813     06C4  2ECA               	goto	l1050
   814     06C5                     u370:
   815     06C5                     l1048:
   816     06C5  3030               	movlw	48
   817     06C6  00B1               	movwf	_char_to_binary_string$245
   818     06C7  3000               	movlw	0
   819     06C8  00B2               	movwf	_char_to_binary_string$245+1
   820     06C9  2ECE               	goto	l1052
   821     06CA                     l1050:
   822     06CA  3031               	movlw	49
   823     06CB  00B1               	movwf	_char_to_binary_string$245
   824     06CC  3000               	movlw	0
   825     06CD  00B2               	movwf	_char_to_binary_string$245+1
   826     06CE                     l1052:
   827     06CE  18C1               	btfsc	char_to_binary_string@character,1
   828     06CF  2ED1               	goto	u381
   829     06D0  2ED2               	goto	u380
   830     06D1                     u381:
   831     06D1  2ED7               	goto	l1056
   832     06D2                     u380:
   833     06D2                     l1054:
   834     06D2  3030               	movlw	48
   835     06D3  00B3               	movwf	_char_to_binary_string$246
   836     06D4  3000               	movlw	0
   837     06D5  00B4               	movwf	_char_to_binary_string$246+1
   838     06D6  2EDB               	goto	l1058
   839     06D7                     l1056:
   840     06D7  3031               	movlw	49
   841     06D8  00B3               	movwf	_char_to_binary_string$246
   842     06D9  3000               	movlw	0
   843     06DA  00B4               	movwf	_char_to_binary_string$246+1
   844     06DB                     l1058:
   845     06DB  1941               	btfsc	char_to_binary_string@character,2
   846     06DC  2EDE               	goto	u391
   847     06DD  2EDF               	goto	u390
   848     06DE                     u391:
   849     06DE  2EE4               	goto	l1062
   850     06DF                     u390:
   851     06DF                     l1060:
   852     06DF  3030               	movlw	48
   853     06E0  00B5               	movwf	_char_to_binary_string$247
   854     06E1  3000               	movlw	0
   855     06E2  00B6               	movwf	_char_to_binary_string$247+1
   856     06E3  2EE8               	goto	l1064
   857     06E4                     l1062:
   858     06E4  3031               	movlw	49
   859     06E5  00B5               	movwf	_char_to_binary_string$247
   860     06E6  3000               	movlw	0
   861     06E7  00B6               	movwf	_char_to_binary_string$247+1
   862     06E8                     l1064:
   863     06E8  19C1               	btfsc	char_to_binary_string@character,3
   864     06E9  2EEB               	goto	u401
   865     06EA  2EEC               	goto	u400
   866     06EB                     u401:
   867     06EB  2EF1               	goto	l1068
   868     06EC                     u400:
   869     06EC                     l1066:
   870     06EC  3030               	movlw	48
   871     06ED  00B7               	movwf	_char_to_binary_string$248
   872     06EE  3000               	movlw	0
   873     06EF  00B8               	movwf	_char_to_binary_string$248+1
   874     06F0  2EF5               	goto	l1070
   875     06F1                     l1068:
   876     06F1  3031               	movlw	49
   877     06F2  00B7               	movwf	_char_to_binary_string$248
   878     06F3  3000               	movlw	0
   879     06F4  00B8               	movwf	_char_to_binary_string$248+1
   880     06F5                     l1070:
   881     06F5  1A41               	btfsc	char_to_binary_string@character,4
   882     06F6  2EF8               	goto	u411
   883     06F7  2EF9               	goto	u410
   884     06F8                     u411:
   885     06F8  2EFE               	goto	l1074
   886     06F9                     u410:
   887     06F9                     l1072:
   888     06F9  3030               	movlw	48
   889     06FA  00B9               	movwf	_char_to_binary_string$249
   890     06FB  3000               	movlw	0
   891     06FC  00BA               	movwf	_char_to_binary_string$249+1
   892     06FD  2F02               	goto	l1076
   893     06FE                     l1074:
   894     06FE  3031               	movlw	49
   895     06FF  00B9               	movwf	_char_to_binary_string$249
   896     0700  3000               	movlw	0
   897     0701  00BA               	movwf	_char_to_binary_string$249+1
   898     0702                     l1076:
   899     0702  1AC1               	btfsc	char_to_binary_string@character,5
   900     0703  2F05               	goto	u421
   901     0704  2F06               	goto	u420
   902     0705                     u421:
   903     0705  2F0B               	goto	l1080
   904     0706                     u420:
   905     0706                     l1078:
   906     0706  3030               	movlw	48
   907     0707  00BB               	movwf	_char_to_binary_string$250
   908     0708  3000               	movlw	0
   909     0709  00BC               	movwf	_char_to_binary_string$250+1
   910     070A  2F0F               	goto	l1082
   911     070B                     l1080:
   912     070B  3031               	movlw	49
   913     070C  00BB               	movwf	_char_to_binary_string$250
   914     070D  3000               	movlw	0
   915     070E  00BC               	movwf	_char_to_binary_string$250+1
   916     070F                     l1082:
   917     070F  1B41               	btfsc	char_to_binary_string@character,6
   918     0710  2F12               	goto	u431
   919     0711  2F13               	goto	u430
   920     0712                     u431:
   921     0712  2F18               	goto	l1086
   922     0713                     u430:
   923     0713                     l1084:
   924     0713  3030               	movlw	48
   925     0714  00BD               	movwf	_char_to_binary_string$251
   926     0715  3000               	movlw	0
   927     0716  00BE               	movwf	_char_to_binary_string$251+1
   928     0717  2F1C               	goto	l1088
   929     0718                     l1086:
   930     0718  3031               	movlw	49
   931     0719  00BD               	movwf	_char_to_binary_string$251
   932     071A  3000               	movlw	0
   933     071B  00BE               	movwf	_char_to_binary_string$251+1
   934     071C                     l1088:
   935     071C  1BC1               	btfsc	char_to_binary_string@character,7
   936     071D  2F1F               	goto	u441
   937     071E  2F20               	goto	u440
   938     071F                     u441:
   939     071F  2F25               	goto	l1092
   940     0720                     u440:
   941     0720                     l1090:
   942     0720  3030               	movlw	48
   943     0721  00BF               	movwf	_char_to_binary_string$252
   944     0722  3000               	movlw	0
   945     0723  00C0               	movwf	_char_to_binary_string$252+1
   946     0724  2F29               	goto	l1094
   947     0725                     l1092:
   948     0725  3031               	movlw	49
   949     0726  00BF               	movwf	_char_to_binary_string$252
   950     0727  3000               	movlw	0
   951     0728  00C0               	movwf	_char_to_binary_string$252+1
   952     0729                     l1094:
   953     0729  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   954     072A  00A0               	movwf	sprintf@f
   955     072B  0840               	movf	_char_to_binary_string$252+1,w
   956     072C  00A2               	movwf	?_sprintf+2
   957     072D  083F               	movf	_char_to_binary_string$252,w
   958     072E  00A1               	movwf	?_sprintf+1
   959     072F  083E               	movf	_char_to_binary_string$251+1,w
   960     0730  00A4               	movwf	?_sprintf+4
   961     0731  083D               	movf	_char_to_binary_string$251,w
   962     0732  00A3               	movwf	?_sprintf+3
   963     0733  083C               	movf	_char_to_binary_string$250+1,w
   964     0734  00A6               	movwf	?_sprintf+6
   965     0735  083B               	movf	_char_to_binary_string$250,w
   966     0736  00A5               	movwf	?_sprintf+5
   967     0737  083A               	movf	_char_to_binary_string$249+1,w
   968     0738  00A8               	movwf	?_sprintf+8
   969     0739  0839               	movf	_char_to_binary_string$249,w
   970     073A  00A7               	movwf	?_sprintf+7
   971     073B  0838               	movf	_char_to_binary_string$248+1,w
   972     073C  00AA               	movwf	?_sprintf+10
   973     073D  0837               	movf	_char_to_binary_string$248,w
   974     073E  00A9               	movwf	?_sprintf+9
   975     073F  0836               	movf	_char_to_binary_string$247+1,w
   976     0740  00AC               	movwf	?_sprintf+12
   977     0741  0835               	movf	_char_to_binary_string$247,w
   978     0742  00AB               	movwf	?_sprintf+11
   979     0743  0834               	movf	_char_to_binary_string$246+1,w
   980     0744  00AE               	movwf	?_sprintf+14
   981     0745  0833               	movf	_char_to_binary_string$246,w
   982     0746  00AD               	movwf	?_sprintf+13
   983     0747  0832               	movf	_char_to_binary_string$245+1,w
   984     0748  00B0               	movwf	?_sprintf+16
   985     0749  0831               	movf	_char_to_binary_string$245,w
   986     074A  00AF               	movwf	?_sprintf+15
   987     074B  3045               	movlw	(low (char_to_binary_string@output| 0))& (0+255)
   988     074C  120A  118A  25FA  120A  118A  	fcall	_sprintf
   989     0751                     l1096:
   990                           
   991                           ;main.c: 104:     return output;
   992     0751  3045               	movlw	(low (char_to_binary_string@output| 0))& (0+255)
   993     0752                     l128:
   994     0752  0008               	return
   995     0753                     __end_of_char_to_binary_string:
   996                           
   997                           	psect	text3
   998     05FA                     __ptext3:	
   999 ;; *************** function _sprintf *****************
  1000 ;; Defined at:
  1001 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  sp              1    wreg     PTR unsigned char 
  1004 ;;		 -> char_to_binary_string@output(10), 
  1005 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1006 ;;		 -> STR_1(18), 
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;  sp              1    4[COMMON] PTR unsigned char 
  1009 ;;		 -> char_to_binary_string@output(10), 
  1010 ;;  tmpval          4    0        struct .
  1011 ;;  cp              2    0        PTR const unsigned char 
  1012 ;;  len             2    0        unsigned int 
  1013 ;;  val             2    0        unsigned int 
  1014 ;;  c               1    3[COMMON] unsigned char 
  1015 ;;  ap              1    2[COMMON] PTR void [1]
  1016 ;;		 -> ?_sprintf(2), 
  1017 ;;  flag            1    0        unsigned char 
  1018 ;;  prec            1    0        char 
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  2    0[BANK0 ] int 
  1021 ;; Registers used:
  1022 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1028 ;;      Params:         0      17       0       0       0
  1029 ;;      Locals:         3       0       0       0       0
  1030 ;;      Temps:          2       0       0       0       0
  1031 ;;      Totals:         5      17       0       0       0
  1032 ;;Total ram usage:       22 bytes
  1033 ;; Hardware stack levels used: 2
  1034 ;; This function calls:
  1035 ;;		Nothing
  1036 ;; This function is called by:
  1037 ;;		_char_to_binary_string
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041     05FA                     _sprintf:	
  1042                           ;psect for function _sprintf
  1043                           
  1044                           
  1045                           ;incstack = 0
  1046                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1047                           ;sprintf@sp stored from wreg
  1048     05FA  00F4               	movwf	sprintf@sp
  1049     05FB                     l1006:
  1050                           
  1051                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1052     05FB  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1053     05FC  00F2               	movwf	sprintf@ap
  1054                           
  1055                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1056     05FD  2E3C               	goto	l1026
  1057     05FE                     l1008:
  1058                           
  1059                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1060     05FE  3025               	movlw	37
  1061     05FF  0673               	xorwf	sprintf@c,w
  1062     0600  1903               	btfsc	3,2
  1063     0601  2E03               	goto	u321
  1064     0602  2E04               	goto	u320
  1065     0603                     u321:
  1066     0603  2E0E               	goto	l1014
  1067     0604                     u320:
  1068     0604                     l1010:
  1069                           
  1070                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1071     0604  0874               	movf	sprintf@sp,w
  1072     0605  0084               	movwf	4
  1073     0606  0873               	movf	sprintf@c,w
  1074     0607  1383               	bcf	3,7	;select IRP bank0
  1075     0608  0080               	movwf	0
  1076     0609                     l1012:
  1077     0609  3001               	movlw	1
  1078     060A  00FF               	movwf	btemp+1
  1079     060B  087F               	movf	btemp+1,w
  1080     060C  07F4               	addwf	sprintf@sp,f
  1081                           
  1082                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
  1083     060D  2E3C               	goto	l1026
  1084     060E                     l1014:
  1085                           
  1086                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1087     060E  2E22               	goto	l1024
  1088     060F                     l1016:
  1089                           
  1090                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
  1091     060F  0872               	movf	sprintf@ap,w
  1092     0610  0084               	movwf	4
  1093     0611  1383               	bcf	3,7	;select IRP bank0
  1094     0612  0800               	movf	0,w
  1095     0613  00F3               	movwf	sprintf@c
  1096     0614                     l1018:
  1097     0614  3002               	movlw	2
  1098     0615  00FF               	movwf	btemp+1
  1099     0616  087F               	movf	btemp+1,w
  1100     0617  07F2               	addwf	sprintf@ap,f
  1101     0618                     l1020:
  1102                           
  1103                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  1104     0618  0874               	movf	sprintf@sp,w
  1105     0619  0084               	movwf	4
  1106     061A  0873               	movf	sprintf@c,w
  1107     061B  1383               	bcf	3,7	;select IRP bank0
  1108     061C  0080               	movwf	0
  1109     061D  3001               	movlw	1
  1110     061E  00FF               	movwf	btemp+1
  1111     061F  087F               	movf	btemp+1,w
  1112     0620  07F4               	addwf	sprintf@sp,f
  1113                           
  1114                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 836:    continue;
  1115     0621  2E3C               	goto	l1026
  1116     0622                     l1024:
  1117     0622  3001               	movlw	1
  1118     0623  07A0               	addwf	sprintf@f,f
  1119     0624  30FF               	movlw	-1
  1120     0625  0720               	addwf	sprintf@f,w
  1121     0626  0084               	movwf	4
  1122     0627  120A  118A  200D  120A  118A  	fcall	stringdir
  1123     062C  00F3               	movwf	sprintf@c
  1124     062D  00F0               	movwf	??_sprintf
  1125     062E  01F1               	clrf	??_sprintf+1
  1126                           
  1127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1128                           ; Switch size 1, requested type "simple"
  1129                           ; Number of cases is 1, Range of values is 0 to 0
  1130                           ; switch strategies available:
  1131                           ; Name         Instructions Cycles
  1132                           ; simple_byte            4     3 (average)
  1133                           ; direct_byte           11     8 (fixed)
  1134                           ; jumptable            260     6 (fixed)
  1135                           ;	Chosen strategy is simple_byte
  1136     062F  0871               	movf	??_sprintf+1,w
  1137     0630  3A00               	xorlw	0	; case 0
  1138     0631  1903               	skipnz
  1139     0632  2E34               	goto	l1224
  1140     0633  2E18               	goto	l1020
  1141     0634                     l1224:
  1142                           
  1143                           ; Switch size 1, requested type "simple"
  1144                           ; Number of cases is 2, Range of values is 0 to 99
  1145                           ; switch strategies available:
  1146                           ; Name         Instructions Cycles
  1147                           ; simple_byte            7     4 (average)
  1148                           ; jumptable            260     6 (fixed)
  1149                           ;	Chosen strategy is simple_byte
  1150     0634  0870               	movf	??_sprintf,w
  1151     0635  3A00               	xorlw	0	; case 0
  1152     0636  1903               	skipnz
  1153     0637  2E4E               	goto	l1028
  1154     0638  3A63               	xorlw	99	; case 99
  1155     0639  1903               	skipnz
  1156     063A  2E0F               	goto	l1016
  1157     063B  2E18               	goto	l1020
  1158     063C                     l1026:
  1159                           
  1160                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1161     063C  3001               	movlw	1
  1162     063D  1283               	bcf	3,5	;RP0=0, select bank0
  1163     063E  1303               	bcf	3,6	;RP1=0, select bank0
  1164     063F  07A0               	addwf	sprintf@f,f
  1165     0640  30FF               	movlw	-1
  1166     0641  0720               	addwf	sprintf@f,w
  1167     0642  0084               	movwf	4
  1168     0643  120A  118A  200D  120A  118A  	fcall	stringdir
  1169     0648  00F3               	movwf	sprintf@c
  1170     0649  0873               	movf	sprintf@c,w
  1171     064A  1D03               	btfss	3,2
  1172     064B  2E4D               	goto	u331
  1173     064C  2E4E               	goto	u330
  1174     064D                     u331:
  1175     064D  2DFE               	goto	l1008
  1176     064E                     u330:
  1177     064E                     l1028:
  1178                           
  1179                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1180     064E  0874               	movf	sprintf@sp,w
  1181     064F  0084               	movwf	4
  1182     0650  1383               	bcf	3,7	;select IRP bank0
  1183     0651  0180               	clrf	0
  1184     0652                     l238:
  1185     0652  0008               	return
  1186     0653                     __end_of_sprintf:
  1187                           
  1188                           	psect	text4
  1189     0519                     __ptext4:	
  1190 ;; *************** function _UART_Write_Text *****************
  1191 ;; Defined at:
  1192 ;;		line 33 in file "./uart.h"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;  text            2    5[COMMON] PTR unsigned char 
  1195 ;;		 -> STR_2(8), char_to_binary_string@output(10), 
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  i               2   10[COMMON] int 
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  1    wreg      void 
  1200 ;; Registers used:
  1201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1207 ;;      Params:         2       0       0       0       0
  1208 ;;      Locals:         2       0       0       0       0
  1209 ;;      Temps:          3       0       0       0       0
  1210 ;;      Totals:         7       0       0       0       0
  1211 ;;Total ram usage:        7 bytes
  1212 ;; Hardware stack levels used: 1
  1213 ;; Hardware stack levels required when called: 1
  1214 ;; This function calls:
  1215 ;;		_UART_Write
  1216 ;; This function is called by:
  1217 ;;		_send
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222     0519                     _UART_Write_Text:	
  1223                           ;psect for function _UART_Write_Text
  1224                           
  1225     0519                     l1038:	
  1226                           ;incstack = 0
  1227                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1228                           
  1229                           
  1230                           ;./uart.h: 33: void UART_Write_Text(char *text);./uart.h: 34: {;./uart.h: 35:   for(int 
      +                          i=0;text[i]!='\0';i++)
  1231     0519  01FA               	clrf	UART_Write_Text@i
  1232     051A  01FB               	clrf	UART_Write_Text@i+1
  1233     051B  2D3E               	goto	l1044
  1234     051C                     l1040:
  1235                           
  1236                           ;./uart.h: 36:     UART_Write(text[i]);
  1237     051C  087A               	movf	UART_Write_Text@i,w
  1238     051D  0775               	addwf	UART_Write_Text@text,w
  1239     051E  00F8               	movwf	??_UART_Write_Text+1
  1240     051F  0876               	movf	UART_Write_Text@text+1,w
  1241     0520  00F7               	movwf	??_UART_Write_Text
  1242     0521  1803               	skipnc
  1243     0522  0AF7               	incf	??_UART_Write_Text,f
  1244     0523  1FFA               	btfss	UART_Write_Text@i,7
  1245     0524  2D26               	goto	u340
  1246     0525  03F7               	decf	??_UART_Write_Text,f
  1247     0526                     u340:
  1248     0526  0877               	movf	??_UART_Write_Text,w
  1249     0527  00F9               	movwf	??_UART_Write_Text+2
  1250     0528  0879               	movf	??_UART_Write_Text+2,w
  1251     0529  1283               	bcf	3,5	;RP0=0, select bank0
  1252     052A  1303               	bcf	3,6	;RP1=0, select bank0
  1253     052B  00FF               	movwf	btemp+1
  1254     052C  0878               	movf	??_UART_Write_Text+1,w
  1255     052D  0084               	movwf	4
  1256     052E  120A  118A  2003  120A  118A  	fcall	stringtab
  1257     0533  120A  118A  250D  120A  118A  	fcall	_UART_Write
  1258     0538                     l1042:
  1259     0538  3001               	movlw	1
  1260     0539  07FA               	addwf	UART_Write_Text@i,f
  1261     053A  1803               	skipnc
  1262     053B  0AFB               	incf	UART_Write_Text@i+1,f
  1263     053C  3000               	movlw	0
  1264     053D  07FB               	addwf	UART_Write_Text@i+1,f
  1265     053E                     l1044:
  1266     053E  087A               	movf	UART_Write_Text@i,w
  1267     053F  0775               	addwf	UART_Write_Text@text,w
  1268     0540  00F8               	movwf	??_UART_Write_Text+1
  1269     0541  0876               	movf	UART_Write_Text@text+1,w
  1270     0542  00F7               	movwf	??_UART_Write_Text
  1271     0543  1803               	skipnc
  1272     0544  0AF7               	incf	??_UART_Write_Text,f
  1273     0545  1FFA               	btfss	UART_Write_Text@i,7
  1274     0546  2D48               	goto	u350
  1275     0547  03F7               	decf	??_UART_Write_Text,f
  1276     0548                     u350:
  1277     0548  0877               	movf	??_UART_Write_Text,w
  1278     0549  00F9               	movwf	??_UART_Write_Text+2
  1279     054A  0879               	movf	??_UART_Write_Text+2,w
  1280     054B  1283               	bcf	3,5	;RP0=0, select bank0
  1281     054C  1303               	bcf	3,6	;RP1=0, select bank0
  1282     054D  00FF               	movwf	btemp+1
  1283     054E  0878               	movf	??_UART_Write_Text+1,w
  1284     054F  0084               	movwf	4
  1285     0550  120A  118A  2003  120A  118A  	fcall	stringtab
  1286     0555  3A00               	xorlw	0
  1287     0556  1D03               	skipz
  1288     0557  2D59               	goto	u361
  1289     0558  2D5A               	goto	u360
  1290     0559                     u361:
  1291     0559  2D1C               	goto	l1040
  1292     055A                     u360:
  1293     055A                     l61:
  1294     055A  0008               	return
  1295     055B                     __end_of_UART_Write_Text:
  1296                           
  1297                           	psect	text5
  1298     050D                     __ptext5:	
  1299 ;; *************** function _UART_Write *****************
  1300 ;; Defined at:
  1301 ;;		line 27 in file "./uart.h"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  data            1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  data            1    0[COMMON] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1315 ;;      Params:         0       0       0       0       0
  1316 ;;      Locals:         1       0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0
  1318 ;;      Totals:         1       0       0       0       0
  1319 ;;Total ram usage:        1 bytes
  1320 ;; Hardware stack levels used: 1
  1321 ;; This function calls:
  1322 ;;		Nothing
  1323 ;; This function is called by:
  1324 ;;		_UART_Write_Text
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328     050D                     _UART_Write:	
  1329                           ;psect for function _UART_Write
  1330                           
  1331                           
  1332                           ;incstack = 0
  1333                           ; Regs used in _UART_Write: [wreg]
  1334                           ;UART_Write@data stored from wreg
  1335     050D  00F0               	movwf	UART_Write@data
  1336     050E                     l1002:
  1337     050E                     l52:	
  1338                           ;./uart.h: 27: void UART_Write(char data);./uart.h: 28: {;./uart.h: 29:   while(!TRMT);
  1339                           
  1340     050E  1683               	bsf	3,5	;RP0=1, select bank1
  1341     050F  1303               	bcf	3,6	;RP1=0, select bank1
  1342     0510  1C98               	btfss	24,1	;volatile
  1343     0511  2D13               	goto	u311
  1344     0512  2D14               	goto	u310
  1345     0513                     u311:
  1346     0513  2D0E               	goto	l52
  1347     0514                     u310:
  1348     0514                     l1004:
  1349                           
  1350                           ;./uart.h: 30:   TXREG = data;
  1351     0514  0870               	movf	UART_Write@data,w
  1352     0515  1283               	bcf	3,5	;RP0=0, select bank0
  1353     0516  1303               	bcf	3,6	;RP1=0, select bank0
  1354     0517  0099               	movwf	25	;volatile
  1355     0518                     l55:
  1356     0518  0008               	return
  1357     0519                     __end_of_UART_Write:
  1358                           
  1359                           	psect	text6
  1360     0501                     __ptext6:	
  1361 ;; *************** function _SPI_write *****************
  1362 ;; Defined at:
  1363 ;;		line 24 in file "./spi.h"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  write           1    wreg     unsigned char 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  write           1    0[COMMON] unsigned char 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1377 ;;      Params:         0       0       0       0       0
  1378 ;;      Locals:         1       0       0       0       0
  1379 ;;      Temps:          0       0       0       0       0
  1380 ;;      Totals:         1       0       0       0       0
  1381 ;;Total ram usage:        1 bytes
  1382 ;; Hardware stack levels used: 1
  1383 ;; This function calls:
  1384 ;;		Nothing
  1385 ;; This function is called by:
  1386 ;;		_send
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390     0501                     _SPI_write:	
  1391                           ;psect for function _SPI_write
  1392                           
  1393                           
  1394                           ;incstack = 0
  1395                           ; Regs used in _SPI_write: [wreg]
  1396                           ;SPI_write@write stored from wreg
  1397     0501  00F0               	movwf	SPI_write@write
  1398     0502                     l792:
  1399                           
  1400                           ;./spi.h: 25:     SSPBUF = write;
  1401     0502  0870               	movf	SPI_write@write,w
  1402     0503  1283               	bcf	3,5	;RP0=0, select bank0
  1403     0504  1303               	bcf	3,6	;RP1=0, select bank0
  1404     0505  0093               	movwf	19	;volatile
  1405     0506                     l76:	
  1406                           ;./spi.h: 27:     while(!SSPSTATbits.BF);
  1407                           
  1408     0506  1683               	bsf	3,5	;RP0=1, select bank1
  1409     0507  1303               	bcf	3,6	;RP1=0, select bank1
  1410     0508  1C14               	btfss	20,0	;volatile
  1411     0509  2D0B               	goto	u71
  1412     050A  2D0C               	goto	u70
  1413     050B                     u71:
  1414     050B  2D06               	goto	l76
  1415     050C                     u70:
  1416     050C                     l79:
  1417     050C  0008               	return
  1418     050D                     __end_of_SPI_write:
  1419                           
  1420                           	psect	text7
  1421     04EF                     __ptext7:	
  1422 ;; *************** function _SPI_wait_data_ready *****************
  1423 ;; Defined at:
  1424 ;;		line 34 in file "./spi.h"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;		None
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;		None
  1429 ;; Return value:  Size  Location     Type
  1430 ;;                  1    wreg      void 
  1431 ;; Registers used:
  1432 ;;		None
  1433 ;; Tracked objects:
  1434 ;;		On entry : 0/0
  1435 ;;		On exit  : 0/0
  1436 ;;		Unchanged: 0/0
  1437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1438 ;;      Params:         0       0       0       0       0
  1439 ;;      Locals:         0       0       0       0       0
  1440 ;;      Temps:          0       0       0       0       0
  1441 ;;      Totals:         0       0       0       0       0
  1442 ;;Total ram usage:        0 bytes
  1443 ;; Hardware stack levels used: 1
  1444 ;; This function calls:
  1445 ;;		Nothing
  1446 ;; This function is called by:
  1447 ;;		_send
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451     04EF                     _SPI_wait_data_ready:	
  1452                           ;psect for function _SPI_wait_data_ready
  1453                           
  1454     04EF                     l794:	
  1455                           ;incstack = 0
  1456                           ; Regs used in _SPI_wait_data_ready: []
  1457                           
  1458     04EF                     l85:	
  1459                           ;./spi.h: 35:     while(!SSPSTATbits.BF);
  1460                           
  1461     04EF  1683               	bsf	3,5	;RP0=1, select bank1
  1462     04F0  1303               	bcf	3,6	;RP1=0, select bank1
  1463     04F1  1C14               	btfss	20,0	;volatile
  1464     04F2  2CF4               	goto	u81
  1465     04F3  2CF5               	goto	u80
  1466     04F4                     u81:
  1467     04F4  2CEF               	goto	l85
  1468     04F5                     u80:
  1469     04F5                     l88:
  1470     04F5  0008               	return
  1471     04F6                     __end_of_SPI_wait_data_ready:
  1472                           
  1473                           	psect	text8
  1474     04E8                     __ptext8:	
  1475 ;; *************** function _SPI_read *****************
  1476 ;; Defined at:
  1477 ;;		line 38 in file "./spi.h"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      unsigned char 
  1484 ;; Registers used:
  1485 ;;		wreg
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1491 ;;      Params:         0       0       0       0       0
  1492 ;;      Locals:         0       0       0       0       0
  1493 ;;      Temps:          0       0       0       0       0
  1494 ;;      Totals:         0       0       0       0       0
  1495 ;;Total ram usage:        0 bytes
  1496 ;; Hardware stack levels used: 1
  1497 ;; This function calls:
  1498 ;;		Nothing
  1499 ;; This function is called by:
  1500 ;;		_send
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504     04E8                     _SPI_read:	
  1505                           ;psect for function _SPI_read
  1506                           
  1507     04E8                     l796:	
  1508                           ;incstack = 0
  1509                           ; Regs used in _SPI_read: [wreg]
  1510                           
  1511                           
  1512                           ;./spi.h: 39:     SSPSTATbits.BF = 0;
  1513     04E8  1683               	bsf	3,5	;RP0=1, select bank1
  1514     04E9  1303               	bcf	3,6	;RP1=0, select bank1
  1515     04EA  1014               	bcf	20,0	;volatile
  1516     04EB                     l798:
  1517                           
  1518                           ;./spi.h: 40:     return SSPBUF;
  1519     04EB  1283               	bcf	3,5	;RP0=0, select bank0
  1520     04EC  1303               	bcf	3,6	;RP1=0, select bank0
  1521     04ED  0813               	movf	19,w	;volatile
  1522     04EE                     l91:
  1523     04EE  0008               	return
  1524     04EF                     __end_of_SPI_read:
  1525                           
  1526                           	psect	text9
  1527     0653                     __ptext9:	
  1528 ;; *************** function _UART_Init *****************
  1529 ;; Defined at:
  1530 ;;		line 15 in file "./uart.h"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  baudrate        4    6[BANK0 ] const long 
  1533 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;		None
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      void 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1545 ;;      Params:         0       8       0       0       0
  1546 ;;      Locals:         0       0       0       0       0
  1547 ;;      Temps:          0      12       0       0       0
  1548 ;;      Totals:         0      20       0       0       0
  1549 ;;Total ram usage:       20 bytes
  1550 ;; Hardware stack levels used: 1
  1551 ;; Hardware stack levels required when called: 1
  1552 ;; This function calls:
  1553 ;;		___aldiv
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559     0653                     _UART_Init:	
  1560                           ;psect for function _UART_Init
  1561                           
  1562     0653                     l1142:	
  1563                           ;incstack = 0
  1564                           ; Regs used in _UART_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1565                           
  1566                           
  1567                           ;./uart.h: 15: void UART_Init(const long int baudrate, long _XTAL_FREQ);./uart.h: 16: {;
      +                          ./uart.h: 17:     BRGH = 1;
  1568     0653  1683               	bsf	3,5	;RP0=1, select bank1
  1569     0654  1303               	bcf	3,6	;RP1=0, select bank1
  1570     0655  1518               	bsf	24,2	;volatile
  1571     0656                     l1144:
  1572                           
  1573                           ;./uart.h: 18:     SPBRG = (_XTAL_FREQ - baudrate*16)/(baudrate*16);
  1574     0656  1283               	bcf	3,5	;RP0=0, select bank0
  1575     0657  1303               	bcf	3,6	;RP1=0, select bank0
  1576     0658  0826               	movf	UART_Init@baudrate,w
  1577     0659  00AE               	movwf	??_UART_Init
  1578     065A  0827               	movf	UART_Init@baudrate+1,w
  1579     065B  00AF               	movwf	??_UART_Init+1
  1580     065C  0828               	movf	UART_Init@baudrate+2,w
  1581     065D  00B0               	movwf	??_UART_Init+2
  1582     065E  0829               	movf	UART_Init@baudrate+3,w
  1583     065F  00B1               	movwf	??_UART_Init+3
  1584     0660  3004               	movlw	4
  1585     0661                     u555:
  1586     0661  1003               	clrc
  1587     0662  0DAE               	rlf	??_UART_Init,f
  1588     0663  0DAF               	rlf	??_UART_Init+1,f
  1589     0664  0DB0               	rlf	??_UART_Init+2,f
  1590     0665  0DB1               	rlf	??_UART_Init+3,f
  1591     0666                     u550:
  1592     0666  3EFF               	addlw	-1
  1593     0667  1D03               	skipz
  1594     0668  2E61               	goto	u555
  1595     0669  0831               	movf	??_UART_Init+3,w
  1596     066A  00F3               	movwf	___aldiv@divisor+3
  1597     066B  0830               	movf	??_UART_Init+2,w
  1598     066C  00F2               	movwf	___aldiv@divisor+2
  1599     066D  082F               	movf	??_UART_Init+1,w
  1600     066E  00F1               	movwf	___aldiv@divisor+1
  1601     066F  082E               	movf	??_UART_Init,w
  1602     0670  00F0               	movwf	___aldiv@divisor
  1603     0671  0826               	movf	UART_Init@baudrate,w
  1604     0672  00B2               	movwf	??_UART_Init+4
  1605     0673  0827               	movf	UART_Init@baudrate+1,w
  1606     0674  00B3               	movwf	??_UART_Init+5
  1607     0675  0828               	movf	UART_Init@baudrate+2,w
  1608     0676  00B4               	movwf	??_UART_Init+6
  1609     0677  0829               	movf	UART_Init@baudrate+3,w
  1610     0678  00B5               	movwf	??_UART_Init+7
  1611     0679  3004               	movlw	4
  1612     067A                     u565:
  1613     067A  1003               	clrc
  1614     067B  0DB2               	rlf	??_UART_Init+4,f
  1615     067C  0DB3               	rlf	??_UART_Init+5,f
  1616     067D  0DB4               	rlf	??_UART_Init+6,f
  1617     067E  0DB5               	rlf	??_UART_Init+7,f
  1618     067F                     u560:
  1619     067F  3EFF               	addlw	-1
  1620     0680  1D03               	skipz
  1621     0681  2E7A               	goto	u565
  1622     0682  082A               	movf	UART_Init@_XTAL_FREQ,w
  1623     0683  00B6               	movwf	??_UART_Init+8
  1624     0684  082B               	movf	UART_Init@_XTAL_FREQ+1,w
  1625     0685  00B7               	movwf	??_UART_Init+9
  1626     0686  082C               	movf	UART_Init@_XTAL_FREQ+2,w
  1627     0687  00B8               	movwf	??_UART_Init+10
  1628     0688  082D               	movf	UART_Init@_XTAL_FREQ+3,w
  1629     0689  00B9               	movwf	??_UART_Init+11
  1630     068A  0832               	movf	??_UART_Init+4,w
  1631     068B  02B6               	subwf	??_UART_Init+8,f
  1632     068C  0833               	movf	??_UART_Init+5,w
  1633     068D  1C03               	skipc
  1634     068E  0F33               	incfsz	??_UART_Init+5,w
  1635     068F  2E91               	goto	u571
  1636     0690  2E92               	goto	u572
  1637     0691                     u571:
  1638     0691  02B7               	subwf	??_UART_Init+9,f
  1639     0692                     u572:
  1640     0692  0834               	movf	??_UART_Init+6,w
  1641     0693  1C03               	skipc
  1642     0694  0F34               	incfsz	??_UART_Init+6,w
  1643     0695  2E97               	goto	u573
  1644     0696  2E98               	goto	u574
  1645     0697                     u573:
  1646     0697  02B8               	subwf	??_UART_Init+10,f
  1647     0698                     u574:
  1648     0698  0835               	movf	??_UART_Init+7,w
  1649     0699  1C03               	skipc
  1650     069A  0F35               	incfsz	??_UART_Init+7,w
  1651     069B  2E9D               	goto	u575
  1652     069C  2E9E               	goto	u576
  1653     069D                     u575:
  1654     069D  02B9               	subwf	??_UART_Init+11,f
  1655     069E                     u576:
  1656     069E  0839               	movf	??_UART_Init+11,w
  1657     069F  00F7               	movwf	___aldiv@dividend+3
  1658     06A0  0838               	movf	??_UART_Init+10,w
  1659     06A1  00F6               	movwf	___aldiv@dividend+2
  1660     06A2  0837               	movf	??_UART_Init+9,w
  1661     06A3  00F5               	movwf	___aldiv@dividend+1
  1662     06A4  0836               	movf	??_UART_Init+8,w
  1663     06A5  00F4               	movwf	___aldiv@dividend
  1664     06A6  120A  118A  2753  120A  118A  	fcall	___aldiv
  1665     06AB  0870               	movf	?___aldiv,w
  1666     06AC  1683               	bsf	3,5	;RP0=1, select bank1
  1667     06AD  1303               	bcf	3,6	;RP1=0, select bank1
  1668     06AE  0099               	movwf	25	;volatile
  1669     06AF                     l1146:
  1670                           
  1671                           ;./uart.h: 19:     SYNC = 0;
  1672     06AF  1218               	bcf	24,4	;volatile
  1673     06B0                     l1148:
  1674                           
  1675                           ;./uart.h: 20:     SPEN = 1;
  1676     06B0  1283               	bcf	3,5	;RP0=0, select bank0
  1677     06B1  1303               	bcf	3,6	;RP1=0, select bank0
  1678     06B2  1798               	bsf	24,7	;volatile
  1679     06B3                     l1150:
  1680                           
  1681                           ;./uart.h: 21:     TRISC7 = 1;
  1682     06B3  1683               	bsf	3,5	;RP0=1, select bank1
  1683     06B4  1303               	bcf	3,6	;RP1=0, select bank1
  1684     06B5  1787               	bsf	7,7	;volatile
  1685     06B6                     l1152:
  1686                           
  1687                           ;./uart.h: 22:     TRISC6 = 1;
  1688     06B6  1707               	bsf	7,6	;volatile
  1689     06B7                     l1154:
  1690                           
  1691                           ;./uart.h: 23:     CREN = 1;
  1692     06B7  1283               	bcf	3,5	;RP0=0, select bank0
  1693     06B8  1303               	bcf	3,6	;RP1=0, select bank0
  1694     06B9  1618               	bsf	24,4	;volatile
  1695     06BA                     l1156:
  1696                           
  1697                           ;./uart.h: 24:     TXEN = 1;
  1698     06BA  1683               	bsf	3,5	;RP0=1, select bank1
  1699     06BB  1303               	bcf	3,6	;RP1=0, select bank1
  1700     06BC  1698               	bsf	24,5	;volatile
  1701     06BD                     l49:
  1702     06BD  0008               	return
  1703     06BE                     __end_of_UART_Init:
  1704                           
  1705                           	psect	text10
  1706     0753                     __ptext10:	
  1707 ;; *************** function ___aldiv *****************
  1708 ;; Defined at:
  1709 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  divisor         4    0[COMMON] long 
  1712 ;;  dividend        4    4[COMMON] long 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  quotient        4    2[BANK0 ] long 
  1715 ;;  sign            1    1[BANK0 ] unsigned char 
  1716 ;;  counter         1    0[BANK0 ] unsigned char 
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  4    0[COMMON] long 
  1719 ;; Registers used:
  1720 ;;		wreg, status,2, status,0, btemp+1
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1726 ;;      Params:         8       0       0       0       0
  1727 ;;      Locals:         0       6       0       0       0
  1728 ;;      Temps:          1       0       0       0       0
  1729 ;;      Totals:         9       6       0       0       0
  1730 ;;Total ram usage:       15 bytes
  1731 ;; Hardware stack levels used: 1
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_UART_Init
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739     0753                     ___aldiv:	
  1740                           ;psect for function ___aldiv
  1741                           
  1742     0753                     l1100:	
  1743                           ;incstack = 0
  1744                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  1745                           
  1746     0753  1283               	bcf	3,5	;RP0=0, select bank0
  1747     0754  1303               	bcf	3,6	;RP1=0, select bank0
  1748     0755  01A1               	clrf	___aldiv@sign
  1749     0756                     l1102:
  1750     0756  1FF3               	btfss	___aldiv@divisor+3,7
  1751     0757  2F59               	goto	u451
  1752     0758  2F5A               	goto	u450
  1753     0759                     u451:
  1754     0759  2F67               	goto	l307
  1755     075A                     u450:
  1756     075A                     l1104:
  1757     075A  09F0               	comf	___aldiv@divisor,f
  1758     075B  09F1               	comf	___aldiv@divisor+1,f
  1759     075C  09F2               	comf	___aldiv@divisor+2,f
  1760     075D  09F3               	comf	___aldiv@divisor+3,f
  1761     075E  0AF0               	incf	___aldiv@divisor,f
  1762     075F  1903               	skipnz
  1763     0760  0AF1               	incf	___aldiv@divisor+1,f
  1764     0761  1903               	skipnz
  1765     0762  0AF2               	incf	___aldiv@divisor+2,f
  1766     0763  1903               	skipnz
  1767     0764  0AF3               	incf	___aldiv@divisor+3,f
  1768     0765  01A1               	clrf	___aldiv@sign
  1769     0766  0AA1               	incf	___aldiv@sign,f
  1770     0767                     l307:
  1771     0767  1FF7               	btfss	___aldiv@dividend+3,7
  1772     0768  2F6A               	goto	u461
  1773     0769  2F6B               	goto	u460
  1774     076A                     u461:
  1775     076A  2F7A               	goto	l1110
  1776     076B                     u460:
  1777     076B                     l1106:
  1778     076B  09F4               	comf	___aldiv@dividend,f
  1779     076C  09F5               	comf	___aldiv@dividend+1,f
  1780     076D  09F6               	comf	___aldiv@dividend+2,f
  1781     076E  09F7               	comf	___aldiv@dividend+3,f
  1782     076F  0AF4               	incf	___aldiv@dividend,f
  1783     0770  1903               	skipnz
  1784     0771  0AF5               	incf	___aldiv@dividend+1,f
  1785     0772  1903               	skipnz
  1786     0773  0AF6               	incf	___aldiv@dividend+2,f
  1787     0774  1903               	skipnz
  1788     0775  0AF7               	incf	___aldiv@dividend+3,f
  1789     0776                     l1108:
  1790     0776  3001               	movlw	1
  1791     0777  00FF               	movwf	btemp+1
  1792     0778  087F               	movf	btemp+1,w
  1793     0779  06A1               	xorwf	___aldiv@sign,f
  1794     077A                     l1110:
  1795     077A  3000               	movlw	0
  1796     077B  00A5               	movwf	___aldiv@quotient+3
  1797     077C  3000               	movlw	0
  1798     077D  00A4               	movwf	___aldiv@quotient+2
  1799     077E  3000               	movlw	0
  1800     077F  00A3               	movwf	___aldiv@quotient+1
  1801     0780  3000               	movlw	0
  1802     0781  00A2               	movwf	___aldiv@quotient
  1803     0782                     l1112:
  1804     0782  0873               	movf	___aldiv@divisor+3,w
  1805     0783  0472               	iorwf	___aldiv@divisor+2,w
  1806     0784  0471               	iorwf	___aldiv@divisor+1,w
  1807     0785  0470               	iorwf	___aldiv@divisor,w
  1808     0786  1903               	skipnz
  1809     0787  2F89               	goto	u471
  1810     0788  2F8A               	goto	u470
  1811     0789                     u471:
  1812     0789  2FD7               	goto	l1134
  1813     078A                     u470:
  1814     078A                     l1114:
  1815     078A  01A0               	clrf	___aldiv@counter
  1816     078B  0AA0               	incf	___aldiv@counter,f
  1817     078C  2F9A               	goto	l1120
  1818     078D                     l1116:
  1819     078D  3001               	movlw	1
  1820     078E  00F8               	movwf	??___aldiv
  1821     078F                     u485:
  1822     078F  1003               	clrc
  1823     0790  0DF0               	rlf	___aldiv@divisor,f
  1824     0791  0DF1               	rlf	___aldiv@divisor+1,f
  1825     0792  0DF2               	rlf	___aldiv@divisor+2,f
  1826     0793  0DF3               	rlf	___aldiv@divisor+3,f
  1827     0794  0BF8               	decfsz	??___aldiv,f
  1828     0795  2F8F               	goto	u485
  1829     0796                     l1118:
  1830     0796  3001               	movlw	1
  1831     0797  00FF               	movwf	btemp+1
  1832     0798  087F               	movf	btemp+1,w
  1833     0799  07A0               	addwf	___aldiv@counter,f
  1834     079A                     l1120:
  1835     079A  1FF3               	btfss	___aldiv@divisor+3,7
  1836     079B  2F9D               	goto	u491
  1837     079C  2F9E               	goto	u490
  1838     079D                     u491:
  1839     079D  2F8D               	goto	l1116
  1840     079E                     u490:
  1841     079E                     l1122:
  1842     079E  3001               	movlw	1
  1843     079F  00F8               	movwf	??___aldiv
  1844     07A0                     u505:
  1845     07A0  1003               	clrc
  1846     07A1  0DA2               	rlf	___aldiv@quotient,f
  1847     07A2  0DA3               	rlf	___aldiv@quotient+1,f
  1848     07A3  0DA4               	rlf	___aldiv@quotient+2,f
  1849     07A4  0DA5               	rlf	___aldiv@quotient+3,f
  1850     07A5  0BF8               	decfsz	??___aldiv,f
  1851     07A6  2FA0               	goto	u505
  1852     07A7                     l1124:
  1853     07A7  0873               	movf	___aldiv@divisor+3,w
  1854     07A8  0277               	subwf	___aldiv@dividend+3,w
  1855     07A9  1D03               	skipz
  1856     07AA  2FB5               	goto	u515
  1857     07AB  0872               	movf	___aldiv@divisor+2,w
  1858     07AC  0276               	subwf	___aldiv@dividend+2,w
  1859     07AD  1D03               	skipz
  1860     07AE  2FB5               	goto	u515
  1861     07AF  0871               	movf	___aldiv@divisor+1,w
  1862     07B0  0275               	subwf	___aldiv@dividend+1,w
  1863     07B1  1D03               	skipz
  1864     07B2  2FB5               	goto	u515
  1865     07B3  0870               	movf	___aldiv@divisor,w
  1866     07B4  0274               	subwf	___aldiv@dividend,w
  1867     07B5                     u515:
  1868     07B5  1C03               	skipc
  1869     07B6  2FB8               	goto	u511
  1870     07B7  2FB9               	goto	u510
  1871     07B8                     u511:
  1872     07B8  2FC8               	goto	l1130
  1873     07B9                     u510:
  1874     07B9                     l1126:
  1875     07B9  0870               	movf	___aldiv@divisor,w
  1876     07BA  02F4               	subwf	___aldiv@dividend,f
  1877     07BB  0871               	movf	___aldiv@divisor+1,w
  1878     07BC  1C03               	skipc
  1879     07BD  0F71               	incfsz	___aldiv@divisor+1,w
  1880     07BE  02F5               	subwf	___aldiv@dividend+1,f
  1881     07BF  0872               	movf	___aldiv@divisor+2,w
  1882     07C0  1C03               	skipc
  1883     07C1  0F72               	incfsz	___aldiv@divisor+2,w
  1884     07C2  02F6               	subwf	___aldiv@dividend+2,f
  1885     07C3  0873               	movf	___aldiv@divisor+3,w
  1886     07C4  1C03               	skipc
  1887     07C5  0F73               	incfsz	___aldiv@divisor+3,w
  1888     07C6  02F7               	subwf	___aldiv@dividend+3,f
  1889     07C7                     l1128:
  1890     07C7  1422               	bsf	___aldiv@quotient,0
  1891     07C8                     l1130:
  1892     07C8  3001               	movlw	1
  1893     07C9                     u525:
  1894     07C9  1003               	clrc
  1895     07CA  0CF3               	rrf	___aldiv@divisor+3,f
  1896     07CB  0CF2               	rrf	___aldiv@divisor+2,f
  1897     07CC  0CF1               	rrf	___aldiv@divisor+1,f
  1898     07CD  0CF0               	rrf	___aldiv@divisor,f
  1899     07CE  3EFF               	addlw	-1
  1900     07CF  1D03               	skipz
  1901     07D0  2FC9               	goto	u525
  1902     07D1                     l1132:
  1903     07D1  3001               	movlw	1
  1904     07D2  02A0               	subwf	___aldiv@counter,f
  1905     07D3  1D03               	btfss	3,2
  1906     07D4  2FD6               	goto	u531
  1907     07D5  2FD7               	goto	u530
  1908     07D6                     u531:
  1909     07D6  2F9E               	goto	l1122
  1910     07D7                     u530:
  1911     07D7                     l1134:
  1912     07D7  0821               	movf	___aldiv@sign,w
  1913     07D8  1903               	btfsc	3,2
  1914     07D9  2FDB               	goto	u541
  1915     07DA  2FDC               	goto	u540
  1916     07DB                     u541:
  1917     07DB  2FE7               	goto	l1138
  1918     07DC                     u540:
  1919     07DC                     l1136:
  1920     07DC  09A2               	comf	___aldiv@quotient,f
  1921     07DD  09A3               	comf	___aldiv@quotient+1,f
  1922     07DE  09A4               	comf	___aldiv@quotient+2,f
  1923     07DF  09A5               	comf	___aldiv@quotient+3,f
  1924     07E0  0AA2               	incf	___aldiv@quotient,f
  1925     07E1  1903               	skipnz
  1926     07E2  0AA3               	incf	___aldiv@quotient+1,f
  1927     07E3  1903               	skipnz
  1928     07E4  0AA4               	incf	___aldiv@quotient+2,f
  1929     07E5  1903               	skipnz
  1930     07E6  0AA5               	incf	___aldiv@quotient+3,f
  1931     07E7                     l1138:
  1932     07E7  0825               	movf	___aldiv@quotient+3,w
  1933     07E8  00F3               	movwf	?___aldiv+3
  1934     07E9  0824               	movf	___aldiv@quotient+2,w
  1935     07EA  00F2               	movwf	?___aldiv+2
  1936     07EB  0823               	movf	___aldiv@quotient+1,w
  1937     07EC  00F1               	movwf	?___aldiv+1
  1938     07ED  0822               	movf	___aldiv@quotient,w
  1939     07EE  00F0               	movwf	?___aldiv
  1940     07EF                     l317:
  1941     07EF  0008               	return
  1942     07F0                     __end_of___aldiv:
  1943                           
  1944                           	psect	text11
  1945     04F6                     __ptext11:	
  1946 ;; *************** function _SPI_init_master *****************
  1947 ;; Defined at:
  1948 ;;		line 16 in file "./spi.h"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;		None
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;		None
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, status,2
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1962 ;;      Params:         0       0       0       0       0
  1963 ;;      Locals:         0       0       0       0       0
  1964 ;;      Temps:          0       0       0       0       0
  1965 ;;      Totals:         0       0       0       0       0
  1966 ;;Total ram usage:        0 bytes
  1967 ;; Hardware stack levels used: 1
  1968 ;; This function calls:
  1969 ;;		Nothing
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975     04F6                     _SPI_init_master:	
  1976                           ;psect for function _SPI_init_master
  1977                           
  1978     04F6                     l914:	
  1979                           ;incstack = 0
  1980                           ; Regs used in _SPI_init_master: [wreg+status,2]
  1981                           
  1982                           
  1983                           ;./spi.h: 17:     SSPCON = 0b00100000;
  1984     04F6  3020               	movlw	32
  1985     04F7  1283               	bcf	3,5	;RP0=0, select bank0
  1986     04F8  1303               	bcf	3,6	;RP1=0, select bank0
  1987     04F9  0094               	movwf	20	;volatile
  1988     04FA                     l916:
  1989                           
  1990                           ;./spi.h: 18:     SSPSTAT = 0b00000000;
  1991     04FA  1683               	bsf	3,5	;RP0=1, select bank1
  1992     04FB  1303               	bcf	3,6	;RP1=0, select bank1
  1993     04FC  0194               	clrf	20	;volatile
  1994     04FD                     l918:
  1995                           
  1996                           ;./spi.h: 19:     TRISCbits.TRISC5 = 0;
  1997     04FD  1287               	bcf	7,5	;volatile
  1998     04FE                     l920:
  1999                           
  2000                           ;./spi.h: 20:     TRISCbits.TRISC4 = 1;
  2001     04FE  1607               	bsf	7,4	;volatile
  2002     04FF                     l922:
  2003                           
  2004                           ;./spi.h: 21:     TRISCbits.TRISC3 = 0;
  2005     04FF  1187               	bcf	7,3	;volatile
  2006     0500                     l73:
  2007     0500  0008               	return
  2008     0501                     __end_of_SPI_init_master:
  2009     007E                     btemp	set	126	;btemp
  2010     007E                     wtemp0	set	126
  2011                           
  2012                           	psect	config
  2013                           
  2014                           ;Config register CONFIG1 @ 0x2007
  2015                           ;	Oscillator Selection bits
  2016                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2017                           ;	Watchdog Timer Enable bit
  2018                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2019                           ;	Power-up Timer Enable bit
  2020                           ;	PWRTE = OFF, PWRT disabled
  2021                           ;	RE3/MCLR pin function select bit
  2022                           ;	MCLRE = 0x1, unprogrammed default
  2023                           ;	Code Protection bit
  2024                           ;	CP = OFF, Program memory code protection is disabled
  2025                           ;	Data Code Protection bit
  2026                           ;	CPD = OFF, Data memory code protection is disabled
  2027                           ;	Brown Out Reset Selection bits
  2028                           ;	BOREN = OFF, BOR disabled
  2029                           ;	Internal External Switchover bit
  2030                           ;	IESO = 0x1, unprogrammed default
  2031                           ;	Fail-Safe Clock Monitor Enabled bit
  2032                           ;	FCMEN = 0x1, unprogrammed default
  2033                           ;	Low Voltage Programming Enable bit
  2034                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2035                           ;	In-Circuit Debugger Mode bit
  2036                           ;	DEBUG = 0x1, unprogrammed default
  2037     2007                     	org	8199
  2038     2007  2CF2               	dw	11506
  2039                           
  2040                           ;Config register CONFIG2 @ 0x2008
  2041                           ;	Brown-out Reset Selection bit
  2042                           ;	BOR4V = 0x1, unprogrammed default
  2043                           ;	Flash Program Memory Self Write Enable bits
  2044                           ;	WRT = OFF, Write protection off
  2045     2008                     	org	8200
  2046     2008  3FFF               	dw	16383

Data Sizes:
    Strings     26
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      47
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[8]), char_to_binary_string@output(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_send
    _send->_UART_Write_Text
    _char_to_binary_string->_sprintf
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _send->_char_to_binary_string
    _char_to_binary_string->_sprintf
    _UART_Write_Text->_char_to_binary_string
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1896
                                             34 BANK0      3     3      0
                    _SPI_init_master
                          _UART_Init
                    _UART_Write_Text
                               _send
 ---------------------------------------------------------------------------------
 (1) _send                                                 2     2      0     962
                                             12 COMMON     2     2      0
                           _SPI_read
                _SPI_wait_data_ready
                          _SPI_write
                    _UART_Write_Text
              _char_to_binary_string
 ---------------------------------------------------------------------------------
 (2) _char_to_binary_string                               17    17      0     683
                                             17 BANK0     17    17      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             34    17     17     315
                                              0 COMMON     5     5      0
                                              0 BANK0     17     0     17
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      7     5      2     264
                                              5 COMMON     7     5      2
                           _SPI_read (ARG)
                         _UART_Write
              _char_to_binary_string (ARG)
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_write                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_wait_data_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_read                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_Init
     ___aldiv
   _UART_Write_Text
     _SPI_read (ARG)
     _UART_Write (ARG)
     _char_to_binary_string (ARG)
       _sprintf
   _send
     _SPI_read
     _SPI_wait_data_ready
     _SPI_write
     _UART_Write_Text
     _char_to_binary_string

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      2F       5       58.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3D      12        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun Mar 19 23:57:45 2023

                             pc 0002                     _SSPSTATbits 0094                              l52 050E  
                            l61 055A                              l55 0518                              l73 0500  
                            l49 06BD                              l91 04EE                              l76 0506  
                            l85 04EF                              l79 050C                              l88 04F5  
                            u70 050C                              u71 050B                              u80 04F5  
                            u81 04F4                              fsr 0004                             l131 05F9  
                           l128 0752                             l307 0767                             l317 07EF  
                           l238 0652                             l920 04FE                             l922 04FF  
                           l914 04F6                             l916 04FA                             l918 04FD  
                           l792 0502                             l794 04EF                             l796 04E8  
                           l798 04EB                             _RD2 0042                             _RD3 0043  
                           u310 0514                             u311 0513                             u320 0604  
                           u400 06EC                             u321 0603                             u401 06EB  
                           u330 064E                             u410 06F9                             u331 064D  
                           u411 06F8                             u340 0526                             u420 0706  
                           u421 0705                             u510 07B9                             u350 0548  
                           u430 0713                             u511 07B8                             u431 0712  
                           u360 055A                             u440 0720                             u505 07A0  
                           u361 0559                             u441 071F                             u530 07D7  
                           u450 075A                             u370 06C5                             u531 07D6  
                           u515 07B5                             u451 0759                             u371 06C4  
                           u540 07DC                             u460 076B                             u380 06D2  
                           u541 07DB                             u525 07C9                             u461 076A  
                           u381 06D1                             u470 078A                             u550 0666  
                           u390 06DF                             u471 0789                             u391 06DE  
                           u607 05C2                             u560 067F                             u617 05D4  
                           u490 079E                             u491 079D                             u571 0691  
                           u555 0661                             u572 0692                             u485 078F  
                           u573 0697                             u565 067A                             u574 0698  
                           u575 069D                             u576 069E                             u587 0599  
                           u597 05B0                             fsr0 0004                             indf 0000  
                          l1002 050E                            l1010 0604                            l1100 0753  
                          l1004 0514                            l1020 0618                            l1012 0609  
                          l1110 077A                            l1102 0756                            l1014 060E  
                          l1006 05FB                            l1120 079A                            l1112 0782  
                          l1104 075A                            l1040 051C                            l1016 060F  
                          l1024 0622                            l1008 05FE                            l1130 07C8  
                          l1122 079E                            l1114 078A                            l1106 076B  
                          l1042 0538                            l1018 0614                            l1026 063C  
                          l1050 06CA                            l1132 07D1                            l1124 07A7  
                          l1116 078D                            l1108 0776                            l1044 053E  
                          l1028 064E                            l1060 06DF                            l1052 06CE  
                          l1126 07B9                            l1118 0796                            l1134 07D7  
                          l1150 06B3                            l1142 0653                            l1038 0519  
                          l1070 06F5                            l1062 06E4                            l1054 06D2  
                          l1046 06C1                            l1136 07DC                            l1128 07C7  
                          l1152 06B6                            l1144 0656                            l1224 0634  
                          l1080 070B                            l1072 06F9                            l1064 06E8  
                          l1056 06D7                            l1048 06C5                            l1160 05A6  
                          l1138 07E7                            l1154 06B7                            l1146 06AF  
                          l1090 0720                            l1082 070F                            l1074 06FE  
                          l1066 06EC                            l1058 06DB                            l1170 05CA  
                          l1162 05AC                            l1156 06BA                            l1148 06B0  
                          l1092 0725                            l1084 0713                            l1076 0702  
                          l1068 06F1                            l1172 05D0                            l1164 05B5  
                          l1180 055B                            l1094 0729                            l1086 0718  
                          l1078 0706                            l1174 05DF                            l1166 05BB  
                          l1158 05A3                            l1190 058C                            l1182 0563  
                          l1096 0751                            l1088 071C                            l1176 05E4  
                          l1168 05C7                            l1192 0591                            l1184 0567  
                          l1178 05F6                            l1186 057E                            l1188 0583  
                          STR_1 0013                            STR_2 0025                            _BRGH 04C2  
                          _CREN 00C4                            _RCIF 0065                            _SPEN 00C7  
                          _TRMT 04C1                            _TXEN 04C5                            _SYNC 04C4  
                          _main 055B                            _send 05A3                            btemp 007E  
   __end_of_SPI_wait_data_ready 04F6                            start 0000         __end_of_UART_Write_Text 055B  
               __end_of___aldiv 07F0                           ?_main 0070                           ?_send 0070  
                         _RCREG 001A         ??_char_to_binary_string 0075                           _SPBRG 0099  
                         _TXREG 0019                     ?_UART_Write 0070                           pclath 000A  
              __end_of_SPI_read 04EF                           status 0003                           wtemp0 007E  
               __end_of_sprintf 0653                 __initialization 07F0                    __end_of_main 05A3  
                  __end_of_send 05FA                          ??_main 0042                          ??_send 007C  
                        _TRISC6 043E                          _TRISC7 043F                          _SSPCON 0014  
                        _SSPBUF 0013               __end_of_UART_Init 06BE                       ??___aldiv 0078  
              ?_UART_Write_Text 0075     char_to_binary_string@output 0045               __end_of_SPI_write 050D  
                     ??_sprintf 0070         __end_of__initialization 07FC                  __pcstackCOMMON 0070  
                     ?_SPI_read 0070               ??_SPI_init_master 0070                      __pbssBANK0 0045  
                    __pmaintext 055B                  SPI_write@write 0070                      ??_SPI_read 0070  
                  ??_UART_Write 0070   __end_of_char_to_binary_string 0753                         _SSPSTAT 0094  
                    __stringtab 0003                         ___aldiv 0753              __end_of_UART_Write 0519  
                       __ptext1 05A3                         __ptext2 06BE                         __ptext3 05FA  
                       __ptext4 0519                         __ptext5 050D                         __ptext6 0501  
                       __ptext7 04EF                         __ptext8 04E8                         __ptext9 0653  
              ___aldiv@dividend 0074                         _sprintf 05FA            end_of_initialization 07FC  
              ___aldiv@quotient 0022                       _UART_Init 0653                  UART_Write@data 0070  
                     _TRISCbits 0087                       _TRISDbits 0088                       _SPI_write 0501  
               _SPI_init_master 04F6                      ?_UART_Init 0026             start_initialization 07F0  
                    ?_SPI_write 0070                       ___latbits 0002                   __pcstackBANK0 0020  
           _SPI_wait_data_ready 04EF         __end_of_SPI_init_master 0501                        ?___aldiv 0070  
          ?_SPI_wait_data_ready 0070                     ??_UART_Init 002E                       __pstrings 0003  
                      ?_sprintf 0020           _char_to_binary_string 06BE               ??_UART_Write_Text 0077  
                   ??_SPI_write 0070                 ___aldiv@divisor 0070                 ___aldiv@counter 0020  
         ??_SPI_wait_data_ready 0070               UART_Init@baudrate 0026  char_to_binary_string@character 0041  
                   __stringbase 0012                        _SPI_read 04E8             UART_Init@_XTAL_FREQ 002A  
              ?_SPI_init_master 0070              __end_of__stringtab 0013          ?_char_to_binary_string 0070  
                      __ptext10 0753                        __ptext11 04F6             UART_Write_Text@text 0075  
     _char_to_binary_string$250 003B       _char_to_binary_string$251 003D       _char_to_binary_string$252 003F  
     _char_to_binary_string$245 0031       _char_to_binary_string$246 0033       _char_to_binary_string$247 0035  
     _char_to_binary_string$248 0037       _char_to_binary_string$249 0039                       sprintf@ap 0072  
                     sprintf@sp 0074                       stringcode 000D                      _OSCCONbits 008F  
               _UART_Write_Text 0519                        sprintf@c 0073                        sprintf@f 0020  
                      stringdir 000D                        stringtab 0003                    ___aldiv@sign 0021  
                    _UART_Write 050D                UART_Write_Text@i 007A  
