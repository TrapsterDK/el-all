

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Mar 24 12:10:31 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30     0000                     
    31                           ; Version 2.40
    32                           ; Generated 04/07/2022 GMT
    33                           ; 
    34                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66     0000                     	;# 
    67     0001                     	;# 
    68     0002                     	;# 
    69     0003                     	;# 
    70     0004                     	;# 
    71     0005                     	;# 
    72     0006                     	;# 
    73     0007                     	;# 
    74     0008                     	;# 
    75     0009                     	;# 
    76     000A                     	;# 
    77     000B                     	;# 
    78     000C                     	;# 
    79     000D                     	;# 
    80     000E                     	;# 
    81     000E                     	;# 
    82     000F                     	;# 
    83     0010                     	;# 
    84     0011                     	;# 
    85     0012                     	;# 
    86     0013                     	;# 
    87     0014                     	;# 
    88     0015                     	;# 
    89     0015                     	;# 
    90     0016                     	;# 
    91     0017                     	;# 
    92     0018                     	;# 
    93     0019                     	;# 
    94     001A                     	;# 
    95     001B                     	;# 
    96     001B                     	;# 
    97     001C                     	;# 
    98     001D                     	;# 
    99     001E                     	;# 
   100     001F                     	;# 
   101     0081                     	;# 
   102     0085                     	;# 
   103     0086                     	;# 
   104     0087                     	;# 
   105     0088                     	;# 
   106     0089                     	;# 
   107     008C                     	;# 
   108     008D                     	;# 
   109     008E                     	;# 
   110     008F                     	;# 
   111     0090                     	;# 
   112     0091                     	;# 
   113     0092                     	;# 
   114     0093                     	;# 
   115     0093                     	;# 
   116     0093                     	;# 
   117     0094                     	;# 
   118     0095                     	;# 
   119     0096                     	;# 
   120     0097                     	;# 
   121     0098                     	;# 
   122     0099                     	;# 
   123     009A                     	;# 
   124     009B                     	;# 
   125     009C                     	;# 
   126     009D                     	;# 
   127     009E                     	;# 
   128     009F                     	;# 
   129     0105                     	;# 
   130     0107                     	;# 
   131     0108                     	;# 
   132     0109                     	;# 
   133     010C                     	;# 
   134     010C                     	;# 
   135     010D                     	;# 
   136     010E                     	;# 
   137     010F                     	;# 
   138     0185                     	;# 
   139     0187                     	;# 
   140     0188                     	;# 
   141     0189                     	;# 
   142     018C                     	;# 
   143     018D                     	;# 
   144     0000                     	;# 
   145     0001                     	;# 
   146     0002                     	;# 
   147     0003                     	;# 
   148     0004                     	;# 
   149     0005                     	;# 
   150     0006                     	;# 
   151     0007                     	;# 
   152     0008                     	;# 
   153     0009                     	;# 
   154     000A                     	;# 
   155     000B                     	;# 
   156     000C                     	;# 
   157     000D                     	;# 
   158     000E                     	;# 
   159     000E                     	;# 
   160     000F                     	;# 
   161     0010                     	;# 
   162     0011                     	;# 
   163     0012                     	;# 
   164     0013                     	;# 
   165     0014                     	;# 
   166     0015                     	;# 
   167     0015                     	;# 
   168     0016                     	;# 
   169     0017                     	;# 
   170     0018                     	;# 
   171     0019                     	;# 
   172     001A                     	;# 
   173     001B                     	;# 
   174     001B                     	;# 
   175     001C                     	;# 
   176     001D                     	;# 
   177     001E                     	;# 
   178     001F                     	;# 
   179     0081                     	;# 
   180     0085                     	;# 
   181     0086                     	;# 
   182     0087                     	;# 
   183     0088                     	;# 
   184     0089                     	;# 
   185     008C                     	;# 
   186     008D                     	;# 
   187     008E                     	;# 
   188     008F                     	;# 
   189     0090                     	;# 
   190     0091                     	;# 
   191     0092                     	;# 
   192     0093                     	;# 
   193     0093                     	;# 
   194     0093                     	;# 
   195     0094                     	;# 
   196     0095                     	;# 
   197     0096                     	;# 
   198     0097                     	;# 
   199     0098                     	;# 
   200     0099                     	;# 
   201     009A                     	;# 
   202     009B                     	;# 
   203     009C                     	;# 
   204     009D                     	;# 
   205     009E                     	;# 
   206     009F                     	;# 
   207     0105                     	;# 
   208     0107                     	;# 
   209     0108                     	;# 
   210     0109                     	;# 
   211     010C                     	;# 
   212     010C                     	;# 
   213     010D                     	;# 
   214     010E                     	;# 
   215     010F                     	;# 
   216     0185                     	;# 
   217     0187                     	;# 
   218     0188                     	;# 
   219     0189                     	;# 
   220     018C                     	;# 
   221     018D                     	;# 
   222                           
   223                           	psect	idataBANK0
   224     04FA                     __pidataBANK0:
   225                           
   226                           ;initializer for _RXTX_ADDR
   227     04FA  34B5               	retlw	181
   228     04FB  3423               	retlw	35
   229     04FC  34A5               	retlw	165
   230     0003                     _STATUS	set	3
   231     0013                     _SSPBUF	set	19
   232     0014                     _SSPCON	set	20
   233     001A                     _RCREG	set	26
   234     0019                     _TXREG	set	25
   235     0042                     _RD2	set	66
   236     0043                     _RD3	set	67
   237     0065                     _RCIF	set	101
   238     00C4                     _CREN	set	196
   239     00C7                     _SPEN	set	199
   240     008F                     _OSCCONbits	set	143
   241     0088                     _TRISDbits	set	136
   242     0087                     _TRISCbits	set	135
   243     0094                     _SSPSTAT	set	148
   244     0099                     _SPBRG	set	153
   245     04A0                     _BF	set	1184
   246     04A7                     _SMP	set	1191
   247     04A6                     _CKE	set	1190
   248     04C1                     _TRMT	set	1217
   249     04C5                     _TXEN	set	1221
   250     043E                     _TRISC6	set	1086
   251     043F                     _TRISC7	set	1087
   252     04C4                     _SYNC	set	1220
   253     04C2                     _BRGH	set	1218
   254                           
   255                           	psect	strings
   256     0003                     __pstrings:
   257     0003                     stringtab:
   258     0003                     __stringtab:
   259     0003                     stringcode:	
   260                           ;	String table - string pointers are 1 byte each
   261                           
   262     0003                     stringdir:
   263     0003  3000               	movlw	high stringdir
   264     0004  008A               	movwf	10
   265     0005  0804               	movf	4,w
   266     0006  0A84               	incf	4,f
   267     0007  0782               	addwf	2,f
   268     0008                     __stringbase:
   269     0008  3400               	retlw	0
   270     0009                     __end_of__stringtab:
   271     0009                     STR_1:
   272     0009  3425               	retlw	37	;'%'
   273     000A  3463               	retlw	99	;'c'
   274     000B  3425               	retlw	37	;'%'
   275     000C  3463               	retlw	99	;'c'
   276     000D  3425               	retlw	37	;'%'
   277     000E  3463               	retlw	99	;'c'
   278     000F  3425               	retlw	37	;'%'
   279     0010  3463               	retlw	99	;'c'
   280     0011  3425               	retlw	37	;'%'
   281     0012  3463               	retlw	99	;'c'
   282     0013  3425               	retlw	37	;'%'
   283     0014  3463               	retlw	99	;'c'
   284     0015  3425               	retlw	37	;'%'
   285     0016  3463               	retlw	99	;'c'
   286     0017  3425               	retlw	37	;'%'
   287     0018  3463               	retlw	99	;'c'
   288     0019  340A               	retlw	10
   289     001A  3400               	retlw	0
   290     001B                     STR_5:
   291     001B  3442               	retlw	66	;'B'
   292     001C  344F               	retlw	79	;'O'
   293     001D  344F               	retlw	79	;'O'
   294     001E  3454               	retlw	84	;'T'
   295     001F  3445               	retlw	69	;'E'
   296     0020  3444               	retlw	68	;'D'
   297     0021  340A               	retlw	10
   298     0022  3400               	retlw	0
   299     0023                     STR_3:
   300     0023  3453               	retlw	83	;'S'
   301     0024  3445               	retlw	69	;'E'
   302     0025  344E               	retlw	78	;'N'
   303     0026  3454               	retlw	84	;'T'
   304     0027  340A               	retlw	10
   305     0028  3400               	retlw	0
   306     0029                     STR_2:
   307     0029  3449               	retlw	73	;'I'
   308     002A  346E               	retlw	110	;'n'
   309     002B  3469               	retlw	105	;'i'
   310     002C  3474               	retlw	116	;'t'
   311     002D  340A               	retlw	10
   312     002E  3400               	retlw	0
   313     002F                     STR_4:
   314     002F  3452               	retlw	82	;'R'
   315     0030  340A               	retlw	10
   316     0031  3400               	retlw	0
   317     0032                     STR_6:
   318     0032  3461               	retlw	97	;'a'
   319     0033  3400               	retlw	0
   320                           
   321                           	psect	cinit
   322     07E0                     start_initialization:	
   323                           ; #config settings
   324                           
   325     07E0                     __initialization:
   326                           
   327                           ; Initialize objects allocated to BANK0
   328     07E0  120A  118A  24FA  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   329     07E5  00C7               	movwf	__pdataBANK0& (0+127)
   330     07E6  120A  118A  24FB  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   331     07EB  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   332     07EC  120A  118A  24FC  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   333     07F1  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   334                           
   335                           ; Clear objects allocated to BANK0
   336     07F2  01BD               	clrf	__pbssBANK0& (0+127)
   337     07F3  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   338     07F4  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   339     07F5  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   340     07F6  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   341     07F7  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   342     07F8  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   343     07F9  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   344     07FA  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   345     07FB  01C6               	clrf	(__pbssBANK0+9)& (0+127)
   346     07FC                     end_of_initialization:	
   347                           ;End of C runtime variable initialization code
   348                           
   349     07FC                     __end_of__initialization:
   350     07FC  0183               	clrf	3
   351     07FD  120A  118A  2E1B   	ljmp	_main	;jump to C main() function
   352                           
   353                           	psect	bssBANK0
   354     003D                     __pbssBANK0:
   355     003D                     char_to_binary_string@output:
   356     003D                     	ds	10
   357                           
   358                           	psect	dataBANK0
   359     0047                     __pdataBANK0:
   360     0047                     _RXTX_ADDR:
   361     0047                     	ds	3
   362                           
   363                           	psect	cstackCOMMON
   364     0070                     __pcstackCOMMON:
   365     0070                     ?_UART_Write:
   366     0070                     ??_UART_Write:	
   367                           ; 1 bytes @ 0x0
   368                           
   369     0070                     ?_UART_Write_Text:	
   370                           ; 1 bytes @ 0x0
   371                           
   372     0070                     ?_SPI_init_master:	
   373                           ; 1 bytes @ 0x0
   374                           
   375     0070                     ??_SPI_init_master:	
   376                           ; 1 bytes @ 0x0
   377                           
   378     0070                     ?_SPI_write:	
   379                           ; 1 bytes @ 0x0
   380                           
   381     0070                     ??_SPI_write:	
   382                           ; 1 bytes @ 0x0
   383                           
   384     0070                     ?_write_command:	
   385                           ; 1 bytes @ 0x0
   386                           
   387     0070                     ?_flush_TXRX:	
   388                           ; 1 bytes @ 0x0
   389                           
   390     0070                     ?_rf_setup:	
   391                           ; 1 bytes @ 0x0
   392                           
   393     0070                     ?_TX_mode:	
   394                           ; 1 bytes @ 0x0
   395                           
   396     0070                     ?_TXChar:	
   397                           ; 1 bytes @ 0x0
   398                           
   399     0070                     ?_SendChar:	
   400                           ; 1 bytes @ 0x0
   401                           
   402     0070                     ?_main:	
   403                           ; 1 bytes @ 0x0
   404                           
   405     0070                     ?___aldiv:	
   406                           ; 2 bytes @ 0x0
   407                           
   408     0070                     UART_Write@data:	
   409                           ; 4 bytes @ 0x0
   410                           
   411     0070                     SPI_write@data:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ___aldiv@divisor:	
   415                           ; 1 bytes @ 0x0
   416                           
   417                           
   418                           ; 4 bytes @ 0x0
   419     0070                     	ds	1
   420     0071                     ??_UART_Write_Text:
   421     0071                     ?_execute_command:	
   422                           ; 1 bytes @ 0x1
   423                           
   424     0071                     ??_write_command:	
   425                           ; 1 bytes @ 0x1
   426                           
   427     0071                     ?_write_address:	
   428                           ; 1 bytes @ 0x1
   429                           
   430     0071                     execute_command@val:	
   431                           ; 1 bytes @ 0x1
   432                           
   433     0071                     write_command@command:	
   434                           ; 1 bytes @ 0x1
   435                           
   436     0071                     write_address@addr:	
   437                           ; 1 bytes @ 0x1
   438                           
   439     0071                     UART_Write_Text@i:	
   440                           ; 1 bytes @ 0x1
   441                           
   442                           
   443                           ; 2 bytes @ 0x1
   444     0071                     	ds	1
   445     0072                     ??_execute_command:
   446     0072                     write_command@ret:	
   447                           ; 1 bytes @ 0x2
   448                           
   449     0072                     write_address@num:	
   450                           ; 1 bytes @ 0x2
   451                           
   452                           
   453                           ; 1 bytes @ 0x2
   454     0072                     	ds	1
   455     0073                     ??_write_address:
   456     0073                     UART_Write_Text@text:	
   457                           ; 1 bytes @ 0x3
   458                           
   459     0073                     execute_command@reg:	
   460                           ; 1 bytes @ 0x3
   461                           
   462                           
   463                           ; 1 bytes @ 0x3
   464     0073                     	ds	1
   465     0074                     execute_command@ret:
   466     0074                     write_address@reg:	
   467                           ; 1 bytes @ 0x4
   468                           
   469     0074                     ___aldiv@dividend:	
   470                           ; 1 bytes @ 0x4
   471                           
   472                           
   473                           ; 4 bytes @ 0x4
   474     0074                     	ds	1
   475     0075                     ?_write_register:
   476     0075                     write_register@val:	
   477                           ; 1 bytes @ 0x5
   478                           
   479     0075                     write_address@i:	
   480                           ; 1 bytes @ 0x5
   481                           
   482                           
   483                           ; 1 bytes @ 0x5
   484     0075                     	ds	1
   485     0076                     ??_write_register:
   486     0076                     ?_write_tx_payload:	
   487                           ; 1 bytes @ 0x6
   488                           
   489     0076                     write_register@reg:	
   490                           ; 1 bytes @ 0x6
   491                           
   492     0076                     write_tx_payload@data:	
   493                           ; 1 bytes @ 0x6
   494                           
   495                           
   496                           ; 1 bytes @ 0x6
   497     0076                     	ds	1
   498     0077                     ??_flush_TXRX:
   499     0077                     ??_rf_setup:	
   500                           ; 1 bytes @ 0x7
   501                           
   502     0077                     ??_TX_mode:	
   503                           ; 1 bytes @ 0x7
   504                           
   505     0077                     ??_write_tx_payload:	
   506                           ; 1 bytes @ 0x7
   507                           
   508                           
   509                           ; 1 bytes @ 0x7
   510     0077                     	ds	1
   511     0078                     ??___aldiv:
   512     0078                     write_tx_payload@num:	
   513                           ; 1 bytes @ 0x8
   514                           
   515                           
   516                           ; 1 bytes @ 0x8
   517     0078                     	ds	1
   518     0079                     ??_TXChar:
   519     0079                     TXChar@ch:	
   520                           ; 1 bytes @ 0x9
   521                           
   522                           
   523                           ; 1 bytes @ 0x9
   524     0079                     	ds	1
   525     007A                     TXChar@stat:
   526                           
   527                           ; 1 bytes @ 0xA
   528     007A                     	ds	1
   529     007B                     ??_SendChar:
   530     007B                     SendChar@args:	
   531                           ; 1 bytes @ 0xB
   532                           
   533                           
   534                           ; 1 bytes @ 0xB
   535     007B                     	ds	1
   536                           
   537                           	psect	cstackBANK0
   538     0020                     __pcstackBANK0:
   539     0020                     ___aldiv@counter:
   540                           
   541                           ; 1 bytes @ 0x0
   542     0020                     	ds	1
   543     0021                     ___aldiv@sign:
   544                           
   545                           ; 1 bytes @ 0x1
   546     0021                     	ds	1
   547     0022                     ___aldiv@quotient:
   548                           
   549                           ; 4 bytes @ 0x2
   550     0022                     	ds	4
   551     0026                     ?_UART_Init:
   552     0026                     UART_Init@baudrate:	
   553                           ; 1 bytes @ 0x6
   554                           
   555                           
   556                           ; 4 bytes @ 0x6
   557     0026                     	ds	4
   558     002A                     UART_Init@_XTAL_FREQ:
   559                           
   560                           ; 4 bytes @ 0xA
   561     002A                     	ds	4
   562     002E                     ??_UART_Init:
   563                           
   564                           ; 1 bytes @ 0xE
   565     002E                     	ds	12
   566     003A                     ??_main:
   567                           
   568                           ; 1 bytes @ 0x1A
   569     003A                     	ds	3
   570                           
   571                           	psect	maintext
   572     061B                     __pmaintext:	
   573 ;;
   574 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   575 ;;
   576 ;; *************** function _main *****************
   577 ;; Defined at:
   578 ;;		line 264 in file "main.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  2  185[None  ] int 
   585 ;; Registers used:
   586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   587 ;; Tracked objects:
   588 ;;		On entry : B00/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   592 ;;      Params:         0       0       0       0       0
   593 ;;      Locals:         0       0       0       0       0
   594 ;;      Temps:          0       3       0       0       0
   595 ;;      Totals:         0       3       0       0       0
   596 ;;Total ram usage:        3 bytes
   597 ;; Hardware stack levels required when called: 5
   598 ;; This function calls:
   599 ;;		_SPI_init_master
   600 ;;		_SendChar
   601 ;;		_UART_Init
   602 ;;		_UART_Write_Text
   603 ;;		_rf_setup
   604 ;; This function is called by:
   605 ;;		Startup code after reset
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609     061B                     _main:	
   610                           ;psect for function _main
   611                           
   612     061B                     l1376:	
   613                           ;incstack = 0
   614                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   615                           
   616                           
   617                           ;main.c: 266:     TRISDbits.TRISD2 = 0;
   618     061B  1683               	bsf	3,5	;RP0=1, select bank1
   619     061C  1303               	bcf	3,6	;RP1=0, select bank1
   620     061D  1108               	bcf	8,2	;volatile
   621                           
   622                           ;main.c: 267:     TRISDbits.TRISD3 = 0;
   623     061E  1188               	bcf	8,3	;volatile
   624     061F                     l1378:
   625                           
   626                           ;main.c: 269:     UART_Write_Text("BOOTED\n");
   627     061F  3013               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   628     0620  120A  118A  25CB  120A  118A  	fcall	_UART_Write_Text
   629     0625                     l1380:
   630                           
   631                           ;main.c: 271:     OSCCONbits.IRCF = 111;
   632     0625  3070               	movlw	112
   633     0626  1683               	bsf	3,5	;RP0=1, select bank1
   634     0627  1303               	bcf	3,6	;RP1=0, select bank1
   635     0628  048F               	iorwf	15,f	;volatile
   636     0629                     l1382:
   637                           
   638                           ;main.c: 273:     UART_Init(9600, 8000000UL);
   639     0629  3000               	movlw	0
   640     062A  1283               	bcf	3,5	;RP0=0, select bank0
   641     062B  1303               	bcf	3,6	;RP1=0, select bank0
   642     062C  00A9               	movwf	UART_Init@baudrate+3
   643     062D  3000               	movlw	0
   644     062E  00A8               	movwf	UART_Init@baudrate+2
   645     062F  3025               	movlw	37
   646     0630  00A7               	movwf	UART_Init@baudrate+1
   647     0631  3080               	movlw	128
   648     0632  00A6               	movwf	UART_Init@baudrate
   649     0633  3000               	movlw	0
   650     0634  00AD               	movwf	UART_Init@_XTAL_FREQ+3
   651     0635  307A               	movlw	122
   652     0636  00AC               	movwf	UART_Init@_XTAL_FREQ+2
   653     0637  3012               	movlw	18
   654     0638  00AB               	movwf	UART_Init@_XTAL_FREQ+1
   655     0639  3000               	movlw	0
   656     063A  00AA               	movwf	UART_Init@_XTAL_FREQ
   657     063B  120A  118A  266D  120A  118A  	fcall	_UART_Init
   658     0640                     l1384:
   659                           
   660                           ;main.c: 275:     SPI_init_master();
   661     0640  120A  118A  2520  120A  118A  	fcall	_SPI_init_master
   662     0645                     l1386:
   663                           
   664                           ;main.c: 277:     rf_setup();
   665     0645  120A  118A  26D8  120A  118A  	fcall	_rf_setup
   666     064A                     l1388:
   667                           
   668                           ;main.c: 279:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   669     064A  3006               	movlw	6
   670     064B  1283               	bcf	3,5	;RP0=0, select bank0
   671     064C  1303               	bcf	3,6	;RP1=0, select bank0
   672     064D  00BB               	movwf	??_main+1
   673     064E  302F               	movlw	47
   674     064F  00BA               	movwf	??_main
   675     0650                     u587:
   676     0650  0BBA               	decfsz	??_main,f
   677     0651  2E50               	goto	u587
   678     0652  0BBB               	decfsz	??_main+1,f
   679     0653  2E50               	goto	u587
   680     0654  2E55               	nop2
   681     0655                     l1390:
   682                           
   683                           ;main.c: 281:         SendChar("a");
   684     0655  302A               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   685     0656  120A  118A  2579  120A  118A  	fcall	_SendChar
   686     065B                     l1392:
   687                           
   688                           ;main.c: 283:         _delay((unsigned long)((500)*(8000000UL/4000.0)));
   689     065B  3006               	movlw	6
   690     065C  1283               	bcf	3,5	;RP0=0, select bank0
   691     065D  1303               	bcf	3,6	;RP1=0, select bank0
   692     065E  00BC               	movwf	??_main+2
   693     065F  3013               	movlw	19
   694     0660  00BB               	movwf	??_main+1
   695     0661  30AD               	movlw	173
   696     0662  00BA               	movwf	??_main
   697     0663                     u597:
   698     0663  0BBA               	decfsz	??_main,f
   699     0664  2E63               	goto	u597
   700     0665  0BBB               	decfsz	??_main+1,f
   701     0666  2E63               	goto	u597
   702     0667  0BBC               	decfsz	??_main+2,f
   703     0668  2E63               	goto	u597
   704     0669  2E55               	goto	l1390
   705     066A  120A  118A  2800   	ljmp	start
   706     066D                     __end_of_main:
   707                           
   708                           	psect	text1
   709     06D8                     __ptext1:	
   710 ;; *************** function _rf_setup *****************
   711 ;; Defined at:
   712 ;;		line 169 in file "main.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   726 ;;      Params:         0       0       0       0       0
   727 ;;      Locals:         0       0       0       0       0
   728 ;;      Temps:          2       0       0       0       0
   729 ;;      Totals:         2       0       0       0       0
   730 ;;Total ram usage:        2 bytes
   731 ;; Hardware stack levels used: 1
   732 ;; Hardware stack levels required when called: 4
   733 ;; This function calls:
   734 ;;		_UART_Write_Text
   735 ;;		_flush_TXRX
   736 ;;		_write_address
   737 ;;		_write_register
   738 ;; This function is called by:
   739 ;;		_main
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743     06D8                     _rf_setup:	
   744                           ;psect for function _rf_setup
   745                           
   746     06D8                     l1244:	
   747                           ;incstack = 0
   748                           ; Regs used in _rf_setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   749                           
   750                           
   751                           ;main.c: 170:     RD3 = 1;
   752     06D8  1283               	bcf	3,5	;RP0=0, select bank0
   753     06D9  1303               	bcf	3,6	;RP1=0, select bank0
   754     06DA  1588               	bsf	8,3	;volatile
   755                           
   756                           ;main.c: 171:     RD2 = 0;
   757     06DB  1108               	bcf	8,2	;volatile
   758     06DC                     l1246:
   759                           
   760                           ;main.c: 173:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   761     06DC  3006               	movlw	6
   762     06DD  00F8               	movwf	??_rf_setup+1
   763     06DE  3030               	movlw	48
   764     06DF  00F7               	movwf	??_rf_setup
   765     06E0                     u607:
   766     06E0  0BF7               	decfsz	??_rf_setup,f
   767     06E1  2EE0               	goto	u607
   768     06E2  0BF8               	decfsz	??_rf_setup+1,f
   769     06E3  2EE0               	goto	u607
   770     06E4  0000               	nop
   771     06E5                     l1248:
   772                           
   773                           ;main.c: 175:     write_register(0x00, 0x0B);
   774     06E5  300B               	movlw	11
   775     06E6  00F5               	movwf	write_register@val
   776     06E7  3000               	movlw	0
   777     06E8  120A  118A  24FD  120A  118A  	fcall	_write_register
   778     06ED                     l1250:
   779                           
   780                           ;main.c: 176:     write_register(0x01, 0x00);
   781     06ED  01F5               	clrf	write_register@val
   782     06EE  3001               	movlw	1
   783     06EF  120A  118A  24FD  120A  118A  	fcall	_write_register
   784     06F4                     l1252:
   785                           
   786                           ;main.c: 177:     write_register(0x02, 0x01);
   787     06F4  01F5               	clrf	write_register@val
   788     06F5  0AF5               	incf	write_register@val,f
   789     06F6  3002               	movlw	2
   790     06F7  120A  118A  24FD  120A  118A  	fcall	_write_register
   791     06FC                     l1254:
   792                           
   793                           ;main.c: 178:     write_register(0x03, 0x01);
   794     06FC  01F5               	clrf	write_register@val
   795     06FD  0AF5               	incf	write_register@val,f
   796     06FE  3003               	movlw	3
   797     06FF  120A  118A  24FD  120A  118A  	fcall	_write_register
   798     0704                     l1256:
   799                           
   800                           ;main.c: 179:     write_register(0x04, 0x00);
   801     0704  01F5               	clrf	write_register@val
   802     0705  3004               	movlw	4
   803     0706  120A  118A  24FD  120A  118A  	fcall	_write_register
   804     070B                     l1258:
   805                           
   806                           ;main.c: 180:     write_register(0x05, 0x01);
   807     070B  01F5               	clrf	write_register@val
   808     070C  0AF5               	incf	write_register@val,f
   809     070D  3005               	movlw	5
   810     070E  120A  118A  24FD  120A  118A  	fcall	_write_register
   811     0713                     l1260:
   812                           
   813                           ;main.c: 181:     write_register(0x06, 0x26);
   814     0713  3026               	movlw	38
   815     0714  00F5               	movwf	write_register@val
   816     0715  3006               	movlw	6
   817     0716  120A  118A  24FD  120A  118A  	fcall	_write_register
   818     071B                     l1262:
   819                           
   820                           ;main.c: 182:     write_register(0x11, 0x01);
   821     071B  01F5               	clrf	write_register@val
   822     071C  0AF5               	incf	write_register@val,f
   823     071D  3011               	movlw	17
   824     071E  120A  118A  24FD  120A  118A  	fcall	_write_register
   825     0723                     l1264:
   826                           
   827                           ;main.c: 184:     write_address(0x0A, RXTX_ADDR, 3);
   828     0723  3047               	movlw	(low (_RXTX_ADDR| 0))& (0+255)
   829     0724  00F1               	movwf	write_address@addr
   830     0725  3003               	movlw	3
   831     0726  00F2               	movwf	write_address@num
   832     0727  300A               	movlw	10
   833     0728  120A  118A  25F0  120A  118A  	fcall	_write_address
   834     072D                     l1266:
   835                           
   836                           ;main.c: 185:     write_address(0x10, RXTX_ADDR, 3);
   837     072D  3047               	movlw	(low (_RXTX_ADDR| 0))& (0+255)
   838     072E  00F1               	movwf	write_address@addr
   839     072F  3003               	movlw	3
   840     0730  00F2               	movwf	write_address@num
   841     0731  3010               	movlw	16
   842     0732  120A  118A  25F0  120A  118A  	fcall	_write_address
   843     0737                     l1268:
   844                           
   845                           ;main.c: 187:     flush_TXRX();
   846     0737  120A  118A  2562  120A  118A  	fcall	_flush_TXRX
   847     073C                     l1270:
   848                           
   849                           ;main.c: 188:     UART_Write_Text("Init\n");
   850     073C  3021               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   851     073D  120A  118A  25CB  120A  118A  	fcall	_UART_Write_Text
   852     0742                     l154:
   853     0742  0008               	return
   854     0743                     __end_of_rf_setup:
   855                           
   856                           	psect	text2
   857     0562                     __ptext2:	
   858 ;; *************** function _flush_TXRX *****************
   859 ;; Defined at:
   860 ;;		line 158 in file "main.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, status,2, status,0, pclath, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   874 ;;      Params:         0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0
   876 ;;      Temps:          0       0       0       0       0
   877 ;;      Totals:         0       0       0       0       0
   878 ;;Total ram usage:        0 bytes
   879 ;; Hardware stack levels used: 1
   880 ;; Hardware stack levels required when called: 3
   881 ;; This function calls:
   882 ;;		_write_command
   883 ;;		_write_register
   884 ;; This function is called by:
   885 ;;		_rf_setup
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889     0562                     _flush_TXRX:	
   890                           ;psect for function _flush_TXRX
   891                           
   892     0562                     l1174:	
   893                           ;incstack = 0
   894                           ; Regs used in _flush_TXRX: [wreg+status,2+status,0+pclath+cstack]
   895                           
   896                           
   897                           ;main.c: 161:   write_register(STATUS, 0x70);
   898     0562  3070               	movlw	112
   899     0563  00F5               	movwf	write_register@val
   900     0564  1283               	bcf	3,5	;RP0=0, select bank0
   901     0565  1303               	bcf	3,6	;RP1=0, select bank0
   902     0566  0803               	movf	3,w	;volatile
   903     0567  120A  118A  24FD  120A  118A  	fcall	_write_register
   904                           
   905                           ;main.c: 162:   write_command(0b11100010);
   906     056C  30E2               	movlw	226
   907     056D  120A  118A  253C  120A  118A  	fcall	_write_command
   908                           
   909                           ;main.c: 163:   write_command(0b11100001);
   910     0572  30E1               	movlw	225
   911     0573  120A  118A  253C  120A  118A  	fcall	_write_command
   912     0578                     l149:
   913     0578  0008               	return
   914     0579                     __end_of_flush_TXRX:
   915                           
   916                           	psect	text3
   917     066D                     __ptext3:	
   918 ;; *************** function _UART_Init *****************
   919 ;; Defined at:
   920 ;;		line 15 in file "./uart.h"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  baudrate        4    6[BANK0 ] const long 
   923 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0, pclath, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   935 ;;      Params:         0       8       0       0       0
   936 ;;      Locals:         0       0       0       0       0
   937 ;;      Temps:          0      12       0       0       0
   938 ;;      Totals:         0      20       0       0       0
   939 ;;Total ram usage:       20 bytes
   940 ;; Hardware stack levels used: 1
   941 ;; Hardware stack levels required when called: 1
   942 ;; This function calls:
   943 ;;		___aldiv
   944 ;; This function is called by:
   945 ;;		_main
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949     066D                     _UART_Init:	
   950                           ;psect for function _UART_Init
   951                           
   952     066D                     l1228:	
   953                           ;incstack = 0
   954                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   955                           
   956                           
   957                           ;./uart.h: 15: void UART_Init(const long int baudrate, long _XTAL_FREQ);./uart.h: 16: {;
      +                          ./uart.h: 17:     BRGH = 1;
   958     066D  1683               	bsf	3,5	;RP0=1, select bank1
   959     066E  1303               	bcf	3,6	;RP1=0, select bank1
   960     066F  1518               	bsf	24,2	;volatile
   961     0670                     l1230:
   962                           
   963                           ;./uart.h: 18:     SPBRG = (_XTAL_FREQ - baudrate*16)/(baudrate*16);
   964     0670  1283               	bcf	3,5	;RP0=0, select bank0
   965     0671  1303               	bcf	3,6	;RP1=0, select bank0
   966     0672  0826               	movf	UART_Init@baudrate,w
   967     0673  00AE               	movwf	??_UART_Init
   968     0674  0827               	movf	UART_Init@baudrate+1,w
   969     0675  00AF               	movwf	??_UART_Init+1
   970     0676  0828               	movf	UART_Init@baudrate+2,w
   971     0677  00B0               	movwf	??_UART_Init+2
   972     0678  0829               	movf	UART_Init@baudrate+3,w
   973     0679  00B1               	movwf	??_UART_Init+3
   974     067A  3004               	movlw	4
   975     067B                     u465:
   976     067B  1003               	clrc
   977     067C  0DAE               	rlf	??_UART_Init,f
   978     067D  0DAF               	rlf	??_UART_Init+1,f
   979     067E  0DB0               	rlf	??_UART_Init+2,f
   980     067F  0DB1               	rlf	??_UART_Init+3,f
   981     0680                     u460:
   982     0680  3EFF               	addlw	-1
   983     0681  1D03               	skipz
   984     0682  2E7B               	goto	u465
   985     0683  0831               	movf	??_UART_Init+3,w
   986     0684  00F3               	movwf	___aldiv@divisor+3
   987     0685  0830               	movf	??_UART_Init+2,w
   988     0686  00F2               	movwf	___aldiv@divisor+2
   989     0687  082F               	movf	??_UART_Init+1,w
   990     0688  00F1               	movwf	___aldiv@divisor+1
   991     0689  082E               	movf	??_UART_Init,w
   992     068A  00F0               	movwf	___aldiv@divisor
   993     068B  0826               	movf	UART_Init@baudrate,w
   994     068C  00B2               	movwf	??_UART_Init+4
   995     068D  0827               	movf	UART_Init@baudrate+1,w
   996     068E  00B3               	movwf	??_UART_Init+5
   997     068F  0828               	movf	UART_Init@baudrate+2,w
   998     0690  00B4               	movwf	??_UART_Init+6
   999     0691  0829               	movf	UART_Init@baudrate+3,w
  1000     0692  00B5               	movwf	??_UART_Init+7
  1001     0693  3004               	movlw	4
  1002     0694                     u475:
  1003     0694  1003               	clrc
  1004     0695  0DB2               	rlf	??_UART_Init+4,f
  1005     0696  0DB3               	rlf	??_UART_Init+5,f
  1006     0697  0DB4               	rlf	??_UART_Init+6,f
  1007     0698  0DB5               	rlf	??_UART_Init+7,f
  1008     0699                     u470:
  1009     0699  3EFF               	addlw	-1
  1010     069A  1D03               	skipz
  1011     069B  2E94               	goto	u475
  1012     069C  082A               	movf	UART_Init@_XTAL_FREQ,w
  1013     069D  00B6               	movwf	??_UART_Init+8
  1014     069E  082B               	movf	UART_Init@_XTAL_FREQ+1,w
  1015     069F  00B7               	movwf	??_UART_Init+9
  1016     06A0  082C               	movf	UART_Init@_XTAL_FREQ+2,w
  1017     06A1  00B8               	movwf	??_UART_Init+10
  1018     06A2  082D               	movf	UART_Init@_XTAL_FREQ+3,w
  1019     06A3  00B9               	movwf	??_UART_Init+11
  1020     06A4  0832               	movf	??_UART_Init+4,w
  1021     06A5  02B6               	subwf	??_UART_Init+8,f
  1022     06A6  0833               	movf	??_UART_Init+5,w
  1023     06A7  1C03               	skipc
  1024     06A8  0F33               	incfsz	??_UART_Init+5,w
  1025     06A9  2EAB               	goto	u481
  1026     06AA  2EAC               	goto	u482
  1027     06AB                     u481:
  1028     06AB  02B7               	subwf	??_UART_Init+9,f
  1029     06AC                     u482:
  1030     06AC  0834               	movf	??_UART_Init+6,w
  1031     06AD  1C03               	skipc
  1032     06AE  0F34               	incfsz	??_UART_Init+6,w
  1033     06AF  2EB1               	goto	u483
  1034     06B0  2EB2               	goto	u484
  1035     06B1                     u483:
  1036     06B1  02B8               	subwf	??_UART_Init+10,f
  1037     06B2                     u484:
  1038     06B2  0835               	movf	??_UART_Init+7,w
  1039     06B3  1C03               	skipc
  1040     06B4  0F35               	incfsz	??_UART_Init+7,w
  1041     06B5  2EB7               	goto	u485
  1042     06B6  2EB8               	goto	u486
  1043     06B7                     u485:
  1044     06B7  02B9               	subwf	??_UART_Init+11,f
  1045     06B8                     u486:
  1046     06B8  0839               	movf	??_UART_Init+11,w
  1047     06B9  00F7               	movwf	___aldiv@dividend+3
  1048     06BA  0838               	movf	??_UART_Init+10,w
  1049     06BB  00F6               	movwf	___aldiv@dividend+2
  1050     06BC  0837               	movf	??_UART_Init+9,w
  1051     06BD  00F5               	movwf	___aldiv@dividend+1
  1052     06BE  0836               	movf	??_UART_Init+8,w
  1053     06BF  00F4               	movwf	___aldiv@dividend
  1054     06C0  120A  118A  2743  120A  118A  	fcall	___aldiv
  1055     06C5  0870               	movf	?___aldiv,w
  1056     06C6  1683               	bsf	3,5	;RP0=1, select bank1
  1057     06C7  1303               	bcf	3,6	;RP1=0, select bank1
  1058     06C8  0099               	movwf	25	;volatile
  1059     06C9                     l1232:
  1060                           
  1061                           ;./uart.h: 19:     SYNC = 0;
  1062     06C9  1218               	bcf	24,4	;volatile
  1063     06CA                     l1234:
  1064                           
  1065                           ;./uart.h: 20:     SPEN = 1;
  1066     06CA  1283               	bcf	3,5	;RP0=0, select bank0
  1067     06CB  1303               	bcf	3,6	;RP1=0, select bank0
  1068     06CC  1798               	bsf	24,7	;volatile
  1069     06CD                     l1236:
  1070                           
  1071                           ;./uart.h: 21:     TRISC7 = 1;
  1072     06CD  1683               	bsf	3,5	;RP0=1, select bank1
  1073     06CE  1303               	bcf	3,6	;RP1=0, select bank1
  1074     06CF  1787               	bsf	7,7	;volatile
  1075     06D0                     l1238:
  1076                           
  1077                           ;./uart.h: 22:     TRISC6 = 1;
  1078     06D0  1707               	bsf	7,6	;volatile
  1079     06D1                     l1240:
  1080                           
  1081                           ;./uart.h: 23:     CREN = 1;
  1082     06D1  1283               	bcf	3,5	;RP0=0, select bank0
  1083     06D2  1303               	bcf	3,6	;RP1=0, select bank0
  1084     06D3  1618               	bsf	24,4	;volatile
  1085     06D4                     l1242:
  1086                           
  1087                           ;./uart.h: 24:     TXEN = 1;
  1088     06D4  1683               	bsf	3,5	;RP0=1, select bank1
  1089     06D5  1303               	bcf	3,6	;RP1=0, select bank1
  1090     06D6  1698               	bsf	24,5	;volatile
  1091     06D7                     l55:
  1092     06D7  0008               	return
  1093     06D8                     __end_of_UART_Init:
  1094                           
  1095                           	psect	text4
  1096     0743                     __ptext4:	
  1097 ;; *************** function ___aldiv *****************
  1098 ;; Defined at:
  1099 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  divisor         4    0[COMMON] long 
  1102 ;;  dividend        4    4[COMMON] long 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  quotient        4    2[BANK0 ] long 
  1105 ;;  sign            1    1[BANK0 ] unsigned char 
  1106 ;;  counter         1    0[BANK0 ] unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  4    0[COMMON] long 
  1109 ;; Registers used:
  1110 ;;		wreg, status,2, status,0
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1116 ;;      Params:         8       0       0       0       0
  1117 ;;      Locals:         0       6       0       0       0
  1118 ;;      Temps:          1       0       0       0       0
  1119 ;;      Totals:         9       6       0       0       0
  1120 ;;Total ram usage:       15 bytes
  1121 ;; Hardware stack levels used: 1
  1122 ;; This function calls:
  1123 ;;		Nothing
  1124 ;; This function is called by:
  1125 ;;		_UART_Init
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129     0743                     ___aldiv:	
  1130                           ;psect for function ___aldiv
  1131                           
  1132     0743                     l1188:	
  1133                           ;incstack = 0
  1134                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1135                           
  1136     0743  1283               	bcf	3,5	;RP0=0, select bank0
  1137     0744  1303               	bcf	3,6	;RP1=0, select bank0
  1138     0745  01A1               	clrf	___aldiv@sign
  1139     0746                     l1190:
  1140     0746  1FF3               	btfss	___aldiv@divisor+3,7
  1141     0747  2F49               	goto	u361
  1142     0748  2F4A               	goto	u360
  1143     0749                     u361:
  1144     0749  2F57               	goto	l340
  1145     074A                     u360:
  1146     074A                     l1192:
  1147     074A  09F0               	comf	___aldiv@divisor,f
  1148     074B  09F1               	comf	___aldiv@divisor+1,f
  1149     074C  09F2               	comf	___aldiv@divisor+2,f
  1150     074D  09F3               	comf	___aldiv@divisor+3,f
  1151     074E  0AF0               	incf	___aldiv@divisor,f
  1152     074F  1903               	skipnz
  1153     0750  0AF1               	incf	___aldiv@divisor+1,f
  1154     0751  1903               	skipnz
  1155     0752  0AF2               	incf	___aldiv@divisor+2,f
  1156     0753  1903               	skipnz
  1157     0754  0AF3               	incf	___aldiv@divisor+3,f
  1158     0755  01A1               	clrf	___aldiv@sign
  1159     0756  0AA1               	incf	___aldiv@sign,f
  1160     0757                     l340:
  1161     0757  1FF7               	btfss	___aldiv@dividend+3,7
  1162     0758  2F5A               	goto	u371
  1163     0759  2F5B               	goto	u370
  1164     075A                     u371:
  1165     075A  2F6A               	goto	l1198
  1166     075B                     u370:
  1167     075B                     l1194:
  1168     075B  09F4               	comf	___aldiv@dividend,f
  1169     075C  09F5               	comf	___aldiv@dividend+1,f
  1170     075D  09F6               	comf	___aldiv@dividend+2,f
  1171     075E  09F7               	comf	___aldiv@dividend+3,f
  1172     075F  0AF4               	incf	___aldiv@dividend,f
  1173     0760  1903               	skipnz
  1174     0761  0AF5               	incf	___aldiv@dividend+1,f
  1175     0762  1903               	skipnz
  1176     0763  0AF6               	incf	___aldiv@dividend+2,f
  1177     0764  1903               	skipnz
  1178     0765  0AF7               	incf	___aldiv@dividend+3,f
  1179     0766                     l1196:
  1180     0766  3001               	movlw	1
  1181     0767  00F8               	movwf	??___aldiv
  1182     0768  0878               	movf	??___aldiv,w
  1183     0769  06A1               	xorwf	___aldiv@sign,f
  1184     076A                     l1198:
  1185     076A  3000               	movlw	0
  1186     076B  00A5               	movwf	___aldiv@quotient+3
  1187     076C  3000               	movlw	0
  1188     076D  00A4               	movwf	___aldiv@quotient+2
  1189     076E  3000               	movlw	0
  1190     076F  00A3               	movwf	___aldiv@quotient+1
  1191     0770  3000               	movlw	0
  1192     0771  00A2               	movwf	___aldiv@quotient
  1193     0772                     l1200:
  1194     0772  0873               	movf	___aldiv@divisor+3,w
  1195     0773  0472               	iorwf	___aldiv@divisor+2,w
  1196     0774  0471               	iorwf	___aldiv@divisor+1,w
  1197     0775  0470               	iorwf	___aldiv@divisor,w
  1198     0776  1903               	skipnz
  1199     0777  2F79               	goto	u381
  1200     0778  2F7A               	goto	u380
  1201     0779                     u381:
  1202     0779  2FC7               	goto	l1220
  1203     077A                     u380:
  1204     077A                     l1202:
  1205     077A  01A0               	clrf	___aldiv@counter
  1206     077B  0AA0               	incf	___aldiv@counter,f
  1207     077C  2F8A               	goto	l1206
  1208     077D                     l1204:
  1209     077D  3001               	movlw	1
  1210     077E  00F8               	movwf	??___aldiv
  1211     077F                     u395:
  1212     077F  1003               	clrc
  1213     0780  0DF0               	rlf	___aldiv@divisor,f
  1214     0781  0DF1               	rlf	___aldiv@divisor+1,f
  1215     0782  0DF2               	rlf	___aldiv@divisor+2,f
  1216     0783  0DF3               	rlf	___aldiv@divisor+3,f
  1217     0784  0BF8               	decfsz	??___aldiv,f
  1218     0785  2F7F               	goto	u395
  1219     0786  3001               	movlw	1
  1220     0787  00F8               	movwf	??___aldiv
  1221     0788  0878               	movf	??___aldiv,w
  1222     0789  07A0               	addwf	___aldiv@counter,f
  1223     078A                     l1206:
  1224     078A  1FF3               	btfss	___aldiv@divisor+3,7
  1225     078B  2F8D               	goto	u401
  1226     078C  2F8E               	goto	u400
  1227     078D                     u401:
  1228     078D  2F7D               	goto	l1204
  1229     078E                     u400:
  1230     078E                     l1208:
  1231     078E  3001               	movlw	1
  1232     078F  00F8               	movwf	??___aldiv
  1233     0790                     u415:
  1234     0790  1003               	clrc
  1235     0791  0DA2               	rlf	___aldiv@quotient,f
  1236     0792  0DA3               	rlf	___aldiv@quotient+1,f
  1237     0793  0DA4               	rlf	___aldiv@quotient+2,f
  1238     0794  0DA5               	rlf	___aldiv@quotient+3,f
  1239     0795  0BF8               	decfsz	??___aldiv,f
  1240     0796  2F90               	goto	u415
  1241     0797                     l1210:
  1242     0797  0873               	movf	___aldiv@divisor+3,w
  1243     0798  0277               	subwf	___aldiv@dividend+3,w
  1244     0799  1D03               	skipz
  1245     079A  2FA5               	goto	u425
  1246     079B  0872               	movf	___aldiv@divisor+2,w
  1247     079C  0276               	subwf	___aldiv@dividend+2,w
  1248     079D  1D03               	skipz
  1249     079E  2FA5               	goto	u425
  1250     079F  0871               	movf	___aldiv@divisor+1,w
  1251     07A0  0275               	subwf	___aldiv@dividend+1,w
  1252     07A1  1D03               	skipz
  1253     07A2  2FA5               	goto	u425
  1254     07A3  0870               	movf	___aldiv@divisor,w
  1255     07A4  0274               	subwf	___aldiv@dividend,w
  1256     07A5                     u425:
  1257     07A5  1C03               	skipc
  1258     07A6  2FA8               	goto	u421
  1259     07A7  2FA9               	goto	u420
  1260     07A8                     u421:
  1261     07A8  2FB8               	goto	l1216
  1262     07A9                     u420:
  1263     07A9                     l1212:
  1264     07A9  0870               	movf	___aldiv@divisor,w
  1265     07AA  02F4               	subwf	___aldiv@dividend,f
  1266     07AB  0871               	movf	___aldiv@divisor+1,w
  1267     07AC  1C03               	skipc
  1268     07AD  0F71               	incfsz	___aldiv@divisor+1,w
  1269     07AE  02F5               	subwf	___aldiv@dividend+1,f
  1270     07AF  0872               	movf	___aldiv@divisor+2,w
  1271     07B0  1C03               	skipc
  1272     07B1  0F72               	incfsz	___aldiv@divisor+2,w
  1273     07B2  02F6               	subwf	___aldiv@dividend+2,f
  1274     07B3  0873               	movf	___aldiv@divisor+3,w
  1275     07B4  1C03               	skipc
  1276     07B5  0F73               	incfsz	___aldiv@divisor+3,w
  1277     07B6  02F7               	subwf	___aldiv@dividend+3,f
  1278     07B7                     l1214:
  1279     07B7  1422               	bsf	___aldiv@quotient,0
  1280     07B8                     l1216:
  1281     07B8  3001               	movlw	1
  1282     07B9                     u435:
  1283     07B9  1003               	clrc
  1284     07BA  0CF3               	rrf	___aldiv@divisor+3,f
  1285     07BB  0CF2               	rrf	___aldiv@divisor+2,f
  1286     07BC  0CF1               	rrf	___aldiv@divisor+1,f
  1287     07BD  0CF0               	rrf	___aldiv@divisor,f
  1288     07BE  3EFF               	addlw	-1
  1289     07BF  1D03               	skipz
  1290     07C0  2FB9               	goto	u435
  1291     07C1                     l1218:
  1292     07C1  3001               	movlw	1
  1293     07C2  02A0               	subwf	___aldiv@counter,f
  1294     07C3  1D03               	btfss	3,2
  1295     07C4  2FC6               	goto	u441
  1296     07C5  2FC7               	goto	u440
  1297     07C6                     u441:
  1298     07C6  2F8E               	goto	l1208
  1299     07C7                     u440:
  1300     07C7                     l1220:
  1301     07C7  0821               	movf	___aldiv@sign,w
  1302     07C8  1903               	btfsc	3,2
  1303     07C9  2FCB               	goto	u451
  1304     07CA  2FCC               	goto	u450
  1305     07CB                     u451:
  1306     07CB  2FD7               	goto	l1224
  1307     07CC                     u450:
  1308     07CC                     l1222:
  1309     07CC  09A2               	comf	___aldiv@quotient,f
  1310     07CD  09A3               	comf	___aldiv@quotient+1,f
  1311     07CE  09A4               	comf	___aldiv@quotient+2,f
  1312     07CF  09A5               	comf	___aldiv@quotient+3,f
  1313     07D0  0AA2               	incf	___aldiv@quotient,f
  1314     07D1  1903               	skipnz
  1315     07D2  0AA3               	incf	___aldiv@quotient+1,f
  1316     07D3  1903               	skipnz
  1317     07D4  0AA4               	incf	___aldiv@quotient+2,f
  1318     07D5  1903               	skipnz
  1319     07D6  0AA5               	incf	___aldiv@quotient+3,f
  1320     07D7                     l1224:
  1321     07D7  0825               	movf	___aldiv@quotient+3,w
  1322     07D8  00F3               	movwf	?___aldiv+3
  1323     07D9  0824               	movf	___aldiv@quotient+2,w
  1324     07DA  00F2               	movwf	?___aldiv+2
  1325     07DB  0823               	movf	___aldiv@quotient+1,w
  1326     07DC  00F1               	movwf	?___aldiv+1
  1327     07DD  0822               	movf	___aldiv@quotient,w
  1328     07DE  00F0               	movwf	?___aldiv
  1329     07DF                     l350:
  1330     07DF  0008               	return
  1331     07E0                     __end_of___aldiv:
  1332                           
  1333                           	psect	text5
  1334     0579                     __ptext5:	
  1335 ;; *************** function _SendChar *****************
  1336 ;; Defined at:
  1337 ;;		line 245 in file "main.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  args            1    wreg     PTR unsigned char 
  1340 ;;		 -> STR_6(2), 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  args            1   11[COMMON] PTR unsigned char 
  1343 ;;		 -> STR_6(2), 
  1344 ;;  charReceived    1    0        unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      unsigned char 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1354 ;;      Params:         0       0       0       0       0
  1355 ;;      Locals:         1       0       0       0       0
  1356 ;;      Temps:          0       0       0       0       0
  1357 ;;      Totals:         1       0       0       0       0
  1358 ;;Total ram usage:        1 bytes
  1359 ;; Hardware stack levels used: 1
  1360 ;; Hardware stack levels required when called: 4
  1361 ;; This function calls:
  1362 ;;		_TXChar
  1363 ;;		_TX_mode
  1364 ;;		_UART_Write_Text
  1365 ;; This function is called by:
  1366 ;;		_main
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370     0579                     _SendChar:	
  1371                           ;psect for function _SendChar
  1372                           
  1373                           
  1374                           ;incstack = 0
  1375                           ; Regs used in _SendChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1376                           ;SendChar@args stored from wreg
  1377     0579  00FB               	movwf	SendChar@args
  1378     057A                     l1284:
  1379     057A                     l1286:
  1380                           
  1381                           ;main.c: 248:     TXChar(args[0]);
  1382     057A  087B               	movf	SendChar@args,w
  1383     057B  0084               	movwf	4
  1384     057C  120A  118A  2003  120A  118A  	fcall	stringdir
  1385     0581  120A  118A  25AC  120A  118A  	fcall	_TXChar
  1386     0586                     l1288:
  1387                           
  1388                           ;main.c: 249:     TX_mode();
  1389     0586  120A  118A  2508  120A  118A  	fcall	_TX_mode
  1390     058B                     l1290:
  1391                           
  1392                           ;main.c: 250:     UART_Write_Text("SENT\n");
  1393     058B  301B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1394     058C  120A  118A  25CB  120A  118A  	fcall	_UART_Write_Text
  1395     0591                     l178:
  1396     0591  0008               	return
  1397     0592                     __end_of_SendChar:
  1398                           
  1399                           	psect	text6
  1400     05CB                     __ptext6:	
  1401 ;; *************** function _UART_Write_Text *****************
  1402 ;; Defined at:
  1403 ;;		line 33 in file "./uart.h"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;  text            1    wreg     PTR unsigned char 
  1406 ;;		 -> STR_5(8), STR_4(3), STR_3(6), STR_2(6), 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  text            1    3[COMMON] PTR unsigned char 
  1409 ;;		 -> STR_5(8), STR_4(3), STR_3(6), STR_2(6), 
  1410 ;;  i               2    1[COMMON] int 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1420 ;;      Params:         0       0       0       0       0
  1421 ;;      Locals:         3       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0
  1423 ;;      Totals:         3       0       0       0       0
  1424 ;;Total ram usage:        3 bytes
  1425 ;; Hardware stack levels used: 1
  1426 ;; Hardware stack levels required when called: 1
  1427 ;; This function calls:
  1428 ;;		_UART_Write
  1429 ;; This function is called by:
  1430 ;;		_rf_setup
  1431 ;;		_SendChar
  1432 ;;		_main
  1433 ;;		_ReceiveChar
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437     05CB                     _UART_Write_Text:	
  1438                           ;psect for function _UART_Write_Text
  1439                           
  1440                           
  1441                           ;incstack = 0
  1442                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1443                           ;UART_Write_Text@text stored from wreg
  1444     05CB  00F3               	movwf	UART_Write_Text@text
  1445     05CC                     l1154:
  1446                           
  1447                           ;./uart.h: 33: void UART_Write_Text(char *text);./uart.h: 34: {;./uart.h: 35:   for(int 
      +                          i=0;text[i]!='\0';i++)
  1448     05CC  01F1               	clrf	UART_Write_Text@i
  1449     05CD  01F2               	clrf	UART_Write_Text@i+1
  1450     05CE  2DE2               	goto	l1160
  1451     05CF                     l1156:
  1452                           
  1453                           ;./uart.h: 36:     UART_Write(text[i]);
  1454     05CF  0871               	movf	UART_Write_Text@i,w
  1455     05D0  0773               	addwf	UART_Write_Text@text,w
  1456     05D1  0084               	movwf	4
  1457     05D2  120A  118A  2003  120A  118A  	fcall	stringdir
  1458     05D7  120A  118A  2514  120A  118A  	fcall	_UART_Write
  1459     05DC                     l1158:
  1460     05DC  3001               	movlw	1
  1461     05DD  07F1               	addwf	UART_Write_Text@i,f
  1462     05DE  1803               	skipnc
  1463     05DF  0AF2               	incf	UART_Write_Text@i+1,f
  1464     05E0  3000               	movlw	0
  1465     05E1  07F2               	addwf	UART_Write_Text@i+1,f
  1466     05E2                     l1160:
  1467     05E2  0871               	movf	UART_Write_Text@i,w
  1468     05E3  0773               	addwf	UART_Write_Text@text,w
  1469     05E4  0084               	movwf	4
  1470     05E5  120A  118A  2003  120A  118A  	fcall	stringdir
  1471     05EA  3A00               	xorlw	0
  1472     05EB  1D03               	skipz
  1473     05EC  2DEE               	goto	u331
  1474     05ED  2DEF               	goto	u330
  1475     05EE                     u331:
  1476     05EE  2DCF               	goto	l1156
  1477     05EF                     u330:
  1478     05EF                     l67:
  1479     05EF  0008               	return
  1480     05F0                     __end_of_UART_Write_Text:
  1481                           
  1482                           	psect	text7
  1483     0514                     __ptext7:	
  1484 ;; *************** function _UART_Write *****************
  1485 ;; Defined at:
  1486 ;;		line 27 in file "./uart.h"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  data            1    wreg     unsigned char 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  data            1    0[COMMON] unsigned char 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1500 ;;      Params:         0       0       0       0       0
  1501 ;;      Locals:         1       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0
  1503 ;;      Totals:         1       0       0       0       0
  1504 ;;Total ram usage:        1 bytes
  1505 ;; Hardware stack levels used: 1
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_UART_Write_Text
  1510 ;;		_ReceiveChar
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514     0514                     _UART_Write:	
  1515                           ;psect for function _UART_Write
  1516                           
  1517                           
  1518                           ;incstack = 0
  1519                           ; Regs used in _UART_Write: [wreg]
  1520                           ;UART_Write@data stored from wreg
  1521     0514  00F0               	movwf	UART_Write@data
  1522     0515                     l1130:
  1523     0515                     l58:	
  1524                           ;./uart.h: 27: void UART_Write(char data);./uart.h: 28: {;./uart.h: 29:   while(!TRMT);
  1525                           
  1526     0515  1683               	bsf	3,5	;RP0=1, select bank1
  1527     0516  1303               	bcf	3,6	;RP1=0, select bank1
  1528     0517  1C98               	btfss	24,1	;volatile
  1529     0518  2D1A               	goto	u321
  1530     0519  2D1B               	goto	u320
  1531     051A                     u321:
  1532     051A  2D15               	goto	l58
  1533     051B                     u320:
  1534     051B                     l1132:
  1535                           
  1536                           ;./uart.h: 30:   TXREG = data;
  1537     051B  0870               	movf	UART_Write@data,w
  1538     051C  1283               	bcf	3,5	;RP0=0, select bank0
  1539     051D  1303               	bcf	3,6	;RP1=0, select bank0
  1540     051E  0099               	movwf	25	;volatile
  1541     051F                     l61:
  1542     051F  0008               	return
  1543     0520                     __end_of_UART_Write:
  1544                           
  1545                           	psect	text8
  1546     0508                     __ptext8:	
  1547 ;; *************** function _TX_mode *****************
  1548 ;; Defined at:
  1549 ;;		line 197 in file "main.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;		None
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;		None
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  1    wreg      void 
  1556 ;; Registers used:
  1557 ;;		wreg, status,2, status,0, pclath, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1563 ;;      Params:         0       0       0       0       0
  1564 ;;      Locals:         0       0       0       0       0
  1565 ;;      Temps:          0       0       0       0       0
  1566 ;;      Totals:         0       0       0       0       0
  1567 ;;Total ram usage:        0 bytes
  1568 ;; Hardware stack levels used: 1
  1569 ;; Hardware stack levels required when called: 3
  1570 ;; This function calls:
  1571 ;;		_write_register
  1572 ;; This function is called by:
  1573 ;;		_SendChar
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577     0508                     _TX_mode:	
  1578                           ;psect for function _TX_mode
  1579                           
  1580     0508                     l1176:	
  1581                           ;incstack = 0
  1582                           ; Regs used in _TX_mode: [wreg+status,2+status,0+pclath+cstack]
  1583                           
  1584                           
  1585                           ;main.c: 199:     RD2 = 0;
  1586     0508  1283               	bcf	3,5	;RP0=0, select bank0
  1587     0509  1303               	bcf	3,6	;RP1=0, select bank0
  1588     050A  1108               	bcf	8,2	;volatile
  1589     050B                     l1178:
  1590                           
  1591                           ;main.c: 200:     write_register(0x00, 0x0A);
  1592     050B  300A               	movlw	10
  1593     050C  00F5               	movwf	write_register@val
  1594     050D  3000               	movlw	0
  1595     050E  120A  118A  24FD  120A  118A  	fcall	_write_register
  1596     0513                     l160:
  1597     0513  0008               	return
  1598     0514                     __end_of_TX_mode:
  1599                           
  1600                           	psect	text9
  1601     05AC                     __ptext9:	
  1602 ;; *************** function _TXChar *****************
  1603 ;; Defined at:
  1604 ;;		line 221 in file "main.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  ch              1    wreg     unsigned char 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  ch              1    9[COMMON] unsigned char 
  1609 ;;  stat            1   10[COMMON] unsigned char 
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      void 
  1612 ;; Registers used:
  1613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1619 ;;      Params:         0       0       0       0       0
  1620 ;;      Locals:         2       0       0       0       0
  1621 ;;      Temps:          0       0       0       0       0
  1622 ;;      Totals:         2       0       0       0       0
  1623 ;;Total ram usage:        2 bytes
  1624 ;; Hardware stack levels used: 1
  1625 ;; Hardware stack levels required when called: 3
  1626 ;; This function calls:
  1627 ;;		_write_command
  1628 ;;		_write_register
  1629 ;;		_write_tx_payload
  1630 ;; This function is called by:
  1631 ;;		_SendChar
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635     05AC                     _TXChar:	
  1636                           ;psect for function _TXChar
  1637                           
  1638                           
  1639                           ;incstack = 0
  1640                           ; Regs used in _TXChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1641                           ;TXChar@ch stored from wreg
  1642     05AC  00F9               	movwf	TXChar@ch
  1643     05AD                     l1180:
  1644                           
  1645                           ;main.c: 221: void TXChar(uint8_t ch);main.c: 222: {;main.c: 223:     write_tx_payload(1
      +                          , &ch);
  1646     05AD  3079               	movlw	(low (TXChar@ch| 0))& (0+255)
  1647     05AE  00F6               	movwf	write_tx_payload@data
  1648     05AF  3001               	movlw	1
  1649     05B0  120A  118A  254C  120A  118A  	fcall	_write_tx_payload
  1650     05B5                     l1182:
  1651                           
  1652                           ;main.c: 228:     {;main.c: 229:         stat = write_command(0b11111111);
  1653     05B5  30FF               	movlw	255
  1654     05B6  120A  118A  253C  120A  118A  	fcall	_write_command
  1655     05BB  00FA               	movwf	TXChar@stat
  1656     05BC                     l1184:
  1657                           
  1658                           ;main.c: 230:     } while ((stat & 0x20) == 0);
  1659     05BC  1EFA               	btfss	TXChar@stat,5
  1660     05BD  2DBF               	goto	u351
  1661     05BE  2DC0               	goto	u350
  1662     05BF                     u351:
  1663     05BF  2DB5               	goto	l1182
  1664     05C0                     u350:
  1665     05C0                     l1186:
  1666                           
  1667                           ;main.c: 233:     write_register(STATUS, 0x20);
  1668     05C0  3020               	movlw	32
  1669     05C1  00F5               	movwf	write_register@val
  1670     05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1671     05C3  1303               	bcf	3,6	;RP1=0, select bank0
  1672     05C4  0803               	movf	3,w	;volatile
  1673     05C5  120A  118A  24FD  120A  118A  	fcall	_write_register
  1674     05CA                     l171:
  1675     05CA  0008               	return
  1676     05CB                     __end_of_TXChar:
  1677                           
  1678                           	psect	text10
  1679     054C                     __ptext10:	
  1680 ;; *************** function _write_tx_payload *****************
  1681 ;; Defined at:
  1682 ;;		line 203 in file "main.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  num             1    wreg     unsigned char 
  1685 ;;  data            1    6[COMMON] PTR unsigned char 
  1686 ;;		 -> TXChar@ch(1), 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;  num             1    8[COMMON] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1698 ;;      Params:         1       0       0       0       0
  1699 ;;      Locals:         1       0       0       0       0
  1700 ;;      Temps:          1       0       0       0       0
  1701 ;;      Totals:         3       0       0       0       0
  1702 ;;Total ram usage:        3 bytes
  1703 ;; Hardware stack levels used: 1
  1704 ;; Hardware stack levels required when called: 2
  1705 ;; This function calls:
  1706 ;;		_write_address
  1707 ;; This function is called by:
  1708 ;;		_TXChar
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712     054C                     _write_tx_payload:	
  1713                           ;psect for function _write_tx_payload
  1714                           
  1715                           
  1716                           ;incstack = 0
  1717                           ; Regs used in _write_tx_payload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1718                           ;write_tx_payload@num stored from wreg
  1719     054C  00F8               	movwf	write_tx_payload@num
  1720     054D                     l1146:
  1721                           
  1722                           ;main.c: 203: void write_tx_payload(uint8_t num, uint8_t* data);main.c: 204: {;main.c: 2
      +                          05:     write_address(0b10100000, data, num);
  1723     054D  0876               	movf	write_tx_payload@data,w
  1724     054E  00F1               	movwf	write_address@addr
  1725     054F  0878               	movf	write_tx_payload@num,w
  1726     0550  00F2               	movwf	write_address@num
  1727     0551  30A0               	movlw	160
  1728     0552  120A  118A  25F0  120A  118A  	fcall	_write_address
  1729     0557                     l1148:
  1730                           
  1731                           ;main.c: 207:     RD2 = 1;
  1732     0557  1283               	bcf	3,5	;RP0=0, select bank0
  1733     0558  1303               	bcf	3,6	;RP1=0, select bank0
  1734     0559  1508               	bsf	8,2	;volatile
  1735     055A                     l1150:
  1736                           
  1737                           ;main.c: 208:     _delay((unsigned long)((11)*(8000000UL/4000000.0)));
  1738     055A  3007               	movlw	7
  1739     055B  00F7               	movwf	??_write_tx_payload
  1740     055C                     u617:
  1741     055C  0BF7               	decfsz	??_write_tx_payload,f
  1742     055D  2D5C               	goto	u617
  1743     055E                     l1152:
  1744                           
  1745                           ;main.c: 209:     RD2 = 0;
  1746     055E  1283               	bcf	3,5	;RP0=0, select bank0
  1747     055F  1303               	bcf	3,6	;RP1=0, select bank0
  1748     0560  1108               	bcf	8,2	;volatile
  1749     0561                     l163:
  1750     0561  0008               	return
  1751     0562                     __end_of_write_tx_payload:
  1752                           
  1753                           	psect	text11
  1754     05F0                     __ptext11:	
  1755 ;; *************** function _write_address *****************
  1756 ;; Defined at:
  1757 ;;		line 137 in file "main.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  reg             1    wreg     unsigned char 
  1760 ;;  addr            1    1[COMMON] PTR unsigned char 
  1761 ;;		 -> TXChar@ch(1), RXTX_ADDR(3), 
  1762 ;;  num             1    2[COMMON] unsigned char 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  reg             1    4[COMMON] unsigned char 
  1765 ;;  i               1    5[COMMON] unsigned char 
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      void 
  1768 ;; Registers used:
  1769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1775 ;;      Params:         2       0       0       0       0
  1776 ;;      Locals:         2       0       0       0       0
  1777 ;;      Temps:          1       0       0       0       0
  1778 ;;      Totals:         5       0       0       0       0
  1779 ;;Total ram usage:        5 bytes
  1780 ;; Hardware stack levels used: 1
  1781 ;; Hardware stack levels required when called: 1
  1782 ;; This function calls:
  1783 ;;		_SPI_write
  1784 ;; This function is called by:
  1785 ;;		_rf_setup
  1786 ;;		_write_tx_payload
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790     05F0                     _write_address:	
  1791                           ;psect for function _write_address
  1792                           
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in _write_address: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1796                           ;write_address@reg stored from wreg
  1797     05F0  00F4               	movwf	write_address@reg
  1798     05F1                     l1116:
  1799                           
  1800                           ;main.c: 137: void write_address(uint8_t reg, uint8_t* addr, uint8_t num);main.c: 138: {
      +                          ;main.c: 139:     RD3 = 0;
  1801     05F1  1283               	bcf	3,5	;RP0=0, select bank0
  1802     05F2  1303               	bcf	3,6	;RP1=0, select bank0
  1803     05F3  1188               	bcf	8,3	;volatile
  1804     05F4                     l1118:
  1805                           
  1806                           ;main.c: 140:     SPI_write(reg | 0b00100000);
  1807     05F4  0874               	movf	write_address@reg,w
  1808     05F5  3820               	iorlw	32
  1809     05F6  120A  118A  252D  120A  118A  	fcall	_SPI_write
  1810     05FB                     l1120:
  1811                           
  1812                           ;main.c: 141:     for (uint8_t i=0; i<num; i++)
  1813     05FB  01F5               	clrf	write_address@i
  1814     05FC  2E11               	goto	l1128
  1815     05FD                     l1122:
  1816                           
  1817                           ;main.c: 142:     {;main.c: 143:       _delay((unsigned long)((20)*(8000000UL/4000000.0)
      +                          ));
  1818     05FD  300D               	movlw	13
  1819     05FE  00F3               	movwf	??_write_address
  1820     05FF                     u627:
  1821     05FF  0BF3               	decfsz	??_write_address,f
  1822     0600  2DFF               	goto	u627
  1823     0601                     l1124:
  1824                           
  1825                           ;main.c: 144:       SPI_write(addr[i]);
  1826     0601  0875               	movf	write_address@i,w
  1827     0602  0771               	addwf	write_address@addr,w
  1828     0603  00F3               	movwf	??_write_address
  1829     0604  0873               	movf	??_write_address,w
  1830     0605  0084               	movwf	4
  1831     0606  1383               	bcf	3,7	;select IRP bank0
  1832     0607  0800               	movf	0,w
  1833     0608  120A  118A  252D  120A  118A  	fcall	_SPI_write
  1834     060D                     l1126:
  1835                           
  1836                           ;main.c: 145:     }
  1837     060D  3001               	movlw	1
  1838     060E  00F3               	movwf	??_write_address
  1839     060F  0873               	movf	??_write_address,w
  1840     0610  07F5               	addwf	write_address@i,f
  1841     0611                     l1128:
  1842     0611  0872               	movf	write_address@num,w
  1843     0612  0275               	subwf	write_address@i,w
  1844     0613  1C03               	skipc
  1845     0614  2E16               	goto	u311
  1846     0615  2E17               	goto	u310
  1847     0616                     u311:
  1848     0616  2DFD               	goto	l1122
  1849     0617                     u310:
  1850     0617                     l139:
  1851                           
  1852                           ;main.c: 146:     RD3 = 1;
  1853     0617  1283               	bcf	3,5	;RP0=0, select bank0
  1854     0618  1303               	bcf	3,6	;RP1=0, select bank0
  1855     0619  1588               	bsf	8,3	;volatile
  1856     061A                     l140:
  1857     061A  0008               	return
  1858     061B                     __end_of_write_address:
  1859                           
  1860                           	psect	text12
  1861     04FD                     __ptext12:	
  1862 ;; *************** function _write_register *****************
  1863 ;; Defined at:
  1864 ;;		line 127 in file "main.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  reg             1    wreg     unsigned char 
  1867 ;;  val             1    5[COMMON] unsigned char 
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  reg             1    6[COMMON] unsigned char 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0, pclath, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1879 ;;      Params:         1       0       0       0       0
  1880 ;;      Locals:         1       0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0
  1882 ;;      Totals:         2       0       0       0       0
  1883 ;;Total ram usage:        2 bytes
  1884 ;; Hardware stack levels used: 1
  1885 ;; Hardware stack levels required when called: 2
  1886 ;; This function calls:
  1887 ;;		_execute_command
  1888 ;; This function is called by:
  1889 ;;		_flush_TXRX
  1890 ;;		_rf_setup
  1891 ;;		_TX_mode
  1892 ;;		_TXChar
  1893 ;;		_RX_mode
  1894 ;;		_RXChar
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898     04FD                     _write_register:	
  1899                           ;psect for function _write_register
  1900                           
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _write_register: [wreg+status,2+status,0+pclath+cstack]
  1904                           ;write_register@reg stored from wreg
  1905     04FD  00F6               	movwf	write_register@reg
  1906     04FE                     l1144:
  1907                           
  1908                           ;main.c: 127: void write_register(uint8_t reg, uint8_t val);main.c: 128: {;main.c: 129: 
      +                              execute_command(reg | 0b00100000, val);
  1909     04FE  0875               	movf	write_register@val,w
  1910     04FF  00F1               	movwf	execute_command@val
  1911     0500  0876               	movf	write_register@reg,w
  1912     0501  3820               	iorlw	32
  1913     0502  120A  118A  2592  120A  118A  	fcall	_execute_command
  1914     0507                     l131:
  1915     0507  0008               	return
  1916     0508                     __end_of_write_register:
  1917                           
  1918                           	psect	text13
  1919     0592                     __ptext13:	
  1920 ;; *************** function _execute_command *****************
  1921 ;; Defined at:
  1922 ;;		line 109 in file "main.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  reg             1    wreg     unsigned char 
  1925 ;;  val             1    1[COMMON] unsigned char 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  reg             1    3[COMMON] unsigned char 
  1928 ;;  ret             1    4[COMMON] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      unsigned char 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, pclath, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1938 ;;      Params:         1       0       0       0       0
  1939 ;;      Locals:         2       0       0       0       0
  1940 ;;      Temps:          1       0       0       0       0
  1941 ;;      Totals:         4       0       0       0       0
  1942 ;;Total ram usage:        4 bytes
  1943 ;; Hardware stack levels used: 1
  1944 ;; Hardware stack levels required when called: 1
  1945 ;; This function calls:
  1946 ;;		_SPI_write
  1947 ;; This function is called by:
  1948 ;;		_write_register
  1949 ;;		_read_register
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953     0592                     _execute_command:	
  1954                           ;psect for function _execute_command
  1955                           
  1956                           
  1957                           ;incstack = 0
  1958                           ; Regs used in _execute_command: [wreg+status,2+status,0+pclath+cstack]
  1959                           ;execute_command@reg stored from wreg
  1960     0592  00F3               	movwf	execute_command@reg
  1961     0593                     l1102:
  1962                           
  1963                           ;main.c: 109: uint8_t execute_command(uint8_t reg, uint8_t val);main.c: 110: {;main.c: 1
      +                          11:     RD3 = 0;
  1964     0593  1283               	bcf	3,5	;RP0=0, select bank0
  1965     0594  1303               	bcf	3,6	;RP1=0, select bank0
  1966     0595  1188               	bcf	8,3	;volatile
  1967     0596                     l1104:
  1968                           
  1969                           ;main.c: 112:     SPI_write(reg);
  1970     0596  0873               	movf	execute_command@reg,w
  1971     0597  120A  118A  252D  120A  118A  	fcall	_SPI_write
  1972     059C                     l1106:
  1973                           
  1974                           ;main.c: 113:     _delay((unsigned long)((20)*(8000000UL/4000000.0)));
  1975     059C  300D               	movlw	13
  1976     059D  00F2               	movwf	??_execute_command
  1977     059E                     u637:
  1978     059E  0BF2               	decfsz	??_execute_command,f
  1979     059F  2D9E               	goto	u637
  1980     05A0                     l1108:
  1981                           
  1982                           ;main.c: 114:     char ret = SPI_write(val);
  1983     05A0  0871               	movf	execute_command@val,w
  1984     05A1  120A  118A  252D  120A  118A  	fcall	_SPI_write
  1985     05A6  00F4               	movwf	execute_command@ret
  1986     05A7                     l1110:
  1987                           
  1988                           ;main.c: 115:     RD3 = 1;
  1989     05A7  1283               	bcf	3,5	;RP0=0, select bank0
  1990     05A8  1303               	bcf	3,6	;RP1=0, select bank0
  1991     05A9  1588               	bsf	8,3	;volatile
  1992     05AA                     l1112:
  1993                           
  1994                           ;main.c: 116:     return ret;
  1995     05AA  0874               	movf	execute_command@ret,w
  1996     05AB                     l125:
  1997     05AB  0008               	return
  1998     05AC                     __end_of_execute_command:
  1999                           
  2000                           	psect	text14
  2001     053C                     __ptext14:	
  2002 ;; *************** function _write_command *****************
  2003 ;; Defined at:
  2004 ;;		line 119 in file "main.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  command         1    wreg     unsigned char 
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;  command         1    1[COMMON] unsigned char 
  2009 ;;  ret             1    2[COMMON] unsigned char 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      unsigned char 
  2012 ;; Registers used:
  2013 ;;		wreg, pclath, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2019 ;;      Params:         0       0       0       0       0
  2020 ;;      Locals:         2       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0
  2022 ;;      Totals:         2       0       0       0       0
  2023 ;;Total ram usage:        2 bytes
  2024 ;; Hardware stack levels used: 1
  2025 ;; Hardware stack levels required when called: 1
  2026 ;; This function calls:
  2027 ;;		_SPI_write
  2028 ;; This function is called by:
  2029 ;;		_flush_TXRX
  2030 ;;		_TXChar
  2031 ;;		_ReadDataAvailable
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035     053C                     _write_command:	
  2036                           ;psect for function _write_command
  2037                           
  2038                           
  2039                           ;incstack = 0
  2040                           ; Regs used in _write_command: [wreg+pclath+cstack]
  2041                           ;write_command@command stored from wreg
  2042     053C  00F1               	movwf	write_command@command
  2043     053D                     l1134:
  2044                           
  2045                           ;main.c: 119: uint8_t write_command(uint8_t command);main.c: 120: {;main.c: 121:     RD3
      +                           = 0;
  2046     053D  1283               	bcf	3,5	;RP0=0, select bank0
  2047     053E  1303               	bcf	3,6	;RP1=0, select bank0
  2048     053F  1188               	bcf	8,3	;volatile
  2049     0540                     l1136:
  2050                           
  2051                           ;main.c: 122:     uint8_t ret = SPI_write(command);
  2052     0540  0871               	movf	write_command@command,w
  2053     0541  120A  118A  252D  120A  118A  	fcall	_SPI_write
  2054     0546  00F2               	movwf	write_command@ret
  2055     0547                     l1138:
  2056                           
  2057                           ;main.c: 123:     RD3 = 1;
  2058     0547  1283               	bcf	3,5	;RP0=0, select bank0
  2059     0548  1303               	bcf	3,6	;RP1=0, select bank0
  2060     0549  1588               	bsf	8,3	;volatile
  2061     054A                     l1140:
  2062                           
  2063                           ;main.c: 124:     return ret;
  2064     054A  0872               	movf	write_command@ret,w
  2065     054B                     l128:
  2066     054B  0008               	return
  2067     054C                     __end_of_write_command:
  2068                           
  2069                           	psect	text15
  2070     052D                     __ptext15:	
  2071 ;; *************** function _SPI_write *****************
  2072 ;; Defined at:
  2073 ;;		line 26 in file "./spi.h"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  data            1    wreg     unsigned char 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  data            1    0[COMMON] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      unsigned char 
  2080 ;; Registers used:
  2081 ;;		wreg
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2087 ;;      Params:         0       0       0       0       0
  2088 ;;      Locals:         1       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0
  2090 ;;      Totals:         1       0       0       0       0
  2091 ;;Total ram usage:        1 bytes
  2092 ;; Hardware stack levels used: 1
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_execute_command
  2097 ;;		_write_command
  2098 ;;		_write_address
  2099 ;;		_read_address
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103     052D                     _SPI_write:	
  2104                           ;psect for function _SPI_write
  2105                           
  2106                           
  2107                           ;incstack = 0
  2108                           ; Regs used in _SPI_write: [wreg]
  2109                           ;SPI_write@data stored from wreg
  2110     052D  00F0               	movwf	SPI_write@data
  2111     052E                     l1096:
  2112                           
  2113                           ;./spi.h: 26: uint8_t SPI_write(uint8_t data);./spi.h: 27: {;./spi.h: 28:     SSPBUF = d
      +                          ata;
  2114     052E  0870               	movf	SPI_write@data,w
  2115     052F  1283               	bcf	3,5	;RP0=0, select bank0
  2116     0530  1303               	bcf	3,6	;RP1=0, select bank0
  2117     0531  0093               	movwf	19	;volatile
  2118     0532                     l82:	
  2119                           ;./spi.h: 29:     while (!BF);
  2120                           
  2121     0532  1683               	bsf	3,5	;RP0=1, select bank1
  2122     0533  1303               	bcf	3,6	;RP1=0, select bank1
  2123     0534  1C14               	btfss	20,0	;volatile
  2124     0535  2D37               	goto	u301
  2125     0536  2D38               	goto	u300
  2126     0537                     u301:
  2127     0537  2D32               	goto	l82
  2128     0538                     u300:
  2129     0538                     l1098:
  2130                           
  2131                           ;./spi.h: 30:     return SSPBUF;
  2132     0538  1283               	bcf	3,5	;RP0=0, select bank0
  2133     0539  1303               	bcf	3,6	;RP1=0, select bank0
  2134     053A  0813               	movf	19,w	;volatile
  2135     053B                     l85:
  2136     053B  0008               	return
  2137     053C                     __end_of_SPI_write:
  2138                           
  2139                           	psect	text16
  2140     0520                     __ptext16:	
  2141 ;; *************** function _SPI_init_master *****************
  2142 ;; Defined at:
  2143 ;;		line 16 in file "./spi.h"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  1    wreg      void 
  2150 ;; Registers used:
  2151 ;;		wreg, status,2
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2157 ;;      Params:         0       0       0       0       0
  2158 ;;      Locals:         0       0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0
  2160 ;;      Totals:         0       0       0       0       0
  2161 ;;Total ram usage:        0 bytes
  2162 ;; Hardware stack levels used: 1
  2163 ;; This function calls:
  2164 ;;		Nothing
  2165 ;; This function is called by:
  2166 ;;		_main
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170     0520                     _SPI_init_master:	
  2171                           ;psect for function _SPI_init_master
  2172                           
  2173     0520                     l936:	
  2174                           ;incstack = 0
  2175                           ; Regs used in _SPI_init_master: [wreg+status,2]
  2176                           
  2177                           
  2178                           ;./spi.h: 17:     SSPCON = 0b01100001;
  2179     0520  3061               	movlw	97
  2180     0521  1283               	bcf	3,5	;RP0=0, select bank0
  2181     0522  1303               	bcf	3,6	;RP1=0, select bank0
  2182     0523  0094               	movwf	20	;volatile
  2183     0524                     l938:
  2184                           
  2185                           ;./spi.h: 18:     SSPSTAT = 0b00000000;
  2186     0524  1683               	bsf	3,5	;RP0=1, select bank1
  2187     0525  1303               	bcf	3,6	;RP1=0, select bank1
  2188     0526  0194               	clrf	20	;volatile
  2189     0527                     l940:
  2190                           
  2191                           ;./spi.h: 19:     CKE = 1;
  2192     0527  1714               	bsf	20,6	;volatile
  2193     0528                     l942:
  2194                           
  2195                           ;./spi.h: 20:     SMP = 1;
  2196     0528  1794               	bsf	20,7	;volatile
  2197     0529                     l944:
  2198                           
  2199                           ;./spi.h: 21:     TRISCbits.TRISC5 = 0;
  2200     0529  1287               	bcf	7,5	;volatile
  2201     052A                     l946:
  2202                           
  2203                           ;./spi.h: 22:     TRISCbits.TRISC4 = 1;
  2204     052A  1607               	bsf	7,4	;volatile
  2205     052B                     l948:
  2206                           
  2207                           ;./spi.h: 23:     TRISCbits.TRISC3 = 0;
  2208     052B  1187               	bcf	7,3	;volatile
  2209     052C                     l79:
  2210     052C  0008               	return
  2211     052D                     __end_of_SPI_init_master:
  2212     007E                     btemp	set	126	;btemp
  2213     007E                     wtemp0	set	126
  2214                           
  2215                           	psect	config
  2216                           
  2217                           ;Config register CONFIG1 @ 0x2007
  2218                           ;	Oscillator Selection bits
  2219                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2220                           ;	Watchdog Timer Enable bit
  2221                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2222                           ;	Power-up Timer Enable bit
  2223                           ;	PWRTE = OFF, PWRT disabled
  2224                           ;	RE3/MCLR pin function select bit
  2225                           ;	MCLRE = 0x1, unprogrammed default
  2226                           ;	Code Protection bit
  2227                           ;	CP = OFF, Program memory code protection is disabled
  2228                           ;	Data Code Protection bit
  2229                           ;	CPD = OFF, Data memory code protection is disabled
  2230                           ;	Brown Out Reset Selection bits
  2231                           ;	BOREN = OFF, BOR disabled
  2232                           ;	Internal External Switchover bit
  2233                           ;	IESO = 0x1, unprogrammed default
  2234                           ;	Fail-Safe Clock Monitor Enabled bit
  2235                           ;	FCMEN = 0x1, unprogrammed default
  2236                           ;	Low Voltage Programming Enable bit
  2237                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2238                           ;	In-Circuit Debugger Mode bit
  2239                           ;	DEBUG = 0x1, unprogrammed default
  2240     2007                     	org	8199
  2241     2007  2CF2               	dw	11506
  2242                           
  2243                           ;Config register CONFIG2 @ 0x2008
  2244                           ;	Brown-out Reset Selection bit
  2245                           ;	BOR4V = 0x1, unprogrammed default
  2246                           ;	Flash Program Memory Self Write Enable bits
  2247                           ;	WRT = OFF, Write protection off
  2248     2008                     	org	8200
  2249     2008  3FFF               	dw	16383

Data Sizes:
    Strings     43
    Constant    0
    Data        3
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     29      42
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    _doprnt$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 

    _doprnt$1	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    _doprnt$0	PTR struct __prbuf size(1) Largest target is 3
		 -> sprintf@pb(COMMON[2]), 

    S684__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> Absolute function(), 

    pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> Absolute function(), 

    S684__prbuf$ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    SendChar@args	PTR unsigned char  size(1) Largest target is 2
		 -> STR_6(CODE[2]), 

    write_tx_payload@data	PTR unsigned char  size(1) Largest target is 1
		 -> TXChar@ch(COMMON[1]), 

    write_address@addr	PTR unsigned char  size(1) Largest target is 3
		 -> TXChar@ch(COMMON[1]), RXTX_ADDR(BANK0[3]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 8
		 -> STR_5(CODE[8]), STR_4(CODE[3]), STR_3(CODE[6]), STR_2(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_SendChar
    _rf_setup->_write_register
    _flush_TXRX->_write_register
    _UART_Init->___aldiv
    _SendChar->_TXChar
    _UART_Write_Text->_UART_Write
    _TX_mode->_write_register
    _TXChar->_write_tx_payload
    _write_tx_payload->_write_address
    _write_address->_SPI_write
    _write_register->_execute_command
    _execute_command->_SPI_write
    _write_command->_SPI_write

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    8036
                                             26 BANK0      3     3      0
                    _SPI_init_master
                           _SendChar
                          _UART_Init
                    _UART_Write_Text
                           _rf_setup
 ---------------------------------------------------------------------------------
 (1) _rf_setup                                             2     2      0    3447
                                              7 COMMON     2     2      0
                    _UART_Write_Text
                         _flush_TXRX
                      _write_address
                     _write_register
 ---------------------------------------------------------------------------------
 (2) _flush_TXRX                                           0     0      0    1340
                      _write_command
                     _write_register
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SendChar                                             2     2      0    3675
                                             11 COMMON     1     1      0
                             _TXChar
                            _TX_mode
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      3     3      0     244
                                              1 COMMON     3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TX_mode                                              0     0      0    1273
                     _write_register
 ---------------------------------------------------------------------------------
 (2) _TXChar                                               2     2      0    2096
                                              9 COMMON     2     2      0
                      _write_command
                     _write_register
                   _write_tx_payload
 ---------------------------------------------------------------------------------
 (3) _write_tx_payload                                     3     2      1     710
                                              6 COMMON     3     2      1
                      _write_address
 ---------------------------------------------------------------------------------
 (2) _write_address                                        5     3      2     590
                                              1 COMMON     5     3      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (2) _write_register                                       2     1      1    1273
                                              5 COMMON     2     1      1
                    _execute_command
 ---------------------------------------------------------------------------------
 (3) _execute_command                                      4     3      1     241
                                              1 COMMON     4     3      1
                          _SPI_write
 ---------------------------------------------------------------------------------
 (3) _write_command                                        2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _SendChar
     _TXChar
       _write_command
         _SPI_write
       _write_register
         _execute_command
           _SPI_write
       _write_tx_payload
         _write_address
           _SPI_write
     _TX_mode
       _write_register
     _UART_Write_Text
       _UART_Write
   _UART_Init
     ___aldiv
   _UART_Write_Text
   _rf_setup
     _UART_Write_Text
     _flush_TXRX
       _write_command
       _write_register
     _write_address
     _write_register

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1D      2A       5       52.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      36      12        0.0%
ABS                  0      0      36       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Mar 24 12:10:31 2023

                          pc 0002                           _BF 04A0                           l61 051F  
                         l55 06D7                           l82 0532                           l58 0515  
                         l67 05EF                           l85 053B                           l79 052C  
                         fsr 0004                          l131 0507                          l140 061A  
                        l125 05AB                          l128 054B                          l160 0513  
                        l154 0742                          l139 0617                          l163 0561  
                        l171 05CA                          l340 0757                          l149 0578  
                        l350 07DF                          l178 0591                          l940 0527  
                        l942 0528                          _CKE 04A6                          l944 0529  
                        l936 0520                          l946 052A                          l938 0524  
                        l948 052B                          _RD2 0042                          _RD3 0043  
                        u300 0538                          u301 0537                          u310 0617  
                        u311 0616                          u320 051B                          u400 078E  
                        u321 051A                          u401 078D                          u330 05EF  
                        u331 05EE                          u420 07A9                          u421 07A8  
                        u350 05C0                          u351 05BF                          u415 0790  
                        u440 07C7                          u360 074A                          u441 07C6  
                        u425 07A5                          u361 0749                          u450 07CC  
                        u370 075B                          u451 07CB                          u435 07B9  
                        u371 075A                          u380 077A                          u460 0680  
                        u381 0779                          u470 0699                          u607 06E0  
                        u617 055C                          u481 06AB                          u465 067B  
                        u482 06AC                          u627 05FF                          u395 077F  
                        u483 06B1                          u475 0694                          u484 06B2  
                        u637 059E                          u485 06B7                          u486 06B8  
                        u587 0650                          u597 0663                          _SMP 04A7  
                        fsr0 0004                          indf 0000                         l1110 05A7  
                       l1102 0593                         l1112 05AA                         l1104 0596  
                       l1120 05FB                         l1200 0772                         l1106 059C  
                       l1122 05FD                         l1130 0515                         l1210 0797  
                       l1202 077A                         l1140 054A                         l1108 05A0  
                       l1124 0601                         l1116 05F1                         l1132 051B  
                       l1212 07A9                         l1204 077D                         l1220 07C7  
                       l1134 053D                         l1126 060D                         l1118 05F4  
                       l1150 055A                         l1222 07CC                         l1214 07B7  
                       l1206 078A                         l1230 0670                         l1136 0540  
                       l1144 04FE                         l1128 0611                         l1152 055E  
                       l1160 05E2                         l1224 07D7                         l1216 07B8  
                       l1208 078E                         l1240 06D1                         l1232 06C9  
                       l1138 0547                         l1146 054D                         l1154 05CC  
                       l1218 07C1                         l1242 06D4                         l1234 06CA  
                       l1250 06ED                         l1148 0557                         l1180 05AD  
                       l1156 05CF                         l1236 06CD                         l1228 066D  
                       l1260 0713                         l1252 06F4                         l1244 06D8  
                       l1182 05B5                         l1158 05DC                         l1190 0746  
                       l1238 06D0                         l1174 0562                         l1270 073C  
                       l1262 071B                         l1254 06FC                         l1246 06DC  
                       l1096 052E                         l1184 05BC                         l1176 0508  
                       l1192 074A                         l1264 0723                         l1256 0704  
                       l1248 06E5                         l1098 0538                         l1186 05C0  
                       l1178 050B                         l1290 058B                         l1194 075B  
                       l1266 072D                         l1258 070B                         l1284 057A  
                       l1196 0766                         l1188 0743                         l1268 0737  
                       l1380 0625                         l1286 057A                         l1198 076A  
                       l1390 0655                         l1382 0629                         l1288 0586  
                       l1392 065B                         l1384 0640                         l1376 061B  
                       l1386 0645                         l1378 061F                         l1388 064A  
                       STR_1 0009                         STR_2 0029                         STR_3 0023  
                       STR_4 002F                         STR_5 001B                         STR_6 0032  
                       _BRGH 04C2                         _CREN 00C4                         _RCIF 0065  
                       _SPEN 00C7                         _TRMT 04C1                         _TXEN 04C5  
                       _SYNC 04C4                         _main 061B                         btemp 007E  
                       start 0000               write_address@i 0075              _execute_command 0592  
            __end_of_TX_mode 0514      __end_of_UART_Write_Text 05F0              __end_of___aldiv 07E0  
                      ?_main 0070                        _RCREG 001A                        _SPBRG 0099  
                      _TXREG 0019                  ?_UART_Write 0070            write_register@reg 0076  
          write_register@val 0075                        pclath 000A                        status 0003  
                      wtemp0 007E              __initialization 07E0                 __end_of_main 066D  
           __end_of_SendChar 0592                       ??_main 003A             ??_write_register 0076  
    __end_of_execute_command 05AC                       _TRISC6 043E                       _TRISC7 043F  
                     _STATUS 0003                       _SSPCON 0014                       _SSPBUF 0013  
                  ??_TX_mode 0077                       _TXChar 05AC            __end_of_UART_Init 06D8  
                  ??___aldiv 0078             ?_UART_Write_Text 0070  char_to_binary_string@output 003D  
           __end_of_rf_setup 0743            __end_of_SPI_write 053C             write_address@reg 0074  
           write_address@num 0072      __end_of__initialization 07FC         write_command@command 0071  
             __pcstackCOMMON 0070                 __pidataBANK0 04FA             _write_tx_payload 054C  
          ??_SPI_init_master 0070                   __pbssBANK0 003D             ?_execute_command 0071  
                    ?_TXChar 0070                    ?_SendChar 0070                   __pmaintext 061B  
               ??_UART_Write 0070                      _SSPSTAT 0094                   __stringtab 0003  
              _write_address 05F0                _write_command 053C                      _TX_mode 0508  
                 ??_SendChar 007B             write_command@ret 0072                    ?_rf_setup 0070  
                 _flush_TXRX 0562                      ___aldiv 0743           __end_of_UART_Write 0520  
                    __ptext1 06D8                      __ptext2 0562                      __ptext3 066D  
                    __ptext4 0743                      __ptext5 0579                      __ptext6 05CB  
                    __ptext7 0514                      __ptext8 0508                      __ptext9 05AC  
           ___aldiv@dividend 0074         write_tx_payload@data 0076         end_of_initialization 07FC  
             ?_write_address 0071               ?_write_command 0070                 SendChar@args 007B  
                 ??_rf_setup 0077             ___aldiv@quotient 0022                    _UART_Init 066D  
             UART_Write@data 0070            write_address@addr 0071                    _TRISCbits 0087  
                  _TRISDbits 0088     __end_of_write_tx_payload 0562                    _SPI_write 052D  
                  _RXTX_ADDR 0047               __end_of_TXChar 05CB                  ?_flush_TXRX 0070  
            _SPI_init_master 0520                   ?_UART_Init 0026          start_initialization 07E0  
            ??_write_address 0073              ??_write_command 0071                   ?_SPI_write 0070  
                   ??_TXChar 0079                  __pdataBANK0 0047                    ___latbits 0002  
              __pcstackBANK0 0020                     ?_TX_mode 0070      __end_of_SPI_init_master 052D  
              SPI_write@data 0070                     ?___aldiv 0070                  ??_UART_Init 002E  
                  __pstrings 0003           execute_command@reg 0073           execute_command@ret 0074  
         execute_command@val 0071            ??_UART_Write_Text 0071                  ??_SPI_write 0070  
            ___aldiv@divisor 0070              ___aldiv@counter 0020                     TXChar@ch 0079  
        write_tx_payload@num 0078            UART_Init@baudrate 0026                  __stringbase 0008  
          ?_write_tx_payload 0076           ??_write_tx_payload 0077                     _SendChar 0579  
        UART_Init@_XTAL_FREQ 002A             ?_SPI_init_master 0070                 ??_flush_TXRX 0077  
             _write_register 04FD           __end_of__stringtab 0009            ??_execute_command 0072  
                   __ptext10 054C                     __ptext11 05F0                     __ptext12 04FD  
                   __ptext13 0592                     __ptext14 053C                     __ptext15 052D  
                   __ptext16 0520           __end_of_flush_TXRX 0579          UART_Write_Text@text 0073  
     __end_of_write_register 0508                     _rf_setup 06D8                   TXChar@stat 007A  
      __end_of_write_address 061B        __end_of_write_command 054C              ?_write_register 0075  
                  stringcode 0003                   _OSCCONbits 008F              _UART_Write_Text 05CB  
                   stringdir 0003                     stringtab 0003                 ___aldiv@sign 0021  
                 _UART_Write 0514             UART_Write_Text@i 0071  
