

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Mar 27 21:41:31 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Generated 09/02/2023 GMT
    33                           ; 
    34                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0088                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008F                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  0105                     	;# 
   208  0107                     	;# 
   209  0108                     	;# 
   210  0109                     	;# 
   211  010C                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0187                     	;# 
   218  0188                     	;# 
   219  0189                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222                           
   223                           	psect	idataBANK0
   224  0000'                    __pidataBANK0:
   225                           
   226                           ;initializer for _RADIO_ADDR
   227  0000' 3401               	retlw	1
   228  0001' 3402               	retlw	2
   229  0002' 3403               	retlw	3
   230  0003' 3404               	retlw	4
   231  0004' 3405               	retlw	5
   232  0013                     _SSPBUF	set	19
   233  0014                     _SSPCON	set	20
   234  001A                     _RCREG	set	26
   235  0019                     _TXREG	set	25
   236  0042                     _RD2	set	66
   237  0043                     _RD3	set	67
   238  0065                     _RCIF	set	101
   239  00C4                     _CREN	set	196
   240  00C7                     _SPEN	set	199
   241  008F                     _OSCCONbits	set	143
   242  0087                     _TRISCbits	set	135
   243  0094                     _SSPSTAT	set	148
   244  0099                     _SPBRG	set	153
   245  0442                     _TRISD2	set	1090
   246  0443                     _TRISD3	set	1091
   247  04A0                     _BF	set	1184
   248  04A6                     _CKE	set	1190
   249  04C1                     _TRMT	set	1217
   250  04C5                     _TXEN	set	1221
   251  043E                     _TRISC6	set	1086
   252  043F                     _TRISC7	set	1087
   253  04C4                     _SYNC	set	1220
   254  04C2                     _BRGH	set	1218
   255                           
   256                           	psect	strings
   257  0000'                    __pstrings:
   258  0000'                    stringtab:
   259  0000'                    __stringtab:
   260                           
   261                           ;	String table - string pointers are 1 byte each
   262  0000' 1BFF               	btfsc	btemp+1,7
   263  0001' 2800'              	ljmp	stringcode
   264  0002' 1383               	bcf	3,7
   265  0003' 187F               	btfsc	btemp+1,0
   266  0004' 1783               	bsf	3,7
   267  0005' 0800               	movf	0,w
   268  0006' 0A84               	incf	4,f
   269  0007' 1903               	skipnz
   270  0008' 0AFF               	incf	btemp+1,f
   271  0009' 0008               	return
   272  000A'                    stringcode:
   273  000A'                    stringdir:
   274  000A' 3000'              	movlw	high stringdir
   275  000B' 008A               	movwf	10
   276  000C' 0804               	movf	4,w
   277  000D' 0A84               	incf	4,f
   278  000E' 0782               	addwf	2,f
   279  000F'                    __stringbase:
   280  000F' 3400               	retlw	0
   281  0010'                    __end_of__stringtab:
   282  0010'                    STR_1:
   283  0010' 3425               	retlw	37	;'%'
   284  0011' 3463               	retlw	99	;'c'
   285  0012' 3425               	retlw	37	;'%'
   286  0013' 3463               	retlw	99	;'c'
   287  0014' 3425               	retlw	37	;'%'
   288  0015' 3463               	retlw	99	;'c'
   289  0016' 3425               	retlw	37	;'%'
   290  0017' 3463               	retlw	99	;'c'
   291  0018' 3425               	retlw	37	;'%'
   292  0019' 3463               	retlw	99	;'c'
   293  001A' 3425               	retlw	37	;'%'
   294  001B' 3463               	retlw	99	;'c'
   295  001C' 3425               	retlw	37	;'%'
   296  001D' 3463               	retlw	99	;'c'
   297  001E' 3425               	retlw	37	;'%'
   298  001F' 3463               	retlw	99	;'c'
   299  0020' 340A               	retlw	10
   300  0021' 3400               	retlw	0
   301  0022'                    STR_3:
   302  0022' 3452               	retlw	82	;'R'
   303  0023' 3458               	retlw	88	;'X'
   304  0024' 3420               	retlw	32	;' '
   305  0025' 343D               	retlw	61	;'='
   306  0026' 3420               	retlw	32	;' '
   307  0027' 3425               	retlw	37	;'%'
   308  0028' 3473               	retlw	115	;'s'
   309  0029' 340A               	retlw	10
   310  002A' 3400               	retlw	0
   311  002B'                    STR_2:
   312  002B' 3442               	retlw	66	;'B'
   313  002C' 344F               	retlw	79	;'O'
   314  002D' 344F               	retlw	79	;'O'
   315  002E' 3454               	retlw	84	;'T'
   316  002F' 3445               	retlw	69	;'E'
   317  0030' 3444               	retlw	68	;'D'
   318  0031' 340A               	retlw	10
   319  0032' 3400               	retlw	0
   320                           
   321                           	psect	cinit
   322  0000'                    start_initialization:	
   323                           ; #config settings
   324                           
   325  0000'                    __initialization:
   326                           
   327                           ; Initialize objects allocated to BANK0
   328  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0	;fetch initializer
   329  0005' 0080'              	movwf	__pdataBANK0& (0+127)
   330  0006' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0+1	;fetch initializer
   331  000B' 0080'              	movwf	(__pdataBANK0+1)& (0+127)
   332  000C' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0+2	;fetch initializer
   333  0011' 0080'              	movwf	(__pdataBANK0+2)& (0+127)
   334  0012' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0+3	;fetch initializer
   335  0017' 0080'              	movwf	(__pdataBANK0+3)& (0+127)
   336  0018' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0+4	;fetch initializer
   337  001D' 0080'              	movwf	(__pdataBANK0+4)& (0+127)
   338                           
   339                           ; Clear objects allocated to BANK1
   340  001E' 1683               	bsf	3,5	;RP0=1, select bank1
   341  001F' 1303               	bcf	3,6	;RP1=0, select bank1
   342  0020' 0180'              	clrf	__pbssBANK1& (0+127)
   343  0021' 0180'              	clrf	(__pbssBANK1+1)& (0+127)
   344  0022' 0180'              	clrf	(__pbssBANK1+2)& (0+127)
   345  0023' 0180'              	clrf	(__pbssBANK1+3)& (0+127)
   346  0024' 0180'              	clrf	(__pbssBANK1+4)& (0+127)
   347  0025' 0180'              	clrf	(__pbssBANK1+5)& (0+127)
   348  0026' 0180'              	clrf	(__pbssBANK1+6)& (0+127)
   349  0027' 0180'              	clrf	(__pbssBANK1+7)& (0+127)
   350  0028' 0180'              	clrf	(__pbssBANK1+8)& (0+127)
   351  0029' 0180'              	clrf	(__pbssBANK1+9)& (0+127)
   352  002A'                    end_of_initialization:	
   353                           ;End of C runtime variable initialization code
   354                           
   355  002A'                    __end_of__initialization:
   356  002A' 0183               	clrf	3
   357  002B' 120A' 118A' 2800'  	ljmp	_main	;jump to C main() function
   358                           
   359                           	psect	dataBANK0
   360  0000'                    __pdataBANK0:
   361  0000'                    _RADIO_ADDR:
   362  0000'                    	ds	5
   363                           
   364                           	psect	bssBANK1
   365  0000'                    __pbssBANK1:
   366  0000'                    char_to_binary_string@output:
   367  0000'                    	ds	10
   368                           
   369                           	psect	cstackCOMMON
   370  0000'                    __pcstackCOMMON:
   371  0000'                    ??_vsnprintf:
   372  0000'                    ?_UART_write:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0000'                    ??_UART_write:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0000'                    ?_SPI_init_master:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0000'                    ??_SPI_init_master:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0000'                    ?_SPI_write:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0000'                    ??_SPI_write:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0000'                    ?_arrcpy:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0000'                    ?_nrf_write_command:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0000'                    ?_nrf_flush_rxtx:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0000'                    ?_nrf_set_rx_mode:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0000'                    ?_nrf_data_available:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0000'                    ?_vsnprintf:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0000'                    ?_main:	
   409                           ; 2 bytes @ 0x0
   410                           
   411  0000'                    ?___aldiv:	
   412                           ; 2 bytes @ 0x0
   413                           
   414  0000'                    UART_write@data:	
   415                           ; 4 bytes @ 0x0
   416                           
   417  0000'                    SPI_write@data:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0000'                    arrcpy@src:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0000'                    ___aldiv@divisor:	
   424                           ; 1 bytes @ 0x0
   425                           
   426                           
   427                           ; 4 bytes @ 0x0
   428  0000'                    	ds	1
   429  0001'                    ?_UART_write_text:
   430  0001'                    ?_nrf_command:	
   431                           ; 1 bytes @ 0x1
   432                           
   433  0001'                    ??_nrf_write_command:	
   434                           ; 1 bytes @ 0x1
   435                           
   436  0001'                    arrcpy@len:	
   437                           ; 1 bytes @ 0x1
   438                           
   439  0001'                    nrf_command@data:	
   440                           ; 1 bytes @ 0x1
   441                           
   442  0001'                    nrf_write_command@NRF_command:	
   443                           ; 1 bytes @ 0x1
   444                           
   445  0001'                    UART_write_text@text:	
   446                           ; 1 bytes @ 0x1
   447                           
   448                           
   449                           ; 2 bytes @ 0x1
   450  0001'                    	ds	1
   451  0002'                    ??_arrcpy:
   452  0002'                    nrf_command@len:	
   453                           ; 1 bytes @ 0x2
   454                           
   455  0002'                    nrf_write_command@status:	
   456                           ; 1 bytes @ 0x2
   457                           
   458                           
   459                           ; 1 bytes @ 0x2
   460  0002'                    	ds	1
   461  0003'                    ??_UART_write_text:
   462  0003'                    ??_nrf_command:	
   463                           ; 1 bytes @ 0x3
   464                           
   465  0003'                    ??_nrf_data_available:	
   466                           ; 1 bytes @ 0x3
   467                           
   468  0003'                    nrf_data_available@status:	
   469                           ; 1 bytes @ 0x3
   470                           
   471                           
   472                           ; 1 bytes @ 0x3
   473  0003'                    	ds	1
   474  0004'                    arrcpy@dst:
   475  0004'                    ___aldiv@dividend:	
   476                           ; 1 bytes @ 0x4
   477                           
   478                           
   479                           ; 4 bytes @ 0x4
   480  0004'                    	ds	1
   481  0005'                    arrcpy@i:
   482  0005'                    nrf_command@NRF_command:	
   483                           ; 1 bytes @ 0x5
   484                           
   485                           
   486                           ; 1 bytes @ 0x5
   487  0005'                    	ds	1
   488  0006'                    nrf_command@status:
   489  0006'                    UART_write_text@i:	
   490                           ; 1 bytes @ 0x6
   491                           
   492                           
   493                           ; 2 bytes @ 0x6
   494  0006'                    	ds	1
   495  0007'                    nrf_command@i:
   496                           
   497                           ; 1 bytes @ 0x7
   498  0007'                    	ds	1
   499  0008'                    ?_UART_printf:
   500  0008'                    ?_nrf_write_register:	
   501                           ; 1 bytes @ 0x8
   502                           
   503  0008'                    ?_nrf_read_register:	
   504                           ; 1 bytes @ 0x8
   505                           
   506  0008'                    ??___aldiv:	
   507                           ; 1 bytes @ 0x8
   508                           
   509  0008'                    nrf_write_register@data:	
   510                           ; 1 bytes @ 0x8
   511                           
   512  0008'                    nrf_read_register@data:	
   513                           ; 1 bytes @ 0x8
   514                           
   515                           
   516                           ; 1 bytes @ 0x8
   517  0008'                    	ds	1
   518  0009'                    ??_UART_printf:
   519  0009'                    nrf_write_register@len:	
   520                           ; 1 bytes @ 0x9
   521                           
   522  0009'                    nrf_read_register@len:	
   523                           ; 1 bytes @ 0x9
   524                           
   525                           
   526                           ; 1 bytes @ 0x9
   527  0009'                    	ds	1
   528  000A'                    ??_nrf_write_register:
   529  000A'                    ??_nrf_read_register:	
   530                           ; 1 bytes @ 0xA
   531                           
   532  000A'                    nrf_write_register@reg:	
   533                           ; 1 bytes @ 0xA
   534                           
   535  000A'                    nrf_read_register@reg:	
   536                           ; 1 bytes @ 0xA
   537                           
   538                           
   539                           ; 1 bytes @ 0xA
   540  000A'                    	ds	1
   541  000B'                    ??_nrf_flush_rxtx:
   542  000B'                    ??_nrf_set_rx_mode:	
   543                           ; 1 bytes @ 0xB
   544                           
   545  000B'                    ?_nrf_read:	
   546                           ; 1 bytes @ 0xB
   547                           
   548  000B'                    nrf_flush_rxtx@data:	
   549                           ; 1 bytes @ 0xB
   550                           
   551  000B'                    nrf_set_rx_mode@config:	
   552                           ; 1 bytes @ 0xB
   553                           
   554  000B'                    nrf_read@len:	
   555                           ; 1 bytes @ 0xB
   556                           
   557                           
   558                           ; 1 bytes @ 0xB
   559  000B'                    	ds	1
   560  000C'                    ?_nrf_setup:
   561  000C'                    ??_nrf_read:	
   562                           ; 1 bytes @ 0xC
   563                           
   564  000C'                    nrf_setup@payload_size:	
   565                           ; 1 bytes @ 0xC
   566                           
   567  000C'                    nrf_read@data:	
   568                           ; 1 bytes @ 0xC
   569                           
   570                           
   571                           ; 1 bytes @ 0xC
   572  000C'                    	ds	1
   573  000D'                    nrf_read@clear:
   574                           
   575                           ; 1 bytes @ 0xD
   576  000D'                    	ds	1
   577                           
   578                           	psect	cstackBANK0
   579  0000'                    __pcstackBANK0:
   580  0000'                    ??_nrf_setup:
   581  0000'                    ___aldiv@counter:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0000'                    UART_printf@buf:	
   585                           ; 1 bytes @ 0x0
   586                           
   587                           
   588                           ; 64 bytes @ 0x0
   589  0000'                    	ds	1
   590  0001'                    ___aldiv@sign:
   591                           
   592                           ; 1 bytes @ 0x1
   593  0001'                    	ds	1
   594  0002'                    nrf_setup@addr:
   595  0002'                    ___aldiv@quotient:	
   596                           ; 1 bytes @ 0x2
   597                           
   598                           
   599                           ; 4 bytes @ 0x2
   600  0002'                    	ds	1
   601  0003'                    nrf_setup@data:
   602                           
   603                           ; 5 bytes @ 0x3
   604  0003'                    	ds	3
   605  0006'                    ?_UART_init:
   606  0006'                    UART_init@baudrate:	
   607                           ; 1 bytes @ 0x6
   608                           
   609                           
   610                           ; 4 bytes @ 0x6
   611  0006'                    	ds	4
   612  000A'                    UART_init@_XTAL_FREQ:
   613                           
   614                           ; 4 bytes @ 0xA
   615  000A'                    	ds	4
   616  000E'                    ??_UART_init:
   617                           
   618                           ; 1 bytes @ 0xE
   619  000E'                    	ds	50
   620  0040'                    UART_printf@args:
   621                           
   622                           ; 1 bytes @ 0x40
   623  0040'                    	ds	1
   624  0041'                    UART_printf@fmt:
   625                           
   626                           ; 1 bytes @ 0x41
   627  0041'                    	ds	1
   628  0042'                    ??_main:
   629                           
   630                           ; 1 bytes @ 0x42
   631  0042'                    	ds	2
   632  0044'                    main@data:
   633                           
   634                           ; 3 bytes @ 0x44
   635  0044'                    	ds	3
   636                           
   637                           	psect	maintext
   638  0000'                    __pmaintext:	
   639 ;;
   640 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   641 ;;
   642 ;; *************** function _main *****************
   643 ;; Defined at:
   644 ;;		line 50 in file "main.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;		None
   647 ;; Auto vars:     Size  Location     Type
   648 ;;  data            3   68[BANK0 ] unsigned char [3]
   649 ;; Return value:  Size  Location     Type
   650 ;;                  2  188[None  ] int 
   651 ;; Registers used:
   652 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   653 ;; Tracked objects:
   654 ;;		On entry : B00/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   658 ;;      Params:         0       0       0       0       0
   659 ;;      Locals:         0       3       0       0       0
   660 ;;      Temps:          0       2       0       0       0
   661 ;;      Totals:         0       5       0       0       0
   662 ;;Total ram usage:        5 bytes
   663 ;; Hardware stack levels required when called: 5
   664 ;; This function calls:
   665 ;;		_SPI_init_master
   666 ;;		_UART_init
   667 ;;		_UART_printf
   668 ;;		_UART_write_text
   669 ;;		_nrf_data_available
   670 ;;		_nrf_read
   671 ;;		_nrf_set_rx_mode
   672 ;;		_nrf_setup
   673 ;; This function is called by:
   674 ;;		Startup code after reset
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678  0000'                    _main:	
   679                           ;psect for function _main
   680                           
   681  0000'                    l1426:	
   682                           ;incstack = 0
   683                           ; Regs used in _main: [allreg]
   684                           
   685                           
   686                           ;main.c: 53:     OSCCONbits.IRCF = 111;
   687  0000' 3070               	movlw	112
   688  0001' 1683               	bsf	3,5	;RP0=1, select bank1
   689  0002' 1303               	bcf	3,6	;RP1=0, select bank1
   690  0003' 048F               	iorwf	15,f	;volatile
   691  0004'                    l1428:
   692                           
   693                           ;main.c: 56:     UART_init(9600, 8000000UL);
   694  0004' 3000               	movlw	0
   695  0005' 1283               	bcf	3,5	;RP0=0, select bank0
   696  0006' 1303               	bcf	3,6	;RP1=0, select bank0
   697  0007' 0089'              	movwf	UART_init@baudrate+3
   698  0008' 3000               	movlw	0
   699  0009' 0088'              	movwf	UART_init@baudrate+2
   700  000A' 3025               	movlw	37
   701  000B' 0087'              	movwf	UART_init@baudrate+1
   702  000C' 3080               	movlw	128
   703  000D' 0086'              	movwf	UART_init@baudrate
   704  000E' 3000               	movlw	0
   705  000F' 008D'              	movwf	UART_init@_XTAL_FREQ+3
   706  0010' 307A               	movlw	122
   707  0011' 008C'              	movwf	UART_init@_XTAL_FREQ+2
   708  0012' 3012               	movlw	18
   709  0013' 008B'              	movwf	UART_init@_XTAL_FREQ+1
   710  0014' 3000               	movlw	0
   711  0015' 008A'              	movwf	UART_init@_XTAL_FREQ
   712  0016' 120A' 118A' 2000' 120A' 118A' 	fcall	_UART_init
   713  001B'                    l1430:
   714                           
   715                           ;main.c: 59:     UART_write_text("BOOTED\n");
   716  001B' 301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   717  001C' 0081'              	movwf	UART_write_text@text
   718  001D' 3080               	movlw	128
   719  001E' 0082'              	movwf	UART_write_text@text+1
   720  001F' 120A' 118A' 2000' 120A' 118A' 	fcall	_UART_write_text
   721  0024'                    l1432:
   722                           
   723                           ;main.c: 62:     SPI_init_master();
   724  0024' 120A' 118A' 2000' 120A' 118A' 	fcall	_SPI_init_master
   725  0029'                    l1434:
   726                           
   727                           ;main.c: 65:     nrf_setup(RADIO_ADDR, 3);
   728  0029' 3003               	movlw	3
   729  002A' 008C'              	movwf	nrf_setup@payload_size
   730  002B' 3000'              	movlw	(low (_RADIO_ADDR| 0))& (0+255)
   731  002C' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_setup
   732  0031'                    l1436:
   733                           
   734                           ;main.c: 71:     nrf_set_rx_mode();
   735  0031' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_set_rx_mode
   736  0036'                    l1438:
   737                           
   738                           ;main.c: 74:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   739  0036' 3006               	movlw	6
   740  0037' 1283               	bcf	3,5	;RP0=0, select bank0
   741  0038' 1303               	bcf	3,6	;RP1=0, select bank0
   742  0039' 00C3'              	movwf	??_main+1
   743  003A' 302F               	movlw	47
   744  003B' 00C2'              	movwf	??_main
   745  003C'                    u727:
   746  003C' 0BC2'              	decfsz	??_main,f
   747  003D' 2800'              	goto	u727
   748  003E' 0BC3'              	decfsz	??_main+1,f
   749  003F' 2800'              	goto	u727
   750  0040' 2800'              	nop2
   751  0041'                    l1440:
   752                           
   753                           ;main.c: 93:         while (!nrf_data_available())
   754  0041' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_data_available
   755  0046' 3A00               	xorlw	0
   756  0047' 1903               	skipnz
   757  0048' 2800'              	goto	u711
   758  0049' 2800'              	goto	u710
   759  004A'                    u711:
   760  004A' 2800'              	goto	l1440
   761  004B'                    u710:
   762  004B'                    l1442:
   763                           
   764                           ;main.c: 97:         uint8_t data[3];;main.c: 98:         nrf_read(data, 3);
   765  004B' 3003               	movlw	3
   766  004C' 008B'              	movwf	nrf_read@len
   767  004D' 3000'              	movlw	(low (main@data| 0))& (0+255)
   768  004E' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_read
   769  0053'                    l1444:
   770                           
   771                           ;main.c: 99:         UART_printf("RX = %s\n", data);
   772  0053' 3000'              	movlw	(low (main@data| 0))& (0+255)
   773  0054' 0088'              	movwf	?_UART_printf
   774  0055' 3013               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   775  0056' 120A' 118A' 2000' 120A' 118A' 	fcall	_UART_printf
   776  005B' 2800'              	goto	l1440
   777  005C' 120A' 118A' 2800'  	ljmp	start
   778  005F'                    __end_of_main:
   779                           
   780                           	psect	text1
   781  0000'                    __ptext1:	
   782 ;; *************** function _nrf_setup *****************
   783 ;; Defined at:
   784 ;;		line 162 in file "./nrf24l01.h"
   785 ;; Parameters:    Size  Location     Type
   786 ;;  addr            1    wreg     PTR unsigned char 
   787 ;;		 -> RADIO_ADDR(5), 
   788 ;;  payload_size    1   12[COMMON] unsigned char 
   789 ;; Auto vars:     Size  Location     Type
   790 ;;  addr            1    2[BANK0 ] PTR unsigned char 
   791 ;;		 -> RADIO_ADDR(5), 
   792 ;;  data            5    3[BANK0 ] unsigned char [5]
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   802 ;;      Params:         1       0       0       0       0
   803 ;;      Locals:         0       6       0       0       0
   804 ;;      Temps:          0       2       0       0       0
   805 ;;      Totals:         1       8       0       0       0
   806 ;;Total ram usage:        9 bytes
   807 ;; Hardware stack levels used: 1
   808 ;; Hardware stack levels required when called: 4
   809 ;; This function calls:
   810 ;;		_arrcpy
   811 ;;		_nrf_flush_rxtx
   812 ;;		_nrf_write_register
   813 ;; This function is called by:
   814 ;;		_main
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818  0000'                    _nrf_setup:	
   819                           ;psect for function _nrf_setup
   820                           
   821                           
   822                           ;incstack = 0
   823                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   824                           ;nrf_setup@addr stored from wreg
   825  0000' 1283               	bcf	3,5	;RP0=0, select bank0
   826  0001' 1303               	bcf	3,6	;RP1=0, select bank0
   827  0002' 0082'              	movwf	nrf_setup@addr
   828  0003'                    l1270:
   829                           
   830                           ;./nrf24l01.h: 162:     void nrf_setup(uint8_t *addr, uint8_t payload_size);./nrf24l01.h
      +                          : 163:     {;./nrf24l01.h: 165:         TRISD3 = 0;
   831  0003' 1683               	bsf	3,5	;RP0=1, select bank1
   832  0004' 1303               	bcf	3,6	;RP1=0, select bank1
   833  0005' 1188               	bcf	8,3	;volatile
   834                           
   835                           ;./nrf24l01.h: 166:         TRISD2 = 0;
   836  0006' 1108               	bcf	8,2	;volatile
   837  0007'                    l1272:
   838                           
   839                           ;./nrf24l01.h: 168:         _delay((unsigned long)((2)*(8000000UL/4000.0)));
   840  0007' 3006               	movlw	6
   841  0008' 1283               	bcf	3,5	;RP0=0, select bank0
   842  0009' 1303               	bcf	3,6	;RP1=0, select bank0
   843  000A' 0081'              	movwf	??_nrf_setup+1
   844  000B' 302F               	movlw	47
   845  000C' 0080'              	movwf	??_nrf_setup
   846  000D'                    u737:
   847  000D' 0B80'              	decfsz	??_nrf_setup,f
   848  000E' 2800'              	goto	u737
   849  000F' 0B81'              	decfsz	??_nrf_setup+1,f
   850  0010' 2800'              	goto	u737
   851  0011' 2800'              	nop2
   852  0012'                    l1274:
   853                           
   854                           ;./nrf24l01.h: 170:         RD3 = 1;
   855  0012' 1283               	bcf	3,5	;RP0=0, select bank0
   856  0013' 1303               	bcf	3,6	;RP1=0, select bank0
   857  0014' 1588               	bsf	8,3	;volatile
   858  0015'                    l1276:
   859                           
   860                           ;./nrf24l01.h: 171:         RD2 = 0;
   861  0015' 1108               	bcf	8,2	;volatile
   862                           
   863                           ;./nrf24l01.h: 173:         _delay((unsigned long)((2)*(8000000UL/4000.0)));
   864  0016' 3006               	movlw	6
   865  0017' 1283               	bcf	3,5	;RP0=0, select bank0
   866  0018' 1303               	bcf	3,6	;RP1=0, select bank0
   867  0019' 0081'              	movwf	??_nrf_setup+1
   868  001A' 302F               	movlw	47
   869  001B' 0080'              	movwf	??_nrf_setup
   870  001C'                    u747:
   871  001C' 0B80'              	decfsz	??_nrf_setup,f
   872  001D' 2800'              	goto	u747
   873  001E' 0B81'              	decfsz	??_nrf_setup+1,f
   874  001F' 2800'              	goto	u747
   875  0020' 2800'              	nop2
   876                           
   877                           ;./nrf24l01.h: 175:         uint8_t data[5];;./nrf24l01.h: 177:         data[0] = 0x0B;
   878  0021' 300B               	movlw	11
   879  0022' 1283               	bcf	3,5	;RP0=0, select bank0
   880  0023' 1303               	bcf	3,6	;RP1=0, select bank0
   881  0024' 0083'              	movwf	nrf_setup@data
   882  0025'                    l1278:
   883                           
   884                           ;./nrf24l01.h: 178:         nrf_write_register(0x00, &data, 1);
   885  0025' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
   886  0026' 0088'              	movwf	nrf_write_register@data
   887  0027' 0189'              	clrf	nrf_write_register@len
   888  0028' 0A89'              	incf	nrf_write_register@len,f
   889  0029' 3000               	movlw	0
   890  002A' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
   891  002F'                    l1280:
   892                           
   893                           ;./nrf24l01.h: 179:         data[0] = 0x00;
   894  002F' 1283               	bcf	3,5	;RP0=0, select bank0
   895  0030' 1303               	bcf	3,6	;RP1=0, select bank0
   896  0031' 0183'              	clrf	nrf_setup@data
   897  0032'                    l1282:
   898                           
   899                           ;./nrf24l01.h: 180:         nrf_write_register(0x01, &data, 1);
   900  0032' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
   901  0033' 0088'              	movwf	nrf_write_register@data
   902  0034' 0189'              	clrf	nrf_write_register@len
   903  0035' 0A89'              	incf	nrf_write_register@len,f
   904  0036' 3001               	movlw	1
   905  0037' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
   906  003C'                    l1284:
   907                           
   908                           ;./nrf24l01.h: 181:         data[0] = 0x01;
   909  003C' 1283               	bcf	3,5	;RP0=0, select bank0
   910  003D' 1303               	bcf	3,6	;RP1=0, select bank0
   911  003E' 0183'              	clrf	nrf_setup@data
   912  003F' 0A83'              	incf	nrf_setup@data,f
   913  0040'                    l1286:
   914                           
   915                           ;./nrf24l01.h: 182:         nrf_write_register(0x02, &data, 1);
   916  0040' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
   917  0041' 0088'              	movwf	nrf_write_register@data
   918  0042' 0189'              	clrf	nrf_write_register@len
   919  0043' 0A89'              	incf	nrf_write_register@len,f
   920  0044' 3002               	movlw	2
   921  0045' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
   922  004A'                    l1288:
   923                           
   924                           ;./nrf24l01.h: 183:         data[0] = 0x01;
   925  004A' 1283               	bcf	3,5	;RP0=0, select bank0
   926  004B' 1303               	bcf	3,6	;RP1=0, select bank0
   927  004C' 0183'              	clrf	nrf_setup@data
   928  004D' 0A83'              	incf	nrf_setup@data,f
   929  004E'                    l1290:
   930                           
   931                           ;./nrf24l01.h: 184:         nrf_write_register(0x03, &data, 1);
   932  004E' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
   933  004F' 0088'              	movwf	nrf_write_register@data
   934  0050' 0189'              	clrf	nrf_write_register@len
   935  0051' 0A89'              	incf	nrf_write_register@len,f
   936  0052' 3003               	movlw	3
   937  0053' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
   938  0058'                    l1292:
   939                           
   940                           ;./nrf24l01.h: 185:         data[0] = 0x00;
   941  0058' 1283               	bcf	3,5	;RP0=0, select bank0
   942  0059' 1303               	bcf	3,6	;RP1=0, select bank0
   943  005A' 0183'              	clrf	nrf_setup@data
   944  005B'                    l1294:
   945                           
   946                           ;./nrf24l01.h: 186:         nrf_write_register(0x04, &data, 1);
   947  005B' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
   948  005C' 0088'              	movwf	nrf_write_register@data
   949  005D' 0189'              	clrf	nrf_write_register@len
   950  005E' 0A89'              	incf	nrf_write_register@len,f
   951  005F' 3004               	movlw	4
   952  0060' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
   953  0065'                    l1296:
   954                           
   955                           ;./nrf24l01.h: 187:         data[0] = 0x01;
   956  0065' 1283               	bcf	3,5	;RP0=0, select bank0
   957  0066' 1303               	bcf	3,6	;RP1=0, select bank0
   958  0067' 0183'              	clrf	nrf_setup@data
   959  0068' 0A83'              	incf	nrf_setup@data,f
   960  0069'                    l1298:
   961                           
   962                           ;./nrf24l01.h: 188:         nrf_write_register(0x05, &data, 1);
   963  0069' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
   964  006A' 0088'              	movwf	nrf_write_register@data
   965  006B' 0189'              	clrf	nrf_write_register@len
   966  006C' 0A89'              	incf	nrf_write_register@len,f
   967  006D' 3005               	movlw	5
   968  006E' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
   969                           
   970                           ;./nrf24l01.h: 189:         data[0] = 0x26;
   971  0073' 3026               	movlw	38
   972  0074' 1283               	bcf	3,5	;RP0=0, select bank0
   973  0075' 1303               	bcf	3,6	;RP1=0, select bank0
   974  0076' 0083'              	movwf	nrf_setup@data
   975  0077'                    l1300:
   976                           
   977                           ;./nrf24l01.h: 190:         nrf_write_register(0x06, &data, 1);
   978  0077' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
   979  0078' 0088'              	movwf	nrf_write_register@data
   980  0079' 0189'              	clrf	nrf_write_register@len
   981  007A' 0A89'              	incf	nrf_write_register@len,f
   982  007B' 3006               	movlw	6
   983  007C' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
   984  0081'                    l1302:
   985                           
   986                           ;./nrf24l01.h: 191:         data[0] = payload_size;
   987  0081' 080C'              	movf	nrf_setup@payload_size,w
   988  0082' 1283               	bcf	3,5	;RP0=0, select bank0
   989  0083' 1303               	bcf	3,6	;RP1=0, select bank0
   990  0084' 0083'              	movwf	nrf_setup@data
   991                           
   992                           ;./nrf24l01.h: 192:         nrf_write_register(0x11, &data, 1);
   993  0085' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
   994  0086' 0088'              	movwf	nrf_write_register@data
   995  0087' 0189'              	clrf	nrf_write_register@len
   996  0088' 0A89'              	incf	nrf_write_register@len,f
   997  0089' 3011               	movlw	17
   998  008A' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
   999                           
  1000                           ;./nrf24l01.h: 194:         arrcpy(data, addr, sizeof(addr));
  1001  008F' 1283               	bcf	3,5	;RP0=0, select bank0
  1002  0090' 1303               	bcf	3,6	;RP1=0, select bank0
  1003  0091' 0802'              	movf	nrf_setup@addr,w
  1004  0092' 0080'              	movwf	arrcpy@src
  1005  0093' 0181'              	clrf	arrcpy@len
  1006  0094' 0A81'              	incf	arrcpy@len,f
  1007  0095' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
  1008  0096' 120A' 118A' 2000' 120A' 118A' 	fcall	_arrcpy
  1009                           
  1010                           ;./nrf24l01.h: 195:         nrf_write_register(0x0A, data, sizeof(addr));
  1011  009B' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
  1012  009C' 0088'              	movwf	nrf_write_register@data
  1013  009D' 0189'              	clrf	nrf_write_register@len
  1014  009E' 0A89'              	incf	nrf_write_register@len,f
  1015  009F' 300A               	movlw	10
  1016  00A0' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
  1017                           
  1018                           ;./nrf24l01.h: 197:         arrcpy(data, addr, sizeof(addr));
  1019  00A5' 1283               	bcf	3,5	;RP0=0, select bank0
  1020  00A6' 1303               	bcf	3,6	;RP1=0, select bank0
  1021  00A7' 0802'              	movf	nrf_setup@addr,w
  1022  00A8' 0080'              	movwf	arrcpy@src
  1023  00A9' 0181'              	clrf	arrcpy@len
  1024  00AA' 0A81'              	incf	arrcpy@len,f
  1025  00AB' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
  1026  00AC' 120A' 118A' 2000' 120A' 118A' 	fcall	_arrcpy
  1027                           
  1028                           ;./nrf24l01.h: 198:         nrf_write_register(0x10, data, sizeof(addr));
  1029  00B1' 3000'              	movlw	(low (nrf_setup@data| 0))& (0+255)
  1030  00B2' 0088'              	movwf	nrf_write_register@data
  1031  00B3' 0189'              	clrf	nrf_write_register@len
  1032  00B4' 0A89'              	incf	nrf_write_register@len,f
  1033  00B5' 3010               	movlw	16
  1034  00B6' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
  1035                           
  1036                           ;./nrf24l01.h: 200:         nrf_flush_rxtx();
  1037  00BB' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_flush_rxtx
  1038  00C0'                    l126:
  1039  00C0' 0008               	return
  1040  00C1'                    __end_of_nrf_setup:
  1041                           
  1042                           	psect	text2
  1043  0000'                    __ptext2:	
  1044 ;; *************** function _nrf_flush_rxtx *****************
  1045 ;; Defined at:
  1046 ;;		line 152 in file "./nrf24l01.h"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;		None
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  data            1   11[COMMON] unsigned char 
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  1    wreg      void 
  1053 ;; Registers used:
  1054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1060 ;;      Params:         0       0       0       0       0
  1061 ;;      Locals:         1       0       0       0       0
  1062 ;;      Temps:          0       0       0       0       0
  1063 ;;      Totals:         1       0       0       0       0
  1064 ;;Total ram usage:        1 bytes
  1065 ;; Hardware stack levels used: 1
  1066 ;; Hardware stack levels required when called: 3
  1067 ;; This function calls:
  1068 ;;		_nrf_write_command
  1069 ;;		_nrf_write_register
  1070 ;; This function is called by:
  1071 ;;		_nrf_setup
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075  0000'                    _nrf_flush_rxtx:	
  1076                           ;psect for function _nrf_flush_rxtx
  1077                           
  1078  0000'                    l1178:	
  1079                           ;incstack = 0
  1080                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1081                           
  1082                           
  1083                           ;./nrf24l01.h: 154:         uint8_t data = 0b01110000;
  1084  0000' 3070               	movlw	112
  1085  0001' 008B'              	movwf	nrf_flush_rxtx@data
  1086  0002'                    l1180:
  1087                           
  1088                           ;./nrf24l01.h: 155:         nrf_write_register(0x07, &data, 1);
  1089  0002' 3000'              	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1090  0003' 0088'              	movwf	nrf_write_register@data
  1091  0004' 0189'              	clrf	nrf_write_register@len
  1092  0005' 0A89'              	incf	nrf_write_register@len,f
  1093  0006' 3007               	movlw	7
  1094  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
  1095  000C'                    l1182:
  1096                           
  1097                           ;./nrf24l01.h: 156:         nrf_write_command(0b11100001);
  1098  000C' 30E1               	movlw	225
  1099  000D' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_command
  1100  0012'                    l1184:
  1101                           
  1102                           ;./nrf24l01.h: 157:         nrf_write_command(0b11100010);
  1103  0012' 30E2               	movlw	226
  1104  0013' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_command
  1105  0018'                    l123:
  1106  0018' 0008               	return
  1107  0019'                    __end_of_nrf_flush_rxtx:
  1108                           
  1109                           	psect	text3
  1110  0000'                    __ptext3:	
  1111 ;; *************** function _arrcpy *****************
  1112 ;; Defined at:
  1113 ;;		line 95 in file "./nrf24l01.h"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;  dst             1    wreg     PTR unsigned char 
  1116 ;;		 -> nrf_setup@data(5), 
  1117 ;;  src             1    0[COMMON] PTR unsigned char 
  1118 ;;		 -> RADIO_ADDR(5), 
  1119 ;;  len             1    1[COMMON] unsigned char 
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;  dst             1    4[COMMON] PTR unsigned char 
  1122 ;;		 -> nrf_setup@data(5), 
  1123 ;;  i               1    5[COMMON] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1133 ;;      Params:         2       0       0       0       0
  1134 ;;      Locals:         2       0       0       0       0
  1135 ;;      Temps:          2       0       0       0       0
  1136 ;;      Totals:         6       0       0       0       0
  1137 ;;Total ram usage:        6 bytes
  1138 ;; Hardware stack levels used: 1
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_nrf_setup
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146  0000'                    _arrcpy:	
  1147                           ;psect for function _arrcpy
  1148                           
  1149                           
  1150                           ;incstack = 0
  1151                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0+btemp+1]
  1152                           ;arrcpy@dst stored from wreg
  1153  0000' 0084'              	movwf	arrcpy@dst
  1154  0001'                    l1166:
  1155                           
  1156                           ;./nrf24l01.h: 95:     void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);./nrf24l01.h
      +                          : 96:     {;./nrf24l01.h: 97:         for (uint8_t i = 0; i < len; i++)
  1157  0001' 0185'              	clrf	arrcpy@i
  1158  0002' 2800'              	goto	l1172
  1159  0003'                    l1168:
  1160                           
  1161                           ;./nrf24l01.h: 98:         {;./nrf24l01.h: 99:             dst[i] = src[i];
  1162  0003' 0805'              	movf	arrcpy@i,w
  1163  0004' 0700'              	addwf	arrcpy@src,w
  1164  0005' 0082'              	movwf	??_arrcpy
  1165  0006' 0802'              	movf	??_arrcpy,w
  1166  0007' 0084               	movwf	4
  1167  0008' 1383               	bcf	3,7	;select IRP bank0
  1168  0009' 0800               	movf	0,w
  1169  000A' 00FF               	movwf	btemp+1
  1170  000B' 0805'              	movf	arrcpy@i,w
  1171  000C' 0704'              	addwf	arrcpy@dst,w
  1172  000D' 0083'              	movwf	??_arrcpy+1
  1173  000E' 0803'              	movf	??_arrcpy+1,w
  1174  000F' 0084               	movwf	4
  1175  0010' 087F               	movf	btemp+1,w
  1176  0011' 0080               	movwf	0
  1177  0012'                    l1170:
  1178                           
  1179                           ;./nrf24l01.h: 100:         }
  1180  0012' 3001               	movlw	1
  1181  0013' 00FF               	movwf	btemp+1
  1182  0014' 087F               	movf	btemp+1,w
  1183  0015' 0785'              	addwf	arrcpy@i,f
  1184  0016'                    l1172:
  1185  0016' 0801'              	movf	arrcpy@len,w
  1186  0017' 0205'              	subwf	arrcpy@i,w
  1187  0018' 1C03               	skipc
  1188  0019' 2800'              	goto	u431
  1189  001A' 2800'              	goto	u430
  1190  001B'                    u431:
  1191  001B' 2800'              	goto	l1168
  1192  001C'                    u430:
  1193  001C'                    l102:
  1194  001C' 0008               	return
  1195  001D'                    __end_of_arrcpy:
  1196                           
  1197                           	psect	text4
  1198  0000'                    __ptext4:	
  1199 ;; *************** function _nrf_set_rx_mode *****************
  1200 ;; Defined at:
  1201 ;;		line 204 in file "./nrf24l01.h"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;		None
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  config          1   11[COMMON] unsigned char 
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      void 
  1208 ;; Registers used:
  1209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1215 ;;      Params:         0       0       0       0       0
  1216 ;;      Locals:         1       0       0       0       0
  1217 ;;      Temps:          0       0       0       0       0
  1218 ;;      Totals:         1       0       0       0       0
  1219 ;;Total ram usage:        1 bytes
  1220 ;; Hardware stack levels used: 1
  1221 ;; Hardware stack levels required when called: 3
  1222 ;; This function calls:
  1223 ;;		_nrf_read_register
  1224 ;;		_nrf_write_register
  1225 ;; This function is called by:
  1226 ;;		_main
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230  0000'                    _nrf_set_rx_mode:	
  1231                           ;psect for function _nrf_set_rx_mode
  1232                           
  1233  0000'                    l1304:	
  1234                           ;incstack = 0
  1235                           ; Regs used in _nrf_set_rx_mode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1236                           
  1237                           
  1238                           ;./nrf24l01.h: 206:         uint8_t config;;./nrf24l01.h: 207:         nrf_read_register
      +                          (0x00, &config, 1);
  1239  0000' 3000'              	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1240  0001' 0088'              	movwf	nrf_read_register@data
  1241  0002' 0189'              	clrf	nrf_read_register@len
  1242  0003' 0A89'              	incf	nrf_read_register@len,f
  1243  0004' 3000               	movlw	0
  1244  0005' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_read_register
  1245  000A'                    l1306:
  1246                           
  1247                           ;./nrf24l01.h: 209:         RD2 = 1;
  1248  000A' 1283               	bcf	3,5	;RP0=0, select bank0
  1249  000B' 1303               	bcf	3,6	;RP1=0, select bank0
  1250  000C' 1508               	bsf	8,2	;volatile
  1251  000D'                    l1308:
  1252                           
  1253                           ;./nrf24l01.h: 211:         if (config & 0x01)
  1254  000D' 1C0B'              	btfss	nrf_set_rx_mode@config,0
  1255  000E' 2800'              	goto	u571
  1256  000F' 2800'              	goto	u570
  1257  0010'                    u571:
  1258  0010' 2800'              	goto	l129
  1259  0011'                    u570:
  1260  0011' 2800'              	goto	l130
  1261  0012'                    l129:
  1262                           
  1263                           ;./nrf24l01.h: 214:         config |= 0x01;
  1264  0012' 140B'              	bsf	nrf_set_rx_mode@config,0
  1265  0013'                    l1312:
  1266                           
  1267                           ;./nrf24l01.h: 215:         nrf_write_register(0x00, &config, 1);
  1268  0013' 3000'              	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1269  0014' 0088'              	movwf	nrf_write_register@data
  1270  0015' 0189'              	clrf	nrf_write_register@len
  1271  0016' 0A89'              	incf	nrf_write_register@len,f
  1272  0017' 3000               	movlw	0
  1273  0018' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
  1274  001D'                    l130:
  1275  001D' 0008               	return
  1276  001E'                    __end_of_nrf_set_rx_mode:
  1277                           
  1278                           	psect	text5
  1279  0000'                    __ptext5:	
  1280 ;; *************** function _nrf_read *****************
  1281 ;; Defined at:
  1282 ;;		line 261 in file "./nrf24l01.h"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  data            1    wreg     PTR unsigned char 
  1285 ;;		 -> main@data(3), 
  1286 ;;  len             1   11[COMMON] unsigned char 
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  data            1   12[COMMON] PTR unsigned char 
  1289 ;;		 -> main@data(3), 
  1290 ;;  clear           1   13[COMMON] unsigned char 
  1291 ;;  status          1    0        unsigned char 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  1    wreg      unsigned char 
  1294 ;; Registers used:
  1295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1301 ;;      Params:         1       0       0       0       0
  1302 ;;      Locals:         2       0       0       0       0
  1303 ;;      Temps:          0       0       0       0       0
  1304 ;;      Totals:         3       0       0       0       0
  1305 ;;Total ram usage:        3 bytes
  1306 ;; Hardware stack levels used: 1
  1307 ;; Hardware stack levels required when called: 3
  1308 ;; This function calls:
  1309 ;;		_nrf_read_register
  1310 ;;		_nrf_write_command
  1311 ;;		_nrf_write_register
  1312 ;; This function is called by:
  1313 ;;		_main
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317  0000'                    _nrf_read:	
  1318                           ;psect for function _nrf_read
  1319                           
  1320                           
  1321                           ;incstack = 0
  1322                           ; Regs used in _nrf_read: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1323                           ;nrf_read@data stored from wreg
  1324  0000' 008C'              	movwf	nrf_read@data
  1325  0001'                    l1334:
  1326  0001' 080C'              	movf	nrf_read@data,w
  1327  0002' 0088'              	movwf	nrf_read_register@data
  1328  0003' 080B'              	movf	nrf_read@len,w
  1329  0004' 0089'              	movwf	nrf_read_register@len
  1330  0005' 3061               	movlw	97
  1331  0006' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_read_register
  1332  000B'                    l1336:
  1333                           
  1334                           ;./nrf24l01.h: 266:         nrf_write_command(0b11100010);
  1335  000B' 30E2               	movlw	226
  1336  000C' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_command
  1337  0011'                    l1338:
  1338                           
  1339                           ;./nrf24l01.h: 267:         uint8_t clear = 0x40;
  1340  0011' 3040               	movlw	64
  1341  0012' 008D'              	movwf	nrf_read@clear
  1342  0013'                    l1340:
  1343                           
  1344                           ;./nrf24l01.h: 268:         nrf_write_register(0x07, &clear, 1);
  1345  0013' 3000'              	movlw	(low (nrf_read@clear| 0))& (0+255)
  1346  0014' 0088'              	movwf	nrf_write_register@data
  1347  0015' 0189'              	clrf	nrf_write_register@len
  1348  0016' 0A89'              	incf	nrf_write_register@len,f
  1349  0017' 3007               	movlw	7
  1350  0018' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_register
  1351  001D'                    l145:
  1352  001D' 0008               	return
  1353  001E'                    __end_of_nrf_read:
  1354                           
  1355                           	psect	text6
  1356  0000'                    __ptext6:	
  1357 ;; *************** function _nrf_write_register *****************
  1358 ;; Defined at:
  1359 ;;		line 119 in file "./nrf24l01.h"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  reg             1    wreg     unsigned char 
  1362 ;;  data            1    8[COMMON] PTR unsigned char 
  1363 ;;		 -> nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1364 ;;		 -> nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1365 ;;  len             1    9[COMMON] unsigned char 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  reg             1   10[COMMON] unsigned char 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      unsigned char 
  1370 ;; Registers used:
  1371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1377 ;;      Params:         2       0       0       0       0
  1378 ;;      Locals:         1       0       0       0       0
  1379 ;;      Temps:          0       0       0       0       0
  1380 ;;      Totals:         3       0       0       0       0
  1381 ;;Total ram usage:        3 bytes
  1382 ;; Hardware stack levels used: 1
  1383 ;; Hardware stack levels required when called: 2
  1384 ;; This function calls:
  1385 ;;		_nrf_command
  1386 ;; This function is called by:
  1387 ;;		_nrf_flush_rxtx
  1388 ;;		_nrf_setup
  1389 ;;		_nrf_set_rx_mode
  1390 ;;		_nrf_read
  1391 ;;		_nrf_write_payload
  1392 ;;		_nrf_set_tx_mode
  1393 ;;		_nrf_send
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397  0000'                    _nrf_write_register:	
  1398                           ;psect for function _nrf_write_register
  1399                           
  1400                           
  1401                           ;incstack = 0
  1402                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1403                           ;nrf_write_register@reg stored from wreg
  1404  0000' 008A'              	movwf	nrf_write_register@reg
  1405  0001'                    l1144:
  1406                           
  1407                           ;./nrf24l01.h: 119:     uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t l
      +                          en);./nrf24l01.h: 120:     {;./nrf24l01.h: 121:         return nrf_command(reg | 0b00100
      +                          000, data, len);
  1408  0001' 0808'              	movf	nrf_write_register@data,w
  1409  0002' 0081'              	movwf	nrf_command@data
  1410  0003' 0809'              	movf	nrf_write_register@len,w
  1411  0004' 0082'              	movwf	nrf_command@len
  1412  0005' 080A'              	movf	nrf_write_register@reg,w
  1413  0006' 3820               	iorlw	32
  1414  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_command
  1415  000C'                    l111:
  1416  000C' 0008               	return
  1417  000D'                    __end_of_nrf_write_register:
  1418                           
  1419                           	psect	text7
  1420  0000'                    __ptext7:	
  1421 ;; *************** function _nrf_read_register *****************
  1422 ;; Defined at:
  1423 ;;		line 125 in file "./nrf24l01.h"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;  reg             1    wreg     unsigned char 
  1426 ;;  data            1    8[COMMON] PTR unsigned char 
  1427 ;;		 -> main@data(3), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1428 ;;  len             1    9[COMMON] unsigned char 
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;  reg             1   10[COMMON] unsigned char 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      unsigned char 
  1433 ;; Registers used:
  1434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1440 ;;      Params:         2       0       0       0       0
  1441 ;;      Locals:         1       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0
  1443 ;;      Totals:         3       0       0       0       0
  1444 ;;Total ram usage:        3 bytes
  1445 ;; Hardware stack levels used: 1
  1446 ;; Hardware stack levels required when called: 2
  1447 ;; This function calls:
  1448 ;;		_nrf_command
  1449 ;; This function is called by:
  1450 ;;		_nrf_set_rx_mode
  1451 ;;		_nrf_read
  1452 ;;		_nrf_set_tx_mode
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456  0000'                    _nrf_read_register:	
  1457                           ;psect for function _nrf_read_register
  1458                           
  1459                           
  1460                           ;incstack = 0
  1461                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1462                           ;nrf_read_register@reg stored from wreg
  1463  0000' 008A'              	movwf	nrf_read_register@reg
  1464  0001'                    l1174:
  1465                           
  1466                           ;./nrf24l01.h: 125:     uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t le
      +                          n);./nrf24l01.h: 126:     {;./nrf24l01.h: 127:         return nrf_command(reg | 0b000000
      +                          00, data, len);
  1467  0001' 0808'              	movf	nrf_read_register@data,w
  1468  0002' 0081'              	movwf	nrf_command@data
  1469  0003' 0809'              	movf	nrf_read_register@len,w
  1470  0004' 0082'              	movwf	nrf_command@len
  1471  0005' 080A'              	movf	nrf_read_register@reg,w
  1472  0006' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_command
  1473  000B'                    l114:
  1474  000B' 0008               	return
  1475  000C'                    __end_of_nrf_read_register:
  1476                           
  1477                           	psect	text8
  1478  0000'                    __ptext8:	
  1479 ;; *************** function _nrf_command *****************
  1480 ;; Defined at:
  1481 ;;		line 105 in file "./nrf24l01.h"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  NRF_command     1    wreg     unsigned char 
  1484 ;;  data            1    1[COMMON] PTR unsigned char 
  1485 ;;		 -> main@data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1486 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1487 ;;  len             1    2[COMMON] unsigned char 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  NRF_command     1    5[COMMON] unsigned char 
  1490 ;;  i               1    7[COMMON] unsigned char 
  1491 ;;  status          1    6[COMMON] unsigned char 
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  1    wreg      unsigned char 
  1494 ;; Registers used:
  1495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1501 ;;      Params:         2       0       0       0       0
  1502 ;;      Locals:         3       0       0       0       0
  1503 ;;      Temps:          2       0       0       0       0
  1504 ;;      Totals:         7       0       0       0       0
  1505 ;;Total ram usage:        7 bytes
  1506 ;; Hardware stack levels used: 1
  1507 ;; Hardware stack levels required when called: 1
  1508 ;; This function calls:
  1509 ;;		_SPI_write
  1510 ;; This function is called by:
  1511 ;;		_nrf_write_register
  1512 ;;		_nrf_read_register
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516  0000'                    _nrf_command:	
  1517                           ;psect for function _nrf_command
  1518                           
  1519                           
  1520                           ;incstack = 0
  1521                           ; Regs used in _nrf_command: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1522                           ;nrf_command@NRF_command stored from wreg
  1523  0000' 0085'              	movwf	nrf_command@NRF_command
  1524  0001'                    l1124:
  1525                           
  1526                           ;./nrf24l01.h: 105:     uint8_t nrf_command(uint8_t NRF_command, uint8_t *data, uint8_t 
      +                          len);./nrf24l01.h: 106:     {;./nrf24l01.h: 107:         RD3 = 0;
  1527  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  1528  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  1529  0003' 1188               	bcf	8,3	;volatile
  1530  0004'                    l1126:
  1531                           
  1532                           ;./nrf24l01.h: 109:         uint8_t status = SPI_write(NRF_command);
  1533  0004' 0805'              	movf	nrf_command@NRF_command,w
  1534  0005' 120A' 118A' 2000' 120A' 118A' 	fcall	_SPI_write
  1535  000A' 0086'              	movwf	nrf_command@status
  1536  000B'                    l1128:
  1537                           
  1538                           ;./nrf24l01.h: 110:         for (uint8_t i = 0; i < len; i++)
  1539  000B' 0187'              	clrf	nrf_command@i
  1540  000C' 2800'              	goto	l1134
  1541  000D'                    l1130:
  1542                           
  1543                           ;./nrf24l01.h: 111:             data[i] = SPI_write(data[i]);
  1544  000D' 0807'              	movf	nrf_command@i,w
  1545  000E' 0701'              	addwf	nrf_command@data,w
  1546  000F' 0083'              	movwf	??_nrf_command
  1547  0010' 0803'              	movf	??_nrf_command,w
  1548  0011' 0084               	movwf	4
  1549  0012' 1383               	bcf	3,7	;select IRP bank0
  1550  0013' 0800               	movf	0,w
  1551  0014' 120A' 118A' 2000' 120A' 118A' 	fcall	_SPI_write
  1552  0019' 00FF               	movwf	btemp+1
  1553  001A' 0807'              	movf	nrf_command@i,w
  1554  001B' 0701'              	addwf	nrf_command@data,w
  1555  001C' 0084'              	movwf	??_nrf_command+1
  1556  001D' 0804'              	movf	??_nrf_command+1,w
  1557  001E' 0084               	movwf	4
  1558  001F' 087F               	movf	btemp+1,w
  1559  0020' 1383               	bcf	3,7	;select IRP bank0
  1560  0021' 0080               	movwf	0
  1561  0022'                    l1132:
  1562  0022' 3001               	movlw	1
  1563  0023' 00FF               	movwf	btemp+1
  1564  0024' 087F               	movf	btemp+1,w
  1565  0025' 0787'              	addwf	nrf_command@i,f
  1566  0026'                    l1134:
  1567  0026' 0802'              	movf	nrf_command@len,w
  1568  0027' 0207'              	subwf	nrf_command@i,w
  1569  0028' 1C03               	skipc
  1570  0029' 2800'              	goto	u381
  1571  002A' 2800'              	goto	u380
  1572  002B'                    u381:
  1573  002B' 2800'              	goto	l1130
  1574  002C'                    u380:
  1575  002C'                    l107:
  1576                           
  1577                           ;./nrf24l01.h: 113:         RD3 = 1;
  1578  002C' 1283               	bcf	3,5	;RP0=0, select bank0
  1579  002D' 1303               	bcf	3,6	;RP1=0, select bank0
  1580  002E' 1588               	bsf	8,3	;volatile
  1581  002F'                    l1136:
  1582                           
  1583                           ;./nrf24l01.h: 115:         return status;
  1584  002F' 0806'              	movf	nrf_command@status,w
  1585  0030'                    l108:
  1586  0030' 0008               	return
  1587  0031'                    __end_of_nrf_command:
  1588                           
  1589                           	psect	text9
  1590  0000'                    __ptext9:	
  1591 ;; *************** function _nrf_data_available *****************
  1592 ;; Defined at:
  1593 ;;		line 236 in file "./nrf24l01.h"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;		None
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;  status          1    3[COMMON] unsigned char 
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      unsigned char 
  1600 ;; Registers used:
  1601 ;;		wreg, pclath, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1607 ;;      Params:         0       0       0       0       0
  1608 ;;      Locals:         1       0       0       0       0
  1609 ;;      Temps:          0       0       0       0       0
  1610 ;;      Totals:         1       0       0       0       0
  1611 ;;Total ram usage:        1 bytes
  1612 ;; Hardware stack levels used: 1
  1613 ;; Hardware stack levels required when called: 2
  1614 ;; This function calls:
  1615 ;;		_nrf_write_command
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621  0000'                    _nrf_data_available:	
  1622                           ;psect for function _nrf_data_available
  1623                           
  1624  0000'                    l1328:	
  1625                           ;incstack = 0
  1626                           ; Regs used in _nrf_data_available: [wreg+pclath+cstack]
  1627                           
  1628                           
  1629                           ;./nrf24l01.h: 238:         uint8_t status = nrf_write_command(0b11111111);
  1630  0000' 30FF               	movlw	255
  1631  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_nrf_write_command
  1632  0006' 0083'              	movwf	nrf_data_available@status
  1633  0007'                    l1330:
  1634                           
  1635                           ;./nrf24l01.h: 239:         return (status & 0x40) != 0;
  1636  0007' 1B03'              	btfsc	nrf_data_available@status,6
  1637  0008' 2800'              	goto	u591
  1638  0009' 2800'              	goto	u590
  1639  000A'                    u591:
  1640  000A' 3001               	movlw	1
  1641  000B' 2800'              	goto	u600
  1642  000C'                    u590:
  1643  000C' 3000               	movlw	0
  1644  000D'                    u600:
  1645  000D'                    l137:
  1646  000D' 0008               	return
  1647  000E'                    __end_of_nrf_data_available:
  1648                           
  1649                           	psect	text10
  1650  0000'                    __ptext10:	
  1651 ;; *************** function _nrf_write_command *****************
  1652 ;; Defined at:
  1653 ;;		line 140 in file "./nrf24l01.h"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  NRF_command     1    wreg     unsigned char 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;  NRF_command     1    1[COMMON] unsigned char 
  1658 ;;  status          1    2[COMMON] unsigned char 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      unsigned char 
  1661 ;; Registers used:
  1662 ;;		wreg, pclath, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1668 ;;      Params:         0       0       0       0       0
  1669 ;;      Locals:         2       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0
  1671 ;;      Totals:         2       0       0       0       0
  1672 ;;Total ram usage:        2 bytes
  1673 ;; Hardware stack levels used: 1
  1674 ;; Hardware stack levels required when called: 1
  1675 ;; This function calls:
  1676 ;;		_SPI_write
  1677 ;; This function is called by:
  1678 ;;		_nrf_flush_rxtx
  1679 ;;		_nrf_data_available
  1680 ;;		_nrf_read
  1681 ;;		_nrf_send
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685  0000'                    _nrf_write_command:	
  1686                           ;psect for function _nrf_write_command
  1687                           
  1688                           
  1689                           ;incstack = 0
  1690                           ; Regs used in _nrf_write_command: [wreg+pclath+cstack]
  1691                           ;nrf_write_command@NRF_command stored from wreg
  1692  0000' 0081'              	movwf	nrf_write_command@NRF_command
  1693  0001'                    l1148:
  1694                           
  1695                           ;./nrf24l01.h: 140:     uint8_t nrf_write_command(uint8_t NRF_command);./nrf24l01.h: 141
      +                          :     {;./nrf24l01.h: 142:         RD3 = 0;
  1696  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  1697  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  1698  0003' 1188               	bcf	8,3	;volatile
  1699  0004'                    l1150:
  1700                           
  1701                           ;./nrf24l01.h: 143:         uint8_t status = SPI_write(NRF_command);
  1702  0004' 0801'              	movf	nrf_write_command@NRF_command,w
  1703  0005' 120A' 118A' 2000' 120A' 118A' 	fcall	_SPI_write
  1704  000A' 0082'              	movwf	nrf_write_command@status
  1705  000B'                    l1152:
  1706                           
  1707                           ;./nrf24l01.h: 144:         RD3 = 1;
  1708  000B' 1283               	bcf	3,5	;RP0=0, select bank0
  1709  000C' 1303               	bcf	3,6	;RP1=0, select bank0
  1710  000D' 1588               	bsf	8,3	;volatile
  1711  000E'                    l1154:
  1712                           
  1713                           ;./nrf24l01.h: 145:         return status;
  1714  000E' 0802'              	movf	nrf_write_command@status,w
  1715  000F'                    l120:
  1716  000F' 0008               	return
  1717  0010'                    __end_of_nrf_write_command:
  1718                           
  1719                           	psect	text11
  1720  0000'                    __ptext11:	
  1721 ;; *************** function _SPI_write *****************
  1722 ;; Defined at:
  1723 ;;		line 26 in file "./spi.h"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  data            1    wreg     unsigned char 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  data            1    0[COMMON] unsigned char 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      unsigned char 
  1730 ;; Registers used:
  1731 ;;		wreg
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1737 ;;      Params:         0       0       0       0       0
  1738 ;;      Locals:         1       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0
  1740 ;;      Totals:         1       0       0       0       0
  1741 ;;Total ram usage:        1 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; This function calls:
  1744 ;;		Nothing
  1745 ;; This function is called by:
  1746 ;;		_nrf_command
  1747 ;;		_nrf_write_command
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751  0000'                    _SPI_write:	
  1752                           ;psect for function _SPI_write
  1753                           
  1754                           
  1755                           ;incstack = 0
  1756                           ; Regs used in _SPI_write: [wreg]
  1757                           ;SPI_write@data stored from wreg
  1758  0000' 0080'              	movwf	SPI_write@data
  1759  0001'                    l1118:
  1760                           
  1761                           ;./spi.h: 26:     uint8_t SPI_write(uint8_t data);./spi.h: 27:     {;./spi.h: 28:       
      +                            SSPBUF = data;
  1762  0001' 0800'              	movf	SPI_write@data,w
  1763  0002' 1283               	bcf	3,5	;RP0=0, select bank0
  1764  0003' 1303               	bcf	3,6	;RP1=0, select bank0
  1765  0004' 0093               	movwf	19	;volatile
  1766  0005'                    l93:	
  1767                           ;./spi.h: 30:             ;
  1768                           
  1769                           
  1770                           ;./spi.h: 29:         while (!BF)
  1771  0005' 1683               	bsf	3,5	;RP0=1, select bank1
  1772  0006' 1303               	bcf	3,6	;RP1=0, select bank1
  1773  0007' 1C14               	btfss	20,0	;volatile
  1774  0008' 2800'              	goto	u371
  1775  0009' 2800'              	goto	u370
  1776  000A'                    u371:
  1777  000A' 2800'              	goto	l93
  1778  000B'                    u370:
  1779  000B'                    l1120:
  1780                           
  1781                           ;./spi.h: 31:         return SSPBUF;
  1782  000B' 1283               	bcf	3,5	;RP0=0, select bank0
  1783  000C' 1303               	bcf	3,6	;RP1=0, select bank0
  1784  000D' 0813               	movf	19,w	;volatile
  1785  000E'                    l96:
  1786  000E' 0008               	return
  1787  000F'                    __end_of_SPI_write:
  1788                           
  1789                           	psect	text12
  1790  0000'                    __ptext12:	
  1791 ;; *************** function _UART_printf *****************
  1792 ;; Defined at:
  1793 ;;		line 51 in file "./uart.h"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;  fmt             1    wreg     PTR const unsigned char 
  1796 ;;		 -> STR_3(9), 
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;  fmt             1   65[BANK0 ] PTR const unsigned char 
  1799 ;;		 -> STR_3(9), 
  1800 ;;  buf            64    0[BANK0 ] unsigned char [64]
  1801 ;;  args            1   64[BANK0 ] PTR void [1]
  1802 ;;		 -> ?_UART_printf(1), 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1812 ;;      Params:         1       0       0       0       0
  1813 ;;      Locals:         0      66       0       0       0
  1814 ;;      Temps:          0       0       0       0       0
  1815 ;;      Totals:         1      66       0       0       0
  1816 ;;Total ram usage:       67 bytes
  1817 ;; Hardware stack levels used: 1
  1818 ;; Hardware stack levels required when called: 2
  1819 ;; This function calls:
  1820 ;;		_UART_write_text
  1821 ;;		_vsnprintf
  1822 ;; This function is called by:
  1823 ;;		_main
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827  0000'                    _UART_printf:	
  1828                           ;psect for function _UART_printf
  1829                           
  1830                           
  1831                           ;incstack = 0
  1832                           ; Regs used in _UART_printf: [allreg]
  1833                           ;UART_printf@fmt stored from wreg
  1834  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1835  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1836  0002' 00C1'              	movwf	UART_printf@fmt
  1837  0003'                    l1244:
  1838                           
  1839                           ;./uart.h: 51:  void UART_printf(const char *fmt, ...);./uart.h: 52:  {;./uart.h: 53:   
      +                          char buf[64];;./uart.h: 54:   va_list args;;./uart.h: 55:   *args = __va_start();
  1840  0003' 3000'              	movlw	(low (?_UART_printf| 0))& (0+255)
  1841  0004' 00C0'              	movwf	UART_printf@args
  1842  0005'                    l1246:
  1843                           
  1844                           ;./uart.h: 56:   vsnprintf(buf, 64, fmt, args);
  1845  0005' 3000'              	movlw	(low (UART_printf@buf| 0))& (0+255)
  1846  0006' 0080'              	movwf	?_vsnprintf
  1847  0007' 3000               	movlw	0
  1848  0008' 0081'              	movwf	?_vsnprintf+1
  1849  0009' 3040               	movlw	64
  1850  000A' 0082'              	movwf	?_vsnprintf+2
  1851  000B' 3000               	movlw	0
  1852  000C' 0083'              	movwf	?_vsnprintf+3
  1853  000D' 0841'              	movf	UART_printf@fmt,w
  1854  000E' 0084'              	movwf	?_vsnprintf+4
  1855  000F' 3000               	movlw	0
  1856  0010' 1D03               	btfss	3,2
  1857  0011' 3080               	movlw	128
  1858  0012' 0085'              	movwf	?_vsnprintf+5
  1859  0013' 3000'              	movlw	(low (UART_printf@args| 0))& (0+255)
  1860  0014' 0086'              	movwf	?_vsnprintf+6
  1861  0015' 3000               	movlw	0
  1862  0016' 0087'              	movwf	?_vsnprintf+7
  1863  0017' 120A' 118A' 2000' 120A' 118A' 	fcall	_vsnprintf
  1864  001C'                    l1248:
  1865                           
  1866                           ;./uart.h: 58:   UART_write_text(buf);
  1867  001C' 3000'              	movlw	(low (UART_printf@buf| 0))& (0+255)
  1868  001D' 0081'              	movwf	UART_write_text@text
  1869  001E' 3000               	movlw	0
  1870  001F' 0082'              	movwf	UART_write_text@text+1
  1871  0020' 120A' 118A' 2000' 120A' 118A' 	fcall	_UART_write_text
  1872  0025'                    l78:
  1873  0025' 0008               	return
  1874  0026'                    __end_of_UART_printf:
  1875                           
  1876                           	psect	text13
  1877  0000'                    __ptext13:	
  1878 ;; *************** function _UART_write_text *****************
  1879 ;; Defined at:
  1880 ;;		line 38 in file "./uart.h"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  text            2    1[COMMON] PTR unsigned char 
  1883 ;;		 -> STR_2(8), UART_printf@buf(64), 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  i               2    6[COMMON] int 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1895 ;;      Params:         2       0       0       0       0
  1896 ;;      Locals:         2       0       0       0       0
  1897 ;;      Temps:          3       0       0       0       0
  1898 ;;      Totals:         7       0       0       0       0
  1899 ;;Total ram usage:        7 bytes
  1900 ;; Hardware stack levels used: 1
  1901 ;; Hardware stack levels required when called: 1
  1902 ;; This function calls:
  1903 ;;		_UART_write
  1904 ;; This function is called by:
  1905 ;;		_UART_printf
  1906 ;;		_main
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910  0000'                    _UART_write_text:	
  1911                           ;psect for function _UART_write_text
  1912                           
  1913  0000'                    l1158:	
  1914                           ;incstack = 0
  1915                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1916                           
  1917                           
  1918                           ;./uart.h: 38:  void UART_write_text(char *text);./uart.h: 39:  {;./uart.h: 40:   for (i
      +                          nt i = 0; text[i] != '\0'; i++)
  1919  0000' 0186'              	clrf	UART_write_text@i
  1920  0001' 0187'              	clrf	UART_write_text@i+1
  1921  0002' 2800'              	goto	l1164
  1922  0003'                    l1160:
  1923                           
  1924                           ;./uart.h: 41:    UART_write(text[i]);
  1925  0003' 0806'              	movf	UART_write_text@i,w
  1926  0004' 0701'              	addwf	UART_write_text@text,w
  1927  0005' 0084'              	movwf	??_UART_write_text+1
  1928  0006' 0802'              	movf	UART_write_text@text+1,w
  1929  0007' 0083'              	movwf	??_UART_write_text
  1930  0008' 1803               	skipnc
  1931  0009' 0A83'              	incf	??_UART_write_text,f
  1932  000A' 1F86'              	btfss	UART_write_text@i,7
  1933  000B' 2800'              	goto	u400
  1934  000C' 0383'              	decf	??_UART_write_text,f
  1935  000D'                    u400:
  1936  000D' 0803'              	movf	??_UART_write_text,w
  1937  000E' 0085'              	movwf	??_UART_write_text+2
  1938  000F' 0805'              	movf	??_UART_write_text+2,w
  1939  0010' 1283               	bcf	3,5	;RP0=0, select bank0
  1940  0011' 1303               	bcf	3,6	;RP1=0, select bank0
  1941  0012' 00FF               	movwf	btemp+1
  1942  0013' 0804'              	movf	??_UART_write_text+1,w
  1943  0014' 0084               	movwf	4
  1944  0015' 120A' 118A' 2000' 120A' 118A' 	fcall	stringtab
  1945  001A' 120A' 118A' 2000' 120A' 118A' 	fcall	_UART_write
  1946  001F'                    l1162:
  1947  001F' 3001               	movlw	1
  1948  0020' 0786'              	addwf	UART_write_text@i,f
  1949  0021' 1803               	skipnc
  1950  0022' 0A87'              	incf	UART_write_text@i+1,f
  1951  0023' 3000               	movlw	0
  1952  0024' 0787'              	addwf	UART_write_text@i+1,f
  1953  0025'                    l1164:
  1954  0025' 0806'              	movf	UART_write_text@i,w
  1955  0026' 0701'              	addwf	UART_write_text@text,w
  1956  0027' 0084'              	movwf	??_UART_write_text+1
  1957  0028' 0802'              	movf	UART_write_text@text+1,w
  1958  0029' 0083'              	movwf	??_UART_write_text
  1959  002A' 1803               	skipnc
  1960  002B' 0A83'              	incf	??_UART_write_text,f
  1961  002C' 1F86'              	btfss	UART_write_text@i,7
  1962  002D' 2800'              	goto	u410
  1963  002E' 0383'              	decf	??_UART_write_text,f
  1964  002F'                    u410:
  1965  002F' 0803'              	movf	??_UART_write_text,w
  1966  0030' 0085'              	movwf	??_UART_write_text+2
  1967  0031' 0805'              	movf	??_UART_write_text+2,w
  1968  0032' 1283               	bcf	3,5	;RP0=0, select bank0
  1969  0033' 1303               	bcf	3,6	;RP1=0, select bank0
  1970  0034' 00FF               	movwf	btemp+1
  1971  0035' 0804'              	movf	??_UART_write_text+1,w
  1972  0036' 0084               	movwf	4
  1973  0037' 120A' 118A' 2000' 120A' 118A' 	fcall	stringtab
  1974  003C' 3A00               	xorlw	0
  1975  003D' 1D03               	skipz
  1976  003E' 2800'              	goto	u421
  1977  003F' 2800'              	goto	u420
  1978  0040'                    u421:
  1979  0040' 2800'              	goto	l1160
  1980  0041'                    u420:
  1981  0041'                    l69:
  1982  0041' 0008               	return
  1983  0042'                    __end_of_UART_write_text:
  1984                           
  1985                           	psect	text14
  1986  0000'                    __ptext14:	
  1987 ;; *************** function _UART_write *****************
  1988 ;; Defined at:
  1989 ;;		line 31 in file "./uart.h"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;  data            1    wreg     unsigned char 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  data            1    0[COMMON] unsigned char 
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2003 ;;      Params:         0       0       0       0       0
  2004 ;;      Locals:         1       0       0       0       0
  2005 ;;      Temps:          0       0       0       0       0
  2006 ;;      Totals:         1       0       0       0       0
  2007 ;;Total ram usage:        1 bytes
  2008 ;; Hardware stack levels used: 1
  2009 ;; This function calls:
  2010 ;;		Nothing
  2011 ;; This function is called by:
  2012 ;;		_UART_write_text
  2013 ;;		_UART_write_array
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017  0000'                    _UART_write:	
  2018                           ;psect for function _UART_write
  2019                           
  2020                           
  2021                           ;incstack = 0
  2022                           ; Regs used in _UART_write: [wreg]
  2023                           ;UART_write@data stored from wreg
  2024  0000' 0080'              	movwf	UART_write@data
  2025  0001'                    l1140:
  2026  0001'                    l60:	
  2027                           ;./uart.h: 34:    ;
  2028                           
  2029                           
  2030                           ;./uart.h: 33:   while (!TRMT)
  2031  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  2032  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  2033  0003' 1C98               	btfss	24,1	;volatile
  2034  0004' 2800'              	goto	u391
  2035  0005' 2800'              	goto	u390
  2036  0006'                    u391:
  2037  0006' 2800'              	goto	l60
  2038  0007'                    u390:
  2039  0007'                    l1142:
  2040                           
  2041                           ;./uart.h: 35:   TXREG = data;
  2042  0007' 0800'              	movf	UART_write@data,w
  2043  0008' 1283               	bcf	3,5	;RP0=0, select bank0
  2044  0009' 1303               	bcf	3,6	;RP1=0, select bank0
  2045  000A' 0099               	movwf	25	;volatile
  2046  000B'                    l63:
  2047  000B' 0008               	return
  2048  000C'                    __end_of_UART_write:
  2049                           
  2050                           	psect	text15
  2051  0000'                    __ptext15:	
  2052 ;; *************** function _UART_init *****************
  2053 ;; Defined at:
  2054 ;;		line 19 in file "./uart.h"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  baudrate        4    6[BANK0 ] const long 
  2057 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2069 ;;      Params:         0       8       0       0       0
  2070 ;;      Locals:         0       0       0       0       0
  2071 ;;      Temps:          0      12       0       0       0
  2072 ;;      Totals:         0      20       0       0       0
  2073 ;;Total ram usage:       20 bytes
  2074 ;; Hardware stack levels used: 1
  2075 ;; Hardware stack levels required when called: 1
  2076 ;; This function calls:
  2077 ;;		___aldiv
  2078 ;; This function is called by:
  2079 ;;		_main
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083  0000'                    _UART_init:	
  2084                           ;psect for function _UART_init
  2085                           
  2086  0000'                    l1228:	
  2087                           ;incstack = 0
  2088                           ; Regs used in _UART_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2089                           
  2090                           
  2091                           ;./uart.h: 19:  void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 20:  
      +                          {;./uart.h: 21:   BRGH = 1;
  2092  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  2093  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  2094  0002' 1518               	bsf	24,2	;volatile
  2095  0003'                    l1230:
  2096                           
  2097                           ;./uart.h: 22:   SPBRG = (_XTAL_FREQ - baudrate * 16) / (baudrate * 16);
  2098  0003' 1283               	bcf	3,5	;RP0=0, select bank0
  2099  0004' 1303               	bcf	3,6	;RP1=0, select bank0
  2100  0005' 0806'              	movf	UART_init@baudrate,w
  2101  0006' 008E'              	movwf	??_UART_init
  2102  0007' 0807'              	movf	UART_init@baudrate+1,w
  2103  0008' 008F'              	movwf	??_UART_init+1
  2104  0009' 0808'              	movf	UART_init@baudrate+2,w
  2105  000A' 0090'              	movwf	??_UART_init+2
  2106  000B' 0809'              	movf	UART_init@baudrate+3,w
  2107  000C' 0091'              	movwf	??_UART_init+3
  2108  000D' 3004               	movlw	4
  2109  000E'                    u545:
  2110  000E' 1003               	clrc
  2111  000F' 0D8E'              	rlf	??_UART_init,f
  2112  0010' 0D8F'              	rlf	??_UART_init+1,f
  2113  0011' 0D90'              	rlf	??_UART_init+2,f
  2114  0012' 0D91'              	rlf	??_UART_init+3,f
  2115  0013'                    u540:
  2116  0013' 3EFF               	addlw	-1
  2117  0014' 1D03               	skipz
  2118  0015' 2800'              	goto	u545
  2119  0016' 0811'              	movf	??_UART_init+3,w
  2120  0017' 0083'              	movwf	___aldiv@divisor+3
  2121  0018' 0810'              	movf	??_UART_init+2,w
  2122  0019' 0082'              	movwf	___aldiv@divisor+2
  2123  001A' 080F'              	movf	??_UART_init+1,w
  2124  001B' 0081'              	movwf	___aldiv@divisor+1
  2125  001C' 080E'              	movf	??_UART_init,w
  2126  001D' 0080'              	movwf	___aldiv@divisor
  2127  001E' 0806'              	movf	UART_init@baudrate,w
  2128  001F' 0092'              	movwf	??_UART_init+4
  2129  0020' 0807'              	movf	UART_init@baudrate+1,w
  2130  0021' 0093'              	movwf	??_UART_init+5
  2131  0022' 0808'              	movf	UART_init@baudrate+2,w
  2132  0023' 0094'              	movwf	??_UART_init+6
  2133  0024' 0809'              	movf	UART_init@baudrate+3,w
  2134  0025' 0095'              	movwf	??_UART_init+7
  2135  0026' 3004               	movlw	4
  2136  0027'                    u555:
  2137  0027' 1003               	clrc
  2138  0028' 0D92'              	rlf	??_UART_init+4,f
  2139  0029' 0D93'              	rlf	??_UART_init+5,f
  2140  002A' 0D94'              	rlf	??_UART_init+6,f
  2141  002B' 0D95'              	rlf	??_UART_init+7,f
  2142  002C'                    u550:
  2143  002C' 3EFF               	addlw	-1
  2144  002D' 1D03               	skipz
  2145  002E' 2800'              	goto	u555
  2146  002F' 080A'              	movf	UART_init@_XTAL_FREQ,w
  2147  0030' 0096'              	movwf	??_UART_init+8
  2148  0031' 080B'              	movf	UART_init@_XTAL_FREQ+1,w
  2149  0032' 0097'              	movwf	??_UART_init+9
  2150  0033' 080C'              	movf	UART_init@_XTAL_FREQ+2,w
  2151  0034' 0098'              	movwf	??_UART_init+10
  2152  0035' 080D'              	movf	UART_init@_XTAL_FREQ+3,w
  2153  0036' 0099'              	movwf	??_UART_init+11
  2154  0037' 0812'              	movf	??_UART_init+4,w
  2155  0038' 0296'              	subwf	??_UART_init+8,f
  2156  0039' 0813'              	movf	??_UART_init+5,w
  2157  003A' 1C03               	skipc
  2158  003B' 0F13'              	incfsz	??_UART_init+5,w
  2159  003C' 2800'              	goto	u561
  2160  003D' 2800'              	goto	u562
  2161  003E'                    u561:
  2162  003E' 0297'              	subwf	??_UART_init+9,f
  2163  003F'                    u562:
  2164  003F' 0814'              	movf	??_UART_init+6,w
  2165  0040' 1C03               	skipc
  2166  0041' 0F14'              	incfsz	??_UART_init+6,w
  2167  0042' 2800'              	goto	u563
  2168  0043' 2800'              	goto	u564
  2169  0044'                    u563:
  2170  0044' 0298'              	subwf	??_UART_init+10,f
  2171  0045'                    u564:
  2172  0045' 0815'              	movf	??_UART_init+7,w
  2173  0046' 1C03               	skipc
  2174  0047' 0F15'              	incfsz	??_UART_init+7,w
  2175  0048' 2800'              	goto	u565
  2176  0049' 2800'              	goto	u566
  2177  004A'                    u565:
  2178  004A' 0299'              	subwf	??_UART_init+11,f
  2179  004B'                    u566:
  2180  004B' 0819'              	movf	??_UART_init+11,w
  2181  004C' 0087'              	movwf	___aldiv@dividend+3
  2182  004D' 0818'              	movf	??_UART_init+10,w
  2183  004E' 0086'              	movwf	___aldiv@dividend+2
  2184  004F' 0817'              	movf	??_UART_init+9,w
  2185  0050' 0085'              	movwf	___aldiv@dividend+1
  2186  0051' 0816'              	movf	??_UART_init+8,w
  2187  0052' 0084'              	movwf	___aldiv@dividend
  2188  0053' 120A' 118A' 2000' 120A' 118A' 	fcall	___aldiv
  2189  0058' 0800'              	movf	?___aldiv,w
  2190  0059' 1683               	bsf	3,5	;RP0=1, select bank1
  2191  005A' 1303               	bcf	3,6	;RP1=0, select bank1
  2192  005B' 0099               	movwf	25	;volatile
  2193  005C'                    l1232:
  2194                           
  2195                           ;./uart.h: 23:   SYNC = 0;
  2196  005C' 1218               	bcf	24,4	;volatile
  2197  005D'                    l1234:
  2198                           
  2199                           ;./uart.h: 24:   SPEN = 1;
  2200  005D' 1283               	bcf	3,5	;RP0=0, select bank0
  2201  005E' 1303               	bcf	3,6	;RP1=0, select bank0
  2202  005F' 1798               	bsf	24,7	;volatile
  2203  0060'                    l1236:
  2204                           
  2205                           ;./uart.h: 25:   TRISC7 = 1;
  2206  0060' 1683               	bsf	3,5	;RP0=1, select bank1
  2207  0061' 1303               	bcf	3,6	;RP1=0, select bank1
  2208  0062' 1787               	bsf	7,7	;volatile
  2209  0063'                    l1238:
  2210                           
  2211                           ;./uart.h: 26:   TRISC6 = 1;
  2212  0063' 1707               	bsf	7,6	;volatile
  2213  0064'                    l1240:
  2214                           
  2215                           ;./uart.h: 27:   CREN = 1;
  2216  0064' 1283               	bcf	3,5	;RP0=0, select bank0
  2217  0065' 1303               	bcf	3,6	;RP1=0, select bank0
  2218  0066' 1618               	bsf	24,4	;volatile
  2219  0067'                    l1242:
  2220                           
  2221                           ;./uart.h: 28:   TXEN = 1;
  2222  0067' 1683               	bsf	3,5	;RP0=1, select bank1
  2223  0068' 1303               	bcf	3,6	;RP1=0, select bank1
  2224  0069' 1698               	bsf	24,5	;volatile
  2225  006A'                    l57:
  2226  006A' 0008               	return
  2227  006B'                    __end_of_UART_init:
  2228                           
  2229                           	psect	text16
  2230  0000'                    __ptext16:	
  2231 ;; *************** function ___aldiv *****************
  2232 ;; Defined at:
  2233 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  divisor         4    0[COMMON] long 
  2236 ;;  dividend        4    4[COMMON] long 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  quotient        4    2[BANK0 ] long 
  2239 ;;  sign            1    1[BANK0 ] unsigned char 
  2240 ;;  counter         1    0[BANK0 ] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  4    0[COMMON] long 
  2243 ;; Registers used:
  2244 ;;		wreg, status,2, status,0, btemp+1
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2250 ;;      Params:         8       0       0       0       0
  2251 ;;      Locals:         0       6       0       0       0
  2252 ;;      Temps:          1       0       0       0       0
  2253 ;;      Totals:         9       6       0       0       0
  2254 ;;Total ram usage:       15 bytes
  2255 ;; Hardware stack levels used: 1
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		_UART_init
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263  0000'                    ___aldiv:	
  2264                           ;psect for function ___aldiv
  2265                           
  2266  0000'                    l1186:	
  2267                           ;incstack = 0
  2268                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  2269                           
  2270  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2271  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2272  0002' 0181'              	clrf	___aldiv@sign
  2273  0003'                    l1188:
  2274  0003' 1F83'              	btfss	___aldiv@divisor+3,7
  2275  0004' 2800'              	goto	u441
  2276  0005' 2800'              	goto	u440
  2277  0006'                    u441:
  2278  0006' 2800'              	goto	l346
  2279  0007'                    u440:
  2280  0007'                    l1190:
  2281  0007' 0980'              	comf	___aldiv@divisor,f
  2282  0008' 0981'              	comf	___aldiv@divisor+1,f
  2283  0009' 0982'              	comf	___aldiv@divisor+2,f
  2284  000A' 0983'              	comf	___aldiv@divisor+3,f
  2285  000B' 0A80'              	incf	___aldiv@divisor,f
  2286  000C' 1903               	skipnz
  2287  000D' 0A81'              	incf	___aldiv@divisor+1,f
  2288  000E' 1903               	skipnz
  2289  000F' 0A82'              	incf	___aldiv@divisor+2,f
  2290  0010' 1903               	skipnz
  2291  0011' 0A83'              	incf	___aldiv@divisor+3,f
  2292  0012' 0181'              	clrf	___aldiv@sign
  2293  0013' 0A81'              	incf	___aldiv@sign,f
  2294  0014'                    l346:
  2295  0014' 1F87'              	btfss	___aldiv@dividend+3,7
  2296  0015' 2800'              	goto	u451
  2297  0016' 2800'              	goto	u450
  2298  0017'                    u451:
  2299  0017' 2800'              	goto	l1196
  2300  0018'                    u450:
  2301  0018'                    l1192:
  2302  0018' 0984'              	comf	___aldiv@dividend,f
  2303  0019' 0985'              	comf	___aldiv@dividend+1,f
  2304  001A' 0986'              	comf	___aldiv@dividend+2,f
  2305  001B' 0987'              	comf	___aldiv@dividend+3,f
  2306  001C' 0A84'              	incf	___aldiv@dividend,f
  2307  001D' 1903               	skipnz
  2308  001E' 0A85'              	incf	___aldiv@dividend+1,f
  2309  001F' 1903               	skipnz
  2310  0020' 0A86'              	incf	___aldiv@dividend+2,f
  2311  0021' 1903               	skipnz
  2312  0022' 0A87'              	incf	___aldiv@dividend+3,f
  2313  0023'                    l1194:
  2314  0023' 3001               	movlw	1
  2315  0024' 00FF               	movwf	btemp+1
  2316  0025' 087F               	movf	btemp+1,w
  2317  0026' 0681'              	xorwf	___aldiv@sign,f
  2318  0027'                    l1196:
  2319  0027' 3000               	movlw	0
  2320  0028' 0085'              	movwf	___aldiv@quotient+3
  2321  0029' 3000               	movlw	0
  2322  002A' 0084'              	movwf	___aldiv@quotient+2
  2323  002B' 3000               	movlw	0
  2324  002C' 0083'              	movwf	___aldiv@quotient+1
  2325  002D' 3000               	movlw	0
  2326  002E' 0082'              	movwf	___aldiv@quotient
  2327  002F'                    l1198:
  2328  002F' 0803'              	movf	___aldiv@divisor+3,w
  2329  0030' 0402'              	iorwf	___aldiv@divisor+2,w
  2330  0031' 0401'              	iorwf	___aldiv@divisor+1,w
  2331  0032' 0400'              	iorwf	___aldiv@divisor,w
  2332  0033' 1903               	skipnz
  2333  0034' 2800'              	goto	u461
  2334  0035' 2800'              	goto	u460
  2335  0036'                    u461:
  2336  0036' 2800'              	goto	l1220
  2337  0037'                    u460:
  2338  0037'                    l1200:
  2339  0037' 0180'              	clrf	___aldiv@counter
  2340  0038' 0A80'              	incf	___aldiv@counter,f
  2341  0039' 2800'              	goto	l1206
  2342  003A'                    l1202:
  2343  003A' 3001               	movlw	1
  2344  003B' 0088'              	movwf	??___aldiv
  2345  003C'                    u475:
  2346  003C' 1003               	clrc
  2347  003D' 0D80'              	rlf	___aldiv@divisor,f
  2348  003E' 0D81'              	rlf	___aldiv@divisor+1,f
  2349  003F' 0D82'              	rlf	___aldiv@divisor+2,f
  2350  0040' 0D83'              	rlf	___aldiv@divisor+3,f
  2351  0041' 0B88'              	decfsz	??___aldiv,f
  2352  0042' 2800'              	goto	u475
  2353  0043'                    l1204:
  2354  0043' 3001               	movlw	1
  2355  0044' 00FF               	movwf	btemp+1
  2356  0045' 087F               	movf	btemp+1,w
  2357  0046' 0780'              	addwf	___aldiv@counter,f
  2358  0047'                    l1206:
  2359  0047' 1F83'              	btfss	___aldiv@divisor+3,7
  2360  0048' 2800'              	goto	u481
  2361  0049' 2800'              	goto	u480
  2362  004A'                    u481:
  2363  004A' 2800'              	goto	l1202
  2364  004B'                    u480:
  2365  004B'                    l1208:
  2366  004B' 3001               	movlw	1
  2367  004C' 0088'              	movwf	??___aldiv
  2368  004D'                    u495:
  2369  004D' 1003               	clrc
  2370  004E' 0D82'              	rlf	___aldiv@quotient,f
  2371  004F' 0D83'              	rlf	___aldiv@quotient+1,f
  2372  0050' 0D84'              	rlf	___aldiv@quotient+2,f
  2373  0051' 0D85'              	rlf	___aldiv@quotient+3,f
  2374  0052' 0B88'              	decfsz	??___aldiv,f
  2375  0053' 2800'              	goto	u495
  2376  0054'                    l1210:
  2377  0054' 0803'              	movf	___aldiv@divisor+3,w
  2378  0055' 0207'              	subwf	___aldiv@dividend+3,w
  2379  0056' 1D03               	skipz
  2380  0057' 2800'              	goto	u505
  2381  0058' 0802'              	movf	___aldiv@divisor+2,w
  2382  0059' 0206'              	subwf	___aldiv@dividend+2,w
  2383  005A' 1D03               	skipz
  2384  005B' 2800'              	goto	u505
  2385  005C' 0801'              	movf	___aldiv@divisor+1,w
  2386  005D' 0205'              	subwf	___aldiv@dividend+1,w
  2387  005E' 1D03               	skipz
  2388  005F' 2800'              	goto	u505
  2389  0060' 0800'              	movf	___aldiv@divisor,w
  2390  0061' 0204'              	subwf	___aldiv@dividend,w
  2391  0062'                    u505:
  2392  0062' 1C03               	skipc
  2393  0063' 2800'              	goto	u501
  2394  0064' 2800'              	goto	u500
  2395  0065'                    u501:
  2396  0065' 2800'              	goto	l1216
  2397  0066'                    u500:
  2398  0066'                    l1212:
  2399  0066' 0800'              	movf	___aldiv@divisor,w
  2400  0067' 0284'              	subwf	___aldiv@dividend,f
  2401  0068' 0801'              	movf	___aldiv@divisor+1,w
  2402  0069' 1C03               	skipc
  2403  006A' 0F01'              	incfsz	___aldiv@divisor+1,w
  2404  006B' 0285'              	subwf	___aldiv@dividend+1,f
  2405  006C' 0802'              	movf	___aldiv@divisor+2,w
  2406  006D' 1C03               	skipc
  2407  006E' 0F02'              	incfsz	___aldiv@divisor+2,w
  2408  006F' 0286'              	subwf	___aldiv@dividend+2,f
  2409  0070' 0803'              	movf	___aldiv@divisor+3,w
  2410  0071' 1C03               	skipc
  2411  0072' 0F03'              	incfsz	___aldiv@divisor+3,w
  2412  0073' 0287'              	subwf	___aldiv@dividend+3,f
  2413  0074'                    l1214:
  2414  0074' 1402'              	bsf	___aldiv@quotient,0
  2415  0075'                    l1216:
  2416  0075' 3001               	movlw	1
  2417  0076'                    u515:
  2418  0076' 1003               	clrc
  2419  0077' 0C83'              	rrf	___aldiv@divisor+3,f
  2420  0078' 0C82'              	rrf	___aldiv@divisor+2,f
  2421  0079' 0C81'              	rrf	___aldiv@divisor+1,f
  2422  007A' 0C80'              	rrf	___aldiv@divisor,f
  2423  007B' 3EFF               	addlw	-1
  2424  007C' 1D03               	skipz
  2425  007D' 2800'              	goto	u515
  2426  007E'                    l1218:
  2427  007E' 3001               	movlw	1
  2428  007F' 0280'              	subwf	___aldiv@counter,f
  2429  0080' 1D03               	btfss	3,2
  2430  0081' 2800'              	goto	u521
  2431  0082' 2800'              	goto	u520
  2432  0083'                    u521:
  2433  0083' 2800'              	goto	l1208
  2434  0084'                    u520:
  2435  0084'                    l1220:
  2436  0084' 0801'              	movf	___aldiv@sign,w
  2437  0085' 1903               	btfsc	3,2
  2438  0086' 2800'              	goto	u531
  2439  0087' 2800'              	goto	u530
  2440  0088'                    u531:
  2441  0088' 2800'              	goto	l1224
  2442  0089'                    u530:
  2443  0089'                    l1222:
  2444  0089' 0982'              	comf	___aldiv@quotient,f
  2445  008A' 0983'              	comf	___aldiv@quotient+1,f
  2446  008B' 0984'              	comf	___aldiv@quotient+2,f
  2447  008C' 0985'              	comf	___aldiv@quotient+3,f
  2448  008D' 0A82'              	incf	___aldiv@quotient,f
  2449  008E' 1903               	skipnz
  2450  008F' 0A83'              	incf	___aldiv@quotient+1,f
  2451  0090' 1903               	skipnz
  2452  0091' 0A84'              	incf	___aldiv@quotient+2,f
  2453  0092' 1903               	skipnz
  2454  0093' 0A85'              	incf	___aldiv@quotient+3,f
  2455  0094'                    l1224:
  2456  0094' 0805'              	movf	___aldiv@quotient+3,w
  2457  0095' 0083'              	movwf	?___aldiv+3
  2458  0096' 0804'              	movf	___aldiv@quotient+2,w
  2459  0097' 0082'              	movwf	?___aldiv+2
  2460  0098' 0803'              	movf	___aldiv@quotient+1,w
  2461  0099' 0081'              	movwf	?___aldiv+1
  2462  009A' 0802'              	movf	___aldiv@quotient,w
  2463  009B' 0080'              	movwf	?___aldiv
  2464  009C'                    l356:
  2465  009C' 0008               	return
  2466  009D'                    __end_of___aldiv:
  2467                           
  2468                           	psect	text17
  2469  0000'                    __ptext17:	
  2470 ;; *************** function _SPI_init_master *****************
  2471 ;; Defined at:
  2472 ;;		line 16 in file "./spi.h"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;		None
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;		None
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      void 
  2479 ;; Registers used:
  2480 ;;		wreg, status,2
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2486 ;;      Params:         0       0       0       0       0
  2487 ;;      Locals:         0       0       0       0       0
  2488 ;;      Temps:          0       0       0       0       0
  2489 ;;      Totals:         0       0       0       0       0
  2490 ;;Total ram usage:        0 bytes
  2491 ;; Hardware stack levels used: 1
  2492 ;; This function calls:
  2493 ;;		Nothing
  2494 ;; This function is called by:
  2495 ;;		_main
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499  0000'                    _SPI_init_master:	
  2500                           ;psect for function _SPI_init_master
  2501                           
  2502  0000'                    l1250:	
  2503                           ;incstack = 0
  2504                           ; Regs used in _SPI_init_master: [wreg+status,2]
  2505                           
  2506                           
  2507                           ;./spi.h: 18:         SSPCON = 0b01100001;
  2508  0000' 3061               	movlw	97
  2509  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  2510  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  2511  0003' 0094               	movwf	20	;volatile
  2512  0004'                    l1252:
  2513                           
  2514                           ;./spi.h: 19:         SSPSTAT = 0b00000000;
  2515  0004' 1683               	bsf	3,5	;RP0=1, select bank1
  2516  0005' 1303               	bcf	3,6	;RP1=0, select bank1
  2517  0006' 0194               	clrf	20	;volatile
  2518  0007'                    l1254:
  2519                           
  2520                           ;./spi.h: 20:         CKE = 1;
  2521  0007' 1714               	bsf	20,6	;volatile
  2522  0008'                    l1256:
  2523                           
  2524                           ;./spi.h: 21:         TRISCbits.TRISC5 = 0;
  2525  0008' 1287               	bcf	7,5	;volatile
  2526  0009'                    l1258:
  2527                           
  2528                           ;./spi.h: 22:         TRISCbits.TRISC4 = 1;
  2529  0009' 1607               	bsf	7,4	;volatile
  2530  000A'                    l1260:
  2531                           
  2532                           ;./spi.h: 23:         TRISCbits.TRISC3 = 0;
  2533  000A' 1187               	bcf	7,3	;volatile
  2534  000B'                    l90:
  2535  000B' 0008               	return
  2536  000C'                    __end_of_SPI_init_master:
  2537  007E                     btemp	set	126	;btemp
  2538  007E                     wtemp0	set	126
  2539                           
  2540                           	psect	config
  2541                           
  2542                           ;Config register CONFIG1 @ 0x2007
  2543                           ;	Oscillator Selection bits
  2544                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2545                           ;	Watchdog Timer Enable bit
  2546                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2547                           ;	Power-up Timer Enable bit
  2548                           ;	PWRTE = OFF, PWRT disabled
  2549                           ;	RE3/MCLR pin function select bit
  2550                           ;	MCLRE = 0x1, unprogrammed default
  2551                           ;	Code Protection bit
  2552                           ;	CP = OFF, Program memory code protection is disabled
  2553                           ;	Data Code Protection bit
  2554                           ;	CPD = OFF, Data memory code protection is disabled
  2555                           ;	Brown Out Reset Selection bits
  2556                           ;	BOREN = OFF, BOR disabled
  2557                           ;	Internal External Switchover bit
  2558                           ;	IESO = 0x1, unprogrammed default
  2559                           ;	Fail-Safe Clock Monitor Enabled bit
  2560                           ;	FCMEN = 0x1, unprogrammed default
  2561                           ;	Low Voltage Programming Enable bit
  2562                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2563                           ;	In-Circuit Debugger Mode bit
  2564                           ;	DEBUG = 0x1, unprogrammed default
  2565  2007                     	org	8199
  2566  2007  2CF2               	dw	11506
  2567                           
  2568                           ;Config register CONFIG2 @ 0x2008
  2569                           ;	Brown-out Reset Selection bit
  2570                           ;	BOR4V = 0x1, unprogrammed default
  2571                           ;	Flash Program Memory Self Write Enable bits
  2572                           ;	WRT = OFF, Write protection off
  2573  2008                     	org	8200
  2574  2008  3FFF               	dw	16383

Data Sizes:
    Strings     35
    Constant    0
    Data        5
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      76
    BANK1            80      0      10
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    _doprnt$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 

    _doprnt$1	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    _doprnt$0	PTR struct __prbuf size(1) Largest target is 3
		 -> sprintf@pb(COMMON[2]), 

    S678__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> NULL(), 

    pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> NULL(), 

    S678__prbuf$ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK1[10]), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK1[10]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK1[10]), 

    nrf_read@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_setup@addr	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK0[5]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_read@clear(COMMON[1]), nrf_send@clear(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 
		 -> nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[3]), nrf_read@clear(COMMON[1]), nrf_send@clear(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK0[5]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_setup@data(BANK0[5]), 

    UART_printf@fmt	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_3(CODE[9]), 

    UART_printf@args	PTR void [1] size(1) Largest target is 1
		 -> ?_UART_printf(COMMON[1]), 

    UART_write_text@text	PTR unsigned char  size(2) Largest target is 64
		 -> STR_2(CODE[8]), UART_printf@buf(BANK0[64]), 


Critical Paths under _main in COMMON

    _main->_nrf_read
    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_set_rx_mode->_nrf_read_register
    _nrf_set_rx_mode->_nrf_write_register
    _nrf_read->_nrf_read_register
    _nrf_read->_nrf_write_register
    _nrf_write_register->_nrf_command
    _nrf_read_register->_nrf_command
    _nrf_command->_SPI_write
    _nrf_data_available->_nrf_write_command
    _nrf_write_command->_SPI_write
    _UART_printf->_UART_write_text
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_printf
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   16897
                                             66 BANK0      5     5      0
                    _SPI_init_master
                          _UART_init
                        _UART_printf
                    _UART_write_text
                 _nrf_data_available
                           _nrf_read
                    _nrf_set_rx_mode
                          _nrf_setup
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                            9     8      1    7055
                                             12 COMMON     1     0      1
                                              0 BANK0      8     8      0
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3096
                                             11 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               6     4      2     504
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _nrf_set_rx_mode                                      1     1      0    4100
                                             11 COMMON     1     1      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (1) _nrf_read                                             4     3      1    4283
                                             11 COMMON     3     2      1
                  _nrf_read_register
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    3003
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2    1027
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (3) _nrf_command                                          7     5      2     505
                                              1 COMMON     7     5      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_data_available                                   1     1      0      90
                                              3 COMMON     1     1      0
                  _nrf_write_command
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_printf                                         67    66      1     388
                                              8 COMMON     1     0      1
                                              0 BANK0     66    66      0
                    _UART_write_text
                          _vsnprintf
 ---------------------------------------------------------------------------------
 (2) _vsnprintf                                            8     0      8       0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      7     5      2     264
                                              1 COMMON     7     5      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_init
     ___aldiv
   _UART_printf
     _UART_write_text
       _UART_write
     _vsnprintf
   _UART_write_text
   _nrf_data_available
     _nrf_write_command
       _SPI_write
   _nrf_read
     _nrf_read_register
       _nrf_command
         _SPI_write
     _nrf_write_command
     _nrf_write_register
       _nrf_command
   _nrf_set_rx_mode
     _nrf_read_register
     _nrf_write_register
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       A       7       12.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     47      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      64      12        0.0%
ABS                  0      0      64       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Mar 27 21:41:31 2023

                           pc 0002                            _BF 04A0                            l60 0001  
                          l63 000B                            l57 006A                            l90 000B  
                          l69 0041                            l93 0005                            l78 0025  
                          l96 000E                            fsr 0004                           l102 001C  
                         l111 000C                           l120 000F                           l114 000B  
                         l130 001D                           l107 002C                           l123 0018  
                         l108 0030                           l126 00C0                           l137 000D  
                         l145 001D                           l129 0012                           l346 0014  
                         l356 009C                           _CKE 04A6                           _RD2 0042  
                         _RD3 0043                           u400 000D                           u410 002F  
                         u500 0066                           u420 0041                           u501 0065  
                         u421 0040                           u430 001C                           u431 001B  
                         u520 0084                           u440 0007                           u600 000D  
                         u521 0083                           u505 0062                           u441 0006  
                         u530 0089                           u450 0018                           u370 000B  
                         u531 0088                           u515 0076                           u451 0017  
                         u371 000A                           u460 0037                           u540 0013  
                         u380 002C                           u461 0036                           u381 002B  
                         u550 002C                           u390 0007                           u710 004B  
                         u391 0006                           u711 004A                           u480 004B  
                         u481 004A                           u561 003E                           u545 000E  
                         u562 003F                           u570 0011                           u475 003C  
                         u563 0044                           u555 0027                           u571 0010  
                         u564 0045                           u565 004A                           u566 004B  
                         u590 000C                           u495 004D                           u591 000A  
                         u727 003C                           u737 000D                           u747 001C  
                         fsr0 0004                           indf 0000                          l1200 0037  
                        l1120 000B                          l1210 0054                          l1202 003A  
                        l1130 000D                          l1212 0066                          l1204 0043  
                        l1220 0084                          l1140 0001                          l1132 0022  
                        l1124 0001                          l1300 0077                          l1222 0089  
                        l1214 0074                          l1206 0047                          l1230 0003  
                        l1142 0007                          l1118 0001                          l1150 0004  
                        l1134 0026                          l1126 0004                          l1302 0081  
                        l1224 0094                          l1216 0075                          l1208 004B  
                        l1240 0064                          l1232 005C                          l1160 0003  
                        l1152 000B                          l1136 002F                          l1128 000B  
                        l1144 0001                          l1312 0013                          l1304 0000  
                        l1250 0000                          l1218 007E                          l1242 0067  
                        l1234 005D                          l1162 001F                          l1154 000E  
                        l1330 0007                          l1306 000A                          l1170 0012  
                        l1260 000A                          l1252 0004                          l1236 0060  
                        l1228 0000                          l1164 0025                          l1244 0003  
                        l1148 0001                          l1340 0013                          l1308 000D  
                        l1172 0016                          l1180 0002                          l1254 0007  
                        l1190 0007                          l1238 0063                          l1158 0000  
                        l1246 0005                          l1174 0001                          l1334 0001  
                        l1166 0001                          l1182 000C                          l1270 0003  
                        l1430 001B                          l1256 0008                          l1192 0018  
                        l1248 001C                          l1328 0000                          l1336 000B  
                        l1168 0003                          l1184 0012                          l1280 002F  
                        l1272 0007                          l1440 0041                          l1432 0024  
                        l1258 0009                          l1194 0023                          l1186 0000  
                        l1338 0011                          l1178 0000                          l1290 004E  
                        l1282 0032                          l1274 0012                          l1442 004B  
                        l1434 0029                          l1426 0000                          l1196 0027  
                        l1188 0003                          l1292 0058                          l1284 003C  
                        l1276 0015                          l1444 0053                          l1436 0031  
                        l1428 0004                          l1198 002F                          l1294 005B  
                        l1286 0040                          l1278 0025                          l1438 0036  
                        l1296 0065                          l1288 004A                          l1298 0069  
                        STR_1 0010                          STR_2 002B                          STR_3 0022  
                        _BRGH 04C2                          _CREN 00C4                          _RCIF 0065  
                        _SPEN 00C7                          _TRMT 04C1                          _TXEN 04C5  
                        _SYNC 04C4                          _main 0000                          btemp 007E  
                        start 0000*             UART_write_text@i 0006               __end_of___aldiv 009D  
                       ?_main 0000                         _RCREG 001A                         _SPBRG 0099  
                       _TXREG 0019                   ?_UART_write 0000                         pclath 000A  
                       status 0003                         wtemp0 007E               __initialization 0000  
                __end_of_main 005F                        ??_main 0042                  ?_nrf_command 0001  
       nrf_setup@payload_size 000C                        _TRISD2 0442                        _TRISD3 0443  
                      _TRISC6 043E                        _TRISC7 043F                        _SSPCON 0014  
                      _SSPBUF 0013                     ??___aldiv 0008             __end_of_UART_init 006B  
              _nrf_flush_rxtx 0000   char_to_binary_string@output 0000                        _arrcpy 0000  
                ?_UART_printf 0008              __end_of_nrf_read 001E               _UART_write_text 0000  
           __end_of_SPI_write 000F      nrf_data_available@status 0003            nrf_flush_rxtx@data 000B  
     __end_of__initialization 002A        __end_of_nrf_flush_rxtx 0019                __pcstackCOMMON 0000  
                __pidataBANK0 0000    __end_of_nrf_write_register 000D             ??_nrf_set_rx_mode 000B  
           ??_SPI_init_master 0000                    __pbssBANK1 0000         nrf_write_register@len 0009  
       nrf_write_register@reg 000A               ?_nrf_flush_rxtx 0000                    __pmaintext 0000  
                     ?_arrcpy 0000       __end_of_UART_write_text 0042                   nrf_read@len 000B  
                ??_UART_write 0000                       _SSPSTAT 0094                    __stringtab 0000  
                   ?_nrf_read 000B                       ___aldiv 0000               UART_printf@args 0040  
          __end_of_UART_write 000C                       __ptext1 0000                       __ptext2 0000  
                     __ptext3 0000                       __ptext4 0000                       __ptext5 0000  
                     __ptext6 0000                       __ptext7 0000                       __ptext8 0000  
                     __ptext9 0000          nrf_read_register@len 0009          nrf_read_register@reg 000A  
            ___aldiv@dividend 0004                       arrcpy@i 0005          end_of_initialization 002A  
           __end_of_nrf_setup 00C1           UART_init@_XTAL_FREQ 000A                    ??_nrf_read 000C  
               nrf_read@clear 000D              ___aldiv@quotient 0002              ?_UART_write_text 0001  
                   _UART_init 0000                     _TRISCbits 0087                     _SPI_write 0000  
nrf_write_command@NRF_command 0001               _nrf_set_rx_mode 0000               _SPI_init_master 0000  
               nrf_setup@addr 0002                 nrf_setup@data 0003                __end_of_arrcpy 001D  
                  ?_UART_init 0006           start_initialization 0000    __end_of_nrf_data_available 000E  
          _nrf_write_register 0000                    ?_SPI_write 0000              ??_nrf_flush_rxtx 000B  
         ?_nrf_write_register 0008                      ??_arrcpy 0002                   __pdataBANK0 0000  
        ??_nrf_write_register 000A        nrf_write_register@data 0008                     ___latbits 0002  
               __pcstackBANK0 0000           UART_write_text@text 0001       __end_of_nrf_set_rx_mode 001E  
     __end_of_SPI_init_master 000C                 SPI_write@data 0000                      ?___aldiv 0000  
                   __pstrings 0000                   ??_UART_init 000E                 ??_nrf_command 0003  
              UART_printf@buf 0000                UART_printf@fmt 0041                   ??_SPI_write 0000  
             ___aldiv@divisor 0000                  nrf_command@i 0007               ___aldiv@counter 0000  
                   _nrf_setup 0000                  nrf_read@data 000C               nrf_command@data 0001  
           _nrf_read_register 0000         nrf_set_rx_mode@config 000B                 ??_UART_printf 0009  
          ?_nrf_read_register 0008                   __stringbase 000F                UART_write@data 0000  
                   arrcpy@len 0001                     arrcpy@dst 0004                     arrcpy@src 0000  
         ??_nrf_read_register 000A             _nrf_write_command 0000           __end_of_nrf_command 0031  
                   _vsnprintf 0000*           ?_nrf_write_command 0000                    ?_nrf_setup 000C  
            ?_nrf_set_rx_mode 0000              ?_SPI_init_master 0000     __end_of_nrf_read_register 000C  
         ??_nrf_write_command 0001            __end_of__stringtab 0010           __end_of_UART_printf 0026  
   __end_of_nrf_write_command 0010                      __ptext10 0000                      __ptext11 0000  
                    __ptext12 0000                      __ptext13 0000                      __ptext14 0000  
                    __ptext15 0000                      __ptext16 0000                      __ptext17 0000  
       nrf_read_register@data 0008                    ?_vsnprintf 0000            _nrf_data_available 0000  
                    _nrf_read 0000                nrf_command@len 0002           ?_nrf_data_available 0000  
                    main@data 0044                    _RADIO_ADDR 0000                   _nrf_command 0000  
      nrf_command@NRF_command 0005          ??_nrf_data_available 0003             UART_init@baudrate 0006  
                 ??_nrf_setup 0000                     stringcode 000A                    _OSCCONbits 008F  
                 _UART_printf 0000                      stringdir 000A                      stringtab 0000  
                ___aldiv@sign 0001       nrf_write_command@status 0002             nrf_command@status 0006  
                  _UART_write 0000                   ??_vsnprintf 0000             ??_UART_write_text 0003  
