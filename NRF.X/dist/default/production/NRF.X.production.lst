

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Mar 27 22:56:48 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34     0000                     
    35                           ; Generated 09/02/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F887 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69     0000                     	;# 
    70     0001                     	;# 
    71     0002                     	;# 
    72     0003                     	;# 
    73     0004                     	;# 
    74     0005                     	;# 
    75     0006                     	;# 
    76     0007                     	;# 
    77     0008                     	;# 
    78     0009                     	;# 
    79     000A                     	;# 
    80     000B                     	;# 
    81     000C                     	;# 
    82     000D                     	;# 
    83     000E                     	;# 
    84     000E                     	;# 
    85     000F                     	;# 
    86     0010                     	;# 
    87     0011                     	;# 
    88     0012                     	;# 
    89     0013                     	;# 
    90     0014                     	;# 
    91     0015                     	;# 
    92     0015                     	;# 
    93     0016                     	;# 
    94     0017                     	;# 
    95     0018                     	;# 
    96     0019                     	;# 
    97     001A                     	;# 
    98     001B                     	;# 
    99     001B                     	;# 
   100     001C                     	;# 
   101     001D                     	;# 
   102     001E                     	;# 
   103     001F                     	;# 
   104     0081                     	;# 
   105     0085                     	;# 
   106     0086                     	;# 
   107     0087                     	;# 
   108     0088                     	;# 
   109     0089                     	;# 
   110     008C                     	;# 
   111     008D                     	;# 
   112     008E                     	;# 
   113     008F                     	;# 
   114     0090                     	;# 
   115     0091                     	;# 
   116     0092                     	;# 
   117     0093                     	;# 
   118     0093                     	;# 
   119     0093                     	;# 
   120     0094                     	;# 
   121     0095                     	;# 
   122     0096                     	;# 
   123     0097                     	;# 
   124     0098                     	;# 
   125     0099                     	;# 
   126     009A                     	;# 
   127     009B                     	;# 
   128     009C                     	;# 
   129     009D                     	;# 
   130     009E                     	;# 
   131     009F                     	;# 
   132     0105                     	;# 
   133     0107                     	;# 
   134     0108                     	;# 
   135     0109                     	;# 
   136     010C                     	;# 
   137     010C                     	;# 
   138     010D                     	;# 
   139     010E                     	;# 
   140     010F                     	;# 
   141     0185                     	;# 
   142     0187                     	;# 
   143     0188                     	;# 
   144     0189                     	;# 
   145     018C                     	;# 
   146     018D                     	;# 
   147     0000                     	;# 
   148     0001                     	;# 
   149     0002                     	;# 
   150     0003                     	;# 
   151     0004                     	;# 
   152     0005                     	;# 
   153     0006                     	;# 
   154     0007                     	;# 
   155     0008                     	;# 
   156     0009                     	;# 
   157     000A                     	;# 
   158     000B                     	;# 
   159     000C                     	;# 
   160     000D                     	;# 
   161     000E                     	;# 
   162     000E                     	;# 
   163     000F                     	;# 
   164     0010                     	;# 
   165     0011                     	;# 
   166     0012                     	;# 
   167     0013                     	;# 
   168     0014                     	;# 
   169     0015                     	;# 
   170     0015                     	;# 
   171     0016                     	;# 
   172     0017                     	;# 
   173     0018                     	;# 
   174     0019                     	;# 
   175     001A                     	;# 
   176     001B                     	;# 
   177     001B                     	;# 
   178     001C                     	;# 
   179     001D                     	;# 
   180     001E                     	;# 
   181     001F                     	;# 
   182     0081                     	;# 
   183     0085                     	;# 
   184     0086                     	;# 
   185     0087                     	;# 
   186     0088                     	;# 
   187     0089                     	;# 
   188     008C                     	;# 
   189     008D                     	;# 
   190     008E                     	;# 
   191     008F                     	;# 
   192     0090                     	;# 
   193     0091                     	;# 
   194     0092                     	;# 
   195     0093                     	;# 
   196     0093                     	;# 
   197     0093                     	;# 
   198     0094                     	;# 
   199     0095                     	;# 
   200     0096                     	;# 
   201     0097                     	;# 
   202     0098                     	;# 
   203     0099                     	;# 
   204     009A                     	;# 
   205     009B                     	;# 
   206     009C                     	;# 
   207     009D                     	;# 
   208     009E                     	;# 
   209     009F                     	;# 
   210     0105                     	;# 
   211     0107                     	;# 
   212     0108                     	;# 
   213     0109                     	;# 
   214     010C                     	;# 
   215     010C                     	;# 
   216     010D                     	;# 
   217     010E                     	;# 
   218     010F                     	;# 
   219     0185                     	;# 
   220     0187                     	;# 
   221     0188                     	;# 
   222     0189                     	;# 
   223     018C                     	;# 
   224     018D                     	;# 
   225                           
   226                           	psect	idataBANK0
   227     03CE                     __pidataBANK0:
   228                           
   229                           ;initializer for _RADIO_ADDR
   230     03CE  3401               	retlw	1
   231     03CF  3402               	retlw	2
   232     03D0  3403               	retlw	3
   233     03D1  3404               	retlw	4
   234     03D2  3405               	retlw	5
   235                           
   236                           	psect	idataBANK1
   237     03CB                     __pidataBANK1:
   238                           
   239                           ;initializer for main@F1424
   240     03CB  3441               	retlw	65
   241     03CC  3442               	retlw	66
   242     03CD  3400               	retlw	0
   243     0013                     _SSPBUF	set	19
   244     0014                     _SSPCON	set	20
   245     001A                     _RCREG	set	26
   246     0019                     _TXREG	set	25
   247     0042                     _RD2	set	66
   248     0043                     _RD3	set	67
   249     0065                     _RCIF	set	101
   250     00C4                     _CREN	set	196
   251     00C7                     _SPEN	set	199
   252     008F                     _OSCCONbits	set	143
   253     0094                     _SSPSTAT	set	148
   254     0099                     _SPBRG	set	153
   255     0442                     _TRISD2	set	1090
   256     0443                     _TRISD3	set	1091
   257     04A0                     _BF	set	1184
   258     043B                     _TRISC3	set	1083
   259     043D                     _TRISC5	set	1085
   260     043C                     _TRISC4	set	1084
   261     04C1                     _TRMT	set	1217
   262     04C5                     _TXEN	set	1221
   263     043E                     _TRISC6	set	1086
   264     043F                     _TRISC7	set	1087
   265     04C4                     _SYNC	set	1220
   266     04C2                     _BRGH	set	1218
   267                           
   268                           	psect	strings
   269     0003                     __pstrings:
   270     0003                     stringtab:
   271     0003                     __stringtab:
   272     0003                     stringcode:	
   273                           ;	String table - string pointers are 1 byte each
   274                           
   275     0003                     stringdir:
   276     0003  3000               	movlw	high stringdir
   277     0004  008A               	movwf	10
   278     0005  0804               	movf	4,w
   279     0006  0A84               	incf	4,f
   280     0007  0782               	addwf	2,f
   281     0008                     __stringbase:
   282     0008  3400               	retlw	0
   283     0009                     __end_of__stringtab:
   284     0009                     STR_1:
   285     0009  3425               	retlw	37	;'%'
   286     000A  3463               	retlw	99	;'c'
   287     000B  3425               	retlw	37	;'%'
   288     000C  3463               	retlw	99	;'c'
   289     000D  3425               	retlw	37	;'%'
   290     000E  3463               	retlw	99	;'c'
   291     000F  3425               	retlw	37	;'%'
   292     0010  3463               	retlw	99	;'c'
   293     0011  3425               	retlw	37	;'%'
   294     0012  3463               	retlw	99	;'c'
   295     0013  3425               	retlw	37	;'%'
   296     0014  3463               	retlw	99	;'c'
   297     0015  3425               	retlw	37	;'%'
   298     0016  3463               	retlw	99	;'c'
   299     0017  3425               	retlw	37	;'%'
   300     0018  3463               	retlw	99	;'c'
   301     0019  340A               	retlw	10
   302     001A  3400               	retlw	0
   303     001B                     STR_2:
   304     001B  3442               	retlw	66	;'B'
   305     001C  344F               	retlw	79	;'O'
   306     001D  344F               	retlw	79	;'O'
   307     001E  3454               	retlw	84	;'T'
   308     001F  3445               	retlw	69	;'E'
   309     0020  3444               	retlw	68	;'D'
   310     0021  340A               	retlw	10
   311     0022  3400               	retlw	0
   312                           
   313                           	psect	cinit
   314     07BE                     start_initialization:	
   315                           ; #config settings
   316                           
   317     07BE                     __initialization:
   318                           
   319                           ; Initialize objects allocated to BANK1
   320     07BE  1683               	bsf	3,5	;RP0=1, select bank1
   321     07BF  1303               	bcf	3,6	;RP1=0, select bank1
   322     07C0  120A  118A  23CB  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   323     07C5  00EA               	movwf	__pdataBANK1& (0+127)
   324     07C6  120A  118A  23CC  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   325     07CB  00EB               	movwf	(__pdataBANK1+1)& (0+127)
   326     07CC  120A  118A  23CD  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   327     07D1  00EC               	movwf	(__pdataBANK1+2)& (0+127)
   328                           
   329                           ; Initialize objects allocated to BANK0
   330     07D2  1283               	bcf	3,5	;RP0=0, select bank0
   331     07D3  1303               	bcf	3,6	;RP1=0, select bank0
   332     07D4  120A  118A  23CE  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   333     07D9  00C7               	movwf	__pdataBANK0& (0+127)
   334     07DA  120A  118A  23CF  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   335     07DF  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   336     07E0  120A  118A  23D0  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   337     07E5  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   338     07E6  120A  118A  23D1  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   339     07EB  00CA               	movwf	(__pdataBANK0+3)& (0+127)
   340     07EC  120A  118A  23D2  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   341     07F1  00CB               	movwf	(__pdataBANK0+4)& (0+127)
   342                           
   343                           ; Clear objects allocated to BANK0
   344     07F2  01BD               	clrf	__pbssBANK0& (0+127)
   345     07F3  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   346     07F4  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   347     07F5  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   348     07F6  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   349     07F7  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   350     07F8  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   351     07F9  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   352     07FA  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   353     07FB  01C6               	clrf	(__pbssBANK0+9)& (0+127)
   354     07FC                     end_of_initialization:	
   355                           ;End of C runtime variable initialization code
   356                           
   357     07FC                     __end_of__initialization:
   358     07FC  0183               	clrf	3
   359     07FD  120A  118A  2E72   	ljmp	_main	;jump to C main() function
   360                           
   361                           	psect	bssBANK0
   362     003D                     __pbssBANK0:
   363     003D                     char_to_binary_string@output:
   364     003D                     	ds	10
   365                           
   366                           	psect	dataBANK0
   367     0047                     __pdataBANK0:
   368     0047                     _RADIO_ADDR:
   369     0047                     	ds	5
   370                           
   371                           	psect	dataBANK1
   372     00EA                     __pdataBANK1:
   373     00EA                     main@F1424:
   374     00EA                     	ds	3
   375                           
   376                           	psect	cstackBANK1
   377     00A0                     __pcstackBANK1:
   378     00A0                     main@buffer:
   379                           
   380                           ; 64 bytes @ 0x0
   381     00A0                     	ds	64
   382     00E0                     main@data:
   383                           
   384                           ; 3 bytes @ 0x40
   385     00E0                     	ds	3
   386     00E3                     main@send_data:
   387                           
   388                           ; 3 bytes @ 0x43
   389     00E3                     	ds	3
   390     00E6                     main@i:
   391                           
   392                           ; 2 bytes @ 0x46
   393     00E6                     	ds	2
   394     00E8                     main@j:
   395                           
   396                           ; 2 bytes @ 0x48
   397     00E8                     	ds	2
   398                           
   399                           	psect	cstackCOMMON
   400     0070                     __pcstackCOMMON:
   401     0070                     ??_sprintf:
   402     0070                     ?_UART_write:	
   403                           ; 1 bytes @ 0x0
   404                           
   405     0070                     ??_UART_write:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0070                     ?_UART_write_text:	
   409                           ; 1 bytes @ 0x0
   410                           
   411     0070                     ?_SPI_init_master:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ??_SPI_init_master:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     ?_SPI_write:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     ??_SPI_write:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     ?_arrcpy:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0070                     ?_nrf_write_command:	
   427                           ; 1 bytes @ 0x0
   428                           
   429     0070                     ?_nrf_flush_rxtx:	
   430                           ; 1 bytes @ 0x0
   431                           
   432     0070                     ?_nrf_set_tx_mode:	
   433                           ; 1 bytes @ 0x0
   434                           
   435     0070                     ?_main:	
   436                           ; 1 bytes @ 0x0
   437                           
   438     0070                     ?___aldiv:	
   439                           ; 2 bytes @ 0x0
   440                           
   441     0070                     UART_write@data:	
   442                           ; 4 bytes @ 0x0
   443                           
   444     0070                     SPI_write@data:	
   445                           ; 1 bytes @ 0x0
   446                           
   447     0070                     arrcpy@src:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0070                     ___aldiv@divisor:	
   451                           ; 1 bytes @ 0x0
   452                           
   453                           
   454                           ; 4 bytes @ 0x0
   455     0070                     	ds	1
   456     0071                     ??_UART_write_text:
   457     0071                     ?_nrf_command:	
   458                           ; 1 bytes @ 0x1
   459                           
   460     0071                     ??_nrf_write_command:	
   461                           ; 1 bytes @ 0x1
   462                           
   463     0071                     arrcpy@len:	
   464                           ; 1 bytes @ 0x1
   465                           
   466     0071                     nrf_command@data:	
   467                           ; 1 bytes @ 0x1
   468                           
   469     0071                     nrf_write_command@NRF_command:	
   470                           ; 1 bytes @ 0x1
   471                           
   472                           
   473                           ; 1 bytes @ 0x1
   474     0071                     	ds	1
   475     0072                     ??_arrcpy:
   476     0072                     nrf_command@len:	
   477                           ; 1 bytes @ 0x2
   478                           
   479     0072                     nrf_write_command@status:	
   480                           ; 1 bytes @ 0x2
   481                           
   482     0072                     sprintf@ap:	
   483                           ; 1 bytes @ 0x2
   484                           
   485     0072                     UART_write_text@i:	
   486                           ; 1 bytes @ 0x2
   487                           
   488                           
   489                           ; 2 bytes @ 0x2
   490     0072                     	ds	1
   491     0073                     ??_nrf_command:
   492     0073                     sprintf@c:	
   493                           ; 1 bytes @ 0x3
   494                           
   495                           
   496                           ; 1 bytes @ 0x3
   497     0073                     	ds	1
   498     0074                     UART_write_text@text:
   499     0074                     arrcpy@dst:	
   500                           ; 1 bytes @ 0x4
   501                           
   502     0074                     sprintf@sp:	
   503                           ; 1 bytes @ 0x4
   504                           
   505     0074                     ___aldiv@dividend:	
   506                           ; 1 bytes @ 0x4
   507                           
   508                           
   509                           ; 4 bytes @ 0x4
   510     0074                     	ds	1
   511     0075                     arrcpy@i:
   512     0075                     nrf_command@NRF_command:	
   513                           ; 1 bytes @ 0x5
   514                           
   515                           
   516                           ; 1 bytes @ 0x5
   517     0075                     	ds	1
   518     0076                     nrf_command@status:
   519                           
   520                           ; 1 bytes @ 0x6
   521     0076                     	ds	1
   522     0077                     nrf_command@i:
   523                           
   524                           ; 1 bytes @ 0x7
   525     0077                     	ds	1
   526     0078                     ?_nrf_write_register:
   527     0078                     ?_nrf_read_register:	
   528                           ; 1 bytes @ 0x8
   529                           
   530     0078                     ??___aldiv:	
   531                           ; 1 bytes @ 0x8
   532                           
   533     0078                     nrf_write_register@data:	
   534                           ; 1 bytes @ 0x8
   535                           
   536     0078                     nrf_read_register@data:	
   537                           ; 1 bytes @ 0x8
   538                           
   539                           
   540                           ; 1 bytes @ 0x8
   541     0078                     	ds	1
   542     0079                     nrf_write_register@len:
   543     0079                     nrf_read_register@len:	
   544                           ; 1 bytes @ 0x9
   545                           
   546                           
   547                           ; 1 bytes @ 0x9
   548     0079                     	ds	1
   549     007A                     ??_nrf_write_register:
   550     007A                     ??_nrf_read_register:	
   551                           ; 1 bytes @ 0xA
   552                           
   553     007A                     nrf_write_register@reg:	
   554                           ; 1 bytes @ 0xA
   555                           
   556     007A                     nrf_read_register@reg:	
   557                           ; 1 bytes @ 0xA
   558                           
   559                           
   560                           ; 1 bytes @ 0xA
   561     007A                     	ds	1
   562     007B                     ?_nrf_write_payload:
   563     007B                     ??_nrf_flush_rxtx:	
   564                           ; 1 bytes @ 0xB
   565                           
   566     007B                     ??_nrf_set_tx_mode:	
   567                           ; 1 bytes @ 0xB
   568                           
   569     007B                     nrf_write_payload@len:	
   570                           ; 1 bytes @ 0xB
   571                           
   572     007B                     nrf_flush_rxtx@data:	
   573                           ; 1 bytes @ 0xB
   574                           
   575     007B                     nrf_set_tx_mode@config:	
   576                           ; 1 bytes @ 0xB
   577                           
   578                           
   579                           ; 1 bytes @ 0xB
   580     007B                     	ds	1
   581     007C                     ??_nrf_write_payload:
   582     007C                     ?_nrf_setup:	
   583                           ; 1 bytes @ 0xC
   584                           
   585     007C                     nrf_setup@payload_size:	
   586                           ; 1 bytes @ 0xC
   587                           
   588                           
   589                           ; 1 bytes @ 0xC
   590     007C                     	ds	1
   591     007D                     ??_nrf_setup:
   592     007D                     nrf_write_payload@data:	
   593                           ; 1 bytes @ 0xD
   594                           
   595                           
   596                           ; 1 bytes @ 0xD
   597     007D                     	ds	1
   598     007E                     ??_nrf_send:
   599                           
   600                           	psect	cstackBANK0
   601     0020                     __pcstackBANK0:	
   602                           ; 1 bytes @ 0xE
   603                           
   604     0020                     ?_nrf_send:
   605     0020                     ?_sprintf:	
   606                           ; 1 bytes @ 0x0
   607                           
   608     0020                     nrf_setup@addr:	
   609                           ; 2 bytes @ 0x0
   610                           
   611     0020                     nrf_send@len:	
   612                           ; 1 bytes @ 0x0
   613                           
   614     0020                     sprintf@f:	
   615                           ; 1 bytes @ 0x0
   616                           
   617     0020                     ___aldiv@counter:	
   618                           ; 1 bytes @ 0x0
   619                           
   620                           
   621                           ; 1 bytes @ 0x0
   622     0020                     	ds	1
   623     0021                     nrf_send@stat:
   624     0021                     ___aldiv@sign:	
   625                           ; 1 bytes @ 0x1
   626                           
   627     0021                     nrf_setup@data:	
   628                           ; 1 bytes @ 0x1
   629                           
   630                           
   631                           ; 5 bytes @ 0x1
   632     0021                     	ds	1
   633     0022                     nrf_send@data:
   634     0022                     ___aldiv@quotient:	
   635                           ; 1 bytes @ 0x2
   636                           
   637                           
   638                           ; 4 bytes @ 0x2
   639     0022                     	ds	1
   640     0023                     nrf_send@clear:
   641                           
   642                           ; 1 bytes @ 0x3
   643     0023                     	ds	3
   644     0026                     ?_UART_init:
   645     0026                     UART_init@baudrate:	
   646                           ; 1 bytes @ 0x6
   647                           
   648                           
   649                           ; 4 bytes @ 0x6
   650     0026                     	ds	4
   651     002A                     UART_init@_XTAL_FREQ:
   652                           
   653                           ; 4 bytes @ 0xA
   654     002A                     	ds	4
   655     002E                     ??_UART_init:
   656                           
   657                           ; 1 bytes @ 0xE
   658     002E                     	ds	12
   659     003A                     ??_main:
   660                           
   661                           ; 1 bytes @ 0x1A
   662     003A                     	ds	3
   663                           
   664                           	psect	maintext
   665     0672                     __pmaintext:	
   666 ;;
   667 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   668 ;;
   669 ;; *************** function _main *****************
   670 ;; Defined at:
   671 ;;		line 50 in file "main.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  j               2   72[BANK1 ] int 
   676 ;;  send_data       3   67[BANK1 ] unsigned char [3]
   677 ;;  i               2   70[BANK1 ] int 
   678 ;;  data            3   64[BANK1 ] unsigned char [3]
   679 ;;  buffer         64    0[BANK1 ] unsigned char [64]
   680 ;; Return value:  Size  Location     Type
   681 ;;                  2  177[None  ] int 
   682 ;; Registers used:
   683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : B00/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   689 ;;      Params:         0       0       0       0       0
   690 ;;      Locals:         0       0      74       0       0
   691 ;;      Temps:          0       3       0       0       0
   692 ;;      Totals:         0       3      74       0       0
   693 ;;Total ram usage:       77 bytes
   694 ;; Hardware stack levels required when called: 5
   695 ;; This function calls:
   696 ;;		_SPI_init_master
   697 ;;		_UART_init
   698 ;;		_UART_write_text
   699 ;;		_arrcpy
   700 ;;		_nrf_send
   701 ;;		_nrf_set_tx_mode
   702 ;;		_nrf_setup
   703 ;;		_sprintf
   704 ;; This function is called by:
   705 ;;		Startup code after reset
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709     0672                     _main:	
   710                           ;psect for function _main
   711                           
   712     0672                     l1486:	
   713                           ;incstack = 0
   714                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   715                           
   716                           
   717                           ;main.c: 53:     OSCCONbits.IRCF = 111;
   718     0672  3070               	movlw	112
   719     0673  1683               	bsf	3,5	;RP0=1, select bank1
   720     0674  1303               	bcf	3,6	;RP1=0, select bank1
   721     0675  048F               	iorwf	15,f	;volatile
   722     0676                     l1488:
   723                           
   724                           ;main.c: 56:     UART_init(9600, 8000000UL);
   725     0676  3000               	movlw	0
   726     0677  1283               	bcf	3,5	;RP0=0, select bank0
   727     0678  1303               	bcf	3,6	;RP1=0, select bank0
   728     0679  00A9               	movwf	UART_init@baudrate+3
   729     067A  3000               	movlw	0
   730     067B  00A8               	movwf	UART_init@baudrate+2
   731     067C  3025               	movlw	37
   732     067D  00A7               	movwf	UART_init@baudrate+1
   733     067E  3080               	movlw	128
   734     067F  00A6               	movwf	UART_init@baudrate
   735     0680  3000               	movlw	0
   736     0681  00AD               	movwf	UART_init@_XTAL_FREQ+3
   737     0682  307A               	movlw	122
   738     0683  00AC               	movwf	UART_init@_XTAL_FREQ+2
   739     0684  3012               	movlw	18
   740     0685  00AB               	movwf	UART_init@_XTAL_FREQ+1
   741     0686  3000               	movlw	0
   742     0687  00AA               	movwf	UART_init@_XTAL_FREQ
   743     0688  120A  118A  256A  120A  118A  	fcall	_UART_init
   744     068D                     l1490:
   745                           
   746                           ;main.c: 59:     { char buffer[64]; sprintf(buffer, "BOOTED\n"); UART_write_text(buffer)
      +                          ; };
   747     068D  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   748     068E  1283               	bcf	3,5	;RP0=0, select bank0
   749     068F  1303               	bcf	3,6	;RP1=0, select bank0
   750     0690  00A0               	movwf	sprintf@f
   751     0691  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   752     0692  120A  118A  2511  120A  118A  	fcall	_sprintf
   753     0697                     l1492:
   754     0697  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   755     0698  120A  118A  246F  120A  118A  	fcall	_UART_write_text
   756     069D                     l1494:
   757                           
   758                           ;main.c: 62:     SPI_init_master();
   759     069D  120A  118A  23D3  120A  118A  	fcall	_SPI_init_master
   760     06A2                     l1496:
   761                           
   762                           ;main.c: 65:     nrf_setup(RADIO_ADDR, 3);
   763     06A2  3003               	movlw	3
   764     06A3  00FC               	movwf	nrf_setup@payload_size
   765     06A4  3047               	movlw	(low (_RADIO_ADDR| 0))& (0+255)
   766     06A5  120A  118A  2715  120A  118A  	fcall	_nrf_setup
   767     06AA                     l1498:
   768                           
   769                           ;main.c: 69:     nrf_set_tx_mode();
   770     06AA  120A  118A  2490  120A  118A  	fcall	_nrf_set_tx_mode
   771     06AF                     l1500:
   772                           
   773                           ;main.c: 75:     {;main.c: 78:         uint8_t data[3] = "AB";
   774     06AF  1683               	bsf	3,5	;RP0=1, select bank1
   775     06B0  1303               	bcf	3,6	;RP1=0, select bank1
   776     06B1  086A               	movf	main@F1424^(0+128),w
   777     06B2  00E0               	movwf	main@data^(0+128)
   778     06B3  086B               	movf	(main@F1424+1)^(0+128),w
   779     06B4  00E1               	movwf	(main@data+1)^(0+128)
   780     06B5  086C               	movf	(main@F1424+2)^(0+128),w
   781     06B6  00E2               	movwf	(main@data+2)^(0+128)
   782     06B7                     l1502:
   783                           
   784                           ;main.c: 79:         for (int i = 0; i < 10; i++)
   785     06B7  01E6               	clrf	main@i^(0+128)
   786     06B8  01E7               	clrf	(main@i+1)^(0+128)
   787     06B9                     l1508:
   788                           
   789                           ;main.c: 80:         {;main.c: 81:             uint8_t send_data[3];;main.c: 82:        
      +                               arrcpy(send_data, data, 3);
   790     06B9  30E0               	movlw	(low (main@data| 0))& (0+255)
   791     06BA  00F0               	movwf	arrcpy@src
   792     06BB  3003               	movlw	3
   793     06BC  00F1               	movwf	arrcpy@len
   794     06BD  30E3               	movlw	(low (main@send_data| 0))& (0+255)
   795     06BE  120A  118A  2452  120A  118A  	fcall	_arrcpy
   796     06C3                     l1510:
   797                           
   798                           ;main.c: 83:             for (int j = 0; j < 3 -1; j++)
   799     06C3  1683               	bsf	3,5	;RP0=1, select bank1
   800     06C4  1303               	bcf	3,6	;RP1=0, select bank1
   801     06C5  01E8               	clrf	main@j^(0+128)
   802     06C6  01E9               	clrf	(main@j+1)^(0+128)
   803     06C7                     l1516:
   804                           
   805                           ;main.c: 84:             {;main.c: 85:                 send_data[j] += i;
   806     06C7  1683               	bsf	3,5	;RP0=1, select bank1
   807     06C8  1303               	bcf	3,6	;RP1=0, select bank1
   808     06C9  0866               	movf	main@i^(0+128),w
   809     06CA  00FF               	movwf	btemp+1
   810     06CB  0868               	movf	main@j^(0+128),w
   811     06CC  3EE3               	addlw	(low (main@send_data| 0))& (0+255)
   812     06CD  0084               	movwf	4
   813     06CE  087F               	movf	btemp+1,w
   814     06CF  1383               	bcf	3,7	;select IRP bank1
   815     06D0  0780               	addwf	0,f
   816     06D1                     l1518:
   817                           
   818                           ;main.c: 86:             }
   819     06D1  3001               	movlw	1
   820     06D2  07E8               	addwf	main@j^(0+128),f
   821     06D3  1803               	skipnc
   822     06D4  0AE9               	incf	(main@j+1)^(0+128),f
   823     06D5  3000               	movlw	0
   824     06D6  07E9               	addwf	(main@j+1)^(0+128),f
   825     06D7                     l1520:
   826     06D7  0869               	movf	(main@j+1)^(0+128),w
   827     06D8  3A80               	xorlw	128
   828     06D9  00FF               	movwf	btemp+1
   829     06DA  3080               	movlw	128
   830     06DB  027F               	subwf	btemp+1,w
   831     06DC  1D03               	skipz
   832     06DD  2EE0               	goto	u665
   833     06DE  3002               	movlw	2
   834     06DF  0268               	subwf	main@j^(0+128),w
   835     06E0                     u665:
   836     06E0  1C03               	skipc
   837     06E1  2EE3               	goto	u661
   838     06E2  2EE4               	goto	u660
   839     06E3                     u661:
   840     06E3  2EC7               	goto	l1516
   841     06E4                     u660:
   842     06E4                     l1522:
   843                           
   844                           ;main.c: 87:             nrf_send(send_data, 3);
   845     06E4  3003               	movlw	3
   846     06E5  1283               	bcf	3,5	;RP0=0, select bank0
   847     06E6  1303               	bcf	3,6	;RP1=0, select bank0
   848     06E7  00A0               	movwf	nrf_send@len
   849     06E8  30E3               	movlw	(low (main@send_data| 0))& (0+255)
   850     06E9  120A  118A  24B4  120A  118A  	fcall	_nrf_send
   851     06EE                     l1524:
   852                           
   853                           ;main.c: 88:             _delay((unsigned long)((500)*(8000000UL/4000.0)));
   854     06EE  3006               	movlw	6
   855     06EF  1283               	bcf	3,5	;RP0=0, select bank0
   856     06F0  1303               	bcf	3,6	;RP1=0, select bank0
   857     06F1  00BC               	movwf	??_main+2
   858     06F2  3013               	movlw	19
   859     06F3  00BB               	movwf	??_main+1
   860     06F4  30AD               	movlw	173
   861     06F5  00BA               	movwf	??_main
   862     06F6                     u687:
   863     06F6  0BBA               	decfsz	??_main,f
   864     06F7  2EF6               	goto	u687
   865     06F8  0BBB               	decfsz	??_main+1,f
   866     06F9  2EF6               	goto	u687
   867     06FA  0BBC               	decfsz	??_main+2,f
   868     06FB  2EF6               	goto	u687
   869     06FC                     l1526:
   870                           
   871                           ;main.c: 89:         }
   872     06FC  3001               	movlw	1
   873     06FD  1683               	bsf	3,5	;RP0=1, select bank1
   874     06FE  1303               	bcf	3,6	;RP1=0, select bank1
   875     06FF  07E6               	addwf	main@i^(0+128),f
   876     0700  1803               	skipnc
   877     0701  0AE7               	incf	(main@i+1)^(0+128),f
   878     0702  3000               	movlw	0
   879     0703  07E7               	addwf	(main@i+1)^(0+128),f
   880     0704                     l1528:
   881     0704  0867               	movf	(main@i+1)^(0+128),w
   882     0705  3A80               	xorlw	128
   883     0706  00FF               	movwf	btemp+1
   884     0707  3080               	movlw	128
   885     0708  027F               	subwf	btemp+1,w
   886     0709  1D03               	skipz
   887     070A  2F0D               	goto	u675
   888     070B  300A               	movlw	10
   889     070C  0266               	subwf	main@i^(0+128),w
   890     070D                     u675:
   891     070D  1C03               	skipc
   892     070E  2F10               	goto	u671
   893     070F  2F11               	goto	u670
   894     0710                     u671:
   895     0710  2EB9               	goto	l1508
   896     0711                     u670:
   897     0711  2EAF               	goto	l1500
   898     0712  120A  118A  2800   	ljmp	start
   899     0715                     __end_of_main:
   900                           
   901                           	psect	text1
   902     0511                     __ptext1:	
   903 ;; *************** function _sprintf *****************
   904 ;; Defined at:
   905 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  sp              1    wreg     PTR unsigned char 
   908 ;;		 -> main@buffer(64), char_to_binary_string@output(10), 
   909 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   910 ;;		 -> STR_2(8), STR_1(18), 
   911 ;; Auto vars:     Size  Location     Type
   912 ;;  sp              1    4[COMMON] PTR unsigned char 
   913 ;;		 -> main@buffer(64), char_to_binary_string@output(10), 
   914 ;;  tmpval          4    0        struct .
   915 ;;  cp              2    0        PTR const unsigned char 
   916 ;;  len             2    0        unsigned int 
   917 ;;  val             2    0        unsigned int 
   918 ;;  c               1    3[COMMON] unsigned char 
   919 ;;  ap              1    2[COMMON] PTR void [1]
   920 ;;		 -> ?_sprintf(2), 
   921 ;;  flag            1    0        unsigned char 
   922 ;;  prec            1    0        char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  2    0[BANK0 ] int 
   925 ;; Registers used:
   926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   932 ;;      Params:         0      17       0       0       0
   933 ;;      Locals:         3       0       0       0       0
   934 ;;      Temps:          2       0       0       0       0
   935 ;;      Totals:         5      17       0       0       0
   936 ;;Total ram usage:       22 bytes
   937 ;; Hardware stack levels used: 2
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_main
   942 ;;		_char_to_binary_string
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946     0511                     _sprintf:	
   947                           ;psect for function _sprintf
   948                           
   949                           
   950                           ;incstack = 0
   951                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   952                           ;sprintf@sp stored from wreg
   953     0511  00F4               	movwf	sprintf@sp
   954     0512                     l1378:
   955                           
   956                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   957     0512  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   958     0513  00F2               	movwf	sprintf@ap
   959                           
   960                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   961     0514  2D53               	goto	l1398
   962     0515                     l1380:
   963                           
   964                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   965     0515  3025               	movlw	37
   966     0516  0673               	xorwf	sprintf@c,w
   967     0517  1903               	btfsc	3,2
   968     0518  2D1A               	goto	u551
   969     0519  2D1B               	goto	u550
   970     051A                     u551:
   971     051A  2D25               	goto	l1386
   972     051B                     u550:
   973     051B                     l1382:
   974                           
   975                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   976     051B  0874               	movf	sprintf@sp,w
   977     051C  0084               	movwf	4
   978     051D  0873               	movf	sprintf@c,w
   979     051E  1383               	bcf	3,7	;select IRP bank0
   980     051F  0080               	movwf	0
   981     0520                     l1384:
   982     0520  3001               	movlw	1
   983     0521  00FF               	movwf	btemp+1
   984     0522  087F               	movf	btemp+1,w
   985     0523  07F4               	addwf	sprintf@sp,f
   986                           
   987                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
   988     0524  2D53               	goto	l1398
   989     0525                     l1386:
   990                           
   991                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   992     0525  2D39               	goto	l1396
   993     0526                     l1388:
   994                           
   995                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
   996     0526  0872               	movf	sprintf@ap,w
   997     0527  0084               	movwf	4
   998     0528  1383               	bcf	3,7	;select IRP bank0
   999     0529  0800               	movf	0,w
  1000     052A  00F3               	movwf	sprintf@c
  1001     052B                     l1390:
  1002     052B  3002               	movlw	2
  1003     052C  00FF               	movwf	btemp+1
  1004     052D  087F               	movf	btemp+1,w
  1005     052E  07F2               	addwf	sprintf@ap,f
  1006     052F                     l1392:
  1007                           
  1008                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  1009     052F  0874               	movf	sprintf@sp,w
  1010     0530  0084               	movwf	4
  1011     0531  0873               	movf	sprintf@c,w
  1012     0532  1383               	bcf	3,7	;select IRP bank0
  1013     0533  0080               	movwf	0
  1014     0534  3001               	movlw	1
  1015     0535  00FF               	movwf	btemp+1
  1016     0536  087F               	movf	btemp+1,w
  1017     0537  07F4               	addwf	sprintf@sp,f
  1018                           
  1019                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 836:    continue;
  1020     0538  2D53               	goto	l1398
  1021     0539                     l1396:
  1022     0539  3001               	movlw	1
  1023     053A  07A0               	addwf	sprintf@f,f
  1024     053B  30FF               	movlw	-1
  1025     053C  0720               	addwf	sprintf@f,w
  1026     053D  0084               	movwf	4
  1027     053E  120A  118A  2003  120A  118A  	fcall	stringdir
  1028     0543  00F3               	movwf	sprintf@c
  1029     0544  00F0               	movwf	??_sprintf
  1030     0545  01F1               	clrf	??_sprintf+1
  1031                           
  1032                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1033                           ; Switch size 1, requested type "simple"
  1034                           ; Number of cases is 1, Range of values is 0 to 0
  1035                           ; switch strategies available:
  1036                           ; Name         Instructions Cycles
  1037                           ; simple_byte            4     3 (average)
  1038                           ; direct_byte           11     8 (fixed)
  1039                           ; jumptable            260     6 (fixed)
  1040                           ;	Chosen strategy is simple_byte
  1041     0546  0871               	movf	??_sprintf+1,w
  1042     0547  3A00               	xorlw	0	; case 0
  1043     0548  1903               	skipnz
  1044     0549  2D4B               	goto	l1560
  1045     054A  2D2F               	goto	l1392
  1046     054B                     l1560:
  1047                           
  1048                           ; Switch size 1, requested type "simple"
  1049                           ; Number of cases is 2, Range of values is 0 to 99
  1050                           ; switch strategies available:
  1051                           ; Name         Instructions Cycles
  1052                           ; simple_byte            7     4 (average)
  1053                           ; jumptable            260     6 (fixed)
  1054                           ;	Chosen strategy is simple_byte
  1055     054B  0870               	movf	??_sprintf,w
  1056     054C  3A00               	xorlw	0	; case 0
  1057     054D  1903               	skipnz
  1058     054E  2D65               	goto	l1400
  1059     054F  3A63               	xorlw	99	; case 99
  1060     0550  1903               	skipnz
  1061     0551  2D26               	goto	l1388
  1062     0552  2D2F               	goto	l1392
  1063     0553                     l1398:
  1064                           
  1065                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1066     0553  3001               	movlw	1
  1067     0554  1283               	bcf	3,5	;RP0=0, select bank0
  1068     0555  1303               	bcf	3,6	;RP1=0, select bank0
  1069     0556  07A0               	addwf	sprintf@f,f
  1070     0557  30FF               	movlw	-1
  1071     0558  0720               	addwf	sprintf@f,w
  1072     0559  0084               	movwf	4
  1073     055A  120A  118A  2003  120A  118A  	fcall	stringdir
  1074     055F  00F3               	movwf	sprintf@c
  1075     0560  0873               	movf	sprintf@c,w
  1076     0561  1D03               	btfss	3,2
  1077     0562  2D64               	goto	u561
  1078     0563  2D65               	goto	u560
  1079     0564                     u561:
  1080     0564  2D15               	goto	l1380
  1081     0565                     u560:
  1082     0565                     l1400:
  1083                           
  1084                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1085     0565  0874               	movf	sprintf@sp,w
  1086     0566  0084               	movwf	4
  1087     0567  1383               	bcf	3,7	;select IRP bank0
  1088     0568  0180               	clrf	0
  1089     0569                     l286:
  1090     0569  0008               	return
  1091     056A                     __end_of_sprintf:
  1092                           
  1093                           	psect	text2
  1094     0715                     __ptext2:	
  1095 ;; *************** function _nrf_setup *****************
  1096 ;; Defined at:
  1097 ;;		line 162 in file "./nrf24l01.h"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;  addr            1    wreg     PTR unsigned char 
  1100 ;;		 -> RADIO_ADDR(5), 
  1101 ;;  payload_size    1   12[COMMON] unsigned char 
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  addr            1    0[BANK0 ] PTR unsigned char 
  1104 ;;		 -> RADIO_ADDR(5), 
  1105 ;;  data            5    1[BANK0 ] unsigned char [5]
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  1    wreg      void 
  1108 ;; Registers used:
  1109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1115 ;;      Params:         1       0       0       0       0
  1116 ;;      Locals:         0       6       0       0       0
  1117 ;;      Temps:          0       0       0       0       0
  1118 ;;      Totals:         1       6       0       0       0
  1119 ;;Total ram usage:        7 bytes
  1120 ;; Hardware stack levels used: 1
  1121 ;; Hardware stack levels required when called: 4
  1122 ;; This function calls:
  1123 ;;		_arrcpy
  1124 ;;		_nrf_flush_rxtx
  1125 ;;		_nrf_write_register
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131     0715                     _nrf_setup:	
  1132                           ;psect for function _nrf_setup
  1133                           
  1134                           
  1135                           ;incstack = 0
  1136                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1137                           ;nrf_setup@addr stored from wreg
  1138     0715  1283               	bcf	3,5	;RP0=0, select bank0
  1139     0716  1303               	bcf	3,6	;RP1=0, select bank0
  1140     0717  00A0               	movwf	nrf_setup@addr
  1141     0718                     l1338:
  1142                           
  1143                           ;./nrf24l01.h: 162:     void nrf_setup(uint8_t *addr, uint8_t payload_size);./nrf24l01.h
      +                          : 163:     {;./nrf24l01.h: 165:         TRISD3 = 0;
  1144     0718  1683               	bsf	3,5	;RP0=1, select bank1
  1145     0719  1303               	bcf	3,6	;RP1=0, select bank1
  1146     071A  1188               	bcf	8,3	;volatile
  1147                           
  1148                           ;./nrf24l01.h: 166:         TRISD2 = 0;
  1149     071B  1108               	bcf	8,2	;volatile
  1150                           
  1151                           ;./nrf24l01.h: 168:         RD3 = 1;
  1152     071C  1283               	bcf	3,5	;RP0=0, select bank0
  1153     071D  1303               	bcf	3,6	;RP1=0, select bank0
  1154     071E  1588               	bsf	8,3	;volatile
  1155                           
  1156                           ;./nrf24l01.h: 169:         RD2 = 0;
  1157     071F  1108               	bcf	8,2	;volatile
  1158     0720                     l1340:
  1159                           
  1160                           ;./nrf24l01.h: 171:         uint8_t data[5];;./nrf24l01.h: 173:         data[0] = 0x0B;
  1161     0720  300B               	movlw	11
  1162     0721  00A1               	movwf	nrf_setup@data
  1163     0722                     l1342:
  1164                           
  1165                           ;./nrf24l01.h: 174:         nrf_write_register(0x00, &data, 1);
  1166     0722  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1167     0723  00F8               	movwf	nrf_write_register@data
  1168     0724  01F9               	clrf	nrf_write_register@len
  1169     0725  0AF9               	incf	nrf_write_register@len,f
  1170     0726  3000               	movlw	0
  1171     0727  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1172     072C                     l1344:
  1173                           
  1174                           ;./nrf24l01.h: 175:         data[0] = 0x00;
  1175     072C  1283               	bcf	3,5	;RP0=0, select bank0
  1176     072D  1303               	bcf	3,6	;RP1=0, select bank0
  1177     072E  01A1               	clrf	nrf_setup@data
  1178     072F                     l1346:
  1179                           
  1180                           ;./nrf24l01.h: 176:         nrf_write_register(0x01, &data, 1);
  1181     072F  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1182     0730  00F8               	movwf	nrf_write_register@data
  1183     0731  01F9               	clrf	nrf_write_register@len
  1184     0732  0AF9               	incf	nrf_write_register@len,f
  1185     0733  3001               	movlw	1
  1186     0734  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1187     0739                     l1348:
  1188                           
  1189                           ;./nrf24l01.h: 177:         data[0] = 0x01;
  1190     0739  1283               	bcf	3,5	;RP0=0, select bank0
  1191     073A  1303               	bcf	3,6	;RP1=0, select bank0
  1192     073B  01A1               	clrf	nrf_setup@data
  1193     073C  0AA1               	incf	nrf_setup@data,f
  1194     073D                     l1350:
  1195                           
  1196                           ;./nrf24l01.h: 178:         nrf_write_register(0x02, &data, 1);
  1197     073D  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1198     073E  00F8               	movwf	nrf_write_register@data
  1199     073F  01F9               	clrf	nrf_write_register@len
  1200     0740  0AF9               	incf	nrf_write_register@len,f
  1201     0741  3002               	movlw	2
  1202     0742  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1203     0747                     l1352:
  1204                           
  1205                           ;./nrf24l01.h: 179:         data[0] = 0x01;
  1206     0747  1283               	bcf	3,5	;RP0=0, select bank0
  1207     0748  1303               	bcf	3,6	;RP1=0, select bank0
  1208     0749  01A1               	clrf	nrf_setup@data
  1209     074A  0AA1               	incf	nrf_setup@data,f
  1210     074B                     l1354:
  1211                           
  1212                           ;./nrf24l01.h: 180:         nrf_write_register(0x03, &data, 1);
  1213     074B  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1214     074C  00F8               	movwf	nrf_write_register@data
  1215     074D  01F9               	clrf	nrf_write_register@len
  1216     074E  0AF9               	incf	nrf_write_register@len,f
  1217     074F  3003               	movlw	3
  1218     0750  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1219     0755                     l1356:
  1220                           
  1221                           ;./nrf24l01.h: 181:         data[0] = 0x00;
  1222     0755  1283               	bcf	3,5	;RP0=0, select bank0
  1223     0756  1303               	bcf	3,6	;RP1=0, select bank0
  1224     0757  01A1               	clrf	nrf_setup@data
  1225     0758                     l1358:
  1226                           
  1227                           ;./nrf24l01.h: 182:         nrf_write_register(0x04, &data, 1);
  1228     0758  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1229     0759  00F8               	movwf	nrf_write_register@data
  1230     075A  01F9               	clrf	nrf_write_register@len
  1231     075B  0AF9               	incf	nrf_write_register@len,f
  1232     075C  3004               	movlw	4
  1233     075D  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1234     0762                     l1360:
  1235                           
  1236                           ;./nrf24l01.h: 183:         data[0] = 0x01;
  1237     0762  1283               	bcf	3,5	;RP0=0, select bank0
  1238     0763  1303               	bcf	3,6	;RP1=0, select bank0
  1239     0764  01A1               	clrf	nrf_setup@data
  1240     0765  0AA1               	incf	nrf_setup@data,f
  1241     0766                     l1362:
  1242                           
  1243                           ;./nrf24l01.h: 184:         nrf_write_register(0x05, &data, 1);
  1244     0766  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1245     0767  00F8               	movwf	nrf_write_register@data
  1246     0768  01F9               	clrf	nrf_write_register@len
  1247     0769  0AF9               	incf	nrf_write_register@len,f
  1248     076A  3005               	movlw	5
  1249     076B  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1250                           
  1251                           ;./nrf24l01.h: 185:         data[0] = 0x26;
  1252     0770  3026               	movlw	38
  1253     0771  1283               	bcf	3,5	;RP0=0, select bank0
  1254     0772  1303               	bcf	3,6	;RP1=0, select bank0
  1255     0773  00A1               	movwf	nrf_setup@data
  1256     0774                     l1364:
  1257                           
  1258                           ;./nrf24l01.h: 186:         nrf_write_register(0x06, &data, 1);
  1259     0774  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1260     0775  00F8               	movwf	nrf_write_register@data
  1261     0776  01F9               	clrf	nrf_write_register@len
  1262     0777  0AF9               	incf	nrf_write_register@len,f
  1263     0778  3006               	movlw	6
  1264     0779  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1265     077E                     l1366:
  1266                           
  1267                           ;./nrf24l01.h: 187:         data[0] = payload_size;
  1268     077E  087C               	movf	nrf_setup@payload_size,w
  1269     077F  1283               	bcf	3,5	;RP0=0, select bank0
  1270     0780  1303               	bcf	3,6	;RP1=0, select bank0
  1271     0781  00A1               	movwf	nrf_setup@data
  1272                           
  1273                           ;./nrf24l01.h: 188:         nrf_write_register(0x11, &data, 1);
  1274     0782  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1275     0783  00F8               	movwf	nrf_write_register@data
  1276     0784  01F9               	clrf	nrf_write_register@len
  1277     0785  0AF9               	incf	nrf_write_register@len,f
  1278     0786  3011               	movlw	17
  1279     0787  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1280                           
  1281                           ;./nrf24l01.h: 190:         arrcpy(data, addr, sizeof(addr));
  1282     078C  1283               	bcf	3,5	;RP0=0, select bank0
  1283     078D  1303               	bcf	3,6	;RP1=0, select bank0
  1284     078E  0820               	movf	nrf_setup@addr,w
  1285     078F  00F0               	movwf	arrcpy@src
  1286     0790  01F1               	clrf	arrcpy@len
  1287     0791  0AF1               	incf	arrcpy@len,f
  1288     0792  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1289     0793  120A  118A  2452  120A  118A  	fcall	_arrcpy
  1290                           
  1291                           ;./nrf24l01.h: 191:         nrf_write_register(0x0A, data, sizeof(addr));
  1292     0798  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1293     0799  00F8               	movwf	nrf_write_register@data
  1294     079A  01F9               	clrf	nrf_write_register@len
  1295     079B  0AF9               	incf	nrf_write_register@len,f
  1296     079C  300A               	movlw	10
  1297     079D  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1298                           
  1299                           ;./nrf24l01.h: 193:         arrcpy(data, addr, sizeof(addr));
  1300     07A2  1283               	bcf	3,5	;RP0=0, select bank0
  1301     07A3  1303               	bcf	3,6	;RP1=0, select bank0
  1302     07A4  0820               	movf	nrf_setup@addr,w
  1303     07A5  00F0               	movwf	arrcpy@src
  1304     07A6  01F1               	clrf	arrcpy@len
  1305     07A7  0AF1               	incf	arrcpy@len,f
  1306     07A8  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1307     07A9  120A  118A  2452  120A  118A  	fcall	_arrcpy
  1308                           
  1309                           ;./nrf24l01.h: 194:         nrf_write_register(0x10, data, sizeof(addr));
  1310     07AE  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1311     07AF  00F8               	movwf	nrf_write_register@data
  1312     07B0  01F9               	clrf	nrf_write_register@len
  1313     07B1  0AF9               	incf	nrf_write_register@len,f
  1314     07B2  3010               	movlw	16
  1315     07B3  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1316                           
  1317                           ;./nrf24l01.h: 196:         nrf_flush_rxtx();
  1318     07B8  120A  118A  2439  120A  118A  	fcall	_nrf_flush_rxtx
  1319     07BD                     l115:
  1320     07BD  0008               	return
  1321     07BE                     __end_of_nrf_setup:
  1322                           
  1323                           	psect	text3
  1324     0439                     __ptext3:	
  1325 ;; *************** function _nrf_flush_rxtx *****************
  1326 ;; Defined at:
  1327 ;;		line 152 in file "./nrf24l01.h"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;		None
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;  data            1   11[COMMON] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1341 ;;      Params:         0       0       0       0       0
  1342 ;;      Locals:         1       0       0       0       0
  1343 ;;      Temps:          0       0       0       0       0
  1344 ;;      Totals:         1       0       0       0       0
  1345 ;;Total ram usage:        1 bytes
  1346 ;; Hardware stack levels used: 1
  1347 ;; Hardware stack levels required when called: 3
  1348 ;; This function calls:
  1349 ;;		_nrf_write_command
  1350 ;;		_nrf_write_register
  1351 ;; This function is called by:
  1352 ;;		_nrf_setup
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356     0439                     _nrf_flush_rxtx:	
  1357                           ;psect for function _nrf_flush_rxtx
  1358                           
  1359     0439                     l1242:	
  1360                           ;incstack = 0
  1361                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1362                           
  1363                           
  1364                           ;./nrf24l01.h: 154:         uint8_t data = 0b01110000;
  1365     0439  3070               	movlw	112
  1366     043A  00FB               	movwf	nrf_flush_rxtx@data
  1367     043B                     l1244:
  1368                           
  1369                           ;./nrf24l01.h: 155:         nrf_write_register(0x07, &data, 1);
  1370     043B  307B               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1371     043C  00F8               	movwf	nrf_write_register@data
  1372     043D  01F9               	clrf	nrf_write_register@len
  1373     043E  0AF9               	incf	nrf_write_register@len,f
  1374     043F  3007               	movlw	7
  1375     0440  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1376     0445                     l1246:
  1377                           
  1378                           ;./nrf24l01.h: 156:         nrf_write_command(0b11100001);
  1379     0445  30E1               	movlw	225
  1380     0446  120A  118A  2413  120A  118A  	fcall	_nrf_write_command
  1381     044B                     l1248:
  1382                           
  1383                           ;./nrf24l01.h: 157:         nrf_write_command(0b11100010);
  1384     044B  30E2               	movlw	226
  1385     044C  120A  118A  2413  120A  118A  	fcall	_nrf_write_command
  1386     0451                     l112:
  1387     0451  0008               	return
  1388     0452                     __end_of_nrf_flush_rxtx:
  1389                           
  1390                           	psect	text4
  1391     0452                     __ptext4:	
  1392 ;; *************** function _arrcpy *****************
  1393 ;; Defined at:
  1394 ;;		line 95 in file "./nrf24l01.h"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;  dst             1    wreg     PTR unsigned char 
  1397 ;;		 -> main@send_data(3), nrf_setup@data(5), 
  1398 ;;  src             1    0[COMMON] PTR unsigned char 
  1399 ;;		 -> main@data(3), RADIO_ADDR(5), 
  1400 ;;  len             1    1[COMMON] unsigned char 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  dst             1    4[COMMON] PTR unsigned char 
  1403 ;;		 -> main@send_data(3), nrf_setup@data(5), 
  1404 ;;  i               1    5[COMMON] unsigned char 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1414 ;;      Params:         2       0       0       0       0
  1415 ;;      Locals:         2       0       0       0       0
  1416 ;;      Temps:          2       0       0       0       0
  1417 ;;      Totals:         6       0       0       0       0
  1418 ;;Total ram usage:        6 bytes
  1419 ;; Hardware stack levels used: 1
  1420 ;; This function calls:
  1421 ;;		Nothing
  1422 ;; This function is called by:
  1423 ;;		_nrf_setup
  1424 ;;		_main
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428     0452                     _arrcpy:	
  1429                           ;psect for function _arrcpy
  1430                           
  1431                           
  1432                           ;incstack = 0
  1433                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0+btemp+1]
  1434                           ;arrcpy@dst stored from wreg
  1435     0452  00F4               	movwf	arrcpy@dst
  1436     0453                     l1226:
  1437                           
  1438                           ;./nrf24l01.h: 95:     void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);./nrf24l01.h
      +                          : 96:     {;./nrf24l01.h: 97:         for (uint8_t i = 0; i < len; i++)
  1439     0453  01F5               	clrf	arrcpy@i
  1440     0454  2C68               	goto	l1232
  1441     0455                     l1228:
  1442                           
  1443                           ;./nrf24l01.h: 98:         {;./nrf24l01.h: 99:             dst[i] = src[i];
  1444     0455  0875               	movf	arrcpy@i,w
  1445     0456  0770               	addwf	arrcpy@src,w
  1446     0457  00F2               	movwf	??_arrcpy
  1447     0458  0872               	movf	??_arrcpy,w
  1448     0459  0084               	movwf	4
  1449     045A  1383               	bcf	3,7	;select IRP bank0
  1450     045B  0800               	movf	0,w
  1451     045C  00FF               	movwf	btemp+1
  1452     045D  0875               	movf	arrcpy@i,w
  1453     045E  0774               	addwf	arrcpy@dst,w
  1454     045F  00F3               	movwf	??_arrcpy+1
  1455     0460  0873               	movf	??_arrcpy+1,w
  1456     0461  0084               	movwf	4
  1457     0462  087F               	movf	btemp+1,w
  1458     0463  0080               	movwf	0
  1459     0464                     l1230:
  1460                           
  1461                           ;./nrf24l01.h: 100:         }
  1462     0464  3001               	movlw	1
  1463     0465  00FF               	movwf	btemp+1
  1464     0466  087F               	movf	btemp+1,w
  1465     0467  07F5               	addwf	arrcpy@i,f
  1466     0468                     l1232:
  1467     0468  0871               	movf	arrcpy@len,w
  1468     0469  0275               	subwf	arrcpy@i,w
  1469     046A  1C03               	skipc
  1470     046B  2C6D               	goto	u381
  1471     046C  2C6E               	goto	u380
  1472     046D                     u381:
  1473     046D  2C55               	goto	l1228
  1474     046E                     u380:
  1475     046E                     l91:
  1476     046E  0008               	return
  1477     046F                     __end_of_arrcpy:
  1478                           
  1479                           	psect	text5
  1480     04B4                     __ptext5:	
  1481 ;; *************** function _nrf_send *****************
  1482 ;; Defined at:
  1483 ;;		line 239 in file "./nrf24l01.h"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  data            1    wreg     PTR unsigned char 
  1486 ;;		 -> main@send_data(3), 
  1487 ;;  len             1    0[BANK0 ] unsigned char 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  data            1    2[BANK0 ] PTR unsigned char 
  1490 ;;		 -> main@send_data(3), 
  1491 ;;  clear           1    3[BANK0 ] unsigned char 
  1492 ;;  stat            1    1[BANK0 ] unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      void 
  1495 ;; Registers used:
  1496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1502 ;;      Params:         0       1       0       0       0
  1503 ;;      Locals:         0       3       0       0       0
  1504 ;;      Temps:          0       0       0       0       0
  1505 ;;      Totals:         0       4       0       0       0
  1506 ;;Total ram usage:        4 bytes
  1507 ;; Hardware stack levels used: 1
  1508 ;; Hardware stack levels required when called: 4
  1509 ;; This function calls:
  1510 ;;		_nrf_set_tx_mode
  1511 ;;		_nrf_write_command
  1512 ;;		_nrf_write_payload
  1513 ;;		_nrf_write_register
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519     04B4                     _nrf_send:	
  1520                           ;psect for function _nrf_send
  1521                           
  1522                           
  1523                           ;incstack = 0
  1524                           ; Regs used in _nrf_send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1525                           ;nrf_send@data stored from wreg
  1526     04B4  1283               	bcf	3,5	;RP0=0, select bank0
  1527     04B5  1303               	bcf	3,6	;RP1=0, select bank0
  1528     04B6  00A2               	movwf	nrf_send@data
  1529     04B7                     l1368:
  1530                           
  1531                           ;./nrf24l01.h: 239:     void nrf_send(uint8_t *data, uint8_t len);./nrf24l01.h: 240:    
      +                           {;./nrf24l01.h: 241:         nrf_set_tx_mode();
  1532     04B7  120A  118A  2490  120A  118A  	fcall	_nrf_set_tx_mode
  1533                           
  1534                           ;./nrf24l01.h: 242:         nrf_write_payload(data, len);
  1535     04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1536     04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1537     04BE  0820               	movf	nrf_send@len,w
  1538     04BF  00FB               	movwf	nrf_write_payload@len
  1539     04C0  0822               	movf	nrf_send@data,w
  1540     04C1  120A  118A  2423  120A  118A  	fcall	_nrf_write_payload
  1541     04C6                     l1370:
  1542                           
  1543                           ;./nrf24l01.h: 247:         {;./nrf24l01.h: 248:             stat = nrf_write_command(0b
      +                          11111111);
  1544     04C6  30FF               	movlw	255
  1545     04C7  120A  118A  2413  120A  118A  	fcall	_nrf_write_command
  1546     04CC  1283               	bcf	3,5	;RP0=0, select bank0
  1547     04CD  1303               	bcf	3,6	;RP1=0, select bank0
  1548     04CE  00A1               	movwf	nrf_send@stat
  1549     04CF                     l1372:
  1550                           
  1551                           ;./nrf24l01.h: 249:         } while ((stat & 0x20) == 0);
  1552     04CF  1EA1               	btfss	nrf_send@stat,5
  1553     04D0  2CD2               	goto	u541
  1554     04D1  2CD3               	goto	u540
  1555     04D2                     u541:
  1556     04D2  2CC6               	goto	l1370
  1557     04D3                     u540:
  1558     04D3                     l1374:
  1559                           
  1560                           ;./nrf24l01.h: 252:         uint8_t clear = 0x20;
  1561     04D3  3020               	movlw	32
  1562     04D4  00A3               	movwf	nrf_send@clear
  1563     04D5                     l1376:
  1564                           
  1565                           ;./nrf24l01.h: 253:         nrf_write_register(0x07, &clear, 1);
  1566     04D5  3023               	movlw	(low (nrf_send@clear| 0))& (0+255)
  1567     04D6  00F8               	movwf	nrf_write_register@data
  1568     04D7  01F9               	clrf	nrf_write_register@len
  1569     04D8  0AF9               	incf	nrf_write_register@len,f
  1570     04D9  3007               	movlw	7
  1571     04DA  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1572     04DF                     l131:
  1573     04DF  0008               	return
  1574     04E0                     __end_of_nrf_send:
  1575                           
  1576                           	psect	text6
  1577     0423                     __ptext6:	
  1578 ;; *************** function _nrf_write_payload *****************
  1579 ;; Defined at:
  1580 ;;		line 131 in file "./nrf24l01.h"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  data            1    wreg     PTR unsigned char 
  1583 ;;		 -> main@send_data(3), 
  1584 ;;  len             1   11[COMMON] unsigned char 
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  data            1   13[COMMON] PTR unsigned char 
  1587 ;;		 -> main@send_data(3), 
  1588 ;;  status          1    0        unsigned char 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      unsigned char 
  1591 ;; Registers used:
  1592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1598 ;;      Params:         1       0       0       0       0
  1599 ;;      Locals:         1       0       0       0       0
  1600 ;;      Temps:          1       0       0       0       0
  1601 ;;      Totals:         3       0       0       0       0
  1602 ;;Total ram usage:        3 bytes
  1603 ;; Hardware stack levels used: 1
  1604 ;; Hardware stack levels required when called: 3
  1605 ;; This function calls:
  1606 ;;		_nrf_write_register
  1607 ;; This function is called by:
  1608 ;;		_nrf_send
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612     0423                     _nrf_write_payload:	
  1613                           ;psect for function _nrf_write_payload
  1614                           
  1615                           
  1616                           ;incstack = 0
  1617                           ; Regs used in _nrf_write_payload: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1618                           ;nrf_write_payload@data stored from wreg
  1619     0423  00FD               	movwf	nrf_write_payload@data
  1620     0424                     l1234:
  1621     0424  087D               	movf	nrf_write_payload@data,w
  1622     0425  00F8               	movwf	nrf_write_register@data
  1623     0426  087B               	movf	nrf_write_payload@len,w
  1624     0427  00F9               	movwf	nrf_write_register@len
  1625     0428  30A0               	movlw	160
  1626     0429  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1627     042E                     l1236:
  1628                           
  1629                           ;./nrf24l01.h: 134:         RD2 = 1;
  1630     042E  1283               	bcf	3,5	;RP0=0, select bank0
  1631     042F  1303               	bcf	3,6	;RP1=0, select bank0
  1632     0430  1508               	bsf	8,2	;volatile
  1633     0431                     l1238:
  1634                           
  1635                           ;./nrf24l01.h: 135:         _delay((unsigned long)((20)*(8000000UL/4000000.0)));
  1636     0431  300D               	movlw	13
  1637     0432  00FC               	movwf	??_nrf_write_payload
  1638     0433                     u697:
  1639     0433  0BFC               	decfsz	??_nrf_write_payload,f
  1640     0434  2C33               	goto	u697
  1641     0435                     l1240:
  1642                           
  1643                           ;./nrf24l01.h: 136:         RD2 = 0;
  1644     0435  1283               	bcf	3,5	;RP0=0, select bank0
  1645     0436  1303               	bcf	3,6	;RP1=0, select bank0
  1646     0437  1108               	bcf	8,2	;volatile
  1647     0438                     l106:
  1648     0438  0008               	return
  1649     0439                     __end_of_nrf_write_payload:
  1650                           
  1651                           	psect	text7
  1652     0413                     __ptext7:	
  1653 ;; *************** function _nrf_write_command *****************
  1654 ;; Defined at:
  1655 ;;		line 140 in file "./nrf24l01.h"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  NRF_command     1    wreg     unsigned char 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  NRF_command     1    1[COMMON] unsigned char 
  1660 ;;  status          1    2[COMMON] unsigned char 
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      unsigned char 
  1663 ;; Registers used:
  1664 ;;		wreg, pclath, cstack
  1665 ;; Tracked objects:
  1666 ;;		On entry : 0/0
  1667 ;;		On exit  : 0/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1670 ;;      Params:         0       0       0       0       0
  1671 ;;      Locals:         2       0       0       0       0
  1672 ;;      Temps:          0       0       0       0       0
  1673 ;;      Totals:         2       0       0       0       0
  1674 ;;Total ram usage:        2 bytes
  1675 ;; Hardware stack levels used: 1
  1676 ;; Hardware stack levels required when called: 1
  1677 ;; This function calls:
  1678 ;;		_SPI_write
  1679 ;; This function is called by:
  1680 ;;		_nrf_flush_rxtx
  1681 ;;		_nrf_send
  1682 ;;		_nrf_data_available
  1683 ;;		_nrf_read
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687     0413                     _nrf_write_command:	
  1688                           ;psect for function _nrf_write_command
  1689                           
  1690                           
  1691                           ;incstack = 0
  1692                           ; Regs used in _nrf_write_command: [wreg+pclath+cstack]
  1693                           ;nrf_write_command@NRF_command stored from wreg
  1694     0413  00F1               	movwf	nrf_write_command@NRF_command
  1695     0414                     l1212:
  1696                           
  1697                           ;./nrf24l01.h: 140:     uint8_t nrf_write_command(uint8_t NRF_command);./nrf24l01.h: 141
      +                          :     {;./nrf24l01.h: 142:         RD3 = 0;
  1698     0414  1283               	bcf	3,5	;RP0=0, select bank0
  1699     0415  1303               	bcf	3,6	;RP1=0, select bank0
  1700     0416  1188               	bcf	8,3	;volatile
  1701     0417                     l1214:
  1702                           
  1703                           ;./nrf24l01.h: 143:         uint8_t status = SPI_write(NRF_command);
  1704     0417  0871               	movf	nrf_write_command@NRF_command,w
  1705     0418  120A  118A  2404  120A  118A  	fcall	_SPI_write
  1706     041D  00F2               	movwf	nrf_write_command@status
  1707     041E                     l1216:
  1708                           
  1709                           ;./nrf24l01.h: 144:         RD3 = 1;
  1710     041E  1283               	bcf	3,5	;RP0=0, select bank0
  1711     041F  1303               	bcf	3,6	;RP1=0, select bank0
  1712     0420  1588               	bsf	8,3	;volatile
  1713     0421                     l1218:
  1714                           
  1715                           ;./nrf24l01.h: 145:         return status;
  1716     0421  0872               	movf	nrf_write_command@status,w
  1717     0422                     l109:
  1718     0422  0008               	return
  1719     0423                     __end_of_nrf_write_command:
  1720                           
  1721                           	psect	text8
  1722     0490                     __ptext8:	
  1723 ;; *************** function _nrf_set_tx_mode *****************
  1724 ;; Defined at:
  1725 ;;		line 215 in file "./nrf24l01.h"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;		None
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;  config          1   11[COMMON] unsigned char 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  1    wreg      void 
  1732 ;; Registers used:
  1733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1739 ;;      Params:         0       0       0       0       0
  1740 ;;      Locals:         1       0       0       0       0
  1741 ;;      Temps:          0       0       0       0       0
  1742 ;;      Totals:         1       0       0       0       0
  1743 ;;Total ram usage:        1 bytes
  1744 ;; Hardware stack levels used: 1
  1745 ;; Hardware stack levels required when called: 3
  1746 ;; This function calls:
  1747 ;;		_nrf_read_register
  1748 ;;		_nrf_write_register
  1749 ;; This function is called by:
  1750 ;;		_nrf_send
  1751 ;;		_main
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755     0490                     _nrf_set_tx_mode:	
  1756                           ;psect for function _nrf_set_tx_mode
  1757                           
  1758     0490                     l1250:	
  1759                           ;incstack = 0
  1760                           ; Regs used in _nrf_set_tx_mode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1761                           
  1762                           
  1763                           ;./nrf24l01.h: 217:         uint8_t config;;./nrf24l01.h: 218:         nrf_read_register
      +                          (0x00, &config, 1);
  1764     0490  307B               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1765     0491  00F8               	movwf	nrf_read_register@data
  1766     0492  01F9               	clrf	nrf_read_register@len
  1767     0493  0AF9               	incf	nrf_read_register@len,f
  1768     0494  3000               	movlw	0
  1769     0495  120A  118A  23EB  120A  118A  	fcall	_nrf_read_register
  1770     049A                     l1252:
  1771                           
  1772                           ;./nrf24l01.h: 220:         RD2 = 0;
  1773     049A  1283               	bcf	3,5	;RP0=0, select bank0
  1774     049B  1303               	bcf	3,6	;RP1=0, select bank0
  1775     049C  1108               	bcf	8,2	;volatile
  1776     049D                     l1254:
  1777                           
  1778                           ;./nrf24l01.h: 222:         if (!(config & 0x01))
  1779     049D  187B               	btfsc	nrf_set_tx_mode@config,0
  1780     049E  2CA0               	goto	u391
  1781     049F  2CA1               	goto	u390
  1782     04A0                     u391:
  1783     04A0  2CA2               	goto	l1258
  1784     04A1                     u390:
  1785     04A1  2CB3               	goto	l123
  1786     04A2                     l1258:
  1787                           
  1788                           ;./nrf24l01.h: 225:         config &= ~0x01;
  1789     04A2  30FE               	movlw	254
  1790     04A3  00FF               	movwf	btemp+1
  1791     04A4  087F               	movf	btemp+1,w
  1792     04A5  05FB               	andwf	nrf_set_tx_mode@config,f
  1793     04A6                     l1260:
  1794                           
  1795                           ;./nrf24l01.h: 226:         nrf_write_register(0x00, &config, 1);
  1796     04A6  307B               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1797     04A7  00F8               	movwf	nrf_write_register@data
  1798     04A8  01F9               	clrf	nrf_write_register@len
  1799     04A9  0AF9               	incf	nrf_write_register@len,f
  1800     04AA  3000               	movlw	0
  1801     04AB  120A  118A  23F7  120A  118A  	fcall	_nrf_write_register
  1802     04B0                     l1262:
  1803                           
  1804                           ;./nrf24l01.h: 228:         RD2 = 0;
  1805     04B0  1283               	bcf	3,5	;RP0=0, select bank0
  1806     04B1  1303               	bcf	3,6	;RP1=0, select bank0
  1807     04B2  1108               	bcf	8,2	;volatile
  1808     04B3                     l123:
  1809     04B3  0008               	return
  1810     04B4                     __end_of_nrf_set_tx_mode:
  1811                           
  1812                           	psect	text9
  1813     03F7                     __ptext9:	
  1814 ;; *************** function _nrf_write_register *****************
  1815 ;; Defined at:
  1816 ;;		line 119 in file "./nrf24l01.h"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;  reg             1    wreg     unsigned char 
  1819 ;;  data            1    8[COMMON] PTR unsigned char 
  1820 ;;		 -> main@send_data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1821 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1822 ;;  len             1    9[COMMON] unsigned char 
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;  reg             1   10[COMMON] unsigned char 
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      unsigned char 
  1827 ;; Registers used:
  1828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1834 ;;      Params:         2       0       0       0       0
  1835 ;;      Locals:         1       0       0       0       0
  1836 ;;      Temps:          0       0       0       0       0
  1837 ;;      Totals:         3       0       0       0       0
  1838 ;;Total ram usage:        3 bytes
  1839 ;; Hardware stack levels used: 1
  1840 ;; Hardware stack levels required when called: 2
  1841 ;; This function calls:
  1842 ;;		_nrf_command
  1843 ;; This function is called by:
  1844 ;;		_nrf_write_payload
  1845 ;;		_nrf_flush_rxtx
  1846 ;;		_nrf_setup
  1847 ;;		_nrf_set_tx_mode
  1848 ;;		_nrf_send
  1849 ;;		_nrf_set_rx_mode
  1850 ;;		_nrf_read
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854     03F7                     _nrf_write_register:	
  1855                           ;psect for function _nrf_write_register
  1856                           
  1857                           
  1858                           ;incstack = 0
  1859                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1860                           ;nrf_write_register@reg stored from wreg
  1861     03F7  00FA               	movwf	nrf_write_register@reg
  1862     03F8                     l1204:
  1863                           
  1864                           ;./nrf24l01.h: 119:     uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t l
      +                          en);./nrf24l01.h: 120:     {;./nrf24l01.h: 121:         return nrf_command(reg | 0b00100
      +                          000, data, len);
  1865     03F8  0878               	movf	nrf_write_register@data,w
  1866     03F9  00F1               	movwf	nrf_command@data
  1867     03FA  0879               	movf	nrf_write_register@len,w
  1868     03FB  00F2               	movwf	nrf_command@len
  1869     03FC  087A               	movf	nrf_write_register@reg,w
  1870     03FD  3820               	iorlw	32
  1871     03FE  120A  118A  24E0  120A  118A  	fcall	_nrf_command
  1872     0403                     l100:
  1873     0403  0008               	return
  1874     0404                     __end_of_nrf_write_register:
  1875                           
  1876                           	psect	text10
  1877     03EB                     __ptext10:	
  1878 ;; *************** function _nrf_read_register *****************
  1879 ;; Defined at:
  1880 ;;		line 125 in file "./nrf24l01.h"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  reg             1    wreg     unsigned char 
  1883 ;;  data            1    8[COMMON] PTR unsigned char 
  1884 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1885 ;;  len             1    9[COMMON] unsigned char 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  reg             1   10[COMMON] unsigned char 
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  1    wreg      unsigned char 
  1890 ;; Registers used:
  1891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1897 ;;      Params:         2       0       0       0       0
  1898 ;;      Locals:         1       0       0       0       0
  1899 ;;      Temps:          0       0       0       0       0
  1900 ;;      Totals:         3       0       0       0       0
  1901 ;;Total ram usage:        3 bytes
  1902 ;; Hardware stack levels used: 1
  1903 ;; Hardware stack levels required when called: 2
  1904 ;; This function calls:
  1905 ;;		_nrf_command
  1906 ;; This function is called by:
  1907 ;;		_nrf_set_tx_mode
  1908 ;;		_nrf_set_rx_mode
  1909 ;;		_nrf_read
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913     03EB                     _nrf_read_register:	
  1914                           ;psect for function _nrf_read_register
  1915                           
  1916                           
  1917                           ;incstack = 0
  1918                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1919                           ;nrf_read_register@reg stored from wreg
  1920     03EB  00FA               	movwf	nrf_read_register@reg
  1921     03EC                     l1208:
  1922                           
  1923                           ;./nrf24l01.h: 125:     uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t le
      +                          n);./nrf24l01.h: 126:     {;./nrf24l01.h: 127:         return nrf_command(reg | 0b000000
      +                          00, data, len);
  1924     03EC  0878               	movf	nrf_read_register@data,w
  1925     03ED  00F1               	movwf	nrf_command@data
  1926     03EE  0879               	movf	nrf_read_register@len,w
  1927     03EF  00F2               	movwf	nrf_command@len
  1928     03F0  087A               	movf	nrf_read_register@reg,w
  1929     03F1  120A  118A  24E0  120A  118A  	fcall	_nrf_command
  1930     03F6                     l103:
  1931     03F6  0008               	return
  1932     03F7                     __end_of_nrf_read_register:
  1933                           
  1934                           	psect	text11
  1935     04E0                     __ptext11:	
  1936 ;; *************** function _nrf_command *****************
  1937 ;; Defined at:
  1938 ;;		line 105 in file "./nrf24l01.h"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  NRF_command     1    wreg     unsigned char 
  1941 ;;  data            1    1[COMMON] PTR unsigned char 
  1942 ;;		 -> main@send_data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1943 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1944 ;;  len             1    2[COMMON] unsigned char 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  NRF_command     1    5[COMMON] unsigned char 
  1947 ;;  i               1    7[COMMON] unsigned char 
  1948 ;;  status          1    6[COMMON] unsigned char 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      unsigned char 
  1951 ;; Registers used:
  1952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1958 ;;      Params:         2       0       0       0       0
  1959 ;;      Locals:         3       0       0       0       0
  1960 ;;      Temps:          2       0       0       0       0
  1961 ;;      Totals:         7       0       0       0       0
  1962 ;;Total ram usage:        7 bytes
  1963 ;; Hardware stack levels used: 1
  1964 ;; Hardware stack levels required when called: 1
  1965 ;; This function calls:
  1966 ;;		_SPI_write
  1967 ;; This function is called by:
  1968 ;;		_nrf_write_register
  1969 ;;		_nrf_read_register
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973     04E0                     _nrf_command:	
  1974                           ;psect for function _nrf_command
  1975                           
  1976                           
  1977                           ;incstack = 0
  1978                           ; Regs used in _nrf_command: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1979                           ;nrf_command@NRF_command stored from wreg
  1980     04E0  00F5               	movwf	nrf_command@NRF_command
  1981     04E1                     l1188:
  1982                           
  1983                           ;./nrf24l01.h: 105:     uint8_t nrf_command(uint8_t NRF_command, uint8_t *data, uint8_t 
      +                          len);./nrf24l01.h: 106:     {;./nrf24l01.h: 107:         RD3 = 0;
  1984     04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1985     04E2  1303               	bcf	3,6	;RP1=0, select bank0
  1986     04E3  1188               	bcf	8,3	;volatile
  1987     04E4                     l1190:
  1988                           
  1989                           ;./nrf24l01.h: 109:         uint8_t status = SPI_write(NRF_command);
  1990     04E4  0875               	movf	nrf_command@NRF_command,w
  1991     04E5  120A  118A  2404  120A  118A  	fcall	_SPI_write
  1992     04EA  00F6               	movwf	nrf_command@status
  1993     04EB                     l1192:
  1994                           
  1995                           ;./nrf24l01.h: 110:         for (uint8_t i = 0; i < len; i++)
  1996     04EB  01F7               	clrf	nrf_command@i
  1997     04EC  2D06               	goto	l1198
  1998     04ED                     l1194:
  1999                           
  2000                           ;./nrf24l01.h: 111:             data[i] = SPI_write(data[i]);
  2001     04ED  0877               	movf	nrf_command@i,w
  2002     04EE  0771               	addwf	nrf_command@data,w
  2003     04EF  00F3               	movwf	??_nrf_command
  2004     04F0  0873               	movf	??_nrf_command,w
  2005     04F1  0084               	movwf	4
  2006     04F2  1383               	bcf	3,7	;select IRP bank0
  2007     04F3  0800               	movf	0,w
  2008     04F4  120A  118A  2404  120A  118A  	fcall	_SPI_write
  2009     04F9  00FF               	movwf	btemp+1
  2010     04FA  0877               	movf	nrf_command@i,w
  2011     04FB  0771               	addwf	nrf_command@data,w
  2012     04FC  00F4               	movwf	??_nrf_command+1
  2013     04FD  0874               	movf	??_nrf_command+1,w
  2014     04FE  0084               	movwf	4
  2015     04FF  087F               	movf	btemp+1,w
  2016     0500  1383               	bcf	3,7	;select IRP bank0
  2017     0501  0080               	movwf	0
  2018     0502                     l1196:
  2019     0502  3001               	movlw	1
  2020     0503  00FF               	movwf	btemp+1
  2021     0504  087F               	movf	btemp+1,w
  2022     0505  07F7               	addwf	nrf_command@i,f
  2023     0506                     l1198:
  2024     0506  0872               	movf	nrf_command@len,w
  2025     0507  0277               	subwf	nrf_command@i,w
  2026     0508  1C03               	skipc
  2027     0509  2D0B               	goto	u361
  2028     050A  2D0C               	goto	u360
  2029     050B                     u361:
  2030     050B  2CED               	goto	l1194
  2031     050C                     u360:
  2032     050C                     l96:
  2033                           
  2034                           ;./nrf24l01.h: 113:         RD3 = 1;
  2035     050C  1283               	bcf	3,5	;RP0=0, select bank0
  2036     050D  1303               	bcf	3,6	;RP1=0, select bank0
  2037     050E  1588               	bsf	8,3	;volatile
  2038     050F                     l1200:
  2039                           
  2040                           ;./nrf24l01.h: 115:         return status;
  2041     050F  0876               	movf	nrf_command@status,w
  2042     0510                     l97:
  2043     0510  0008               	return
  2044     0511                     __end_of_nrf_command:
  2045                           
  2046                           	psect	text12
  2047     0404                     __ptext12:	
  2048 ;; *************** function _SPI_write *****************
  2049 ;; Defined at:
  2050 ;;		line 40 in file "./spi.h"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  data            1    wreg     unsigned char 
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;  data            1    0[COMMON] unsigned char 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      unsigned char 
  2057 ;; Registers used:
  2058 ;;		wreg
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2064 ;;      Params:         0       0       0       0       0
  2065 ;;      Locals:         1       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0
  2067 ;;      Totals:         1       0       0       0       0
  2068 ;;Total ram usage:        1 bytes
  2069 ;; Hardware stack levels used: 1
  2070 ;; This function calls:
  2071 ;;		Nothing
  2072 ;; This function is called by:
  2073 ;;		_nrf_command
  2074 ;;		_nrf_write_command
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078     0404                     _SPI_write:	
  2079                           ;psect for function _SPI_write
  2080                           
  2081                           
  2082                           ;incstack = 0
  2083                           ; Regs used in _SPI_write: [wreg]
  2084                           ;SPI_write@data stored from wreg
  2085     0404  00F0               	movwf	SPI_write@data
  2086     0405                     l1182:
  2087                           
  2088                           ;./spi.h: 40:     uint8_t SPI_write(uint8_t data);./spi.h: 41:     {;./spi.h: 42:       
      +                            SSPBUF = data;
  2089     0405  0870               	movf	SPI_write@data,w
  2090     0406  1283               	bcf	3,5	;RP0=0, select bank0
  2091     0407  1303               	bcf	3,6	;RP1=0, select bank0
  2092     0408  0093               	movwf	19	;volatile
  2093     0409                     l82:	
  2094                           ;./spi.h: 44:             ;
  2095                           
  2096                           
  2097                           ;./spi.h: 43:         while (!BF)
  2098     0409  1683               	bsf	3,5	;RP0=1, select bank1
  2099     040A  1303               	bcf	3,6	;RP1=0, select bank1
  2100     040B  1C14               	btfss	20,0	;volatile
  2101     040C  2C0E               	goto	u351
  2102     040D  2C0F               	goto	u350
  2103     040E                     u351:
  2104     040E  2C09               	goto	l82
  2105     040F                     u350:
  2106     040F                     l1184:
  2107                           
  2108                           ;./spi.h: 45:         return SSPBUF;
  2109     040F  1283               	bcf	3,5	;RP0=0, select bank0
  2110     0410  1303               	bcf	3,6	;RP1=0, select bank0
  2111     0411  0813               	movf	19,w	;volatile
  2112     0412                     l85:
  2113     0412  0008               	return
  2114     0413                     __end_of_SPI_write:
  2115                           
  2116                           	psect	text13
  2117     046F                     __ptext13:	
  2118 ;; *************** function _UART_write_text *****************
  2119 ;; Defined at:
  2120 ;;		line 41 in file "./uart.h"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  text            1    wreg     PTR unsigned char 
  2123 ;;		 -> main@buffer(64), 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  text            1    4[COMMON] PTR unsigned char 
  2126 ;;		 -> main@buffer(64), 
  2127 ;;  i               2    2[COMMON] int 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2137 ;;      Params:         0       0       0       0       0
  2138 ;;      Locals:         3       0       0       0       0
  2139 ;;      Temps:          1       0       0       0       0
  2140 ;;      Totals:         4       0       0       0       0
  2141 ;;Total ram usage:        4 bytes
  2142 ;; Hardware stack levels used: 1
  2143 ;; Hardware stack levels required when called: 1
  2144 ;; This function calls:
  2145 ;;		_UART_write
  2146 ;; This function is called by:
  2147 ;;		_main
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151     046F                     _UART_write_text:	
  2152                           ;psect for function _UART_write_text
  2153                           
  2154                           
  2155                           ;incstack = 0
  2156                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2157                           ;UART_write_text@text stored from wreg
  2158     046F  00F4               	movwf	UART_write_text@text
  2159     0470                     l1322:
  2160                           
  2161                           ;./uart.h: 41:  void UART_write_text(char *text);./uart.h: 42:  {;./uart.h: 43:   for (i
      +                          nt i = 0; text[i] != '\0'; i++)
  2162     0470  01F2               	clrf	UART_write_text@i
  2163     0471  01F3               	clrf	UART_write_text@i+1
  2164     0472  2C84               	goto	l1328
  2165     0473                     l1324:
  2166                           
  2167                           ;./uart.h: 44:    UART_write(text[i]);
  2168     0473  0872               	movf	UART_write_text@i,w
  2169     0474  0774               	addwf	UART_write_text@text,w
  2170     0475  00F1               	movwf	??_UART_write_text
  2171     0476  0871               	movf	??_UART_write_text,w
  2172     0477  0084               	movwf	4
  2173     0478  0800               	movf	0,w
  2174     0479  120A  118A  23DF  120A  118A  	fcall	_UART_write
  2175     047E                     l1326:
  2176     047E  3001               	movlw	1
  2177     047F  07F2               	addwf	UART_write_text@i,f
  2178     0480  1803               	skipnc
  2179     0481  0AF3               	incf	UART_write_text@i+1,f
  2180     0482  3000               	movlw	0
  2181     0483  07F3               	addwf	UART_write_text@i+1,f
  2182     0484                     l1328:
  2183     0484  0872               	movf	UART_write_text@i,w
  2184     0485  0774               	addwf	UART_write_text@text,w
  2185     0486  00F1               	movwf	??_UART_write_text
  2186     0487  0871               	movf	??_UART_write_text,w
  2187     0488  0084               	movwf	4
  2188     0489  1383               	bcf	3,7	;select IRP bank0
  2189     048A  0800               	movf	0,w
  2190     048B  1D03               	btfss	3,2
  2191     048C  2C8E               	goto	u531
  2192     048D  2C8F               	goto	u530
  2193     048E                     u531:
  2194     048E  2C73               	goto	l1324
  2195     048F                     u530:
  2196     048F                     l67:
  2197     048F  0008               	return
  2198     0490                     __end_of_UART_write_text:
  2199                           
  2200                           	psect	text14
  2201     03DF                     __ptext14:	
  2202 ;; *************** function _UART_write *****************
  2203 ;; Defined at:
  2204 ;;		line 33 in file "./uart.h"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  data            1    wreg     unsigned char 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  data            1    0[COMMON] unsigned char 
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2218 ;;      Params:         0       0       0       0       0
  2219 ;;      Locals:         1       0       0       0       0
  2220 ;;      Temps:          0       0       0       0       0
  2221 ;;      Totals:         1       0       0       0       0
  2222 ;;Total ram usage:        1 bytes
  2223 ;; Hardware stack levels used: 1
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_UART_write_text
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231     03DF                     _UART_write:	
  2232                           ;psect for function _UART_write
  2233                           
  2234                           
  2235                           ;incstack = 0
  2236                           ; Regs used in _UART_write: [wreg]
  2237                           ;UART_write@data stored from wreg
  2238     03DF  00F0               	movwf	UART_write@data
  2239     03E0                     l1222:
  2240     03E0                     l58:	
  2241                           ;./uart.h: 36:    ;
  2242                           
  2243                           
  2244                           ;./uart.h: 35:   while (!TRMT)
  2245     03E0  1683               	bsf	3,5	;RP0=1, select bank1
  2246     03E1  1303               	bcf	3,6	;RP1=0, select bank1
  2247     03E2  1C98               	btfss	24,1	;volatile
  2248     03E3  2BE5               	goto	u371
  2249     03E4  2BE6               	goto	u370
  2250     03E5                     u371:
  2251     03E5  2BE0               	goto	l58
  2252     03E6                     u370:
  2253     03E6                     l1224:
  2254                           
  2255                           ;./uart.h: 37:   TXREG = data;
  2256     03E6  0870               	movf	UART_write@data,w
  2257     03E7  1283               	bcf	3,5	;RP0=0, select bank0
  2258     03E8  1303               	bcf	3,6	;RP1=0, select bank0
  2259     03E9  0099               	movwf	25	;volatile
  2260     03EA                     l61:
  2261     03EA  0008               	return
  2262     03EB                     __end_of_UART_write:
  2263                           
  2264                           	psect	text15
  2265     056A                     __ptext15:	
  2266 ;; *************** function _UART_init *****************
  2267 ;; Defined at:
  2268 ;;		line 19 in file "./uart.h"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  baudrate        4    6[BANK0 ] const long 
  2271 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  1    wreg      void 
  2276 ;; Registers used:
  2277 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2283 ;;      Params:         0       8       0       0       0
  2284 ;;      Locals:         0       0       0       0       0
  2285 ;;      Temps:          0      12       0       0       0
  2286 ;;      Totals:         0      20       0       0       0
  2287 ;;Total ram usage:       20 bytes
  2288 ;; Hardware stack levels used: 1
  2289 ;; Hardware stack levels required when called: 1
  2290 ;; This function calls:
  2291 ;;		___aldiv
  2292 ;; This function is called by:
  2293 ;;		_main
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297     056A                     _UART_init:	
  2298                           ;psect for function _UART_init
  2299                           
  2300     056A                     l1306:	
  2301                           ;incstack = 0
  2302                           ; Regs used in _UART_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2303                           
  2304                           
  2305                           ;./uart.h: 19:  void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 20:  
      +                          {;./uart.h: 21:   BRGH = 1;
  2306     056A  1683               	bsf	3,5	;RP0=1, select bank1
  2307     056B  1303               	bcf	3,6	;RP1=0, select bank1
  2308     056C  1518               	bsf	24,2	;volatile
  2309     056D                     l1308:
  2310                           
  2311                           ;./uart.h: 22:   SPBRG = (_XTAL_FREQ - baudrate * 16) / (baudrate * 16);
  2312     056D  1283               	bcf	3,5	;RP0=0, select bank0
  2313     056E  1303               	bcf	3,6	;RP1=0, select bank0
  2314     056F  0826               	movf	UART_init@baudrate,w
  2315     0570  00AE               	movwf	??_UART_init
  2316     0571  0827               	movf	UART_init@baudrate+1,w
  2317     0572  00AF               	movwf	??_UART_init+1
  2318     0573  0828               	movf	UART_init@baudrate+2,w
  2319     0574  00B0               	movwf	??_UART_init+2
  2320     0575  0829               	movf	UART_init@baudrate+3,w
  2321     0576  00B1               	movwf	??_UART_init+3
  2322     0577  3004               	movlw	4
  2323     0578                     u505:
  2324     0578  1003               	clrc
  2325     0579  0DAE               	rlf	??_UART_init,f
  2326     057A  0DAF               	rlf	??_UART_init+1,f
  2327     057B  0DB0               	rlf	??_UART_init+2,f
  2328     057C  0DB1               	rlf	??_UART_init+3,f
  2329     057D                     u500:
  2330     057D  3EFF               	addlw	-1
  2331     057E  1D03               	skipz
  2332     057F  2D78               	goto	u505
  2333     0580  0831               	movf	??_UART_init+3,w
  2334     0581  00F3               	movwf	___aldiv@divisor+3
  2335     0582  0830               	movf	??_UART_init+2,w
  2336     0583  00F2               	movwf	___aldiv@divisor+2
  2337     0584  082F               	movf	??_UART_init+1,w
  2338     0585  00F1               	movwf	___aldiv@divisor+1
  2339     0586  082E               	movf	??_UART_init,w
  2340     0587  00F0               	movwf	___aldiv@divisor
  2341     0588  0826               	movf	UART_init@baudrate,w
  2342     0589  00B2               	movwf	??_UART_init+4
  2343     058A  0827               	movf	UART_init@baudrate+1,w
  2344     058B  00B3               	movwf	??_UART_init+5
  2345     058C  0828               	movf	UART_init@baudrate+2,w
  2346     058D  00B4               	movwf	??_UART_init+6
  2347     058E  0829               	movf	UART_init@baudrate+3,w
  2348     058F  00B5               	movwf	??_UART_init+7
  2349     0590  3004               	movlw	4
  2350     0591                     u515:
  2351     0591  1003               	clrc
  2352     0592  0DB2               	rlf	??_UART_init+4,f
  2353     0593  0DB3               	rlf	??_UART_init+5,f
  2354     0594  0DB4               	rlf	??_UART_init+6,f
  2355     0595  0DB5               	rlf	??_UART_init+7,f
  2356     0596                     u510:
  2357     0596  3EFF               	addlw	-1
  2358     0597  1D03               	skipz
  2359     0598  2D91               	goto	u515
  2360     0599  082A               	movf	UART_init@_XTAL_FREQ,w
  2361     059A  00B6               	movwf	??_UART_init+8
  2362     059B  082B               	movf	UART_init@_XTAL_FREQ+1,w
  2363     059C  00B7               	movwf	??_UART_init+9
  2364     059D  082C               	movf	UART_init@_XTAL_FREQ+2,w
  2365     059E  00B8               	movwf	??_UART_init+10
  2366     059F  082D               	movf	UART_init@_XTAL_FREQ+3,w
  2367     05A0  00B9               	movwf	??_UART_init+11
  2368     05A1  0832               	movf	??_UART_init+4,w
  2369     05A2  02B6               	subwf	??_UART_init+8,f
  2370     05A3  0833               	movf	??_UART_init+5,w
  2371     05A4  1C03               	skipc
  2372     05A5  0F33               	incfsz	??_UART_init+5,w
  2373     05A6  2DA8               	goto	u521
  2374     05A7  2DA9               	goto	u522
  2375     05A8                     u521:
  2376     05A8  02B7               	subwf	??_UART_init+9,f
  2377     05A9                     u522:
  2378     05A9  0834               	movf	??_UART_init+6,w
  2379     05AA  1C03               	skipc
  2380     05AB  0F34               	incfsz	??_UART_init+6,w
  2381     05AC  2DAE               	goto	u523
  2382     05AD  2DAF               	goto	u524
  2383     05AE                     u523:
  2384     05AE  02B8               	subwf	??_UART_init+10,f
  2385     05AF                     u524:
  2386     05AF  0835               	movf	??_UART_init+7,w
  2387     05B0  1C03               	skipc
  2388     05B1  0F35               	incfsz	??_UART_init+7,w
  2389     05B2  2DB4               	goto	u525
  2390     05B3  2DB5               	goto	u526
  2391     05B4                     u525:
  2392     05B4  02B9               	subwf	??_UART_init+11,f
  2393     05B5                     u526:
  2394     05B5  0839               	movf	??_UART_init+11,w
  2395     05B6  00F7               	movwf	___aldiv@dividend+3
  2396     05B7  0838               	movf	??_UART_init+10,w
  2397     05B8  00F6               	movwf	___aldiv@dividend+2
  2398     05B9  0837               	movf	??_UART_init+9,w
  2399     05BA  00F5               	movwf	___aldiv@dividend+1
  2400     05BB  0836               	movf	??_UART_init+8,w
  2401     05BC  00F4               	movwf	___aldiv@dividend
  2402     05BD  120A  118A  25D5  120A  118A  	fcall	___aldiv
  2403     05C2  0870               	movf	?___aldiv,w
  2404     05C3  1683               	bsf	3,5	;RP0=1, select bank1
  2405     05C4  1303               	bcf	3,6	;RP1=0, select bank1
  2406     05C5  0099               	movwf	25	;volatile
  2407     05C6                     l1310:
  2408                           
  2409                           ;./uart.h: 23:   SYNC = 0;
  2410     05C6  1218               	bcf	24,4	;volatile
  2411     05C7                     l1312:
  2412                           
  2413                           ;./uart.h: 24:   SPEN = 1;
  2414     05C7  1283               	bcf	3,5	;RP0=0, select bank0
  2415     05C8  1303               	bcf	3,6	;RP1=0, select bank0
  2416     05C9  1798               	bsf	24,7	;volatile
  2417     05CA                     l1314:
  2418                           
  2419                           ;./uart.h: 25:   TRISC7 = 1;
  2420     05CA  1683               	bsf	3,5	;RP0=1, select bank1
  2421     05CB  1303               	bcf	3,6	;RP1=0, select bank1
  2422     05CC  1787               	bsf	7,7	;volatile
  2423     05CD                     l1316:
  2424                           
  2425                           ;./uart.h: 26:   TRISC6 = 1;
  2426     05CD  1707               	bsf	7,6	;volatile
  2427     05CE                     l1318:
  2428                           
  2429                           ;./uart.h: 27:   CREN = 1;
  2430     05CE  1283               	bcf	3,5	;RP0=0, select bank0
  2431     05CF  1303               	bcf	3,6	;RP1=0, select bank0
  2432     05D0  1618               	bsf	24,4	;volatile
  2433     05D1                     l1320:
  2434                           
  2435                           ;./uart.h: 28:   TXEN = 1;
  2436     05D1  1683               	bsf	3,5	;RP0=1, select bank1
  2437     05D2  1303               	bcf	3,6	;RP1=0, select bank1
  2438     05D3  1698               	bsf	24,5	;volatile
  2439     05D4                     l55:
  2440     05D4  0008               	return
  2441     05D5                     __end_of_UART_init:
  2442                           
  2443                           	psect	text16
  2444     05D5                     __ptext16:	
  2445 ;; *************** function ___aldiv *****************
  2446 ;; Defined at:
  2447 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;  divisor         4    0[COMMON] long 
  2450 ;;  dividend        4    4[COMMON] long 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  quotient        4    2[BANK0 ] long 
  2453 ;;  sign            1    1[BANK0 ] unsigned char 
  2454 ;;  counter         1    0[BANK0 ] unsigned char 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  4    0[COMMON] long 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0, btemp+1
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2464 ;;      Params:         8       0       0       0       0
  2465 ;;      Locals:         0       6       0       0       0
  2466 ;;      Temps:          1       0       0       0       0
  2467 ;;      Totals:         9       6       0       0       0
  2468 ;;Total ram usage:       15 bytes
  2469 ;; Hardware stack levels used: 1
  2470 ;; This function calls:
  2471 ;;		Nothing
  2472 ;; This function is called by:
  2473 ;;		_UART_init
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477     05D5                     ___aldiv:	
  2478                           ;psect for function ___aldiv
  2479                           
  2480     05D5                     l1264:	
  2481                           ;incstack = 0
  2482                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  2483                           
  2484     05D5  1283               	bcf	3,5	;RP0=0, select bank0
  2485     05D6  1303               	bcf	3,6	;RP1=0, select bank0
  2486     05D7  01A1               	clrf	___aldiv@sign
  2487     05D8                     l1266:
  2488     05D8  1FF3               	btfss	___aldiv@divisor+3,7
  2489     05D9  2DDB               	goto	u401
  2490     05DA  2DDC               	goto	u400
  2491     05DB                     u401:
  2492     05DB  2DE9               	goto	l355
  2493     05DC                     u400:
  2494     05DC                     l1268:
  2495     05DC  09F0               	comf	___aldiv@divisor,f
  2496     05DD  09F1               	comf	___aldiv@divisor+1,f
  2497     05DE  09F2               	comf	___aldiv@divisor+2,f
  2498     05DF  09F3               	comf	___aldiv@divisor+3,f
  2499     05E0  0AF0               	incf	___aldiv@divisor,f
  2500     05E1  1903               	skipnz
  2501     05E2  0AF1               	incf	___aldiv@divisor+1,f
  2502     05E3  1903               	skipnz
  2503     05E4  0AF2               	incf	___aldiv@divisor+2,f
  2504     05E5  1903               	skipnz
  2505     05E6  0AF3               	incf	___aldiv@divisor+3,f
  2506     05E7  01A1               	clrf	___aldiv@sign
  2507     05E8  0AA1               	incf	___aldiv@sign,f
  2508     05E9                     l355:
  2509     05E9  1FF7               	btfss	___aldiv@dividend+3,7
  2510     05EA  2DEC               	goto	u411
  2511     05EB  2DED               	goto	u410
  2512     05EC                     u411:
  2513     05EC  2DFC               	goto	l1274
  2514     05ED                     u410:
  2515     05ED                     l1270:
  2516     05ED  09F4               	comf	___aldiv@dividend,f
  2517     05EE  09F5               	comf	___aldiv@dividend+1,f
  2518     05EF  09F6               	comf	___aldiv@dividend+2,f
  2519     05F0  09F7               	comf	___aldiv@dividend+3,f
  2520     05F1  0AF4               	incf	___aldiv@dividend,f
  2521     05F2  1903               	skipnz
  2522     05F3  0AF5               	incf	___aldiv@dividend+1,f
  2523     05F4  1903               	skipnz
  2524     05F5  0AF6               	incf	___aldiv@dividend+2,f
  2525     05F6  1903               	skipnz
  2526     05F7  0AF7               	incf	___aldiv@dividend+3,f
  2527     05F8                     l1272:
  2528     05F8  3001               	movlw	1
  2529     05F9  00FF               	movwf	btemp+1
  2530     05FA  087F               	movf	btemp+1,w
  2531     05FB  06A1               	xorwf	___aldiv@sign,f
  2532     05FC                     l1274:
  2533     05FC  3000               	movlw	0
  2534     05FD  00A5               	movwf	___aldiv@quotient+3
  2535     05FE  3000               	movlw	0
  2536     05FF  00A4               	movwf	___aldiv@quotient+2
  2537     0600  3000               	movlw	0
  2538     0601  00A3               	movwf	___aldiv@quotient+1
  2539     0602  3000               	movlw	0
  2540     0603  00A2               	movwf	___aldiv@quotient
  2541     0604                     l1276:
  2542     0604  0873               	movf	___aldiv@divisor+3,w
  2543     0605  0472               	iorwf	___aldiv@divisor+2,w
  2544     0606  0471               	iorwf	___aldiv@divisor+1,w
  2545     0607  0470               	iorwf	___aldiv@divisor,w
  2546     0608  1903               	skipnz
  2547     0609  2E0B               	goto	u421
  2548     060A  2E0C               	goto	u420
  2549     060B                     u421:
  2550     060B  2E59               	goto	l1298
  2551     060C                     u420:
  2552     060C                     l1278:
  2553     060C  01A0               	clrf	___aldiv@counter
  2554     060D  0AA0               	incf	___aldiv@counter,f
  2555     060E  2E1C               	goto	l1284
  2556     060F                     l1280:
  2557     060F  3001               	movlw	1
  2558     0610  00F8               	movwf	??___aldiv
  2559     0611                     u435:
  2560     0611  1003               	clrc
  2561     0612  0DF0               	rlf	___aldiv@divisor,f
  2562     0613  0DF1               	rlf	___aldiv@divisor+1,f
  2563     0614  0DF2               	rlf	___aldiv@divisor+2,f
  2564     0615  0DF3               	rlf	___aldiv@divisor+3,f
  2565     0616  0BF8               	decfsz	??___aldiv,f
  2566     0617  2E11               	goto	u435
  2567     0618                     l1282:
  2568     0618  3001               	movlw	1
  2569     0619  00FF               	movwf	btemp+1
  2570     061A  087F               	movf	btemp+1,w
  2571     061B  07A0               	addwf	___aldiv@counter,f
  2572     061C                     l1284:
  2573     061C  1FF3               	btfss	___aldiv@divisor+3,7
  2574     061D  2E1F               	goto	u441
  2575     061E  2E20               	goto	u440
  2576     061F                     u441:
  2577     061F  2E0F               	goto	l1280
  2578     0620                     u440:
  2579     0620                     l1286:
  2580     0620  3001               	movlw	1
  2581     0621  00F8               	movwf	??___aldiv
  2582     0622                     u455:
  2583     0622  1003               	clrc
  2584     0623  0DA2               	rlf	___aldiv@quotient,f
  2585     0624  0DA3               	rlf	___aldiv@quotient+1,f
  2586     0625  0DA4               	rlf	___aldiv@quotient+2,f
  2587     0626  0DA5               	rlf	___aldiv@quotient+3,f
  2588     0627  0BF8               	decfsz	??___aldiv,f
  2589     0628  2E22               	goto	u455
  2590     0629                     l1288:
  2591     0629  0873               	movf	___aldiv@divisor+3,w
  2592     062A  0277               	subwf	___aldiv@dividend+3,w
  2593     062B  1D03               	skipz
  2594     062C  2E37               	goto	u465
  2595     062D  0872               	movf	___aldiv@divisor+2,w
  2596     062E  0276               	subwf	___aldiv@dividend+2,w
  2597     062F  1D03               	skipz
  2598     0630  2E37               	goto	u465
  2599     0631  0871               	movf	___aldiv@divisor+1,w
  2600     0632  0275               	subwf	___aldiv@dividend+1,w
  2601     0633  1D03               	skipz
  2602     0634  2E37               	goto	u465
  2603     0635  0870               	movf	___aldiv@divisor,w
  2604     0636  0274               	subwf	___aldiv@dividend,w
  2605     0637                     u465:
  2606     0637  1C03               	skipc
  2607     0638  2E3A               	goto	u461
  2608     0639  2E3B               	goto	u460
  2609     063A                     u461:
  2610     063A  2E4A               	goto	l1294
  2611     063B                     u460:
  2612     063B                     l1290:
  2613     063B  0870               	movf	___aldiv@divisor,w
  2614     063C  02F4               	subwf	___aldiv@dividend,f
  2615     063D  0871               	movf	___aldiv@divisor+1,w
  2616     063E  1C03               	skipc
  2617     063F  0F71               	incfsz	___aldiv@divisor+1,w
  2618     0640  02F5               	subwf	___aldiv@dividend+1,f
  2619     0641  0872               	movf	___aldiv@divisor+2,w
  2620     0642  1C03               	skipc
  2621     0643  0F72               	incfsz	___aldiv@divisor+2,w
  2622     0644  02F6               	subwf	___aldiv@dividend+2,f
  2623     0645  0873               	movf	___aldiv@divisor+3,w
  2624     0646  1C03               	skipc
  2625     0647  0F73               	incfsz	___aldiv@divisor+3,w
  2626     0648  02F7               	subwf	___aldiv@dividend+3,f
  2627     0649                     l1292:
  2628     0649  1422               	bsf	___aldiv@quotient,0
  2629     064A                     l1294:
  2630     064A  3001               	movlw	1
  2631     064B                     u475:
  2632     064B  1003               	clrc
  2633     064C  0CF3               	rrf	___aldiv@divisor+3,f
  2634     064D  0CF2               	rrf	___aldiv@divisor+2,f
  2635     064E  0CF1               	rrf	___aldiv@divisor+1,f
  2636     064F  0CF0               	rrf	___aldiv@divisor,f
  2637     0650  3EFF               	addlw	-1
  2638     0651  1D03               	skipz
  2639     0652  2E4B               	goto	u475
  2640     0653                     l1296:
  2641     0653  3001               	movlw	1
  2642     0654  02A0               	subwf	___aldiv@counter,f
  2643     0655  1D03               	btfss	3,2
  2644     0656  2E58               	goto	u481
  2645     0657  2E59               	goto	u480
  2646     0658                     u481:
  2647     0658  2E20               	goto	l1286
  2648     0659                     u480:
  2649     0659                     l1298:
  2650     0659  0821               	movf	___aldiv@sign,w
  2651     065A  1903               	btfsc	3,2
  2652     065B  2E5D               	goto	u491
  2653     065C  2E5E               	goto	u490
  2654     065D                     u491:
  2655     065D  2E69               	goto	l1302
  2656     065E                     u490:
  2657     065E                     l1300:
  2658     065E  09A2               	comf	___aldiv@quotient,f
  2659     065F  09A3               	comf	___aldiv@quotient+1,f
  2660     0660  09A4               	comf	___aldiv@quotient+2,f
  2661     0661  09A5               	comf	___aldiv@quotient+3,f
  2662     0662  0AA2               	incf	___aldiv@quotient,f
  2663     0663  1903               	skipnz
  2664     0664  0AA3               	incf	___aldiv@quotient+1,f
  2665     0665  1903               	skipnz
  2666     0666  0AA4               	incf	___aldiv@quotient+2,f
  2667     0667  1903               	skipnz
  2668     0668  0AA5               	incf	___aldiv@quotient+3,f
  2669     0669                     l1302:
  2670     0669  0825               	movf	___aldiv@quotient+3,w
  2671     066A  00F3               	movwf	?___aldiv+3
  2672     066B  0824               	movf	___aldiv@quotient+2,w
  2673     066C  00F2               	movwf	?___aldiv+2
  2674     066D  0823               	movf	___aldiv@quotient+1,w
  2675     066E  00F1               	movwf	?___aldiv+1
  2676     066F  0822               	movf	___aldiv@quotient,w
  2677     0670  00F0               	movwf	?___aldiv
  2678     0671                     l365:
  2679     0671  0008               	return
  2680     0672                     __end_of___aldiv:
  2681                           
  2682                           	psect	text17
  2683     03D3                     __ptext17:	
  2684 ;; *************** function _SPI_init_master *****************
  2685 ;; Defined at:
  2686 ;;		line 30 in file "./spi.h"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2700 ;;      Params:         0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels used: 1
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_main
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713     03D3                     _SPI_init_master:	
  2714                           ;psect for function _SPI_init_master
  2715                           
  2716     03D3                     l1330:	
  2717                           ;incstack = 0
  2718                           ; Regs used in _SPI_init_master: [wreg]
  2719                           
  2720                           
  2721                           ;./spi.h: 32:         SSPCON = 0b01100001;
  2722     03D3  3061               	movlw	97
  2723     03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2724     03D5  1303               	bcf	3,6	;RP1=0, select bank0
  2725     03D6  0094               	movwf	20	;volatile
  2726                           
  2727                           ;./spi.h: 33:         SSPSTAT = 0b01000000;
  2728     03D7  3040               	movlw	64
  2729     03D8  1683               	bsf	3,5	;RP0=1, select bank1
  2730     03D9  1303               	bcf	3,6	;RP1=0, select bank1
  2731     03DA  0094               	movwf	20	;volatile
  2732     03DB                     l1332:
  2733                           
  2734                           ;./spi.h: 34:         TRISC4 = 1;
  2735     03DB  1607               	bsf	7,4	;volatile
  2736     03DC                     l1334:
  2737                           
  2738                           ;./spi.h: 35:         TRISC5 = 0;
  2739     03DC  1287               	bcf	7,5	;volatile
  2740     03DD                     l1336:
  2741                           
  2742                           ;./spi.h: 36:         TRISC3 = 0;
  2743     03DD  1187               	bcf	7,3	;volatile
  2744     03DE                     l79:
  2745     03DE  0008               	return
  2746     03DF                     __end_of_SPI_init_master:
  2747     007E                     btemp	set	126	;btemp
  2748     007E                     wtemp0	set	126
  2749                           
  2750                           	psect	config
  2751                           
  2752                           ;Config register CONFIG1 @ 0x2007
  2753                           ;	Oscillator Selection bits
  2754                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2755                           ;	Watchdog Timer Enable bit
  2756                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2757                           ;	Power-up Timer Enable bit
  2758                           ;	PWRTE = OFF, PWRT disabled
  2759                           ;	RE3/MCLR pin function select bit
  2760                           ;	MCLRE = 0x1, unprogrammed default
  2761                           ;	Code Protection bit
  2762                           ;	CP = OFF, Program memory code protection is disabled
  2763                           ;	Data Code Protection bit
  2764                           ;	CPD = OFF, Data memory code protection is disabled
  2765                           ;	Brown Out Reset Selection bits
  2766                           ;	BOREN = OFF, BOR disabled
  2767                           ;	Internal External Switchover bit
  2768                           ;	IESO = 0x1, unprogrammed default
  2769                           ;	Fail-Safe Clock Monitor Enabled bit
  2770                           ;	FCMEN = 0x1, unprogrammed default
  2771                           ;	Low Voltage Programming Enable bit
  2772                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2773                           ;	In-Circuit Debugger Mode bit
  2774                           ;	DEBUG = 0x1, unprogrammed default
  2775     2007                     	org	8199
  2776     2007  2CF2               	dw	11506
  2777                           
  2778                           ;Config register CONFIG2 @ 0x2008
  2779                           ;	Brown-out Reset Selection bit
  2780                           ;	BOR4V = 0x1, unprogrammed default
  2781                           ;	Flash Program Memory Self Write Enable bits
  2782                           ;	WRT = OFF, Write protection off
  2783     2008                     	org	8200
  2784     2008  3FFF               	dw	16383

Data Sizes:
    Strings     26
    Constant    0
    Data        8
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      44
    BANK1            80     74      77
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_2(CODE[8]), STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> main@buffer(BANK1[64]), char_to_binary_string@output(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    nrf_send@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@send_data(BANK1[3]), 

    nrf_setup@addr	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK0[5]), 

    nrf_write_payload@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@send_data(BANK1[3]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@send_data(BANK1[3]), nrf_read@clear(COMMON[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(COMMON[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@send_data(BANK1[3]), nrf_read@clear(COMMON[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(COMMON[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK1[3]), RADIO_ADDR(BANK0[5]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> main@send_data(BANK1[3]), nrf_setup@data(BANK0[5]), 

    UART_write_text@text	PTR unsigned char  size(1) Largest target is 64
		 -> main@buffer(BANK1[64]), 


Critical Paths under _main in COMMON

    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_send->_nrf_write_payload
    _nrf_write_payload->_nrf_write_register
    _nrf_write_command->_SPI_write
    _nrf_set_tx_mode->_nrf_read_register
    _nrf_set_tx_mode->_nrf_write_register
    _nrf_write_register->_nrf_command
    _nrf_read_register->_nrf_command
    _nrf_command->_SPI_write
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                77    77      0   24082
                                             26 BANK0      3     3      0
                                              0 BANK1     74    74      0
                    _SPI_init_master
                          _UART_init
                    _UART_write_text
                             _arrcpy
                           _nrf_send
                    _nrf_set_tx_mode
                          _nrf_setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             34    17     17     424
                                              0 COMMON     5     5      0
                                              0 BANK0     17     0     17
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                            7     6      1    7240
                                             12 COMMON     1     0      1
                                              0 BANK0      6     6      0
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3096
                                             11 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               6     4      2     689
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _nrf_send                                             4     3      1   10529
                                              0 BANK0      4     3      1
                    _nrf_set_tx_mode
                  _nrf_write_command
                  _nrf_write_payload
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_payload                                    4     3      1    3157
                                             11 COMMON     3     2      1
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_set_tx_mode                                      1     1      0    4100
                                             11 COMMON     1     1      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    3003
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2    1027
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (3) _nrf_command                                          7     5      2     505
                                              1 COMMON     7     5      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      4     4      0     145
                                              1 COMMON     4     4      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_init
     ___aldiv
   _UART_write_text
     _UART_write
   _arrcpy
   _nrf_send
     _nrf_set_tx_mode
       _nrf_read_register
         _nrf_command
           _SPI_write
       _nrf_write_register
         _nrf_command
     _nrf_write_command
       _SPI_write
     _nrf_write_payload
       _nrf_write_register
     _nrf_write_register
   _nrf_set_tx_mode
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     4A      4D       7       96.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1D      2C       5       55.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      87      12        0.0%
ABS                  0      0      87       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Mar 27 22:56:48 2023

                           pc 0002                            _BF 04A0                            l61 03EA  
                          l55 05D4                            l58 03E0                            l82 0409  
                          l67 048F                            l91 046E                            l85 0412  
                          l79 03DE                            l96 050C                            l97 0510  
                          fsr 0004         nrf_set_tx_mode@config 007B                           l100 0403  
                         l103 03F6                           l112 0451                           l106 0438  
                         l123 04B3                           l131 04DF                           l115 07BD  
                         l109 0422                           l355 05E9                           l365 0671  
                         l286 0569                           _RD2 0042                           _RD3 0043  
                         u400 05DC                           u401 05DB                           u410 05ED  
                         u411 05EC                           u420 060C                           u500 057D  
                         u421 060B                           u510 0596                           u350 040F  
                         u351 040E                           u440 0620                           u360 050C  
                         u441 061F                           u521 05A8                           u505 0578  
                         u361 050B                           u522 05A9                           u370 03E6  
                         u530 048F                           u435 0611                           u523 05AE  
                         u515 0591                           u371 03E5                           u531 048E  
                         u460 063B                           u524 05AF                           u540 04D3  
                         u380 046E                           u461 063A                           u525 05B4  
                         u541 04D2                           u381 046D                           u526 05B5  
                         u390 04A1                           u550 051B                           u455 0622  
                         u391 04A0                           u551 051A                           u480 0659  
                         u560 0565                           u481 0658                           u465 0637  
                         u561 0564                           u490 065E                           u491 065D  
                         u475 064B                           u660 06E4                           u661 06E3  
                         u670 0711                           u671 0710                           u665 06E0  
                         u675 070D                           u687 06F6                           u697 0433  
                         fsr0 0004                           indf 0000                          l1200 050F  
                        l1300 065E                          l1204 03F8                          l1212 0414  
                        l1302 0669                          l1310 05C6                          l1222 03E0  
                        l1214 0417                          l1230 0464                          l1320 05D1  
                        l1312 05C7                          l1224 03E6                          l1208 03EC  
                        l1216 041E                          l1240 0435                          l1232 0468  
                        l1400 0565                          l1330 03D3                          l1314 05CA  
                        l1306 056A                          l1322 0470                          l1250 0490  
                        l1218 0421                          l1234 0424                          l1226 0453  
                        l1242 0439                          l1332 03DB                          l1316 05CD  
                        l1308 056D                          l1324 0473                          l1260 04A6  
                        l1252 049A                          l1236 042E                          l1228 0455  
                        l1244 043B                          l1340 0720                          l1500 06AF  
                        l1334 03DC                          l1270 05ED                          l1318 05CE  
                        l1326 047E                          l1182 0405                          l1190 04E4  
                        l1262 04B0                          l1254 049D                          l1238 0431  
                        l1246 0445                          l1350 073D                          l1342 0722  
                        l1510 06C3                          l1502 06B7                          l1336 03DD  
                        l1280 060F                          l1272 05F8                          l1264 05D5  
                        l1328 0484                          l1184 040F                          l1192 04EB  
                        l1248 044B                          l1360 0762                          l1352 0747  
                        l1344 072C                          l1520 06D7                          l1290 063B  
                        l1282 0618                          l1274 05FC                          l1266 05D8  
                        l1194 04ED                          l1258 04A2                          l1370 04C6  
                        l1362 0766                          l1354 074B                          l1346 072F  
                        l1338 0718                          l1522 06E4                          l1292 0649  
                        l1284 061C                          l1276 0604                          l1268 05DC  
                        l1196 0502                          l1188 04E1                          l1372 04CF  
                        l1364 0774                          l1356 0755                          l1348 0739  
                        l1380 0515                          l1524 06EE                          l1516 06C7  
                        l1508 06B9                          l1294 064A                          l1286 0620  
                        l1278 060C                          l1198 0506                          l1374 04D3  
                        l1366 077E                          l1358 0758                          l1390 052B  
                        l1382 051B                          l1526 06FC                          l1518 06D1  
                        l1296 0653                          l1288 0629                          l1376 04D5  
                        l1368 04B7                          l1560 054B                          l1392 052F  
                        l1384 0520                          l1528 0704                          l1298 0659  
                        l1386 0525                          l1378 0512                          l1490 068D  
                        l1388 0526                          l1396 0539                          l1492 0697  
                        l1398 0553                          l1494 069D                          l1486 0672  
                        l1496 06A2                          l1488 0676                          l1498 06AA  
                        STR_1 0009                          STR_2 001B                          _BRGH 04C2  
                        _CREN 00C4                          _RCIF 0065                          _SPEN 00C7  
                        _TRMT 04C1                          _TXEN 04C5                          _SYNC 04C4  
                        _main 0672                          btemp 007E                          start 0000  
            UART_write_text@i 0072               __end_of___aldiv 0672                         ?_main 0070  
                       _RCREG 001A                         _SPBRG 0099                         _TXREG 0019  
                 ?_UART_write 0070                         main@i 00E6                         main@j 00E8  
                       pclath 000A                         status 0003                         wtemp0 007E  
             __end_of_sprintf 056A               __initialization 07BE                  __end_of_main 0715  
                      ??_main 003A          nrf_write_payload@len 007B                  ?_nrf_command 0071  
       nrf_setup@payload_size 007C                        _TRISC3 043B                        _TRISC4 043C  
                      _TRISD2 0442                        _TRISC5 043D                        _TRISD3 0443  
                      _TRISC6 043E                        _TRISC7 043F                        _SSPCON 0014  
                      _SSPBUF 0013                     ??___aldiv 0078             __end_of_UART_init 05D5  
              _nrf_flush_rxtx 0439                 main@send_data 00E3   char_to_binary_string@output 003D  
                      _arrcpy 0452              __end_of_nrf_send 04E0               _UART_write_text 046F  
           __end_of_SPI_write 0413                     ??_sprintf 0070            nrf_flush_rxtx@data 007B  
     __end_of__initialization 07FC        __end_of_nrf_flush_rxtx 0452                __pcstackCOMMON 0070  
                __pidataBANK0 03CE                  __pidataBANK1 03CB    __end_of_nrf_write_register 0404  
           ??_SPI_init_master 0070             ??_nrf_set_tx_mode 007B         nrf_write_payload@data 007D  
                  __pbssBANK0 003D         nrf_write_register@len 0079         nrf_write_register@reg 007A  
             ?_nrf_flush_rxtx 0070                    __pmaintext 0672                       ?_arrcpy 0070  
     __end_of_UART_write_text 0490                  ??_UART_write 0070                       _SSPSTAT 0094  
                 nrf_send@len 0020                    __stringtab 0003                     ?_nrf_send 0020  
                     ___aldiv 05D5            __end_of_UART_write 03EB                       __ptext1 0511  
                     __ptext2 0715                       __ptext3 0439                       __ptext4 0452  
                     __ptext5 04B4                       __ptext6 0423                       __ptext7 0413  
                     __ptext8 0490                       __ptext9 03F7          nrf_read_register@len 0079  
        nrf_read_register@reg 007A              ___aldiv@dividend 0074                       _sprintf 0511  
                     arrcpy@i 0075          end_of_initialization 07FC             __end_of_nrf_setup 07BE  
         UART_init@_XTAL_FREQ 002A                    ??_nrf_send 007E              ___aldiv@quotient 0022  
            ?_UART_write_text 0070                     _UART_init 056A                 nrf_send@clear 0023  
                   _SPI_write 0404  nrf_write_command@NRF_command 0071                    main@buffer 00A0  
             _SPI_init_master 03D3               _nrf_set_tx_mode 0490                 nrf_setup@addr 0020  
               nrf_setup@data 0021                __end_of_arrcpy 046F                    ?_UART_init 0026  
         start_initialization 07BE            _nrf_write_register 03F7                    ?_SPI_write 0070  
            ??_nrf_flush_rxtx 007B           ?_nrf_write_register 0078                      ??_arrcpy 0072  
                 __pdataBANK0 0047                   __pdataBANK1 00EA          ??_nrf_write_register 007A  
      nrf_write_register@data 0078                     ___latbits 0002                 __pcstackBANK0 0020  
               __pcstackBANK1 00A0           UART_write_text@text 0074       __end_of_SPI_init_master 03DF  
     __end_of_nrf_set_tx_mode 04B4                 SPI_write@data 0070                      ?___aldiv 0070  
                   __pstrings 0003                   ??_UART_init 002E                 ??_nrf_command 0073  
                    ?_sprintf 0020                   ??_SPI_write 0070               ___aldiv@divisor 0070  
                nrf_command@i 0077               ___aldiv@counter 0020                     _nrf_setup 0715  
                   main@F1424 00EA               nrf_command@data 0071             _nrf_read_register 03EB  
          ?_nrf_read_register 0078                  nrf_send@data 0022                   __stringbase 0008  
                nrf_send@stat 0021                UART_write@data 0070                     arrcpy@len 0071  
                   arrcpy@dst 0074                     arrcpy@src 0070           ??_nrf_read_register 007A  
           _nrf_write_command 0413           __end_of_nrf_command 0511            ?_nrf_write_command 0070  
           _nrf_write_payload 0423                    ?_nrf_setup 007C            ?_nrf_write_payload 007B  
            ?_SPI_init_master 0070              ?_nrf_set_tx_mode 0070     __end_of_nrf_read_register 03F7  
         ??_nrf_write_command 0071           ??_nrf_write_payload 007C            __end_of__stringtab 0009  
   __end_of_nrf_write_command 0423                      __ptext10 03EB                      __ptext11 04E0  
                    __ptext12 0404                      __ptext13 046F                      __ptext14 03DF  
                    __ptext15 056A                      __ptext16 05D5                      __ptext17 03D3  
       nrf_read_register@data 0078     __end_of_nrf_write_payload 0439                      _nrf_send 04B4  
              nrf_command@len 0072                      main@data 00E0                    _RADIO_ADDR 0047  
                 _nrf_command 04E0        nrf_command@NRF_command 0075                     sprintf@ap 0072  
                   sprintf@sp 0074             UART_init@baudrate 0026                   ??_nrf_setup 007D  
                   stringcode 0003                    _OSCCONbits 008F                      sprintf@c 0073  
                    sprintf@f 0020                      stringdir 0003                      stringtab 0003  
                ___aldiv@sign 0021       nrf_write_command@status 0072             nrf_command@status 0076  
                  _UART_write 03DF             ??_UART_write_text 0071  
