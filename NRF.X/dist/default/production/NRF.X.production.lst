

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Mar 28 12:07:27 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34     0000                     
    35                           ; Version 2.40
    36                           ; Generated 04/07/2022 GMT
    37                           ; 
    38                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0007                     	;# 
    78     0008                     	;# 
    79     0009                     	;# 
    80     000A                     	;# 
    81     000B                     	;# 
    82     000C                     	;# 
    83     000D                     	;# 
    84     000E                     	;# 
    85     000E                     	;# 
    86     000F                     	;# 
    87     0010                     	;# 
    88     0011                     	;# 
    89     0012                     	;# 
    90     0013                     	;# 
    91     0014                     	;# 
    92     0015                     	;# 
    93     0015                     	;# 
    94     0016                     	;# 
    95     0017                     	;# 
    96     0018                     	;# 
    97     0019                     	;# 
    98     001A                     	;# 
    99     001B                     	;# 
   100     001B                     	;# 
   101     001C                     	;# 
   102     001D                     	;# 
   103     001E                     	;# 
   104     001F                     	;# 
   105     0081                     	;# 
   106     0085                     	;# 
   107     0086                     	;# 
   108     0087                     	;# 
   109     0088                     	;# 
   110     0089                     	;# 
   111     008C                     	;# 
   112     008D                     	;# 
   113     008E                     	;# 
   114     008F                     	;# 
   115     0090                     	;# 
   116     0091                     	;# 
   117     0092                     	;# 
   118     0093                     	;# 
   119     0093                     	;# 
   120     0093                     	;# 
   121     0094                     	;# 
   122     0095                     	;# 
   123     0096                     	;# 
   124     0097                     	;# 
   125     0098                     	;# 
   126     0099                     	;# 
   127     009A                     	;# 
   128     009B                     	;# 
   129     009C                     	;# 
   130     009D                     	;# 
   131     009E                     	;# 
   132     009F                     	;# 
   133     0105                     	;# 
   134     0107                     	;# 
   135     0108                     	;# 
   136     0109                     	;# 
   137     010C                     	;# 
   138     010C                     	;# 
   139     010D                     	;# 
   140     010E                     	;# 
   141     010F                     	;# 
   142     0185                     	;# 
   143     0187                     	;# 
   144     0188                     	;# 
   145     0189                     	;# 
   146     018C                     	;# 
   147     018D                     	;# 
   148     0000                     	;# 
   149     0001                     	;# 
   150     0002                     	;# 
   151     0003                     	;# 
   152     0004                     	;# 
   153     0005                     	;# 
   154     0006                     	;# 
   155     0007                     	;# 
   156     0008                     	;# 
   157     0009                     	;# 
   158     000A                     	;# 
   159     000B                     	;# 
   160     000C                     	;# 
   161     000D                     	;# 
   162     000E                     	;# 
   163     000E                     	;# 
   164     000F                     	;# 
   165     0010                     	;# 
   166     0011                     	;# 
   167     0012                     	;# 
   168     0013                     	;# 
   169     0014                     	;# 
   170     0015                     	;# 
   171     0015                     	;# 
   172     0016                     	;# 
   173     0017                     	;# 
   174     0018                     	;# 
   175     0019                     	;# 
   176     001A                     	;# 
   177     001B                     	;# 
   178     001B                     	;# 
   179     001C                     	;# 
   180     001D                     	;# 
   181     001E                     	;# 
   182     001F                     	;# 
   183     0081                     	;# 
   184     0085                     	;# 
   185     0086                     	;# 
   186     0087                     	;# 
   187     0088                     	;# 
   188     0089                     	;# 
   189     008C                     	;# 
   190     008D                     	;# 
   191     008E                     	;# 
   192     008F                     	;# 
   193     0090                     	;# 
   194     0091                     	;# 
   195     0092                     	;# 
   196     0093                     	;# 
   197     0093                     	;# 
   198     0093                     	;# 
   199     0094                     	;# 
   200     0095                     	;# 
   201     0096                     	;# 
   202     0097                     	;# 
   203     0098                     	;# 
   204     0099                     	;# 
   205     009A                     	;# 
   206     009B                     	;# 
   207     009C                     	;# 
   208     009D                     	;# 
   209     009E                     	;# 
   210     009F                     	;# 
   211     0105                     	;# 
   212     0107                     	;# 
   213     0108                     	;# 
   214     0109                     	;# 
   215     010C                     	;# 
   216     010C                     	;# 
   217     010D                     	;# 
   218     010E                     	;# 
   219     010F                     	;# 
   220     0185                     	;# 
   221     0187                     	;# 
   222     0188                     	;# 
   223     0189                     	;# 
   224     018C                     	;# 
   225     018D                     	;# 
   226                           
   227                           	psect	idataBANK1
   228     039E                     __pidataBANK1:
   229                           
   230                           ;initializer for _RADIO_ADDR
   231     039E  3401               	retlw	1
   232     039F  3402               	retlw	2
   233     03A0  3403               	retlw	3
   234     03A1  3404               	retlw	4
   235     03A2  3405               	retlw	5
   236     0013                     _SSPBUF	set	19
   237     0014                     _SSPCON	set	20
   238     001A                     _RCREG	set	26
   239     0019                     _TXREG	set	25
   240     0042                     _RD2	set	66
   241     0043                     _RD3	set	67
   242     0065                     _RCIF	set	101
   243     00C4                     _CREN	set	196
   244     00C7                     _SPEN	set	199
   245     008F                     _OSCCONbits	set	143
   246     0094                     _SSPSTAT	set	148
   247     0099                     _SPBRG	set	153
   248     0442                     _TRISD2	set	1090
   249     0443                     _TRISD3	set	1091
   250     04A0                     _BF	set	1184
   251     043A                     _TRISC2	set	1082
   252     043D                     _TRISC5	set	1085
   253     043C                     _TRISC4	set	1084
   254     04C1                     _TRMT	set	1217
   255     04C5                     _TXEN	set	1221
   256     043E                     _TRISC6	set	1086
   257     043F                     _TRISC7	set	1087
   258     04C4                     _SYNC	set	1220
   259     04C2                     _BRGH	set	1218
   260                           
   261                           	psect	strings
   262     0003                     __pstrings:
   263     0003                     stringtab:
   264     0003                     __stringtab:
   265                           
   266                           ;	String table - string pointers are 1 byte each
   267     0003  1BFF               	btfsc	btemp+1,7
   268     0004  280D               	ljmp	stringcode
   269     0005  1383               	bcf	3,7
   270     0006  187F               	btfsc	btemp+1,0
   271     0007  1783               	bsf	3,7
   272     0008  0800               	movf	0,w
   273     0009  0A84               	incf	4,f
   274     000A  1903               	skipnz
   275     000B  0AFF               	incf	btemp+1,f
   276     000C  0008               	return
   277     000D                     stringcode:
   278     000D                     stringdir:
   279     000D  3000               	movlw	high stringdir
   280     000E  008A               	movwf	10
   281     000F  0804               	movf	4,w
   282     0010  0A84               	incf	4,f
   283     0011  0782               	addwf	2,f
   284     0012                     __stringbase:
   285     0012  3400               	retlw	0
   286     0013                     __end_of__stringtab:
   287     0013                     STR_1:
   288     0013  3425               	retlw	37	;'%'
   289     0014  3463               	retlw	99	;'c'
   290     0015  3425               	retlw	37	;'%'
   291     0016  3463               	retlw	99	;'c'
   292     0017  3425               	retlw	37	;'%'
   293     0018  3463               	retlw	99	;'c'
   294     0019  3425               	retlw	37	;'%'
   295     001A  3463               	retlw	99	;'c'
   296     001B  3425               	retlw	37	;'%'
   297     001C  3463               	retlw	99	;'c'
   298     001D  3425               	retlw	37	;'%'
   299     001E  3463               	retlw	99	;'c'
   300     001F  3425               	retlw	37	;'%'
   301     0020  3463               	retlw	99	;'c'
   302     0021  3425               	retlw	37	;'%'
   303     0022  3463               	retlw	99	;'c'
   304     0023  340A               	retlw	10
   305     0024  3400               	retlw	0
   306     0025                     STR_3:
   307     0025  3452               	retlw	82	;'R'
   308     0026  3465               	retlw	101	;'e'
   309     0027  3463               	retlw	99	;'c'
   310     0028  3469               	retlw	105	;'i'
   311     0029  3465               	retlw	101	;'e'
   312     002A  3476               	retlw	118	;'v'
   313     002B  3465               	retlw	101	;'e'
   314     002C  3464               	retlw	100	;'d'
   315     002D  3420               	retlw	32	;' '
   316     002E  3425               	retlw	37	;'%'
   317     002F  3473               	retlw	115	;'s'
   318     0030  340A               	retlw	10
   319     0031  3400               	retlw	0
   320     0032                     STR_2:
   321     0032  3442               	retlw	66	;'B'
   322     0033  344F               	retlw	79	;'O'
   323     0034  344F               	retlw	79	;'O'
   324     0035  3454               	retlw	84	;'T'
   325     0036  3445               	retlw	69	;'E'
   326     0037  3444               	retlw	68	;'D'
   327     0038  340A               	retlw	10
   328     0039  3400               	retlw	0
   329     003A                     STR_4:
   330     003A  3428               	retlw	40	;'('
   331     003B  346E               	retlw	110	;'n'
   332     003C  3475               	retlw	117	;'u'
   333     003D  346C               	retlw	108	;'l'
   334     003E  346C               	retlw	108	;'l'
   335     003F  3429               	retlw	41	;')'
   336     0040  3400               	retlw	0
   337                           
   338                           	psect	cinit
   339     07D0                     start_initialization:	
   340                           ; #config settings
   341                           
   342     07D0                     __initialization:
   343                           
   344                           ; Initialize objects allocated to BANK1
   345     07D0  1683               	bsf	3,5	;RP0=1, select bank1
   346     07D1  1303               	bcf	3,6	;RP1=0, select bank1
   347     07D2  120A  118A  239E  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   348     07D7  00E0               	movwf	__pdataBANK1& (0+127)
   349     07D8  120A  118A  239F  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   350     07DD  00E1               	movwf	(__pdataBANK1+1)& (0+127)
   351     07DE  120A  118A  23A0  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   352     07E3  00E2               	movwf	(__pdataBANK1+2)& (0+127)
   353     07E4  120A  118A  23A1  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   354     07E9  00E3               	movwf	(__pdataBANK1+3)& (0+127)
   355     07EA  120A  118A  23A2  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
   356     07EF  00E4               	movwf	(__pdataBANK1+4)& (0+127)
   357                           
   358                           ; Clear objects allocated to BANK0
   359     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   360     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   361     07F2  01BD               	clrf	__pbssBANK0& (0+127)
   362     07F3  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   363     07F4  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   364     07F5  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   365     07F6  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   366     07F7  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   367     07F8  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   368     07F9  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   369     07FA  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   370     07FB  01C6               	clrf	(__pbssBANK0+9)& (0+127)
   371     07FC                     end_of_initialization:	
   372                           ;End of C runtime variable initialization code
   373                           
   374     07FC                     __end_of__initialization:
   375     07FC  0183               	clrf	3
   376     07FD  120A  118A  2D72   	ljmp	_main	;jump to C main() function
   377                           
   378                           	psect	bssBANK0
   379     003D                     __pbssBANK0:
   380     003D                     char_to_binary_string@output:
   381     003D                     	ds	10
   382                           
   383                           	psect	dataBANK1
   384     00E0                     __pdataBANK1:
   385     00E0                     _RADIO_ADDR:
   386     00E0                     	ds	5
   387                           
   388                           	psect	cstackBANK3
   389     0190                     __pcstackBANK3:
   390     0190                     main@buffer_197:
   391                           
   392                           ; 64 bytes @ 0x0
   393     0190                     	ds	64
   394                           
   395                           	psect	cstackBANK1
   396     00A0                     __pcstackBANK1:
   397     00A0                     main@buffer:
   398                           
   399                           ; 64 bytes @ 0x0
   400     00A0                     	ds	64
   401                           
   402                           	psect	cstackCOMMON
   403     0070                     __pcstackCOMMON:
   404     0070                     ??_sprintf:
   405     0070                     ?_UART_write:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0070                     ??_UART_write:	
   409                           ; 1 bytes @ 0x0
   410                           
   411     0070                     ?_SPI_init_master:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ??_SPI_init_master:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     ?_SPI_write:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     ??_SPI_write:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     ?_arrcpy:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0070                     ?_nrf_write_command:	
   427                           ; 1 bytes @ 0x0
   428                           
   429     0070                     ?_nrf_flush_rxtx:	
   430                           ; 1 bytes @ 0x0
   431                           
   432     0070                     ?_nrf_set_rx_mode:	
   433                           ; 1 bytes @ 0x0
   434                           
   435     0070                     ?_nrf_data_available:	
   436                           ; 1 bytes @ 0x0
   437                           
   438     0070                     ?_main:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0070                     ?___aldiv:	
   442                           ; 2 bytes @ 0x0
   443                           
   444     0070                     UART_write@data:	
   445                           ; 4 bytes @ 0x0
   446                           
   447     0070                     SPI_write@data:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0070                     arrcpy@src:	
   451                           ; 1 bytes @ 0x0
   452                           
   453     0070                     ___aldiv@divisor:	
   454                           ; 1 bytes @ 0x0
   455                           
   456                           
   457                           ; 4 bytes @ 0x0
   458     0070                     	ds	1
   459     0071                     ?_UART_write_text:
   460     0071                     ?_nrf_command_with_data_overwrite:	
   461                           ; 1 bytes @ 0x1
   462                           
   463     0071                     ?_nrf_command_with_data:	
   464                           ; 1 bytes @ 0x1
   465                           
   466     0071                     ??_nrf_write_command:	
   467                           ; 1 bytes @ 0x1
   468                           
   469     0071                     arrcpy@len:	
   470                           ; 1 bytes @ 0x1
   471                           
   472     0071                     nrf_command_with_data_overwrite@data:	
   473                           ; 1 bytes @ 0x1
   474                           
   475     0071                     nrf_command_with_data@data:	
   476                           ; 1 bytes @ 0x1
   477                           
   478     0071                     nrf_write_command@command:	
   479                           ; 1 bytes @ 0x1
   480                           
   481     0071                     UART_write_text@text:	
   482                           ; 1 bytes @ 0x1
   483                           
   484                           
   485                           ; 2 bytes @ 0x1
   486     0071                     	ds	1
   487     0072                     ??_arrcpy:
   488     0072                     nrf_command_with_data_overwrite@len:	
   489                           ; 1 bytes @ 0x2
   490                           
   491     0072                     nrf_command_with_data@len:	
   492                           ; 1 bytes @ 0x2
   493                           
   494     0072                     nrf_write_command@status:	
   495                           ; 1 bytes @ 0x2
   496                           
   497     0072                     sprintf@ap:	
   498                           ; 1 bytes @ 0x2
   499                           
   500                           
   501                           ; 1 bytes @ 0x2
   502     0072                     	ds	1
   503     0073                     ??_UART_write_text:
   504     0073                     ??_nrf_command_with_data_overwrite:	
   505                           ; 1 bytes @ 0x3
   506                           
   507     0073                     ??_nrf_command_with_data:	
   508                           ; 1 bytes @ 0x3
   509                           
   510     0073                     ??_nrf_data_available:	
   511                           ; 1 bytes @ 0x3
   512                           
   513     0073                     nrf_data_available@status:	
   514                           ; 1 bytes @ 0x3
   515                           
   516     0073                     sprintf@cp:	
   517                           ; 1 bytes @ 0x3
   518                           
   519                           
   520                           ; 2 bytes @ 0x3
   521     0073                     	ds	1
   522     0074                     nrf_command_with_data@command:
   523     0074                     ___aldiv@dividend:	
   524                           ; 1 bytes @ 0x4
   525                           
   526                           
   527                           ; 4 bytes @ 0x4
   528     0074                     	ds	1
   529     0075                     arrcpy@dst:
   530     0075                     nrf_command_with_data@status:	
   531                           ; 1 bytes @ 0x5
   532                           
   533     0075                     sprintf@c:	
   534                           ; 1 bytes @ 0x5
   535                           
   536                           
   537                           ; 1 bytes @ 0x5
   538     0075                     	ds	1
   539     0076                     arrcpy@i:
   540     0076                     nrf_command_with_data_overwrite@command:	
   541                           ; 1 bytes @ 0x6
   542                           
   543     0076                     nrf_command_with_data@i:	
   544                           ; 1 bytes @ 0x6
   545                           
   546     0076                     UART_write_text@i:	
   547                           ; 1 bytes @ 0x6
   548                           
   549                           
   550                           ; 2 bytes @ 0x6
   551     0076                     	ds	1
   552     0077                     ?_nrf_write_register:
   553     0077                     nrf_command_with_data_overwrite@status:	
   554                           ; 1 bytes @ 0x7
   555                           
   556     0077                     nrf_write_register@data:	
   557                           ; 1 bytes @ 0x7
   558                           
   559                           
   560                           ; 1 bytes @ 0x7
   561     0077                     	ds	1
   562     0078                     ??___aldiv:
   563     0078                     nrf_command_with_data_overwrite@i:	
   564                           ; 1 bytes @ 0x8
   565                           
   566     0078                     nrf_write_register@len:	
   567                           ; 1 bytes @ 0x8
   568                           
   569                           
   570                           ; 1 bytes @ 0x8
   571     0078                     	ds	1
   572     0079                     ??_nrf_write_register:
   573     0079                     ?_nrf_read_register:	
   574                           ; 1 bytes @ 0x9
   575                           
   576     0079                     nrf_write_register@reg:	
   577                           ; 1 bytes @ 0x9
   578                           
   579     0079                     nrf_read_register@data:	
   580                           ; 1 bytes @ 0x9
   581                           
   582                           
   583                           ; 1 bytes @ 0x9
   584     0079                     	ds	1
   585     007A                     ??_nrf_flush_rxtx:
   586     007A                     nrf_read_register@len:	
   587                           ; 1 bytes @ 0xA
   588                           
   589     007A                     nrf_flush_rxtx@data:	
   590                           ; 1 bytes @ 0xA
   591                           
   592                           
   593                           ; 1 bytes @ 0xA
   594     007A                     	ds	1
   595     007B                     ??_nrf_read_register:
   596     007B                     ?_nrf_setup:	
   597                           ; 1 bytes @ 0xB
   598                           
   599     007B                     nrf_read_register@reg:	
   600                           ; 1 bytes @ 0xB
   601                           
   602     007B                     nrf_setup@payload_size:	
   603                           ; 1 bytes @ 0xB
   604                           
   605                           
   606                           ; 1 bytes @ 0xB
   607     007B                     	ds	1
   608     007C                     ??_nrf_setup:
   609     007C                     ??_nrf_set_rx_mode:	
   610                           ; 1 bytes @ 0xC
   611                           
   612     007C                     ?_nrf_read:	
   613                           ; 1 bytes @ 0xC
   614                           
   615     007C                     nrf_set_rx_mode@config:	
   616                           ; 1 bytes @ 0xC
   617                           
   618     007C                     nrf_read@len:	
   619                           ; 1 bytes @ 0xC
   620                           
   621                           
   622                           ; 1 bytes @ 0xC
   623     007C                     	ds	1
   624     007D                     ??_nrf_read:
   625     007D                     ??_main:	
   626                           ; 1 bytes @ 0xD
   627                           
   628                           
   629                           	psect	cstackBANK0
   630     0020                     __pcstackBANK0:	
   631                           ; 1 bytes @ 0xD
   632                           
   633     0020                     ?_sprintf:
   634     0020                     nrf_setup@addr:	
   635                           ; 2 bytes @ 0x0
   636                           
   637     0020                     nrf_read@data:	
   638                           ; 1 bytes @ 0x0
   639                           
   640     0020                     ___aldiv@counter:	
   641                           ; 1 bytes @ 0x0
   642                           
   643     0020                     sprintf@sp:	
   644                           ; 1 bytes @ 0x0
   645                           
   646                           
   647                           ; 2 bytes @ 0x0
   648     0020                     	ds	1
   649     0021                     nrf_read@clear:
   650     0021                     ___aldiv@sign:	
   651                           ; 1 bytes @ 0x1
   652                           
   653     0021                     nrf_setup@data:	
   654                           ; 1 bytes @ 0x1
   655                           
   656                           
   657                           ; 5 bytes @ 0x1
   658     0021                     	ds	1
   659     0022                     sprintf@f:
   660     0022                     ___aldiv@quotient:	
   661                           ; 1 bytes @ 0x2
   662                           
   663                           
   664                           ; 4 bytes @ 0x2
   665     0022                     	ds	4
   666     0026                     ?_UART_init:
   667     0026                     UART_init@baudrate:	
   668                           ; 1 bytes @ 0x6
   669                           
   670                           
   671                           ; 4 bytes @ 0x6
   672     0026                     	ds	4
   673     002A                     UART_init@_XTAL_FREQ:
   674                           
   675                           ; 4 bytes @ 0xA
   676     002A                     	ds	4
   677     002E                     ??_UART_init:
   678                           
   679                           ; 1 bytes @ 0xE
   680     002E                     	ds	12
   681     003A                     main@data:
   682                           
   683                           ; 3 bytes @ 0x1A
   684     003A                     	ds	3
   685                           
   686                           	psect	maintext
   687     0572                     __pmaintext:	
   688 ;;
   689 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   690 ;;
   691 ;; *************** function _main *****************
   692 ;; Defined at:
   693 ;;		line 50 in file "main.c"
   694 ;; Parameters:    Size  Location     Type
   695 ;;		None
   696 ;; Auto vars:     Size  Location     Type
   697 ;;  buffer         64    0[BANK3 ] unsigned char [64]
   698 ;;  data            3   26[BANK0 ] unsigned char [3]
   699 ;;  buffer         64    0[BANK1 ] unsigned char [64]
   700 ;; Return value:  Size  Location     Type
   701 ;;                  2  183[None  ] int 
   702 ;; Registers used:
   703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : B00/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   709 ;;      Params:         0       0       0       0       0
   710 ;;      Locals:         0       3      64      64       0
   711 ;;      Temps:          0       0       0       0       0
   712 ;;      Totals:         0       3      64      64       0
   713 ;;Total ram usage:      131 bytes
   714 ;; Hardware stack levels required when called: 5
   715 ;; This function calls:
   716 ;;		_SPI_init_master
   717 ;;		_UART_init
   718 ;;		_UART_write_text
   719 ;;		_nrf_data_available
   720 ;;		_nrf_read
   721 ;;		_nrf_set_rx_mode
   722 ;;		_nrf_setup
   723 ;;		_sprintf
   724 ;; This function is called by:
   725 ;;		Startup code after reset
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729     0572                     _main:	
   730                           ;psect for function _main
   731                           
   732     0572                     l1536:	
   733                           ;incstack = 0
   734                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   735                           
   736                           
   737                           ;main.c: 53:     OSCCONbits.IRCF = 111;
   738     0572  3070               	movlw	112
   739     0573  1683               	bsf	3,5	;RP0=1, select bank1
   740     0574  1303               	bcf	3,6	;RP1=0, select bank1
   741     0575  048F               	iorwf	15,f	;volatile
   742     0576                     l1538:
   743                           
   744                           ;main.c: 56:     UART_init(9600, 8000000UL);
   745     0576  3000               	movlw	0
   746     0577  1283               	bcf	3,5	;RP0=0, select bank0
   747     0578  1303               	bcf	3,6	;RP1=0, select bank0
   748     0579  00A9               	movwf	UART_init@baudrate+3
   749     057A  3000               	movlw	0
   750     057B  00A8               	movwf	UART_init@baudrate+2
   751     057C  3025               	movlw	37
   752     057D  00A7               	movwf	UART_init@baudrate+1
   753     057E  3080               	movlw	128
   754     057F  00A6               	movwf	UART_init@baudrate
   755     0580  3000               	movlw	0
   756     0581  00AD               	movwf	UART_init@_XTAL_FREQ+3
   757     0582  307A               	movlw	122
   758     0583  00AC               	movwf	UART_init@_XTAL_FREQ+2
   759     0584  3012               	movlw	18
   760     0585  00AB               	movwf	UART_init@_XTAL_FREQ+1
   761     0586  3000               	movlw	0
   762     0587  00AA               	movwf	UART_init@_XTAL_FREQ
   763     0588  120A  118A  2507  120A  118A  	fcall	_UART_init
   764     058D                     l1540:
   765                           
   766                           ;main.c: 59:     { char buffer[64]; sprintf(buffer, "BOOTED\n"); UART_write_text(buffer)
      +                          ; };
   767     058D  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   768     058E  1283               	bcf	3,5	;RP0=0, select bank0
   769     058F  1303               	bcf	3,6	;RP1=0, select bank0
   770     0590  00A0               	movwf	sprintf@sp
   771     0591  3000               	movlw	0
   772     0592  00A1               	movwf	sprintf@sp+1
   773     0593  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   774     0594  00A2               	movwf	sprintf@f
   775     0595  120A  118A  2680  120A  118A  	fcall	_sprintf
   776     059A                     l1542:
   777     059A  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   778     059B  00F1               	movwf	UART_write_text@text
   779     059C  3000               	movlw	0
   780     059D  00F2               	movwf	UART_write_text@text+1
   781     059E  120A  118A  24D0  120A  118A  	fcall	_UART_write_text
   782     05A3                     l1544:
   783                           
   784                           ;main.c: 62:     SPI_init_master();
   785     05A3  120A  118A  23A3  120A  118A  	fcall	_SPI_init_master
   786     05A8                     l1546:
   787                           
   788                           ;main.c: 65:     nrf_setup(RADIO_ADDR, 3);
   789     05A8  3003               	movlw	3
   790     05A9  00FB               	movwf	nrf_setup@payload_size
   791     05AA  30E0               	movlw	(low (_RADIO_ADDR| 0))& (0+255)
   792     05AB  120A  118A  2727  120A  118A  	fcall	_nrf_setup
   793     05B0                     l1548:
   794                           
   795                           ;main.c: 71:     nrf_set_rx_mode();
   796     05B0  120A  118A  2437  120A  118A  	fcall	_nrf_set_rx_mode
   797     05B5                     l1550:
   798                           
   799                           ;main.c: 92:         while (!nrf_data_available())
   800     05B5  120A  118A  23D4  120A  118A  	fcall	_nrf_data_available
   801     05BA  3A00               	xorlw	0
   802     05BB  1903               	skipnz
   803     05BC  2DBE               	goto	u791
   804     05BD  2DBF               	goto	u790
   805     05BE                     u791:
   806     05BE  2DB5               	goto	l1550
   807     05BF                     u790:
   808     05BF                     l1552:
   809                           
   810                           ;main.c: 96:         uint8_t data[3];;main.c: 97:         nrf_read(data, 3);
   811     05BF  3003               	movlw	3
   812     05C0  00FC               	movwf	nrf_read@len
   813     05C1  303A               	movlw	(low (main@data| 0))& (0+255)
   814     05C2  120A  118A  2455  120A  118A  	fcall	_nrf_read
   815     05C7                     l1554:
   816                           
   817                           ;main.c: 98:         { char buffer[64]; sprintf(buffer, "Recieved %s\n", data); UART_wri
      +                          te_text(buffer); };
   818     05C7  3090               	movlw	(low (main@buffer_197| (0+256)))& (0+255)
   819     05C8  1283               	bcf	3,5	;RP0=0, select bank0
   820     05C9  1303               	bcf	3,6	;RP1=0, select bank0
   821     05CA  00A0               	movwf	sprintf@sp
   822     05CB  3001               	movlw	1
   823     05CC  00A1               	movwf	sprintf@sp+1
   824     05CD  3013               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   825     05CE  00A2               	movwf	sprintf@f
   826     05CF  303A               	movlw	(low (main@data| 0))& (0+255)
   827     05D0  00A3               	movwf	low ((?_sprintf| 0+3))
   828     05D1  120A  118A  2680  120A  118A  	fcall	_sprintf
   829     05D6                     l1556:
   830     05D6  3090               	movlw	(low (main@buffer_197| (0+256)))& (0+255)
   831     05D7  00F1               	movwf	UART_write_text@text
   832     05D8  3001               	movlw	1
   833     05D9  00F2               	movwf	UART_write_text@text+1
   834     05DA  120A  118A  24D0  120A  118A  	fcall	_UART_write_text
   835     05DF  2DB5               	goto	l1550
   836     05E0  120A  118A  2800   	ljmp	start
   837     05E3                     __end_of_main:
   838                           
   839                           	psect	text1
   840     0680                     __ptext1:	
   841 ;; *************** function _sprintf *****************
   842 ;; Defined at:
   843 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;  sp              2    0[BANK0 ] PTR unsigned char 
   846 ;;		 -> main@buffer_197(64), main@buffer(64), char_to_binary_string@output(10), 
   847 ;;  f               1    2[BANK0 ] PTR const unsigned char 
   848 ;;		 -> STR_3(13), STR_2(8), STR_1(18), 
   849 ;; Auto vars:     Size  Location     Type
   850 ;;  tmpval          4    0        struct .
   851 ;;  cp              2    3[COMMON] PTR const unsigned char 
   852 ;;		 -> STR_4(7), ?_sprintf(2), main@data(3), 
   853 ;;  len             2    0        unsigned int 
   854 ;;  val             2    0        unsigned int 
   855 ;;  c               1    5[COMMON] unsigned char 
   856 ;;  ap              1    2[COMMON] PTR void [1]
   857 ;;		 -> ?_sprintf(2), 
   858 ;;  flag            1    0        unsigned char 
   859 ;;  prec            1    0        char 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  2    0[BANK0 ] int 
   862 ;; Registers used:
   863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   869 ;;      Params:         0      19       0       0       0
   870 ;;      Locals:         4       0       0       0       0
   871 ;;      Temps:          2       0       0       0       0
   872 ;;      Totals:         6      19       0       0       0
   873 ;;Total ram usage:       25 bytes
   874 ;; Hardware stack levels used: 2
   875 ;; This function calls:
   876 ;;		Nothing
   877 ;; This function is called by:
   878 ;;		_main
   879 ;;		_char_to_binary_string
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883     0680                     _sprintf:	
   884                           ;psect for function _sprintf
   885                           
   886     0680                     l1426:	
   887                           ;incstack = 0
   888                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   889                           
   890                           
   891                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   892     0680  3023               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
   893     0681  00F2               	movwf	sprintf@ap
   894                           
   895                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   896     0682  2F0E               	goto	l1462
   897     0683                     l1428:
   898                           
   899                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   900     0683  3025               	movlw	37
   901     0684  0675               	xorwf	sprintf@c,w
   902     0685  1903               	btfsc	3,2
   903     0686  2E88               	goto	u661
   904     0687  2E89               	goto	u660
   905     0688                     u661:
   906     0688  2E97               	goto	l1434
   907     0689                     u660:
   908     0689                     l1430:
   909                           
   910                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   911     0689  0820               	movf	sprintf@sp,w
   912     068A  0084               	movwf	4
   913     068B  1783               	bsf	3,7
   914     068C  1C21               	btfss	sprintf@sp+1,0
   915     068D  1383               	bcf	3,7
   916     068E  0875               	movf	sprintf@c,w
   917     068F  0080               	movwf	0
   918     0690                     l1432:
   919     0690  3001               	movlw	1
   920     0691  07A0               	addwf	sprintf@sp,f
   921     0692  1803               	skipnc
   922     0693  0AA1               	incf	sprintf@sp+1,f
   923     0694  3000               	movlw	0
   924     0695  07A1               	addwf	sprintf@sp+1,f
   925                           
   926                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
   927     0696  2F0E               	goto	l1462
   928     0697                     l1434:
   929                           
   930                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   931     0697  2EF1               	goto	l1460
   932     0698                     l1436:
   933                           
   934                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 760:     cp = (*(
      +                          const char * *)__va_arg((*(const char * **)ap), (const char *)0));
   935     0698  0872               	movf	sprintf@ap,w
   936     0699  0084               	movwf	4
   937     069A  1383               	bcf	3,7	;select IRP bank0
   938     069B  0800               	movf	0,w
   939     069C  00F3               	movwf	sprintf@cp
   940     069D  3000               	movlw	0
   941     069E  00F4               	movwf	sprintf@cp+1
   942     069F                     l1438:
   943     069F  3001               	movlw	1
   944     06A0  00F0               	movwf	??_sprintf
   945     06A1  0870               	movf	??_sprintf,w
   946     06A2  07F2               	addwf	sprintf@ap,f
   947     06A3                     l1440:
   948                           
   949                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 766:    if(!cp)
   950     06A3  0873               	movf	sprintf@cp,w
   951     06A4  0474               	iorwf	sprintf@cp+1,w
   952     06A5  1D03               	btfss	3,2
   953     06A6  2EA8               	goto	u671
   954     06A7  2EA9               	goto	u670
   955     06A8                     u671:
   956     06A8  2ECB               	goto	l287
   957     06A9                     u670:
   958     06A9                     l1442:
   959                           
   960                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 767:     cp = "(n
      +                          ull)";
   961     06A9  3028               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   962     06AA  00F3               	movwf	sprintf@cp
   963     06AB  3080               	movlw	128
   964     06AC  00F4               	movwf	sprintf@cp+1
   965     06AD  2ECB               	goto	l287
   966     06AE                     l1444:
   967                           
   968                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 804:     ((*sp++ 
      +                          = (*cp++)));
   969     06AE  0874               	movf	sprintf@cp+1,w
   970     06AF  00FF               	movwf	btemp+1
   971     06B0  0873               	movf	sprintf@cp,w
   972     06B1  0084               	movwf	4
   973     06B2  120A  118A  2003  120A  118A  	fcall	stringtab
   974     06B7  00F0               	movwf	??_sprintf
   975     06B8  0820               	movf	sprintf@sp,w
   976     06B9  0084               	movwf	4
   977     06BA  1783               	bsf	3,7
   978     06BB  1C21               	btfss	sprintf@sp+1,0
   979     06BC  1383               	bcf	3,7
   980     06BD  0870               	movf	??_sprintf,w
   981     06BE  0080               	movwf	0
   982     06BF                     l1446:
   983     06BF  3001               	movlw	1
   984     06C0  07F3               	addwf	sprintf@cp,f
   985     06C1  1803               	skipnc
   986     06C2  0AF4               	incf	sprintf@cp+1,f
   987     06C3  3000               	movlw	0
   988     06C4  07F4               	addwf	sprintf@cp+1,f
   989     06C5                     l1448:
   990     06C5  3001               	movlw	1
   991     06C6  07A0               	addwf	sprintf@sp,f
   992     06C7  1803               	skipnc
   993     06C8  0AA1               	incf	sprintf@sp+1,f
   994     06C9  3000               	movlw	0
   995     06CA  07A1               	addwf	sprintf@sp+1,f
   996     06CB                     l287:
   997                           
   998                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 803:    while(*cp
      +                          )
   999     06CB  0874               	movf	sprintf@cp+1,w
  1000     06CC  00FF               	movwf	btemp+1
  1001     06CD  0873               	movf	sprintf@cp,w
  1002     06CE  0084               	movwf	4
  1003     06CF  120A  118A  2003  120A  118A  	fcall	stringtab
  1004     06D4  3A00               	xorlw	0
  1005     06D5  1D03               	skipz
  1006     06D6  2ED8               	goto	u681
  1007     06D7  2ED9               	goto	u680
  1008     06D8                     u681:
  1009     06D8  2EAE               	goto	l1444
  1010     06D9                     u680:
  1011     06D9  2F0E               	goto	l1462
  1012     06DA                     l1450:
  1013                           
  1014                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
  1015     06DA  0872               	movf	sprintf@ap,w
  1016     06DB  0084               	movwf	4
  1017     06DC  1383               	bcf	3,7	;select IRP bank0
  1018     06DD  0800               	movf	0,w
  1019     06DE  00F5               	movwf	sprintf@c
  1020     06DF                     l1452:
  1021     06DF  3002               	movlw	2
  1022     06E0  00F0               	movwf	??_sprintf
  1023     06E1  0870               	movf	??_sprintf,w
  1024     06E2  07F2               	addwf	sprintf@ap,f
  1025     06E3                     l1454:
  1026                           
  1027                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  1028     06E3  0820               	movf	sprintf@sp,w
  1029     06E4  0084               	movwf	4
  1030     06E5  1783               	bsf	3,7
  1031     06E6  1C21               	btfss	sprintf@sp+1,0
  1032     06E7  1383               	bcf	3,7
  1033     06E8  0875               	movf	sprintf@c,w
  1034     06E9  0080               	movwf	0
  1035     06EA                     l1456:
  1036     06EA  3001               	movlw	1
  1037     06EB  07A0               	addwf	sprintf@sp,f
  1038     06EC  1803               	skipnc
  1039     06ED  0AA1               	incf	sprintf@sp+1,f
  1040     06EE  3000               	movlw	0
  1041     06EF  07A1               	addwf	sprintf@sp+1,f
  1042                           
  1043                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 836:    continue;
  1044     06F0  2F0E               	goto	l1462
  1045     06F1                     l1460:
  1046     06F1  3001               	movlw	1
  1047     06F2  07A2               	addwf	sprintf@f,f
  1048     06F3  30FF               	movlw	-1
  1049     06F4  0722               	addwf	sprintf@f,w
  1050     06F5  0084               	movwf	4
  1051     06F6  120A  118A  200D  120A  118A  	fcall	stringdir
  1052     06FB  00F5               	movwf	sprintf@c
  1053     06FC  00F0               	movwf	??_sprintf
  1054     06FD  01F1               	clrf	??_sprintf+1
  1055                           
  1056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1057                           ; Switch size 1, requested type "simple"
  1058                           ; Number of cases is 1, Range of values is 0 to 0
  1059                           ; switch strategies available:
  1060                           ; Name         Instructions Cycles
  1061                           ; simple_byte            4     3 (average)
  1062                           ; direct_byte           11     8 (fixed)
  1063                           ; jumptable            260     6 (fixed)
  1064                           ;	Chosen strategy is simple_byte
  1065     06FE  0871               	movf	??_sprintf+1,w
  1066     06FF  3A00               	xorlw	0	; case 0
  1067     0700  1903               	skipnz
  1068     0701  2F03               	goto	l1588
  1069     0702  2EE3               	goto	l1454
  1070     0703                     l1588:
  1071                           
  1072                           ; Switch size 1, requested type "simple"
  1073                           ; Number of cases is 3, Range of values is 0 to 115
  1074                           ; switch strategies available:
  1075                           ; Name         Instructions Cycles
  1076                           ; simple_byte           10     6 (average)
  1077                           ; jumptable            260     6 (fixed)
  1078                           ;	Chosen strategy is simple_byte
  1079     0703  0870               	movf	??_sprintf,w
  1080     0704  3A00               	xorlw	0	; case 0
  1081     0705  1903               	skipnz
  1082     0706  2F20               	goto	l1464
  1083     0707  3A63               	xorlw	99	; case 99
  1084     0708  1903               	skipnz
  1085     0709  2EDA               	goto	l1450
  1086     070A  3A10               	xorlw	16	; case 115
  1087     070B  1903               	skipnz
  1088     070C  2E98               	goto	l1436
  1089     070D  2EE3               	goto	l1454
  1090     070E                     l1462:
  1091                           
  1092                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1093     070E  3001               	movlw	1
  1094     070F  1283               	bcf	3,5	;RP0=0, select bank0
  1095     0710  1303               	bcf	3,6	;RP1=0, select bank0
  1096     0711  07A2               	addwf	sprintf@f,f
  1097     0712  30FF               	movlw	-1
  1098     0713  0722               	addwf	sprintf@f,w
  1099     0714  0084               	movwf	4
  1100     0715  120A  118A  200D  120A  118A  	fcall	stringdir
  1101     071A  00F5               	movwf	sprintf@c
  1102     071B  0875               	movf	sprintf@c,w
  1103     071C  1D03               	btfss	3,2
  1104     071D  2F1F               	goto	u691
  1105     071E  2F20               	goto	u690
  1106     071F                     u691:
  1107     071F  2E83               	goto	l1428
  1108     0720                     u690:
  1109     0720                     l1464:
  1110                           
  1111                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1112     0720  0820               	movf	sprintf@sp,w
  1113     0721  0084               	movwf	4
  1114     0722  1783               	bsf	3,7
  1115     0723  1C21               	btfss	sprintf@sp+1,0
  1116     0724  1383               	bcf	3,7
  1117     0725  0180               	clrf	0
  1118     0726                     l294:
  1119     0726  0008               	return
  1120     0727                     __end_of_sprintf:
  1121                           
  1122                           	psect	text2
  1123     0727                     __ptext2:	
  1124 ;; *************** function _nrf_setup *****************
  1125 ;; Defined at:
  1126 ;;		line 174 in file "./nrf24l01.h"
  1127 ;; Parameters:    Size  Location     Type
  1128 ;;  addr            1    wreg     PTR unsigned char 
  1129 ;;		 -> RADIO_ADDR(5), 
  1130 ;;  payload_size    1   11[COMMON] unsigned char 
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;  addr            1    0[BANK0 ] PTR unsigned char 
  1133 ;;		 -> RADIO_ADDR(5), 
  1134 ;;  data            5    1[BANK0 ] unsigned char [5]
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1144 ;;      Params:         1       0       0       0       0
  1145 ;;      Locals:         0       6       0       0       0
  1146 ;;      Temps:          0       0       0       0       0
  1147 ;;      Totals:         1       6       0       0       0
  1148 ;;Total ram usage:        7 bytes
  1149 ;; Hardware stack levels used: 1
  1150 ;; Hardware stack levels required when called: 4
  1151 ;; This function calls:
  1152 ;;		_arrcpy
  1153 ;;		_nrf_flush_rxtx
  1154 ;;		_nrf_write_register
  1155 ;; This function is called by:
  1156 ;;		_main
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160     0727                     _nrf_setup:	
  1161                           ;psect for function _nrf_setup
  1162                           
  1163                           
  1164                           ;incstack = 0
  1165                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1166                           ;nrf_setup@addr stored from wreg
  1167     0727  1283               	bcf	3,5	;RP0=0, select bank0
  1168     0728  1303               	bcf	3,6	;RP1=0, select bank0
  1169     0729  00A0               	movwf	nrf_setup@addr
  1170     072A                     l1356:
  1171                           
  1172                           ;./nrf24l01.h: 174:     void nrf_setup(uint8_t *addr, uint8_t payload_size);./nrf24l01.h
      +                          : 175:     {;./nrf24l01.h: 177:         TRISD3 = 0;
  1173     072A  1683               	bsf	3,5	;RP0=1, select bank1
  1174     072B  1303               	bcf	3,6	;RP1=0, select bank1
  1175     072C  1188               	bcf	8,3	;volatile
  1176                           
  1177                           ;./nrf24l01.h: 178:         TRISD2 = 0;
  1178     072D  1108               	bcf	8,2	;volatile
  1179                           
  1180                           ;./nrf24l01.h: 180:         RD3 = 1;
  1181     072E  1283               	bcf	3,5	;RP0=0, select bank0
  1182     072F  1303               	bcf	3,6	;RP1=0, select bank0
  1183     0730  1588               	bsf	8,3	;volatile
  1184                           
  1185                           ;./nrf24l01.h: 181:         RD2 = 0;
  1186     0731  1108               	bcf	8,2	;volatile
  1187     0732                     l1358:
  1188                           
  1189                           ;./nrf24l01.h: 183:         uint8_t data[5];;./nrf24l01.h: 185:         data[0] = 0x0B;
  1190     0732  300B               	movlw	11
  1191     0733  00A1               	movwf	nrf_setup@data
  1192     0734                     l1360:
  1193                           
  1194                           ;./nrf24l01.h: 186:         nrf_write_register(0x00, &data, 1);
  1195     0734  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1196     0735  00F7               	movwf	nrf_write_register@data
  1197     0736  01F8               	clrf	nrf_write_register@len
  1198     0737  0AF8               	incf	nrf_write_register@len,f
  1199     0738  3000               	movlw	0
  1200     0739  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1201     073E                     l1362:
  1202                           
  1203                           ;./nrf24l01.h: 187:         data[0] = 0x00;
  1204     073E  1283               	bcf	3,5	;RP0=0, select bank0
  1205     073F  1303               	bcf	3,6	;RP1=0, select bank0
  1206     0740  01A1               	clrf	nrf_setup@data
  1207     0741                     l1364:
  1208                           
  1209                           ;./nrf24l01.h: 188:         nrf_write_register(0x01, &data, 1);
  1210     0741  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1211     0742  00F7               	movwf	nrf_write_register@data
  1212     0743  01F8               	clrf	nrf_write_register@len
  1213     0744  0AF8               	incf	nrf_write_register@len,f
  1214     0745  3001               	movlw	1
  1215     0746  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1216     074B                     l1366:
  1217                           
  1218                           ;./nrf24l01.h: 189:         data[0] = 0x01;
  1219     074B  1283               	bcf	3,5	;RP0=0, select bank0
  1220     074C  1303               	bcf	3,6	;RP1=0, select bank0
  1221     074D  01A1               	clrf	nrf_setup@data
  1222     074E  0AA1               	incf	nrf_setup@data,f
  1223     074F                     l1368:
  1224                           
  1225                           ;./nrf24l01.h: 190:         nrf_write_register(0x02, &data, 1);
  1226     074F  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1227     0750  00F7               	movwf	nrf_write_register@data
  1228     0751  01F8               	clrf	nrf_write_register@len
  1229     0752  0AF8               	incf	nrf_write_register@len,f
  1230     0753  3002               	movlw	2
  1231     0754  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1232     0759                     l1370:
  1233                           
  1234                           ;./nrf24l01.h: 191:         data[0] = 0x01;
  1235     0759  1283               	bcf	3,5	;RP0=0, select bank0
  1236     075A  1303               	bcf	3,6	;RP1=0, select bank0
  1237     075B  01A1               	clrf	nrf_setup@data
  1238     075C  0AA1               	incf	nrf_setup@data,f
  1239     075D                     l1372:
  1240                           
  1241                           ;./nrf24l01.h: 192:         nrf_write_register(0x03, &data, 1);
  1242     075D  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1243     075E  00F7               	movwf	nrf_write_register@data
  1244     075F  01F8               	clrf	nrf_write_register@len
  1245     0760  0AF8               	incf	nrf_write_register@len,f
  1246     0761  3003               	movlw	3
  1247     0762  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1248     0767                     l1374:
  1249                           
  1250                           ;./nrf24l01.h: 193:         data[0] = 0x00;
  1251     0767  1283               	bcf	3,5	;RP0=0, select bank0
  1252     0768  1303               	bcf	3,6	;RP1=0, select bank0
  1253     0769  01A1               	clrf	nrf_setup@data
  1254     076A                     l1376:
  1255                           
  1256                           ;./nrf24l01.h: 194:         nrf_write_register(0x04, &data, 1);
  1257     076A  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1258     076B  00F7               	movwf	nrf_write_register@data
  1259     076C  01F8               	clrf	nrf_write_register@len
  1260     076D  0AF8               	incf	nrf_write_register@len,f
  1261     076E  3004               	movlw	4
  1262     076F  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1263     0774                     l1378:
  1264                           
  1265                           ;./nrf24l01.h: 195:         data[0] = 0x01;
  1266     0774  1283               	bcf	3,5	;RP0=0, select bank0
  1267     0775  1303               	bcf	3,6	;RP1=0, select bank0
  1268     0776  01A1               	clrf	nrf_setup@data
  1269     0777  0AA1               	incf	nrf_setup@data,f
  1270     0778                     l1380:
  1271                           
  1272                           ;./nrf24l01.h: 196:         nrf_write_register(0x05, &data, 1);
  1273     0778  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1274     0779  00F7               	movwf	nrf_write_register@data
  1275     077A  01F8               	clrf	nrf_write_register@len
  1276     077B  0AF8               	incf	nrf_write_register@len,f
  1277     077C  3005               	movlw	5
  1278     077D  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1279                           
  1280                           ;./nrf24l01.h: 197:         data[0] = 0x26;
  1281     0782  3026               	movlw	38
  1282     0783  1283               	bcf	3,5	;RP0=0, select bank0
  1283     0784  1303               	bcf	3,6	;RP1=0, select bank0
  1284     0785  00A1               	movwf	nrf_setup@data
  1285     0786                     l1382:
  1286                           
  1287                           ;./nrf24l01.h: 198:         nrf_write_register(0x06, &data, 1);
  1288     0786  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1289     0787  00F7               	movwf	nrf_write_register@data
  1290     0788  01F8               	clrf	nrf_write_register@len
  1291     0789  0AF8               	incf	nrf_write_register@len,f
  1292     078A  3006               	movlw	6
  1293     078B  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1294     0790                     l1384:
  1295                           
  1296                           ;./nrf24l01.h: 199:         data[0] = payload_size;
  1297     0790  087B               	movf	nrf_setup@payload_size,w
  1298     0791  1283               	bcf	3,5	;RP0=0, select bank0
  1299     0792  1303               	bcf	3,6	;RP1=0, select bank0
  1300     0793  00A1               	movwf	nrf_setup@data
  1301                           
  1302                           ;./nrf24l01.h: 200:         nrf_write_register(0x11, &data, 1);
  1303     0794  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1304     0795  00F7               	movwf	nrf_write_register@data
  1305     0796  01F8               	clrf	nrf_write_register@len
  1306     0797  0AF8               	incf	nrf_write_register@len,f
  1307     0798  3011               	movlw	17
  1308     0799  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1309                           
  1310                           ;./nrf24l01.h: 202:         arrcpy(data, addr, sizeof(addr));
  1311     079E  1283               	bcf	3,5	;RP0=0, select bank0
  1312     079F  1303               	bcf	3,6	;RP1=0, select bank0
  1313     07A0  0820               	movf	nrf_setup@addr,w
  1314     07A1  00F0               	movwf	arrcpy@src
  1315     07A2  01F1               	clrf	arrcpy@len
  1316     07A3  0AF1               	incf	arrcpy@len,f
  1317     07A4  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1318     07A5  120A  118A  241A  120A  118A  	fcall	_arrcpy
  1319                           
  1320                           ;./nrf24l01.h: 203:         nrf_write_register(0x0A, data, sizeof(addr));
  1321     07AA  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1322     07AB  00F7               	movwf	nrf_write_register@data
  1323     07AC  01F8               	clrf	nrf_write_register@len
  1324     07AD  0AF8               	incf	nrf_write_register@len,f
  1325     07AE  300A               	movlw	10
  1326     07AF  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1327                           
  1328                           ;./nrf24l01.h: 205:         arrcpy(data, addr, sizeof(addr));
  1329     07B4  1283               	bcf	3,5	;RP0=0, select bank0
  1330     07B5  1303               	bcf	3,6	;RP1=0, select bank0
  1331     07B6  0820               	movf	nrf_setup@addr,w
  1332     07B7  00F0               	movwf	arrcpy@src
  1333     07B8  01F1               	clrf	arrcpy@len
  1334     07B9  0AF1               	incf	arrcpy@len,f
  1335     07BA  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1336     07BB  120A  118A  241A  120A  118A  	fcall	_arrcpy
  1337                           
  1338                           ;./nrf24l01.h: 206:         nrf_write_register(0x10, data, sizeof(addr));
  1339     07C0  3021               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1340     07C1  00F7               	movwf	nrf_write_register@data
  1341     07C2  01F8               	clrf	nrf_write_register@len
  1342     07C3  0AF8               	incf	nrf_write_register@len,f
  1343     07C4  3010               	movlw	16
  1344     07C5  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1345                           
  1346                           ;./nrf24l01.h: 208:         nrf_flush_rxtx();
  1347     07CA  120A  118A  2401  120A  118A  	fcall	_nrf_flush_rxtx
  1348     07CF                     l121:
  1349     07CF  0008               	return
  1350     07D0                     __end_of_nrf_setup:
  1351                           
  1352                           	psect	text3
  1353     0401                     __ptext3:	
  1354 ;; *************** function _nrf_flush_rxtx *****************
  1355 ;; Defined at:
  1356 ;;		line 164 in file "./nrf24l01.h"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;		None
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  data            1   10[COMMON] unsigned char 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;                  1    wreg      void 
  1363 ;; Registers used:
  1364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1370 ;;      Params:         0       0       0       0       0
  1371 ;;      Locals:         1       0       0       0       0
  1372 ;;      Temps:          0       0       0       0       0
  1373 ;;      Totals:         1       0       0       0       0
  1374 ;;Total ram usage:        1 bytes
  1375 ;; Hardware stack levels used: 1
  1376 ;; Hardware stack levels required when called: 3
  1377 ;; This function calls:
  1378 ;;		_nrf_write_command
  1379 ;;		_nrf_write_register
  1380 ;; This function is called by:
  1381 ;;		_nrf_setup
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385     0401                     _nrf_flush_rxtx:	
  1386                           ;psect for function _nrf_flush_rxtx
  1387                           
  1388     0401                     l1268:	
  1389                           ;incstack = 0
  1390                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1391                           
  1392                           
  1393                           ;./nrf24l01.h: 166:         uint8_t data = 0b01110000;
  1394     0401  3070               	movlw	112
  1395     0402  00FA               	movwf	nrf_flush_rxtx@data
  1396     0403                     l1270:
  1397                           
  1398                           ;./nrf24l01.h: 167:         nrf_write_register(0x07, &data, 1);
  1399     0403  307A               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1400     0404  00F7               	movwf	nrf_write_register@data
  1401     0405  01F8               	clrf	nrf_write_register@len
  1402     0406  0AF8               	incf	nrf_write_register@len,f
  1403     0407  3007               	movlw	7
  1404     0408  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1405     040D                     l1272:
  1406                           
  1407                           ;./nrf24l01.h: 168:         nrf_write_command(0b11100001);
  1408     040D  30E1               	movlw	225
  1409     040E  120A  118A  23F1  120A  118A  	fcall	_nrf_write_command
  1410     0413                     l1274:
  1411                           
  1412                           ;./nrf24l01.h: 169:         nrf_write_command(0b11100010);
  1413     0413  30E2               	movlw	226
  1414     0414  120A  118A  23F1  120A  118A  	fcall	_nrf_write_command
  1415     0419                     l118:
  1416     0419  0008               	return
  1417     041A                     __end_of_nrf_flush_rxtx:
  1418                           
  1419                           	psect	text4
  1420     041A                     __ptext4:	
  1421 ;; *************** function _arrcpy *****************
  1422 ;; Defined at:
  1423 ;;		line 97 in file "./nrf24l01.h"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;  dst             1    wreg     PTR unsigned char 
  1426 ;;		 -> nrf_setup@data(5), 
  1427 ;;  src             1    0[COMMON] PTR unsigned char 
  1428 ;;		 -> RADIO_ADDR(5), 
  1429 ;;  len             1    1[COMMON] unsigned char 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  dst             1    5[COMMON] PTR unsigned char 
  1432 ;;		 -> nrf_setup@data(5), 
  1433 ;;  i               1    6[COMMON] unsigned char 
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1443 ;;      Params:         2       0       0       0       0
  1444 ;;      Locals:         2       0       0       0       0
  1445 ;;      Temps:          3       0       0       0       0
  1446 ;;      Totals:         7       0       0       0       0
  1447 ;;Total ram usage:        7 bytes
  1448 ;; Hardware stack levels used: 1
  1449 ;; This function calls:
  1450 ;;		Nothing
  1451 ;; This function is called by:
  1452 ;;		_nrf_setup
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456     041A                     _arrcpy:	
  1457                           ;psect for function _arrcpy
  1458                           
  1459                           
  1460                           ;incstack = 0
  1461                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0]
  1462                           ;arrcpy@dst stored from wreg
  1463     041A  00F5               	movwf	arrcpy@dst
  1464     041B                     l1256:
  1465                           
  1466                           ;./nrf24l01.h: 97:     void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);./nrf24l01.h
      +                          : 98:     {;./nrf24l01.h: 99:         for (uint8_t i = 0; i < len; i++)
  1467     041B  01F6               	clrf	arrcpy@i
  1468     041C  2C30               	goto	l1262
  1469     041D                     l1258:
  1470                           
  1471                           ;./nrf24l01.h: 100:         {;./nrf24l01.h: 101:             dst[i] = src[i];
  1472     041D  0876               	movf	arrcpy@i,w
  1473     041E  0770               	addwf	arrcpy@src,w
  1474     041F  00F2               	movwf	??_arrcpy
  1475     0420  0872               	movf	??_arrcpy,w
  1476     0421  0084               	movwf	4
  1477     0422  1383               	bcf	3,7	;select IRP bank0
  1478     0423  0800               	movf	0,w
  1479     0424  00F3               	movwf	??_arrcpy+1
  1480     0425  0876               	movf	arrcpy@i,w
  1481     0426  0775               	addwf	arrcpy@dst,w
  1482     0427  00F4               	movwf	??_arrcpy+2
  1483     0428  0874               	movf	??_arrcpy+2,w
  1484     0429  0084               	movwf	4
  1485     042A  0873               	movf	??_arrcpy+1,w
  1486     042B  0080               	movwf	0
  1487     042C                     l1260:
  1488                           
  1489                           ;./nrf24l01.h: 102:         }
  1490     042C  3001               	movlw	1
  1491     042D  00F2               	movwf	??_arrcpy
  1492     042E  0872               	movf	??_arrcpy,w
  1493     042F  07F6               	addwf	arrcpy@i,f
  1494     0430                     l1262:
  1495     0430  0871               	movf	arrcpy@len,w
  1496     0431  0276               	subwf	arrcpy@i,w
  1497     0432  1C03               	skipc
  1498     0433  2C35               	goto	u451
  1499     0434  2C36               	goto	u450
  1500     0435                     u451:
  1501     0435  2C1D               	goto	l1258
  1502     0436                     u450:
  1503     0436                     l91:
  1504     0436  0008               	return
  1505     0437                     __end_of_arrcpy:
  1506                           
  1507                           	psect	text5
  1508     0437                     __ptext5:	
  1509 ;; *************** function _nrf_set_rx_mode *****************
  1510 ;; Defined at:
  1511 ;;		line 212 in file "./nrf24l01.h"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  config          1   12[COMMON] unsigned char 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1525 ;;      Params:         0       0       0       0       0
  1526 ;;      Locals:         1       0       0       0       0
  1527 ;;      Temps:          0       0       0       0       0
  1528 ;;      Totals:         1       0       0       0       0
  1529 ;;Total ram usage:        1 bytes
  1530 ;; Hardware stack levels used: 1
  1531 ;; Hardware stack levels required when called: 3
  1532 ;; This function calls:
  1533 ;;		_nrf_read_register
  1534 ;;		_nrf_write_register
  1535 ;; This function is called by:
  1536 ;;		_main
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540     0437                     _nrf_set_rx_mode:	
  1541                           ;psect for function _nrf_set_rx_mode
  1542                           
  1543     0437                     l1386:	
  1544                           ;incstack = 0
  1545                           ; Regs used in _nrf_set_rx_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1546                           
  1547                           
  1548                           ;./nrf24l01.h: 214:         uint8_t config;;./nrf24l01.h: 215:         nrf_read_register
      +                          (0x00, &config, 1);
  1549     0437  307C               	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1550     0438  00F9               	movwf	nrf_read_register@data
  1551     0439  01FA               	clrf	nrf_read_register@len
  1552     043A  0AFA               	incf	nrf_read_register@len,f
  1553     043B  3000               	movlw	0
  1554     043C  120A  118A  23BB  120A  118A  	fcall	_nrf_read_register
  1555     0441                     l1388:
  1556                           
  1557                           ;./nrf24l01.h: 217:         RD2 = 1;
  1558     0441  1283               	bcf	3,5	;RP0=0, select bank0
  1559     0442  1303               	bcf	3,6	;RP1=0, select bank0
  1560     0443  1508               	bsf	8,2	;volatile
  1561     0444                     l1390:
  1562                           
  1563                           ;./nrf24l01.h: 219:         if (config & 0x01)
  1564     0444  1C7C               	btfss	nrf_set_rx_mode@config,0
  1565     0445  2C47               	goto	u621
  1566     0446  2C48               	goto	u620
  1567     0447                     u621:
  1568     0447  2C49               	goto	l124
  1569     0448                     u620:
  1570     0448  2C54               	goto	l125
  1571     0449                     l124:
  1572                           
  1573                           ;./nrf24l01.h: 222:         config |= 0x01;
  1574     0449  147C               	bsf	nrf_set_rx_mode@config,0
  1575     044A                     l1394:
  1576                           
  1577                           ;./nrf24l01.h: 223:         nrf_write_register(0x00, &config, 1);
  1578     044A  307C               	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1579     044B  00F7               	movwf	nrf_write_register@data
  1580     044C  01F8               	clrf	nrf_write_register@len
  1581     044D  0AF8               	incf	nrf_write_register@len,f
  1582     044E  3000               	movlw	0
  1583     044F  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1584     0454                     l125:
  1585     0454  0008               	return
  1586     0455                     __end_of_nrf_set_rx_mode:
  1587                           
  1588                           	psect	text6
  1589     0455                     __ptext6:	
  1590 ;; *************** function _nrf_read *****************
  1591 ;; Defined at:
  1592 ;;		line 269 in file "./nrf24l01.h"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  data            1    wreg     PTR unsigned char 
  1595 ;;		 -> main@data(3), 
  1596 ;;  len             1   12[COMMON] unsigned char 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  data            1    0[BANK0 ] PTR unsigned char 
  1599 ;;		 -> main@data(3), 
  1600 ;;  clear           1    1[BANK0 ] unsigned char 
  1601 ;;  status          1    0        unsigned char 
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      unsigned char 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1611 ;;      Params:         1       0       0       0       0
  1612 ;;      Locals:         0       2       0       0       0
  1613 ;;      Temps:          0       0       0       0       0
  1614 ;;      Totals:         1       2       0       0       0
  1615 ;;Total ram usage:        3 bytes
  1616 ;; Hardware stack levels used: 1
  1617 ;; Hardware stack levels required when called: 3
  1618 ;; This function calls:
  1619 ;;		_nrf_read_register
  1620 ;;		_nrf_write_command
  1621 ;;		_nrf_write_register
  1622 ;; This function is called by:
  1623 ;;		_main
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627     0455                     _nrf_read:	
  1628                           ;psect for function _nrf_read
  1629                           
  1630                           
  1631                           ;incstack = 0
  1632                           ; Regs used in _nrf_read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1633                           ;nrf_read@data stored from wreg
  1634     0455  1283               	bcf	3,5	;RP0=0, select bank0
  1635     0456  1303               	bcf	3,6	;RP1=0, select bank0
  1636     0457  00A0               	movwf	nrf_read@data
  1637     0458                     l1416:
  1638     0458  0820               	movf	nrf_read@data,w
  1639     0459  00F9               	movwf	nrf_read_register@data
  1640     045A  087C               	movf	nrf_read@len,w
  1641     045B  00FA               	movwf	nrf_read_register@len
  1642     045C  3061               	movlw	97
  1643     045D  120A  118A  23BB  120A  118A  	fcall	_nrf_read_register
  1644     0462                     l1418:
  1645                           
  1646                           ;./nrf24l01.h: 274:         nrf_write_command(0b11100010);
  1647     0462  30E2               	movlw	226
  1648     0463  120A  118A  23F1  120A  118A  	fcall	_nrf_write_command
  1649     0468                     l1420:
  1650                           
  1651                           ;./nrf24l01.h: 275:         uint8_t clear = 0x40;
  1652     0468  3040               	movlw	64
  1653     0469  1283               	bcf	3,5	;RP0=0, select bank0
  1654     046A  1303               	bcf	3,6	;RP1=0, select bank0
  1655     046B  00A1               	movwf	nrf_read@clear
  1656     046C                     l1422:
  1657                           
  1658                           ;./nrf24l01.h: 276:         nrf_write_register(0x07, &clear, 1);
  1659     046C  3021               	movlw	(low (nrf_read@clear| 0))& (0+255)
  1660     046D  00F7               	movwf	nrf_write_register@data
  1661     046E  01F8               	clrf	nrf_write_register@len
  1662     046F  0AF8               	incf	nrf_write_register@len,f
  1663     0470  3007               	movlw	7
  1664     0471  120A  118A  23C7  120A  118A  	fcall	_nrf_write_register
  1665     0476                     l140:
  1666     0476  0008               	return
  1667     0477                     __end_of_nrf_read:
  1668                           
  1669                           	psect	text7
  1670     03C7                     __ptext7:	
  1671 ;; *************** function _nrf_write_register *****************
  1672 ;; Defined at:
  1673 ;;		line 131 in file "./nrf24l01.h"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;  reg             1    wreg     unsigned char 
  1676 ;;  data            1    7[COMMON] PTR unsigned char 
  1677 ;;		 -> nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1678 ;;		 -> nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1679 ;;  len             1    8[COMMON] unsigned char 
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  reg             1    9[COMMON] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      unsigned char 
  1684 ;; Registers used:
  1685 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1691 ;;      Params:         2       0       0       0       0
  1692 ;;      Locals:         1       0       0       0       0
  1693 ;;      Temps:          0       0       0       0       0
  1694 ;;      Totals:         3       0       0       0       0
  1695 ;;Total ram usage:        3 bytes
  1696 ;; Hardware stack levels used: 1
  1697 ;; Hardware stack levels required when called: 2
  1698 ;; This function calls:
  1699 ;;		_nrf_command_with_data
  1700 ;; This function is called by:
  1701 ;;		_nrf_flush_rxtx
  1702 ;;		_nrf_setup
  1703 ;;		_nrf_set_rx_mode
  1704 ;;		_nrf_read
  1705 ;;		_nrf_write_payload
  1706 ;;		_nrf_set_tx_mode
  1707 ;;		_nrf_send
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711     03C7                     _nrf_write_register:	
  1712                           ;psect for function _nrf_write_register
  1713                           
  1714                           
  1715                           ;incstack = 0
  1716                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1717                           ;nrf_write_register@reg stored from wreg
  1718     03C7  00F9               	movwf	nrf_write_register@reg
  1719     03C8                     l1238:
  1720                           
  1721                           ;./nrf24l01.h: 131:     uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t l
      +                          en);./nrf24l01.h: 132:     {;./nrf24l01.h: 133:         return nrf_command_with_data(reg
      +                           | 0b00100000, data, len);
  1722     03C8  0877               	movf	nrf_write_register@data,w
  1723     03C9  00F1               	movwf	nrf_command_with_data@data
  1724     03CA  0878               	movf	nrf_write_register@len,w
  1725     03CB  00F2               	movwf	nrf_command_with_data@len
  1726     03CC  0879               	movf	nrf_write_register@reg,w
  1727     03CD  3820               	iorlw	32
  1728     03CE  120A  118A  2477  120A  118A  	fcall	_nrf_command_with_data
  1729     03D3                     l106:
  1730     03D3  0008               	return
  1731     03D4                     __end_of_nrf_write_register:
  1732                           
  1733                           	psect	text8
  1734     0477                     __ptext8:	
  1735 ;; *************** function _nrf_command_with_data *****************
  1736 ;; Defined at:
  1737 ;;		line 124 in file "./nrf24l01.h"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  command         1    wreg     unsigned char 
  1740 ;;  data            1    1[COMMON] PTR unsigned char 
  1741 ;;		 -> nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1742 ;;		 -> nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1743 ;;  len             1    2[COMMON] unsigned char 
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  command         1    4[COMMON] unsigned char 
  1746 ;;  i               1    6[COMMON] unsigned char 
  1747 ;;  status          1    5[COMMON] unsigned char 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      unsigned char 
  1750 ;; Registers used:
  1751 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1757 ;;      Params:         2       0       0       0       0
  1758 ;;      Locals:         3       0       0       0       0
  1759 ;;      Temps:          1       0       0       0       0
  1760 ;;      Totals:         6       0       0       0       0
  1761 ;;Total ram usage:        6 bytes
  1762 ;; Hardware stack levels used: 1
  1763 ;; Hardware stack levels required when called: 1
  1764 ;; This function calls:
  1765 ;;		_SPI_write
  1766 ;; This function is called by:
  1767 ;;		_nrf_write_register
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771     0477                     _nrf_command_with_data:	
  1772                           ;psect for function _nrf_command_with_data
  1773                           
  1774                           
  1775                           ;incstack = 0
  1776                           ; Regs used in _nrf_command_with_data: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1777                           ;nrf_command_with_data@command stored from wreg
  1778     0477  00F4               	movwf	nrf_command_with_data@command
  1779     0478                     l1206:
  1780                           
  1781                           ;./nrf24l01.h: 124:     uint8_t nrf_command_with_data(uint8_t command, uint8_t *data, ui
      +                          nt8_t len);./nrf24l01.h: 125:     {;./nrf24l01.h: 126:         RD3 = 0; uint8_t status =
      +                           SPI_write(command); for (uint8_t i = 0; i < len; i++) { SPI_write(data[i]); } RD3 = 1; 
      +                          return status;
  1782     0478  1283               	bcf	3,5	;RP0=0, select bank0
  1783     0479  1303               	bcf	3,6	;RP1=0, select bank0
  1784     047A  1188               	bcf	8,3	;volatile
  1785     047B                     l1208:
  1786     047B  0874               	movf	nrf_command_with_data@command,w
  1787     047C  120A  118A  23E2  120A  118A  	fcall	_SPI_write
  1788     0481  00F5               	movwf	nrf_command_with_data@status
  1789     0482                     l1210:
  1790     0482  01F6               	clrf	nrf_command_with_data@i
  1791     0483  2C94               	goto	l1216
  1792     0484                     l1212:
  1793     0484  0876               	movf	nrf_command_with_data@i,w
  1794     0485  0771               	addwf	nrf_command_with_data@data,w
  1795     0486  00F3               	movwf	??_nrf_command_with_data
  1796     0487  0873               	movf	??_nrf_command_with_data,w
  1797     0488  0084               	movwf	4
  1798     0489  1383               	bcf	3,7	;select IRP bank0
  1799     048A  0800               	movf	0,w
  1800     048B  120A  118A  23E2  120A  118A  	fcall	_SPI_write
  1801     0490                     l1214:
  1802     0490  3001               	movlw	1
  1803     0491  00F3               	movwf	??_nrf_command_with_data
  1804     0492  0873               	movf	??_nrf_command_with_data,w
  1805     0493  07F6               	addwf	nrf_command_with_data@i,f
  1806     0494                     l1216:
  1807     0494  0872               	movf	nrf_command_with_data@len,w
  1808     0495  0276               	subwf	nrf_command_with_data@i,w
  1809     0496  1C03               	skipc
  1810     0497  2C99               	goto	u421
  1811     0498  2C9A               	goto	u420
  1812     0499                     u421:
  1813     0499  2C84               	goto	l1212
  1814     049A                     u420:
  1815     049A                     l102:
  1816     049A  1283               	bcf	3,5	;RP0=0, select bank0
  1817     049B  1303               	bcf	3,6	;RP1=0, select bank0
  1818     049C  1588               	bsf	8,3	;volatile
  1819     049D                     l1218:
  1820     049D  0875               	movf	nrf_command_with_data@status,w
  1821     049E                     l103:
  1822     049E  0008               	return
  1823     049F                     __end_of_nrf_command_with_data:
  1824                           
  1825                           	psect	text9
  1826     03BB                     __ptext9:	
  1827 ;; *************** function _nrf_read_register *****************
  1828 ;; Defined at:
  1829 ;;		line 137 in file "./nrf24l01.h"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;  reg             1    wreg     unsigned char 
  1832 ;;  data            1    9[COMMON] PTR unsigned char 
  1833 ;;		 -> main@data(3), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1834 ;;  len             1   10[COMMON] unsigned char 
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;  reg             1   11[COMMON] unsigned char 
  1837 ;; Return value:  Size  Location     Type
  1838 ;;                  1    wreg      unsigned char 
  1839 ;; Registers used:
  1840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1841 ;; Tracked objects:
  1842 ;;		On entry : 0/0
  1843 ;;		On exit  : 0/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1846 ;;      Params:         2       0       0       0       0
  1847 ;;      Locals:         1       0       0       0       0
  1848 ;;      Temps:          0       0       0       0       0
  1849 ;;      Totals:         3       0       0       0       0
  1850 ;;Total ram usage:        3 bytes
  1851 ;; Hardware stack levels used: 1
  1852 ;; Hardware stack levels required when called: 2
  1853 ;; This function calls:
  1854 ;;		_nrf_command_with_data_overwrite
  1855 ;; This function is called by:
  1856 ;;		_nrf_set_rx_mode
  1857 ;;		_nrf_read
  1858 ;;		_nrf_set_tx_mode
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862     03BB                     _nrf_read_register:	
  1863                           ;psect for function _nrf_read_register
  1864                           
  1865                           
  1866                           ;incstack = 0
  1867                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1868                           ;nrf_read_register@reg stored from wreg
  1869     03BB  00FB               	movwf	nrf_read_register@reg
  1870     03BC                     l1264:
  1871                           
  1872                           ;./nrf24l01.h: 137:     uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t le
      +                          n);./nrf24l01.h: 138:     {;./nrf24l01.h: 139:         return nrf_command_with_data_over
      +                          write(reg | 0b00000000, data, len);
  1873     03BC  0879               	movf	nrf_read_register@data,w
  1874     03BD  00F1               	movwf	nrf_command_with_data_overwrite@data
  1875     03BE  087A               	movf	nrf_read_register@len,w
  1876     03BF  00F2               	movwf	nrf_command_with_data_overwrite@len
  1877     03C0  087B               	movf	nrf_read_register@reg,w
  1878     03C1  120A  118A  249F  120A  118A  	fcall	_nrf_command_with_data_overwrite
  1879     03C6                     l109:
  1880     03C6  0008               	return
  1881     03C7                     __end_of_nrf_read_register:
  1882                           
  1883                           	psect	text10
  1884     049F                     __ptext10:	
  1885 ;; *************** function _nrf_command_with_data_overwrite *****************
  1886 ;; Defined at:
  1887 ;;		line 118 in file "./nrf24l01.h"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  command         1    wreg     unsigned char 
  1890 ;;  data            1    1[COMMON] PTR unsigned char 
  1891 ;;		 -> main@data(3), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1892 ;;  len             1    2[COMMON] unsigned char 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  command         1    6[COMMON] unsigned char 
  1895 ;;  i               1    8[COMMON] unsigned char 
  1896 ;;  status          1    7[COMMON] unsigned char 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      unsigned char 
  1899 ;; Registers used:
  1900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1906 ;;      Params:         2       0       0       0       0
  1907 ;;      Locals:         3       0       0       0       0
  1908 ;;      Temps:          3       0       0       0       0
  1909 ;;      Totals:         8       0       0       0       0
  1910 ;;Total ram usage:        8 bytes
  1911 ;; Hardware stack levels used: 1
  1912 ;; Hardware stack levels required when called: 1
  1913 ;; This function calls:
  1914 ;;		_SPI_write
  1915 ;; This function is called by:
  1916 ;;		_nrf_read_register
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920     049F                     _nrf_command_with_data_overwrite:	
  1921                           ;psect for function _nrf_command_with_data_overwrite
  1922                           
  1923                           
  1924                           ;incstack = 0
  1925                           ; Regs used in _nrf_command_with_data_overwrite: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  1926                           ;nrf_command_with_data_overwrite@command stored from wreg
  1927     049F  00F6               	movwf	nrf_command_with_data_overwrite@command
  1928     04A0                     l1222:
  1929                           
  1930                           ;./nrf24l01.h: 118:     uint8_t nrf_command_with_data_overwrite(uint8_t command, uint8_t
      +                           *data, uint8_t len);./nrf24l01.h: 119:     {;./nrf24l01.h: 120:         RD3 = 0; uint8_
      +                          t status = SPI_write(command); for (uint8_t i = 0; i < len; i++) { data[i] = SPI_write(d
      +                          ata[i]); } RD3 = 1; return status;
  1931     04A0  1283               	bcf	3,5	;RP0=0, select bank0
  1932     04A1  1303               	bcf	3,6	;RP1=0, select bank0
  1933     04A2  1188               	bcf	8,3	;volatile
  1934     04A3                     l1224:
  1935     04A3  0876               	movf	nrf_command_with_data_overwrite@command,w
  1936     04A4  120A  118A  23E2  120A  118A  	fcall	_SPI_write
  1937     04A9  00F7               	movwf	nrf_command_with_data_overwrite@status
  1938     04AA                     l1226:
  1939     04AA  01F8               	clrf	nrf_command_with_data_overwrite@i
  1940     04AB  2CC5               	goto	l1232
  1941     04AC                     l1228:
  1942     04AC  0878               	movf	nrf_command_with_data_overwrite@i,w
  1943     04AD  0771               	addwf	nrf_command_with_data_overwrite@data,w
  1944     04AE  00F3               	movwf	??_nrf_command_with_data_overwrite
  1945     04AF  0873               	movf	??_nrf_command_with_data_overwrite,w
  1946     04B0  0084               	movwf	4
  1947     04B1  1383               	bcf	3,7	;select IRP bank0
  1948     04B2  0800               	movf	0,w
  1949     04B3  120A  118A  23E2  120A  118A  	fcall	_SPI_write
  1950     04B8  00F4               	movwf	??_nrf_command_with_data_overwrite+1
  1951     04B9  0878               	movf	nrf_command_with_data_overwrite@i,w
  1952     04BA  0771               	addwf	nrf_command_with_data_overwrite@data,w
  1953     04BB  00F5               	movwf	??_nrf_command_with_data_overwrite+2
  1954     04BC  0875               	movf	??_nrf_command_with_data_overwrite+2,w
  1955     04BD  0084               	movwf	4
  1956     04BE  0874               	movf	??_nrf_command_with_data_overwrite+1,w
  1957     04BF  1383               	bcf	3,7	;select IRP bank0
  1958     04C0  0080               	movwf	0
  1959     04C1                     l1230:
  1960     04C1  3001               	movlw	1
  1961     04C2  00F3               	movwf	??_nrf_command_with_data_overwrite
  1962     04C3  0873               	movf	??_nrf_command_with_data_overwrite,w
  1963     04C4  07F8               	addwf	nrf_command_with_data_overwrite@i,f
  1964     04C5                     l1232:
  1965     04C5  0872               	movf	nrf_command_with_data_overwrite@len,w
  1966     04C6  0278               	subwf	nrf_command_with_data_overwrite@i,w
  1967     04C7  1C03               	skipc
  1968     04C8  2CCA               	goto	u431
  1969     04C9  2CCB               	goto	u430
  1970     04CA                     u431:
  1971     04CA  2CAC               	goto	l1228
  1972     04CB                     u430:
  1973     04CB                     l96:
  1974     04CB  1283               	bcf	3,5	;RP0=0, select bank0
  1975     04CC  1303               	bcf	3,6	;RP1=0, select bank0
  1976     04CD  1588               	bsf	8,3	;volatile
  1977     04CE                     l1234:
  1978     04CE  0877               	movf	nrf_command_with_data_overwrite@status,w
  1979     04CF                     l97:
  1980     04CF  0008               	return
  1981     04D0                     __end_of_nrf_command_with_data_overwrite:
  1982                           
  1983                           	psect	text11
  1984     03D4                     __ptext11:	
  1985 ;; *************** function _nrf_data_available *****************
  1986 ;; Defined at:
  1987 ;;		line 244 in file "./nrf24l01.h"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  status          1    3[COMMON] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      unsigned char 
  1994 ;; Registers used:
  1995 ;;		wreg, pclath, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2001 ;;      Params:         0       0       0       0       0
  2002 ;;      Locals:         1       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0
  2004 ;;      Totals:         1       0       0       0       0
  2005 ;;Total ram usage:        1 bytes
  2006 ;; Hardware stack levels used: 1
  2007 ;; Hardware stack levels required when called: 2
  2008 ;; This function calls:
  2009 ;;		_nrf_write_command
  2010 ;; This function is called by:
  2011 ;;		_main
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015     03D4                     _nrf_data_available:	
  2016                           ;psect for function _nrf_data_available
  2017                           
  2018     03D4                     l1410:	
  2019                           ;incstack = 0
  2020                           ; Regs used in _nrf_data_available: [wreg+pclath+cstack]
  2021                           
  2022                           
  2023                           ;./nrf24l01.h: 246:         uint8_t status = nrf_write_command(0b11111111);
  2024     03D4  30FF               	movlw	255
  2025     03D5  120A  118A  23F1  120A  118A  	fcall	_nrf_write_command
  2026     03DA  00F3               	movwf	nrf_data_available@status
  2027     03DB                     l1412:
  2028                           
  2029                           ;./nrf24l01.h: 247:         return (status & 0x40) != 0;
  2030     03DB  1B73               	btfsc	nrf_data_available@status,6
  2031     03DC  2BDE               	goto	u641
  2032     03DD  2BE0               	goto	u640
  2033     03DE                     u641:
  2034     03DE  3001               	movlw	1
  2035     03DF  2BE1               	goto	u650
  2036     03E0                     u640:
  2037     03E0  3000               	movlw	0
  2038     03E1                     u650:
  2039     03E1                     l132:
  2040     03E1  0008               	return
  2041     03E2                     __end_of_nrf_data_available:
  2042                           
  2043                           	psect	text12
  2044     03F1                     __ptext12:	
  2045 ;; *************** function _nrf_write_command *****************
  2046 ;; Defined at:
  2047 ;;		line 152 in file "./nrf24l01.h"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;  command         1    wreg     unsigned char 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;  command         1    1[COMMON] unsigned char 
  2052 ;;  status          1    2[COMMON] unsigned char 
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  1    wreg      unsigned char 
  2055 ;; Registers used:
  2056 ;;		wreg, pclath, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2062 ;;      Params:         0       0       0       0       0
  2063 ;;      Locals:         2       0       0       0       0
  2064 ;;      Temps:          0       0       0       0       0
  2065 ;;      Totals:         2       0       0       0       0
  2066 ;;Total ram usage:        2 bytes
  2067 ;; Hardware stack levels used: 1
  2068 ;; Hardware stack levels required when called: 1
  2069 ;; This function calls:
  2070 ;;		_SPI_write
  2071 ;; This function is called by:
  2072 ;;		_nrf_flush_rxtx
  2073 ;;		_nrf_data_available
  2074 ;;		_nrf_read
  2075 ;;		_nrf_send
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079     03F1                     _nrf_write_command:	
  2080                           ;psect for function _nrf_write_command
  2081                           
  2082                           
  2083                           ;incstack = 0
  2084                           ; Regs used in _nrf_write_command: [wreg+pclath+cstack]
  2085                           ;nrf_write_command@command stored from wreg
  2086     03F1  00F1               	movwf	nrf_write_command@command
  2087     03F2                     l1242:
  2088                           
  2089                           ;./nrf24l01.h: 152:     uint8_t nrf_write_command(uint8_t command);./nrf24l01.h: 153:   
      +                            {;./nrf24l01.h: 154:         RD3 = 0;
  2090     03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2091     03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2092     03F4  1188               	bcf	8,3	;volatile
  2093     03F5                     l1244:
  2094                           
  2095                           ;./nrf24l01.h: 155:         uint8_t status = SPI_write(command);
  2096     03F5  0871               	movf	nrf_write_command@command,w
  2097     03F6  120A  118A  23E2  120A  118A  	fcall	_SPI_write
  2098     03FB  00F2               	movwf	nrf_write_command@status
  2099     03FC                     l1246:
  2100                           
  2101                           ;./nrf24l01.h: 156:         RD3 = 1;
  2102     03FC  1283               	bcf	3,5	;RP0=0, select bank0
  2103     03FD  1303               	bcf	3,6	;RP1=0, select bank0
  2104     03FE  1588               	bsf	8,3	;volatile
  2105     03FF                     l1248:
  2106                           
  2107                           ;./nrf24l01.h: 157:         return status;
  2108     03FF  0872               	movf	nrf_write_command@status,w
  2109     0400                     l115:
  2110     0400  0008               	return
  2111     0401                     __end_of_nrf_write_command:
  2112                           
  2113                           	psect	text13
  2114     03E2                     __ptext13:	
  2115 ;; *************** function _SPI_write *****************
  2116 ;; Defined at:
  2117 ;;		line 26 in file "./spi.h"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  data            1    wreg     unsigned char 
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  data            1    0[COMMON] unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      unsigned char 
  2124 ;; Registers used:
  2125 ;;		wreg
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2131 ;;      Params:         0       0       0       0       0
  2132 ;;      Locals:         1       0       0       0       0
  2133 ;;      Temps:          0       0       0       0       0
  2134 ;;      Totals:         1       0       0       0       0
  2135 ;;Total ram usage:        1 bytes
  2136 ;; Hardware stack levels used: 1
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_nrf_command_with_data_overwrite
  2141 ;;		_nrf_command_with_data
  2142 ;;		_nrf_write_command
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146     03E2                     _SPI_write:	
  2147                           ;psect for function _SPI_write
  2148                           
  2149                           
  2150                           ;incstack = 0
  2151                           ; Regs used in _SPI_write: [wreg]
  2152                           ;SPI_write@data stored from wreg
  2153     03E2  00F0               	movwf	SPI_write@data
  2154     03E3                     l1200:
  2155                           
  2156                           ;./spi.h: 26:     uint8_t SPI_write(uint8_t data);./spi.h: 27:     {;./spi.h: 28:       
      +                            SSPBUF = data;
  2157     03E3  0870               	movf	SPI_write@data,w
  2158     03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2159     03E5  1303               	bcf	3,6	;RP1=0, select bank0
  2160     03E6  0093               	movwf	19	;volatile
  2161     03E7                     l82:	
  2162                           ;./spi.h: 30:             ;
  2163                           
  2164                           
  2165                           ;./spi.h: 29:         while (!BF)
  2166     03E7  1683               	bsf	3,5	;RP0=1, select bank1
  2167     03E8  1303               	bcf	3,6	;RP1=0, select bank1
  2168     03E9  1C14               	btfss	20,0	;volatile
  2169     03EA  2BEC               	goto	u411
  2170     03EB  2BED               	goto	u410
  2171     03EC                     u411:
  2172     03EC  2BE7               	goto	l82
  2173     03ED                     u410:
  2174     03ED                     l1202:
  2175                           
  2176                           ;./spi.h: 31:         return SSPBUF;
  2177     03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2178     03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2179     03EF  0813               	movf	19,w	;volatile
  2180     03F0                     l85:
  2181     03F0  0008               	return
  2182     03F1                     __end_of_SPI_write:
  2183                           
  2184                           	psect	text14
  2185     04D0                     __ptext14:	
  2186 ;; *************** function _UART_write_text *****************
  2187 ;; Defined at:
  2188 ;;		line 41 in file "./uart.h"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  text            2    1[COMMON] PTR unsigned char 
  2191 ;;		 -> main@buffer_197(64), main@buffer(64), 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  i               2    6[COMMON] int 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2203 ;;      Params:         2       0       0       0       0
  2204 ;;      Locals:         2       0       0       0       0
  2205 ;;      Temps:          3       0       0       0       0
  2206 ;;      Totals:         7       0       0       0       0
  2207 ;;Total ram usage:        7 bytes
  2208 ;; Hardware stack levels used: 1
  2209 ;; Hardware stack levels required when called: 1
  2210 ;; This function calls:
  2211 ;;		_UART_write
  2212 ;; This function is called by:
  2213 ;;		_main
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217     04D0                     _UART_write_text:	
  2218                           ;psect for function _UART_write_text
  2219                           
  2220     04D0                     l1332:	
  2221                           ;incstack = 0
  2222                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2223                           
  2224                           
  2225                           ;./uart.h: 41:  void UART_write_text(char *text);./uart.h: 42:  {;./uart.h: 43:   for (i
      +                          nt i = 0; text[i] != '\0'; i++)
  2226     04D0  01F6               	clrf	UART_write_text@i
  2227     04D1  01F7               	clrf	UART_write_text@i+1
  2228     04D2  2CF0               	goto	l1338
  2229     04D3                     l1334:
  2230                           
  2231                           ;./uart.h: 44:    UART_write(text[i]);
  2232     04D3  0876               	movf	UART_write_text@i,w
  2233     04D4  0771               	addwf	UART_write_text@text,w
  2234     04D5  00F4               	movwf	??_UART_write_text+1
  2235     04D6  0872               	movf	UART_write_text@text+1,w
  2236     04D7  00F3               	movwf	??_UART_write_text
  2237     04D8  1803               	skipnc
  2238     04D9  0AF3               	incf	??_UART_write_text,f
  2239     04DA  1FF6               	btfss	UART_write_text@i,7
  2240     04DB  2CDD               	goto	u590
  2241     04DC  03F3               	decf	??_UART_write_text,f
  2242     04DD                     u590:
  2243     04DD  0873               	movf	??_UART_write_text,w
  2244     04DE  00F5               	movwf	??_UART_write_text+2
  2245     04DF  0874               	movf	??_UART_write_text+1,w
  2246     04E0  0084               	movwf	4
  2247     04E1  1783               	bsf	3,7
  2248     04E2  1C75               	btfss	??_UART_write_text+2,0
  2249     04E3  1383               	bcf	3,7
  2250     04E4  0800               	movf	0,w
  2251     04E5  120A  118A  23AF  120A  118A  	fcall	_UART_write
  2252     04EA                     l1336:
  2253     04EA  3001               	movlw	1
  2254     04EB  07F6               	addwf	UART_write_text@i,f
  2255     04EC  1803               	skipnc
  2256     04ED  0AF7               	incf	UART_write_text@i+1,f
  2257     04EE  3000               	movlw	0
  2258     04EF  07F7               	addwf	UART_write_text@i+1,f
  2259     04F0                     l1338:
  2260     04F0  0876               	movf	UART_write_text@i,w
  2261     04F1  0771               	addwf	UART_write_text@text,w
  2262     04F2  00F4               	movwf	??_UART_write_text+1
  2263     04F3  0872               	movf	UART_write_text@text+1,w
  2264     04F4  00F3               	movwf	??_UART_write_text
  2265     04F5  1803               	skipnc
  2266     04F6  0AF3               	incf	??_UART_write_text,f
  2267     04F7  1FF6               	btfss	UART_write_text@i,7
  2268     04F8  2CFA               	goto	u600
  2269     04F9  03F3               	decf	??_UART_write_text,f
  2270     04FA                     u600:
  2271     04FA  0873               	movf	??_UART_write_text,w
  2272     04FB  00F5               	movwf	??_UART_write_text+2
  2273     04FC  0874               	movf	??_UART_write_text+1,w
  2274     04FD  0084               	movwf	4
  2275     04FE  1783               	bsf	3,7
  2276     04FF  1C75               	btfss	??_UART_write_text+2,0
  2277     0500  1383               	bcf	3,7
  2278     0501  0800               	movf	0,w
  2279     0502  1D03               	btfss	3,2
  2280     0503  2D05               	goto	u611
  2281     0504  2D06               	goto	u610
  2282     0505                     u611:
  2283     0505  2CD3               	goto	l1334
  2284     0506                     u610:
  2285     0506                     l67:
  2286     0506  0008               	return
  2287     0507                     __end_of_UART_write_text:
  2288                           
  2289                           	psect	text15
  2290     03AF                     __ptext15:	
  2291 ;; *************** function _UART_write *****************
  2292 ;; Defined at:
  2293 ;;		line 33 in file "./uart.h"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  data            1    wreg     unsigned char 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  data            1    0[COMMON] unsigned char 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  1    wreg      void 
  2300 ;; Registers used:
  2301 ;;		wreg
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2307 ;;      Params:         0       0       0       0       0
  2308 ;;      Locals:         1       0       0       0       0
  2309 ;;      Temps:          0       0       0       0       0
  2310 ;;      Totals:         1       0       0       0       0
  2311 ;;Total ram usage:        1 bytes
  2312 ;; Hardware stack levels used: 1
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		_UART_write_text
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320     03AF                     _UART_write:	
  2321                           ;psect for function _UART_write
  2322                           
  2323                           
  2324                           ;incstack = 0
  2325                           ; Regs used in _UART_write: [wreg]
  2326                           ;UART_write@data stored from wreg
  2327     03AF  00F0               	movwf	UART_write@data
  2328     03B0                     l1252:
  2329     03B0                     l58:	
  2330                           ;./uart.h: 36:    ;
  2331                           
  2332                           
  2333                           ;./uart.h: 35:   while (!TRMT)
  2334     03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2335     03B1  1303               	bcf	3,6	;RP1=0, select bank1
  2336     03B2  1C98               	btfss	24,1	;volatile
  2337     03B3  2BB5               	goto	u441
  2338     03B4  2BB6               	goto	u440
  2339     03B5                     u441:
  2340     03B5  2BB0               	goto	l58
  2341     03B6                     u440:
  2342     03B6                     l1254:
  2343                           
  2344                           ;./uart.h: 37:   TXREG = data;
  2345     03B6  0870               	movf	UART_write@data,w
  2346     03B7  1283               	bcf	3,5	;RP0=0, select bank0
  2347     03B8  1303               	bcf	3,6	;RP1=0, select bank0
  2348     03B9  0099               	movwf	25	;volatile
  2349     03BA                     l61:
  2350     03BA  0008               	return
  2351     03BB                     __end_of_UART_write:
  2352                           
  2353                           	psect	text16
  2354     0507                     __ptext16:	
  2355 ;; *************** function _UART_init *****************
  2356 ;; Defined at:
  2357 ;;		line 19 in file "./uart.h"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  baudrate        4    6[BANK0 ] const long 
  2360 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;		None
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      void 
  2365 ;; Registers used:
  2366 ;;		wreg, status,2, status,0, pclath, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2372 ;;      Params:         0       8       0       0       0
  2373 ;;      Locals:         0       0       0       0       0
  2374 ;;      Temps:          0      12       0       0       0
  2375 ;;      Totals:         0      20       0       0       0
  2376 ;;Total ram usage:       20 bytes
  2377 ;; Hardware stack levels used: 1
  2378 ;; Hardware stack levels required when called: 1
  2379 ;; This function calls:
  2380 ;;		___aldiv
  2381 ;; This function is called by:
  2382 ;;		_main
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386     0507                     _UART_init:	
  2387                           ;psect for function _UART_init
  2388                           
  2389     0507                     l1316:	
  2390                           ;incstack = 0
  2391                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  2392                           
  2393                           
  2394                           ;./uart.h: 19:  void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 20:  
      +                          {;./uart.h: 21:   BRGH = 1;
  2395     0507  1683               	bsf	3,5	;RP0=1, select bank1
  2396     0508  1303               	bcf	3,6	;RP1=0, select bank1
  2397     0509  1518               	bsf	24,2	;volatile
  2398     050A                     l1318:
  2399                           
  2400                           ;./uart.h: 22:   SPBRG = (_XTAL_FREQ - baudrate * 16) / (baudrate * 16);
  2401     050A  1283               	bcf	3,5	;RP0=0, select bank0
  2402     050B  1303               	bcf	3,6	;RP1=0, select bank0
  2403     050C  0826               	movf	UART_init@baudrate,w
  2404     050D  00AE               	movwf	??_UART_init
  2405     050E  0827               	movf	UART_init@baudrate+1,w
  2406     050F  00AF               	movwf	??_UART_init+1
  2407     0510  0828               	movf	UART_init@baudrate+2,w
  2408     0511  00B0               	movwf	??_UART_init+2
  2409     0512  0829               	movf	UART_init@baudrate+3,w
  2410     0513  00B1               	movwf	??_UART_init+3
  2411     0514  3004               	movlw	4
  2412     0515                     u565:
  2413     0515  1003               	clrc
  2414     0516  0DAE               	rlf	??_UART_init,f
  2415     0517  0DAF               	rlf	??_UART_init+1,f
  2416     0518  0DB0               	rlf	??_UART_init+2,f
  2417     0519  0DB1               	rlf	??_UART_init+3,f
  2418     051A                     u560:
  2419     051A  3EFF               	addlw	-1
  2420     051B  1D03               	skipz
  2421     051C  2D15               	goto	u565
  2422     051D  0831               	movf	??_UART_init+3,w
  2423     051E  00F3               	movwf	___aldiv@divisor+3
  2424     051F  0830               	movf	??_UART_init+2,w
  2425     0520  00F2               	movwf	___aldiv@divisor+2
  2426     0521  082F               	movf	??_UART_init+1,w
  2427     0522  00F1               	movwf	___aldiv@divisor+1
  2428     0523  082E               	movf	??_UART_init,w
  2429     0524  00F0               	movwf	___aldiv@divisor
  2430     0525  0826               	movf	UART_init@baudrate,w
  2431     0526  00B2               	movwf	??_UART_init+4
  2432     0527  0827               	movf	UART_init@baudrate+1,w
  2433     0528  00B3               	movwf	??_UART_init+5
  2434     0529  0828               	movf	UART_init@baudrate+2,w
  2435     052A  00B4               	movwf	??_UART_init+6
  2436     052B  0829               	movf	UART_init@baudrate+3,w
  2437     052C  00B5               	movwf	??_UART_init+7
  2438     052D  3004               	movlw	4
  2439     052E                     u575:
  2440     052E  1003               	clrc
  2441     052F  0DB2               	rlf	??_UART_init+4,f
  2442     0530  0DB3               	rlf	??_UART_init+5,f
  2443     0531  0DB4               	rlf	??_UART_init+6,f
  2444     0532  0DB5               	rlf	??_UART_init+7,f
  2445     0533                     u570:
  2446     0533  3EFF               	addlw	-1
  2447     0534  1D03               	skipz
  2448     0535  2D2E               	goto	u575
  2449     0536  082A               	movf	UART_init@_XTAL_FREQ,w
  2450     0537  00B6               	movwf	??_UART_init+8
  2451     0538  082B               	movf	UART_init@_XTAL_FREQ+1,w
  2452     0539  00B7               	movwf	??_UART_init+9
  2453     053A  082C               	movf	UART_init@_XTAL_FREQ+2,w
  2454     053B  00B8               	movwf	??_UART_init+10
  2455     053C  082D               	movf	UART_init@_XTAL_FREQ+3,w
  2456     053D  00B9               	movwf	??_UART_init+11
  2457     053E  0832               	movf	??_UART_init+4,w
  2458     053F  02B6               	subwf	??_UART_init+8,f
  2459     0540  0833               	movf	??_UART_init+5,w
  2460     0541  1C03               	skipc
  2461     0542  0F33               	incfsz	??_UART_init+5,w
  2462     0543  2D45               	goto	u581
  2463     0544  2D46               	goto	u582
  2464     0545                     u581:
  2465     0545  02B7               	subwf	??_UART_init+9,f
  2466     0546                     u582:
  2467     0546  0834               	movf	??_UART_init+6,w
  2468     0547  1C03               	skipc
  2469     0548  0F34               	incfsz	??_UART_init+6,w
  2470     0549  2D4B               	goto	u583
  2471     054A  2D4C               	goto	u584
  2472     054B                     u583:
  2473     054B  02B8               	subwf	??_UART_init+10,f
  2474     054C                     u584:
  2475     054C  0835               	movf	??_UART_init+7,w
  2476     054D  1C03               	skipc
  2477     054E  0F35               	incfsz	??_UART_init+7,w
  2478     054F  2D51               	goto	u585
  2479     0550  2D52               	goto	u586
  2480     0551                     u585:
  2481     0551  02B9               	subwf	??_UART_init+11,f
  2482     0552                     u586:
  2483     0552  0839               	movf	??_UART_init+11,w
  2484     0553  00F7               	movwf	___aldiv@dividend+3
  2485     0554  0838               	movf	??_UART_init+10,w
  2486     0555  00F6               	movwf	___aldiv@dividend+2
  2487     0556  0837               	movf	??_UART_init+9,w
  2488     0557  00F5               	movwf	___aldiv@dividend+1
  2489     0558  0836               	movf	??_UART_init+8,w
  2490     0559  00F4               	movwf	___aldiv@dividend
  2491     055A  120A  118A  25E3  120A  118A  	fcall	___aldiv
  2492     055F  0870               	movf	?___aldiv,w
  2493     0560  1683               	bsf	3,5	;RP0=1, select bank1
  2494     0561  1303               	bcf	3,6	;RP1=0, select bank1
  2495     0562  0099               	movwf	25	;volatile
  2496     0563                     l1320:
  2497                           
  2498                           ;./uart.h: 23:   SYNC = 0;
  2499     0563  1218               	bcf	24,4	;volatile
  2500     0564                     l1322:
  2501                           
  2502                           ;./uart.h: 24:   SPEN = 1;
  2503     0564  1283               	bcf	3,5	;RP0=0, select bank0
  2504     0565  1303               	bcf	3,6	;RP1=0, select bank0
  2505     0566  1798               	bsf	24,7	;volatile
  2506     0567                     l1324:
  2507                           
  2508                           ;./uart.h: 25:   TRISC7 = 1;
  2509     0567  1683               	bsf	3,5	;RP0=1, select bank1
  2510     0568  1303               	bcf	3,6	;RP1=0, select bank1
  2511     0569  1787               	bsf	7,7	;volatile
  2512     056A                     l1326:
  2513                           
  2514                           ;./uart.h: 26:   TRISC6 = 1;
  2515     056A  1707               	bsf	7,6	;volatile
  2516     056B                     l1328:
  2517                           
  2518                           ;./uart.h: 27:   CREN = 1;
  2519     056B  1283               	bcf	3,5	;RP0=0, select bank0
  2520     056C  1303               	bcf	3,6	;RP1=0, select bank0
  2521     056D  1618               	bsf	24,4	;volatile
  2522     056E                     l1330:
  2523                           
  2524                           ;./uart.h: 28:   TXEN = 1;
  2525     056E  1683               	bsf	3,5	;RP0=1, select bank1
  2526     056F  1303               	bcf	3,6	;RP1=0, select bank1
  2527     0570  1698               	bsf	24,5	;volatile
  2528     0571                     l55:
  2529     0571  0008               	return
  2530     0572                     __end_of_UART_init:
  2531                           
  2532                           	psect	text17
  2533     05E3                     __ptext17:	
  2534 ;; *************** function ___aldiv *****************
  2535 ;; Defined at:
  2536 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  divisor         4    0[COMMON] long 
  2539 ;;  dividend        4    4[COMMON] long 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;  quotient        4    2[BANK0 ] long 
  2542 ;;  sign            1    1[BANK0 ] unsigned char 
  2543 ;;  counter         1    0[BANK0 ] unsigned char 
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  4    0[COMMON] long 
  2546 ;; Registers used:
  2547 ;;		wreg, status,2, status,0
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2553 ;;      Params:         8       0       0       0       0
  2554 ;;      Locals:         0       6       0       0       0
  2555 ;;      Temps:          1       0       0       0       0
  2556 ;;      Totals:         9       6       0       0       0
  2557 ;;Total ram usage:       15 bytes
  2558 ;; Hardware stack levels used: 1
  2559 ;; This function calls:
  2560 ;;		Nothing
  2561 ;; This function is called by:
  2562 ;;		_UART_init
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566     05E3                     ___aldiv:	
  2567                           ;psect for function ___aldiv
  2568                           
  2569     05E3                     l1276:	
  2570                           ;incstack = 0
  2571                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2572                           
  2573     05E3  1283               	bcf	3,5	;RP0=0, select bank0
  2574     05E4  1303               	bcf	3,6	;RP1=0, select bank0
  2575     05E5  01A1               	clrf	___aldiv@sign
  2576     05E6                     l1278:
  2577     05E6  1FF3               	btfss	___aldiv@divisor+3,7
  2578     05E7  2DE9               	goto	u461
  2579     05E8  2DEA               	goto	u460
  2580     05E9                     u461:
  2581     05E9  2DF7               	goto	l363
  2582     05EA                     u460:
  2583     05EA                     l1280:
  2584     05EA  09F0               	comf	___aldiv@divisor,f
  2585     05EB  09F1               	comf	___aldiv@divisor+1,f
  2586     05EC  09F2               	comf	___aldiv@divisor+2,f
  2587     05ED  09F3               	comf	___aldiv@divisor+3,f
  2588     05EE  0AF0               	incf	___aldiv@divisor,f
  2589     05EF  1903               	skipnz
  2590     05F0  0AF1               	incf	___aldiv@divisor+1,f
  2591     05F1  1903               	skipnz
  2592     05F2  0AF2               	incf	___aldiv@divisor+2,f
  2593     05F3  1903               	skipnz
  2594     05F4  0AF3               	incf	___aldiv@divisor+3,f
  2595     05F5  01A1               	clrf	___aldiv@sign
  2596     05F6  0AA1               	incf	___aldiv@sign,f
  2597     05F7                     l363:
  2598     05F7  1FF7               	btfss	___aldiv@dividend+3,7
  2599     05F8  2DFA               	goto	u471
  2600     05F9  2DFB               	goto	u470
  2601     05FA                     u471:
  2602     05FA  2E0A               	goto	l1286
  2603     05FB                     u470:
  2604     05FB                     l1282:
  2605     05FB  09F4               	comf	___aldiv@dividend,f
  2606     05FC  09F5               	comf	___aldiv@dividend+1,f
  2607     05FD  09F6               	comf	___aldiv@dividend+2,f
  2608     05FE  09F7               	comf	___aldiv@dividend+3,f
  2609     05FF  0AF4               	incf	___aldiv@dividend,f
  2610     0600  1903               	skipnz
  2611     0601  0AF5               	incf	___aldiv@dividend+1,f
  2612     0602  1903               	skipnz
  2613     0603  0AF6               	incf	___aldiv@dividend+2,f
  2614     0604  1903               	skipnz
  2615     0605  0AF7               	incf	___aldiv@dividend+3,f
  2616     0606                     l1284:
  2617     0606  3001               	movlw	1
  2618     0607  00F8               	movwf	??___aldiv
  2619     0608  0878               	movf	??___aldiv,w
  2620     0609  06A1               	xorwf	___aldiv@sign,f
  2621     060A                     l1286:
  2622     060A  3000               	movlw	0
  2623     060B  00A5               	movwf	___aldiv@quotient+3
  2624     060C  3000               	movlw	0
  2625     060D  00A4               	movwf	___aldiv@quotient+2
  2626     060E  3000               	movlw	0
  2627     060F  00A3               	movwf	___aldiv@quotient+1
  2628     0610  3000               	movlw	0
  2629     0611  00A2               	movwf	___aldiv@quotient
  2630     0612                     l1288:
  2631     0612  0873               	movf	___aldiv@divisor+3,w
  2632     0613  0472               	iorwf	___aldiv@divisor+2,w
  2633     0614  0471               	iorwf	___aldiv@divisor+1,w
  2634     0615  0470               	iorwf	___aldiv@divisor,w
  2635     0616  1903               	skipnz
  2636     0617  2E19               	goto	u481
  2637     0618  2E1A               	goto	u480
  2638     0619                     u481:
  2639     0619  2E67               	goto	l1308
  2640     061A                     u480:
  2641     061A                     l1290:
  2642     061A  01A0               	clrf	___aldiv@counter
  2643     061B  0AA0               	incf	___aldiv@counter,f
  2644     061C  2E2A               	goto	l1294
  2645     061D                     l1292:
  2646     061D  3001               	movlw	1
  2647     061E  00F8               	movwf	??___aldiv
  2648     061F                     u495:
  2649     061F  1003               	clrc
  2650     0620  0DF0               	rlf	___aldiv@divisor,f
  2651     0621  0DF1               	rlf	___aldiv@divisor+1,f
  2652     0622  0DF2               	rlf	___aldiv@divisor+2,f
  2653     0623  0DF3               	rlf	___aldiv@divisor+3,f
  2654     0624  0BF8               	decfsz	??___aldiv,f
  2655     0625  2E1F               	goto	u495
  2656     0626  3001               	movlw	1
  2657     0627  00F8               	movwf	??___aldiv
  2658     0628  0878               	movf	??___aldiv,w
  2659     0629  07A0               	addwf	___aldiv@counter,f
  2660     062A                     l1294:
  2661     062A  1FF3               	btfss	___aldiv@divisor+3,7
  2662     062B  2E2D               	goto	u501
  2663     062C  2E2E               	goto	u500
  2664     062D                     u501:
  2665     062D  2E1D               	goto	l1292
  2666     062E                     u500:
  2667     062E                     l1296:
  2668     062E  3001               	movlw	1
  2669     062F  00F8               	movwf	??___aldiv
  2670     0630                     u515:
  2671     0630  1003               	clrc
  2672     0631  0DA2               	rlf	___aldiv@quotient,f
  2673     0632  0DA3               	rlf	___aldiv@quotient+1,f
  2674     0633  0DA4               	rlf	___aldiv@quotient+2,f
  2675     0634  0DA5               	rlf	___aldiv@quotient+3,f
  2676     0635  0BF8               	decfsz	??___aldiv,f
  2677     0636  2E30               	goto	u515
  2678     0637                     l1298:
  2679     0637  0873               	movf	___aldiv@divisor+3,w
  2680     0638  0277               	subwf	___aldiv@dividend+3,w
  2681     0639  1D03               	skipz
  2682     063A  2E45               	goto	u525
  2683     063B  0872               	movf	___aldiv@divisor+2,w
  2684     063C  0276               	subwf	___aldiv@dividend+2,w
  2685     063D  1D03               	skipz
  2686     063E  2E45               	goto	u525
  2687     063F  0871               	movf	___aldiv@divisor+1,w
  2688     0640  0275               	subwf	___aldiv@dividend+1,w
  2689     0641  1D03               	skipz
  2690     0642  2E45               	goto	u525
  2691     0643  0870               	movf	___aldiv@divisor,w
  2692     0644  0274               	subwf	___aldiv@dividend,w
  2693     0645                     u525:
  2694     0645  1C03               	skipc
  2695     0646  2E48               	goto	u521
  2696     0647  2E49               	goto	u520
  2697     0648                     u521:
  2698     0648  2E58               	goto	l1304
  2699     0649                     u520:
  2700     0649                     l1300:
  2701     0649  0870               	movf	___aldiv@divisor,w
  2702     064A  02F4               	subwf	___aldiv@dividend,f
  2703     064B  0871               	movf	___aldiv@divisor+1,w
  2704     064C  1C03               	skipc
  2705     064D  0F71               	incfsz	___aldiv@divisor+1,w
  2706     064E  02F5               	subwf	___aldiv@dividend+1,f
  2707     064F  0872               	movf	___aldiv@divisor+2,w
  2708     0650  1C03               	skipc
  2709     0651  0F72               	incfsz	___aldiv@divisor+2,w
  2710     0652  02F6               	subwf	___aldiv@dividend+2,f
  2711     0653  0873               	movf	___aldiv@divisor+3,w
  2712     0654  1C03               	skipc
  2713     0655  0F73               	incfsz	___aldiv@divisor+3,w
  2714     0656  02F7               	subwf	___aldiv@dividend+3,f
  2715     0657                     l1302:
  2716     0657  1422               	bsf	___aldiv@quotient,0
  2717     0658                     l1304:
  2718     0658  3001               	movlw	1
  2719     0659                     u535:
  2720     0659  1003               	clrc
  2721     065A  0CF3               	rrf	___aldiv@divisor+3,f
  2722     065B  0CF2               	rrf	___aldiv@divisor+2,f
  2723     065C  0CF1               	rrf	___aldiv@divisor+1,f
  2724     065D  0CF0               	rrf	___aldiv@divisor,f
  2725     065E  3EFF               	addlw	-1
  2726     065F  1D03               	skipz
  2727     0660  2E59               	goto	u535
  2728     0661                     l1306:
  2729     0661  3001               	movlw	1
  2730     0662  02A0               	subwf	___aldiv@counter,f
  2731     0663  1D03               	btfss	3,2
  2732     0664  2E66               	goto	u541
  2733     0665  2E67               	goto	u540
  2734     0666                     u541:
  2735     0666  2E2E               	goto	l1296
  2736     0667                     u540:
  2737     0667                     l1308:
  2738     0667  0821               	movf	___aldiv@sign,w
  2739     0668  1903               	btfsc	3,2
  2740     0669  2E6B               	goto	u551
  2741     066A  2E6C               	goto	u550
  2742     066B                     u551:
  2743     066B  2E77               	goto	l1312
  2744     066C                     u550:
  2745     066C                     l1310:
  2746     066C  09A2               	comf	___aldiv@quotient,f
  2747     066D  09A3               	comf	___aldiv@quotient+1,f
  2748     066E  09A4               	comf	___aldiv@quotient+2,f
  2749     066F  09A5               	comf	___aldiv@quotient+3,f
  2750     0670  0AA2               	incf	___aldiv@quotient,f
  2751     0671  1903               	skipnz
  2752     0672  0AA3               	incf	___aldiv@quotient+1,f
  2753     0673  1903               	skipnz
  2754     0674  0AA4               	incf	___aldiv@quotient+2,f
  2755     0675  1903               	skipnz
  2756     0676  0AA5               	incf	___aldiv@quotient+3,f
  2757     0677                     l1312:
  2758     0677  0825               	movf	___aldiv@quotient+3,w
  2759     0678  00F3               	movwf	?___aldiv+3
  2760     0679  0824               	movf	___aldiv@quotient+2,w
  2761     067A  00F2               	movwf	?___aldiv+2
  2762     067B  0823               	movf	___aldiv@quotient+1,w
  2763     067C  00F1               	movwf	?___aldiv+1
  2764     067D  0822               	movf	___aldiv@quotient,w
  2765     067E  00F0               	movwf	?___aldiv
  2766     067F                     l373:
  2767     067F  0008               	return
  2768     0680                     __end_of___aldiv:
  2769                           
  2770                           	psect	text18
  2771     03A3                     __ptext18:	
  2772 ;; *************** function _SPI_init_master *****************
  2773 ;; Defined at:
  2774 ;;		line 16 in file "./spi.h"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;		None
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;		None
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2788 ;;      Params:         0       0       0       0       0
  2789 ;;      Locals:         0       0       0       0       0
  2790 ;;      Temps:          0       0       0       0       0
  2791 ;;      Totals:         0       0       0       0       0
  2792 ;;Total ram usage:        0 bytes
  2793 ;; Hardware stack levels used: 1
  2794 ;; This function calls:
  2795 ;;		Nothing
  2796 ;; This function is called by:
  2797 ;;		_main
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801     03A3                     _SPI_init_master:	
  2802                           ;psect for function _SPI_init_master
  2803                           
  2804     03A3                     l1340:	
  2805                           ;incstack = 0
  2806                           ; Regs used in _SPI_init_master: [wreg]
  2807                           
  2808                           
  2809                           ;./spi.h: 18:         SSPCON = 0b01100001;
  2810     03A3  3061               	movlw	97
  2811     03A4  1283               	bcf	3,5	;RP0=0, select bank0
  2812     03A5  1303               	bcf	3,6	;RP1=0, select bank0
  2813     03A6  0094               	movwf	20	;volatile
  2814                           
  2815                           ;./spi.h: 19:         SSPSTAT = 0b01000000;
  2816     03A7  3040               	movlw	64
  2817     03A8  1683               	bsf	3,5	;RP0=1, select bank1
  2818     03A9  1303               	bcf	3,6	;RP1=0, select bank1
  2819     03AA  0094               	movwf	20	;volatile
  2820     03AB                     l1342:
  2821                           
  2822                           ;./spi.h: 20:         TRISC4 = 1;
  2823     03AB  1607               	bsf	7,4	;volatile
  2824     03AC                     l1344:
  2825                           
  2826                           ;./spi.h: 21:         TRISC5 = 0;
  2827     03AC  1287               	bcf	7,5	;volatile
  2828     03AD                     l1346:
  2829                           
  2830                           ;./spi.h: 22:         TRISC2 = 0;
  2831     03AD  1107               	bcf	7,2	;volatile
  2832     03AE                     l79:
  2833     03AE  0008               	return
  2834     03AF                     __end_of_SPI_init_master:
  2835     007E                     btemp	set	126	;btemp
  2836     007E                     wtemp0	set	126
  2837                           
  2838                           	psect	config
  2839                           
  2840                           ;Config register CONFIG1 @ 0x2007
  2841                           ;	Oscillator Selection bits
  2842                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2843                           ;	Watchdog Timer Enable bit
  2844                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2845                           ;	Power-up Timer Enable bit
  2846                           ;	PWRTE = OFF, PWRT disabled
  2847                           ;	RE3/MCLR pin function select bit
  2848                           ;	MCLRE = 0x1, unprogrammed default
  2849                           ;	Code Protection bit
  2850                           ;	CP = OFF, Program memory code protection is disabled
  2851                           ;	Data Code Protection bit
  2852                           ;	CPD = OFF, Data memory code protection is disabled
  2853                           ;	Brown Out Reset Selection bits
  2854                           ;	BOREN = OFF, BOR disabled
  2855                           ;	Internal External Switchover bit
  2856                           ;	IESO = 0x1, unprogrammed default
  2857                           ;	Fail-Safe Clock Monitor Enabled bit
  2858                           ;	FCMEN = 0x1, unprogrammed default
  2859                           ;	Low Voltage Programming Enable bit
  2860                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2861                           ;	In-Circuit Debugger Mode bit
  2862                           ;	DEBUG = 0x1, unprogrammed default
  2863     2007                     	org	8199
  2864     2007  2CF2               	dw	11506
  2865                           
  2866                           ;Config register CONFIG2 @ 0x2008
  2867                           ;	Brown-out Reset Selection bit
  2868                           ;	BOR4V = 0x1, unprogrammed default
  2869                           ;	Flash Program Memory Self Write Enable bits
  2870                           ;	WRT = OFF, Write protection off
  2871     2008                     	org	8200
  2872     2008  3FFF               	dw	16383

Data Sizes:
    Strings     46
    Constant    0
    Data        5
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     29      39
    BANK1            80     64      69
    BANK3            96     64      64
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_3(CODE[13]), STR_2(CODE[8]), STR_1(CODE[18]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), ?_sprintf(BANK0[2]), main@data(BANK0[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_197(BANK3[64]), main@buffer(BANK1[64]), char_to_binary_string@output(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    nrf_read@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_setup@addr	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK1[5]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_read@clear(BANK0[1]), nrf_send@clear(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 
		 -> nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command_with_data@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_read@clear(BANK0[1]), nrf_send@clear(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 
		 -> nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command_with_data_overwrite@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK1[5]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_setup@data(BANK0[5]), 

    UART_write_text@text	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_197(BANK3[64]), main@buffer(BANK1[64]), 


Critical Paths under _main in COMMON

    _main->_nrf_read
    _main->_nrf_set_rx_mode
    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_set_rx_mode->_nrf_read_register
    _nrf_read->_nrf_read_register
    _nrf_write_register->_nrf_command_with_data
    _nrf_command_with_data->_SPI_write
    _nrf_read_register->_nrf_command_with_data_overwrite
    _nrf_command_with_data_overwrite->_SPI_write
    _nrf_data_available->_nrf_write_command
    _nrf_write_command->_SPI_write
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               131   131      0   16108
                                             26 BANK0      3     3      0
                                              0 BANK1     64    64      0
                                              0 BANK3     64    64      0
                    _SPI_init_master
                          _UART_init
                    _UART_write_text
                 _nrf_data_available
                           _nrf_read
                    _nrf_set_rx_mode
                          _nrf_setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             35    16     19     660
                                              0 COMMON     6     6      0
                                              0 BANK0     19     0     19
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                            7     6      1    6659
                                             11 COMMON     1     0      1
                                              0 BANK0      6     6      0
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    2898
                                             10 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               7     5      2     504
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _nrf_set_rx_mode                                      1     1      0    3753
                                             12 COMMON     1     1      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (1) _nrf_read                                             4     3      1    3933
                                             12 COMMON     1     0      1
                                              0 BANK0      2     2      0
                  _nrf_read_register
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    2807
                                              7 COMMON     3     1      2
              _nrf_command_with_data
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data                                6     4      2     309
                                              1 COMMON     6     4      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2     875
                                              9 COMMON     3     1      2
    _nrf_command_with_data_overwrite
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data_overwrite                      8     6      2     353
                                              1 COMMON     8     6      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_data_available                                   1     1      0      90
                                              3 COMMON     1     1      0
                  _nrf_write_command
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      7     5      2     186
                                              1 COMMON     7     5      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_init
     ___aldiv
   _UART_write_text
     _UART_write
   _nrf_data_available
     _nrf_write_command
       _SPI_write
   _nrf_read
     _nrf_read_register
       _nrf_command_with_data_overwrite
         _SPI_write
     _nrf_write_command
     _nrf_write_register
       _nrf_command_with_data
         _SPI_write
   _nrf_set_rx_mode
     _nrf_read_register
     _nrf_write_register
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     40      40       9       66.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     40      45       7       86.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1D      27       5       48.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B9      12        0.0%
ABS                  0      0      B9       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Mar 28 12:07:27 2023

                                      pc 0002                                       _BF 04A0  
                                     l61 03BA                                       l55 0571  
                                     l58 03B0                                       l82 03E7  
                                     l67 0506                                       l91 0436  
                                     l85 03F0                                       l79 03AE  
                                     l96 04CB                                       l97 04CF  
                                     fsr 0004                                      l102 049A  
                                    l103 049E                                      l121 07CF  
                                    l106 03D3                                      l115 0400  
                                    l132 03E1                                      l140 0476  
                                    l124 0449                                      l109 03C6  
                                    l125 0454                                      l118 0419  
                                    l363 05F7                                      l373 067F  
                                    l294 0726                                      l287 06CB  
                                    _RD2 0042                                      _RD3 0043  
                                    u410 03ED                                      u411 03EC  
                                    u500 062E                                      u420 049A  
                                    u501 062D                                      u421 0499  
                                    u430 04CB                                      u431 04CA  
                                    u520 0649                                      u440 03B6  
                                    u600 04FA                                      u521 0648  
                                    u441 03B5                                      u610 0506  
                                    u450 0436                                      u515 0630  
                                    u611 0505                                      u451 0435  
                                    u540 0667                                      u460 05EA  
                                    u620 0448                                      u541 0666  
                                    u525 0645                                      u461 05E9  
                                    u621 0447                                      u550 066C  
                                    u470 05FB                                      u551 066B  
                                    u535 0659                                      u471 05FA  
                                    u480 061A                                      u560 051A  
                                    u640 03E0                                      u481 0619  
                                    u641 03DE                                      u570 0533  
                                    u650 03E1                                      u660 0689  
                                    u581 0545                                      u565 0515  
                                    u661 0688                                      u582 0546  
                                    u590 04DD                                      u670 06A9  
                                    u495 061F                                      u583 054B  
                                    u575 052E                                      u671 06A8  
                                    u584 054C                                      u680 06D9  
                                    u585 0551                                      u681 06D8  
                                    u586 0552                                      u690 0720  
                                    u691 071F                                      u790 05BF  
                                    u791 05BE                                      fsr0 0004  
                                    indf 0000                   nrf_command_with_data@i 0076  
                                   l1200 03E3                                     l1202 03ED  
                                   l1210 0482                                     l1300 0649  
                                   l1212 0484                                     l1310 066C  
                                   l1302 0657                                     l1230 04C1  
                                   l1222 04A0                                     l1214 0490  
                                   l1206 0478                                     l1312 0677  
                                   l1304 0658                                     l1320 0563  
                                   l1232 04C5                                     l1224 04A3  
                                   l1216 0494                                     l1208 047B  
                                   l1306 0661                                     l1330 056E  
                                   l1322 0564                                     l1242 03F2  
                                   l1410 03D4                                     l1234 04CE  
                                   l1226 04AA                                     l1218 049D  
                                   l1340 03A3                                     l1308 0667  
                                   l1324 0567                                     l1316 0507  
                                   l1252 03B0                                     l1332 04D0  
                                   l1244 03F5                                     l1412 03DB  
                                   l1228 04AC                                     l1420 0468  
                                   l1260 042C                                     l1342 03AB  
                                   l1326 056A                                     l1318 050A  
                                   l1254 03B6                                     l1334 04D3  
                                   l1246 03FC                                     l1238 03C8  
                                   l1422 046C                                     l1262 0430  
                                   l1270 0403                                     l1430 0689  
                                   l1344 03AC                                     l1280 05EA  
                                   l1328 056B                                     l1336 04EA  
                                   l1248 03FF                                     l1264 03BC  
                                   l1416 0458                                     l1256 041B  
                                   l1272 040D                                     l1360 0734  
                                   l1440 06A3                                     l1432 0690  
                                   l1346 03AD                                     l1290 061A  
                                   l1282 05FB                                     l1338 04F0  
                                   l1418 0462                                     l1258 041D  
                                   l1274 0413                                     l1370 0759  
                                   l1362 073E                                     l1450 06DA  
                                   l1442 06A9                                     l1434 0697  
                                   l1426 0680                                     l1292 061D  
                                   l1284 0606                                     l1276 05E3  
                                   l1268 0401                                     l1380 0778  
                                   l1372 075D                                     l1364 0741  
                                   l1356 072A                                     l1452 06DF  
                                   l1444 06AE                                     l1436 0698  
                                   l1460 06F1                                     l1428 0683  
                                   l1540 058D                                     l1294 062A  
                                   l1286 060A                                     l1278 05E6  
                                   l1390 0444                                     l1382 0786  
                                   l1374 0767                                     l1366 074B  
                                   l1358 0732                                     l1454 06E3  
                                   l1446 06BF                                     l1438 069F  
                                   l1462 070E                                     l1550 05B5  
                                   l1542 059A                                     l1296 062E  
                                   l1288 0612                                     l1384 0790  
                                   l1376 076A                                     l1368 074F  
                                   l1464 0720                                     l1456 06EA  
                                   l1448 06C5                                     l1552 05BF  
                                   l1544 05A3                                     l1536 0572  
                                   l1298 0637                                     l1394 044A  
                                   l1386 0437                                     l1378 0774  
                                   l1554 05C7                                     l1546 05A8  
                                   l1538 0576                                     l1388 0441  
                                   l1556 05D6                                     l1548 05B0  
                                   l1588 0703                                     STR_1 0013  
                                   STR_2 0032                                     STR_3 0025  
                                   STR_4 003A                                     _BRGH 04C2  
                                   _CREN 00C4                                     _RCIF 0065  
                                   _SPEN 00C7                                     _TRMT 04C1  
                                   _TXEN 04C5                                     _SYNC 04C4  
                                   _main 0572                                     btemp 007E  
                                   start 0000  __end_of_nrf_command_with_data_overwrite 04D0  
      ??_nrf_command_with_data_overwrite 0073         ?_nrf_command_with_data_overwrite 0071  
        _nrf_command_with_data_overwrite 049F                         UART_write_text@i 0076  
                        __end_of___aldiv 0680                                    ?_main 0070  
       nrf_command_with_data_overwrite@i 0078                                    _RCREG 001A  
                                  _SPBRG 0099                                    _TXREG 0019  
          __end_of_nrf_command_with_data 049F                              ?_UART_write 0070  
                                  pclath 000A                                    status 0003  
                                  wtemp0 007E                          __end_of_sprintf 0727  
                        __initialization 07D0                             __end_of_main 05E3  
                                 ??_main 007D                 nrf_command_with_data@len 0072  
                  nrf_setup@payload_size 007B                                   _TRISC2 043A  
                                 _TRISC4 043C                                   _TRISD2 0442  
                                 _TRISC5 043D                                   _TRISD3 0443  
                                 _TRISC6 043E                                   _TRISC7 043F  
                                 _SSPCON 0014                                   _SSPBUF 0013  
                              ??___aldiv 0078                        __end_of_UART_init 0572  
                         _nrf_flush_rxtx 0401              char_to_binary_string@output 003D  
                                 _arrcpy 041A             nrf_command_with_data@command 0074  
                       __end_of_nrf_read 0477                          _UART_write_text 04D0  
                      __end_of_SPI_write 03F1                                ??_sprintf 0070  
               nrf_data_available@status 0073                       nrf_flush_rxtx@data 007A  
                __end_of__initialization 07FC                   __end_of_nrf_flush_rxtx 041A  
                         __pcstackCOMMON 0070                             __pidataBANK1 039E  
             __end_of_nrf_write_register 03D4                        ??_nrf_set_rx_mode 007C  
                      ??_SPI_init_master 0070                               __pbssBANK0 003D  
                  nrf_write_register@len 0078                    nrf_write_register@reg 0079  
                         main@buffer_197 0190                          ?_nrf_flush_rxtx 0070  
                             __pmaintext 0572                                  ?_arrcpy 0070  
                __end_of_UART_write_text 0507                              nrf_read@len 007C  
                           ??_UART_write 0070                                  _SSPSTAT 0094  
                             __stringtab 0003                                ?_nrf_read 007C  
                                ___aldiv 05E3                       __end_of_UART_write 03BB  
                                __ptext1 0680                                  __ptext2 0727  
                                __ptext3 0401                                  __ptext4 041A  
                                __ptext5 0437                                  __ptext6 0455  
                                __ptext7 03C7                                  __ptext8 0477  
                                __ptext9 03BB                     nrf_read_register@len 007A  
                   nrf_read_register@reg 007B                         ___aldiv@dividend 0074  
                  _nrf_command_with_data 0477                                  _sprintf 0680  
                                arrcpy@i 0076                     end_of_initialization 07FC  
                      __end_of_nrf_setup 07D0                      UART_init@_XTAL_FREQ 002A  
                             ??_nrf_read 007D                            nrf_read@clear 0021  
    nrf_command_with_data_overwrite@data 0071                         ___aldiv@quotient 0022  
                       ?_UART_write_text 0071                                _UART_init 0507  
                              _SPI_write 03E2                               main@buffer 00A0  
                        _nrf_set_rx_mode 0437                          _SPI_init_master 03A3  
                          nrf_setup@addr 0020                            nrf_setup@data 0021  
                         __end_of_arrcpy 0437                               ?_UART_init 0026  
                    start_initialization 07D0                   ?_nrf_command_with_data 0071  
             __end_of_nrf_data_available 03E2                       _nrf_write_register 03C7  
                             ?_SPI_write 0070                         ??_nrf_flush_rxtx 007A  
                    ?_nrf_write_register 0077                                 ??_arrcpy 0072  
                            __pdataBANK1 00E0                     ??_nrf_write_register 0079  
                 nrf_write_register@data 0077                                ___latbits 0002  
                          __pcstackBANK0 0020                            __pcstackBANK1 00A0  
                          __pcstackBANK3 0190                      UART_write_text@text 0071  
                __end_of_nrf_set_rx_mode 0455                  __end_of_SPI_init_master 03AF  
                          SPI_write@data 0070                                 ?___aldiv 0070  
                              __pstrings 0003                              ??_UART_init 002E  
                               ?_sprintf 0020                              ??_SPI_write 0070  
                        ___aldiv@divisor 0070                          ___aldiv@counter 0020  
                              _nrf_setup 0727                             nrf_read@data 0020  
                      _nrf_read_register 03BB                    nrf_set_rx_mode@config 007C  
                     ?_nrf_read_register 0079                              __stringbase 0012  
                         UART_write@data 0070   nrf_command_with_data_overwrite@command 0076  
                              arrcpy@len 0071                                arrcpy@dst 0075  
                              arrcpy@src 0070                      ??_nrf_read_register 007B  
                      _nrf_write_command 03F1                       ?_nrf_write_command 0070  
                             ?_nrf_setup 007B                         ?_nrf_set_rx_mode 0070  
                       ?_SPI_init_master 0070                __end_of_nrf_read_register 03C7  
                    ??_nrf_write_command 0071                       __end_of__stringtab 0013  
            nrf_command_with_data@status 0075                  ??_nrf_command_with_data 0073  
              __end_of_nrf_write_command 0401                                 __ptext10 049F  
                               __ptext11 03D4                                 __ptext12 03F1  
                               __ptext13 03E2                                 __ptext14 04D0  
                               __ptext15 03AF                                 __ptext16 0507  
                               __ptext17 05E3                                 __ptext18 03A3  
                  nrf_read_register@data 0079                       _nrf_data_available 03D4  
                               _nrf_read 0455                      ?_nrf_data_available 0070  
                               main@data 003A                               _RADIO_ADDR 00E0  
  nrf_command_with_data_overwrite@status 0077                nrf_command_with_data@data 0071  
                   ??_nrf_data_available 0073                                sprintf@ap 0072  
                              sprintf@cp 0073                                sprintf@sp 0020  
               nrf_write_command@command 0071                        UART_init@baudrate 0026  
                            ??_nrf_setup 007C                                stringcode 000D  
                             _OSCCONbits 008F       nrf_command_with_data_overwrite@len 0072  
                               sprintf@c 0075                                 sprintf@f 0022  
                               stringdir 000D                                 stringtab 0003  
                           ___aldiv@sign 0021                  nrf_write_command@status 0072  
                             _UART_write 03AF                        ??_UART_write_text 0073  
