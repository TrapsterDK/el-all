

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Apr 19 10:40:30 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35     0000                     
    36                           ; Version 2.40
    37                           ; Generated 04/07/2022 GMT
    38                           ; 
    39                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71     0000                     	;# 
    72     0001                     	;# 
    73     0002                     	;# 
    74     0003                     	;# 
    75     0004                     	;# 
    76     0005                     	;# 
    77     0006                     	;# 
    78     0007                     	;# 
    79     0008                     	;# 
    80     0009                     	;# 
    81     000A                     	;# 
    82     000B                     	;# 
    83     000C                     	;# 
    84     000D                     	;# 
    85     000E                     	;# 
    86     000E                     	;# 
    87     000F                     	;# 
    88     0010                     	;# 
    89     0011                     	;# 
    90     0012                     	;# 
    91     0013                     	;# 
    92     0014                     	;# 
    93     0015                     	;# 
    94     0015                     	;# 
    95     0016                     	;# 
    96     0017                     	;# 
    97     0018                     	;# 
    98     0019                     	;# 
    99     001A                     	;# 
   100     001B                     	;# 
   101     001B                     	;# 
   102     001C                     	;# 
   103     001D                     	;# 
   104     001E                     	;# 
   105     001F                     	;# 
   106     0081                     	;# 
   107     0085                     	;# 
   108     0086                     	;# 
   109     0087                     	;# 
   110     0088                     	;# 
   111     0089                     	;# 
   112     008C                     	;# 
   113     008D                     	;# 
   114     008E                     	;# 
   115     008F                     	;# 
   116     0090                     	;# 
   117     0091                     	;# 
   118     0092                     	;# 
   119     0093                     	;# 
   120     0093                     	;# 
   121     0093                     	;# 
   122     0094                     	;# 
   123     0095                     	;# 
   124     0096                     	;# 
   125     0097                     	;# 
   126     0098                     	;# 
   127     0099                     	;# 
   128     009A                     	;# 
   129     009B                     	;# 
   130     009C                     	;# 
   131     009D                     	;# 
   132     009E                     	;# 
   133     009F                     	;# 
   134     0105                     	;# 
   135     0107                     	;# 
   136     0108                     	;# 
   137     0109                     	;# 
   138     010C                     	;# 
   139     010C                     	;# 
   140     010D                     	;# 
   141     010E                     	;# 
   142     010F                     	;# 
   143     0185                     	;# 
   144     0187                     	;# 
   145     0188                     	;# 
   146     0189                     	;# 
   147     018C                     	;# 
   148     018D                     	;# 
   149     0000                     	;# 
   150     0001                     	;# 
   151     0002                     	;# 
   152     0003                     	;# 
   153     0004                     	;# 
   154     0005                     	;# 
   155     0006                     	;# 
   156     0007                     	;# 
   157     0008                     	;# 
   158     0009                     	;# 
   159     000A                     	;# 
   160     000B                     	;# 
   161     000C                     	;# 
   162     000D                     	;# 
   163     000E                     	;# 
   164     000E                     	;# 
   165     000F                     	;# 
   166     0010                     	;# 
   167     0011                     	;# 
   168     0012                     	;# 
   169     0013                     	;# 
   170     0014                     	;# 
   171     0015                     	;# 
   172     0015                     	;# 
   173     0016                     	;# 
   174     0017                     	;# 
   175     0018                     	;# 
   176     0019                     	;# 
   177     001A                     	;# 
   178     001B                     	;# 
   179     001B                     	;# 
   180     001C                     	;# 
   181     001D                     	;# 
   182     001E                     	;# 
   183     001F                     	;# 
   184     0081                     	;# 
   185     0085                     	;# 
   186     0086                     	;# 
   187     0087                     	;# 
   188     0088                     	;# 
   189     0089                     	;# 
   190     008C                     	;# 
   191     008D                     	;# 
   192     008E                     	;# 
   193     008F                     	;# 
   194     0090                     	;# 
   195     0091                     	;# 
   196     0092                     	;# 
   197     0093                     	;# 
   198     0093                     	;# 
   199     0093                     	;# 
   200     0094                     	;# 
   201     0095                     	;# 
   202     0096                     	;# 
   203     0097                     	;# 
   204     0098                     	;# 
   205     0099                     	;# 
   206     009A                     	;# 
   207     009B                     	;# 
   208     009C                     	;# 
   209     009D                     	;# 
   210     009E                     	;# 
   211     009F                     	;# 
   212     0105                     	;# 
   213     0107                     	;# 
   214     0108                     	;# 
   215     0109                     	;# 
   216     010C                     	;# 
   217     010C                     	;# 
   218     010D                     	;# 
   219     010E                     	;# 
   220     010F                     	;# 
   221     0185                     	;# 
   222     0187                     	;# 
   223     0188                     	;# 
   224     0189                     	;# 
   225     018C                     	;# 
   226     018D                     	;# 
   227                           
   228                           	psect	idataBANK1
   229     0327                     __pidataBANK1:
   230                           
   231                           ;initializer for main@F1433
   232     0327  3441               	retlw	65
   233     0328  3442               	retlw	66
   234     0329  3400               	retlw	0
   235                           
   236                           ;initializer for _RADIO_ADDR
   237     032A  3401               	retlw	1
   238     032B  3404               	retlw	4
   239     032C  3406               	retlw	6
   240     032D  3404               	retlw	4
   241     032E  3405               	retlw	5
   242     001A                     _RCREG	set	26
   243     0019                     _TXREG	set	25
   244     0042                     _RD2	set	66
   245     0043                     _RD3	set	67
   246     0065                     _RCIF	set	101
   247     00C4                     _CREN	set	196
   248     00C7                     _SPEN	set	199
   249     003C                     _RC4	set	60
   250     003D                     _RC5	set	61
   251     003B                     _RC3	set	59
   252     008F                     _OSCCONbits	set	143
   253     0099                     _SPBRG	set	153
   254     0442                     _TRISD2	set	1090
   255     0443                     _TRISD3	set	1091
   256     04C1                     _TRMT	set	1217
   257     04C5                     _TXEN	set	1221
   258     043E                     _TRISC6	set	1086
   259     043F                     _TRISC7	set	1087
   260     04C4                     _SYNC	set	1220
   261     04C2                     _BRGH	set	1218
   262     043C                     _TRISC4	set	1084
   263     043D                     _TRISC5	set	1085
   264     043B                     _TRISC3	set	1083
   265                           
   266                           	psect	strings
   267     0003                     __pstrings:
   268     0003                     stringtab:
   269     0003                     __stringtab:
   270     0003                     stringcode:	
   271                           ;	String table - string pointers are 1 byte each
   272                           
   273     0003                     stringdir:
   274     0003  3000               	movlw	high stringdir
   275     0004  008A               	movwf	10
   276     0005  0804               	movf	4,w
   277     0006  0A84               	incf	4,f
   278     0007  0782               	addwf	2,f
   279     0008                     __stringbase:
   280     0008  3400               	retlw	0
   281     0009                     __end_of__stringtab:
   282     0009                     STR_1:
   283     0009  3425               	retlw	37	;'%'
   284     000A  3463               	retlw	99	;'c'
   285     000B  3425               	retlw	37	;'%'
   286     000C  3463               	retlw	99	;'c'
   287     000D  3425               	retlw	37	;'%'
   288     000E  3463               	retlw	99	;'c'
   289     000F  3425               	retlw	37	;'%'
   290     0010  3463               	retlw	99	;'c'
   291     0011  3425               	retlw	37	;'%'
   292     0012  3463               	retlw	99	;'c'
   293     0013  3425               	retlw	37	;'%'
   294     0014  3463               	retlw	99	;'c'
   295     0015  3425               	retlw	37	;'%'
   296     0016  3463               	retlw	99	;'c'
   297     0017  3425               	retlw	37	;'%'
   298     0018  3463               	retlw	99	;'c'
   299     0019  340A               	retlw	10
   300     001A  3400               	retlw	0
   301     001B                     STR_2:
   302     001B  3442               	retlw	66	;'B'
   303     001C  344F               	retlw	79	;'O'
   304     001D  344F               	retlw	79	;'O'
   305     001E  3454               	retlw	84	;'T'
   306     001F  3445               	retlw	69	;'E'
   307     0020  3444               	retlw	68	;'D'
   308     0021  340A               	retlw	10
   309     0022  3400               	retlw	0
   310     0023                     STR_3:
   311     0023  3453               	retlw	83	;'S'
   312     0024  3465               	retlw	101	;'e'
   313     0025  346E               	retlw	110	;'n'
   314     0026  3474               	retlw	116	;'t'
   315     0027  340A               	retlw	10
   316     0028  3400               	retlw	0
   317                           
   318                           	psect	cinit
   319     07E4                     start_initialization:	
   320                           ; #config settings
   321                           
   322     07E4                     __initialization:
   323                           
   324                           ; Initialize objects allocated to BANK1
   325     07E4  1383               	bcf	3,7	;select IRP bank0
   326     07E5  30E8               	movlw	low (__pdataBANK1+8)
   327     07E6  00FD               	movwf	btemp+-1
   328     07E7  3003               	movlw	high __pidataBANK1
   329     07E8  00FE               	movwf	btemp
   330     07E9  3027               	movlw	low __pidataBANK1
   331     07EA  00FF               	movwf	btemp+1
   332     07EB  30E0               	movlw	low __pdataBANK1
   333     07EC  0084               	movwf	4
   334     07ED  120A  118A  2374  120A  118A  	fcall	init_ram0
   335                           
   336                           ; Clear objects allocated to BANK0
   337     07F2  01C4               	clrf	__pbssBANK0& (0+127)
   338     07F3  01C5               	clrf	(__pbssBANK0+1)& (0+127)
   339     07F4  01C6               	clrf	(__pbssBANK0+2)& (0+127)
   340     07F5  01C7               	clrf	(__pbssBANK0+3)& (0+127)
   341     07F6  01C8               	clrf	(__pbssBANK0+4)& (0+127)
   342     07F7  01C9               	clrf	(__pbssBANK0+5)& (0+127)
   343     07F8  01CA               	clrf	(__pbssBANK0+6)& (0+127)
   344     07F9  01CB               	clrf	(__pbssBANK0+7)& (0+127)
   345     07FA  01CC               	clrf	(__pbssBANK0+8)& (0+127)
   346     07FB  01CD               	clrf	(__pbssBANK0+9)& (0+127)
   347     07FC                     end_of_initialization:	
   348                           ;End of C runtime variable initialization code
   349                           
   350     07FC                     __end_of__initialization:
   351     07FC  0183               	clrf	3
   352     07FD  120A  118A  2E46   	ljmp	_main	;jump to C main() function
   353                           
   354                           	psect	bssBANK0
   355     0044                     __pbssBANK0:
   356     0044                     char_to_binary_string@output:
   357     0044                     	ds	10
   358                           
   359                           	psect	dataBANK1
   360     00E0                     __pdataBANK1:
   361     00E0                     main@F1433:
   362     00E0                     	ds	3
   363     00E3                     _RADIO_ADDR:
   364     00E3                     	ds	5
   365                           
   366                           	psect	inittext
   367     0370                     init_fetch0:	
   368                           ;	Called with low address in FSR and high address in W
   369                           
   370     0370  087E               	movf	btemp,w
   371     0371  008A               	movwf	10
   372     0372  087F               	movf	btemp+1,w
   373     0373  0082               	movwf	2
   374     0374                     init_ram0:	
   375                           ;Called with:
   376                           ;	high address of idata address in btemp 
   377                           ;	low address of idata address in btemp+1 
   378                           ;	low address of data in FSR
   379                           ;	high address + 1 of data in btemp-1
   380                           
   381     0374  120A  118A  2370  120A  118A  	fcall	init_fetch0
   382     0379  0080               	movwf	0
   383     037A  0A84               	incf	4,f
   384     037B  0804               	movf	4,w
   385     037C  067D               	xorwf	btemp+-1,w
   386     037D  1903               	btfsc	3,2
   387     037E  3400               	retlw	0
   388     037F  0AFF               	incf	btemp+1,f
   389     0380  1903               	btfsc	3,2
   390     0381  0AFE               	incf	btemp,f
   391     0382  2B74               	goto	init_ram0
   392                           
   393                           	psect	cstackBANK3
   394     0190                     __pcstackBANK3:
   395     0190                     main@buffer_200:
   396                           
   397                           ; 64 bytes @ 0x0
   398     0190                     	ds	64
   399                           
   400                           	psect	cstackBANK1
   401     00A0                     __pcstackBANK1:
   402     00A0                     main@buffer:
   403                           
   404                           ; 64 bytes @ 0x0
   405     00A0                     	ds	64
   406                           
   407                           	psect	cstackCOMMON
   408     0070                     __pcstackCOMMON:
   409     0070                     ??_sprintf:
   410     0070                     ?_SPI_init_master:	
   411                           ; 1 bytes @ 0x0
   412                           
   413     0070                     ??_SPI_init_master:	
   414                           ; 1 bytes @ 0x0
   415                           
   416     0070                     ?_SPI_write:	
   417                           ; 1 bytes @ 0x0
   418                           
   419     0070                     ??_SPI_write:	
   420                           ; 1 bytes @ 0x0
   421                           
   422     0070                     ?_UART_write:	
   423                           ; 1 bytes @ 0x0
   424                           
   425     0070                     ??_UART_write:	
   426                           ; 1 bytes @ 0x0
   427                           
   428     0070                     ?_arrcpy:	
   429                           ; 1 bytes @ 0x0
   430                           
   431     0070                     ?_nrf_write_command:	
   432                           ; 1 bytes @ 0x0
   433                           
   434     0070                     ?_nrf_flush_rxtx:	
   435                           ; 1 bytes @ 0x0
   436                           
   437     0070                     ?_nrf_set_tx_mode:	
   438                           ; 1 bytes @ 0x0
   439                           
   440     0070                     ?_main:	
   441                           ; 1 bytes @ 0x0
   442                           
   443     0070                     ?___aldiv:	
   444                           ; 2 bytes @ 0x0
   445                           
   446     0070                     UART_write@data:	
   447                           ; 4 bytes @ 0x0
   448                           
   449     0070                     arrcpy@src:	
   450                           ; 1 bytes @ 0x0
   451                           
   452     0070                     ___aldiv@divisor:	
   453                           ; 1 bytes @ 0x0
   454                           
   455                           
   456                           ; 4 bytes @ 0x0
   457     0070                     	ds	1
   458     0071                     ?_UART_write_text:
   459     0071                     SPI_write@data:	
   460                           ; 1 bytes @ 0x1
   461                           
   462     0071                     arrcpy@len:	
   463                           ; 1 bytes @ 0x1
   464                           
   465     0071                     UART_write_text@text:	
   466                           ; 1 bytes @ 0x1
   467                           
   468                           
   469                           ; 2 bytes @ 0x1
   470     0071                     	ds	1
   471     0072                     ??_arrcpy:
   472     0072                     SPI_write@read:	
   473                           ; 1 bytes @ 0x2
   474                           
   475     0072                     sprintf@ap:	
   476                           ; 1 bytes @ 0x2
   477                           
   478                           
   479                           ; 1 bytes @ 0x2
   480     0072                     	ds	1
   481     0073                     ??_UART_write_text:
   482     0073                     SPI_write@i:	
   483                           ; 1 bytes @ 0x3
   484                           
   485     0073                     sprintf@c:	
   486                           ; 1 bytes @ 0x3
   487                           
   488                           
   489                           ; 1 bytes @ 0x3
   490     0073                     	ds	1
   491     0074                     ?_nrf_command_with_data_overwrite:
   492     0074                     ?_nrf_command_with_data:	
   493                           ; 1 bytes @ 0x4
   494                           
   495     0074                     ??_nrf_write_command:	
   496                           ; 1 bytes @ 0x4
   497                           
   498     0074                     nrf_command_with_data_overwrite@data:	
   499                           ; 1 bytes @ 0x4
   500                           
   501     0074                     nrf_command_with_data@data:	
   502                           ; 1 bytes @ 0x4
   503                           
   504     0074                     nrf_write_command@command:	
   505                           ; 1 bytes @ 0x4
   506                           
   507     0074                     ___aldiv@dividend:	
   508                           ; 1 bytes @ 0x4
   509                           
   510                           
   511                           ; 4 bytes @ 0x4
   512     0074                     	ds	1
   513     0075                     arrcpy@dst:
   514     0075                     nrf_command_with_data_overwrite@len:	
   515                           ; 1 bytes @ 0x5
   516                           
   517     0075                     nrf_command_with_data@len:	
   518                           ; 1 bytes @ 0x5
   519                           
   520     0075                     nrf_write_command@status:	
   521                           ; 1 bytes @ 0x5
   522                           
   523                           
   524                           ; 1 bytes @ 0x5
   525     0075                     	ds	1
   526     0076                     ??_nrf_command_with_data_overwrite:
   527     0076                     ??_nrf_command_with_data:	
   528                           ; 1 bytes @ 0x6
   529                           
   530     0076                     arrcpy@i:	
   531                           ; 1 bytes @ 0x6
   532                           
   533     0076                     UART_write_text@i:	
   534                           ; 1 bytes @ 0x6
   535                           
   536                           
   537                           ; 2 bytes @ 0x6
   538     0076                     	ds	1
   539     0077                     nrf_command_with_data@command:
   540                           
   541                           ; 1 bytes @ 0x7
   542     0077                     	ds	1
   543     0078                     ??___aldiv:
   544     0078                     nrf_command_with_data@status:	
   545                           ; 1 bytes @ 0x8
   546                           
   547                           
   548                           ; 1 bytes @ 0x8
   549     0078                     	ds	1
   550     0079                     nrf_command_with_data_overwrite@command:
   551     0079                     nrf_command_with_data@i:	
   552                           ; 1 bytes @ 0x9
   553                           
   554                           
   555                           ; 1 bytes @ 0x9
   556     0079                     	ds	1
   557     007A                     ?_nrf_write_register:
   558     007A                     nrf_command_with_data_overwrite@status:	
   559                           ; 1 bytes @ 0xA
   560                           
   561     007A                     nrf_write_register@data:	
   562                           ; 1 bytes @ 0xA
   563                           
   564                           
   565                           ; 1 bytes @ 0xA
   566     007A                     	ds	1
   567     007B                     nrf_command_with_data_overwrite@i:
   568     007B                     nrf_write_register@len:	
   569                           ; 1 bytes @ 0xB
   570                           
   571                           
   572                           ; 1 bytes @ 0xB
   573     007B                     	ds	1
   574     007C                     ??_nrf_write_register:
   575     007C                     ?_nrf_read_register:	
   576                           ; 1 bytes @ 0xC
   577                           
   578     007C                     nrf_write_register@reg:	
   579                           ; 1 bytes @ 0xC
   580                           
   581     007C                     nrf_read_register@data:	
   582                           ; 1 bytes @ 0xC
   583                           
   584                           
   585                           ; 1 bytes @ 0xC
   586     007C                     	ds	1
   587     007D                     ?_nrf_write_payload:
   588     007D                     ??_nrf_flush_rxtx:	
   589                           ; 1 bytes @ 0xD
   590                           
   591     007D                     nrf_read_register@len:	
   592                           ; 1 bytes @ 0xD
   593                           
   594     007D                     nrf_write_payload@len:	
   595                           ; 1 bytes @ 0xD
   596                           
   597     007D                     nrf_flush_rxtx@data:	
   598                           ; 1 bytes @ 0xD
   599                           
   600                           
   601                           ; 1 bytes @ 0xD
   602     007D                     	ds	1
   603     007E                     ??_nrf_read_register:
   604     007E                     ??_nrf_send:	
   605                           ; 1 bytes @ 0xE
   606                           
   607                           
   608                           	psect	cstackBANK0
   609     0020                     __pcstackBANK0:	
   610                           ; 1 bytes @ 0xE
   611                           
   612     0020                     ??_nrf_write_payload:
   613     0020                     ?_nrf_setup:	
   614                           ; 1 bytes @ 0x0
   615                           
   616     0020                     ?_sprintf:	
   617                           ; 1 bytes @ 0x0
   618                           
   619     0020                     nrf_read_register@reg:	
   620                           ; 2 bytes @ 0x0
   621                           
   622     0020                     nrf_setup@addr_size:	
   623                           ; 1 bytes @ 0x0
   624                           
   625     0020                     ___aldiv@counter:	
   626                           ; 1 bytes @ 0x0
   627                           
   628     0020                     sprintf@sp:	
   629                           ; 1 bytes @ 0x0
   630                           
   631                           
   632                           ; 2 bytes @ 0x0
   633     0020                     	ds	1
   634     0021                     ??_nrf_set_tx_mode:
   635     0021                     nrf_write_payload@data:	
   636                           ; 1 bytes @ 0x1
   637                           
   638     0021                     nrf_setup@payload_size:	
   639                           ; 1 bytes @ 0x1
   640                           
   641     0021                     ___aldiv@sign:	
   642                           ; 1 bytes @ 0x1
   643                           
   644                           
   645                           ; 1 bytes @ 0x1
   646     0021                     	ds	1
   647     0022                     ??_nrf_setup:
   648     0022                     nrf_set_tx_mode@config:	
   649                           ; 1 bytes @ 0x2
   650                           
   651     0022                     sprintf@f:	
   652                           ; 1 bytes @ 0x2
   653                           
   654     0022                     ___aldiv@quotient:	
   655                           ; 1 bytes @ 0x2
   656                           
   657                           
   658                           ; 4 bytes @ 0x2
   659     0022                     	ds	1
   660     0023                     ?_nrf_send:
   661     0023                     nrf_send@len:	
   662                           ; 1 bytes @ 0x3
   663                           
   664                           
   665                           ; 1 bytes @ 0x3
   666     0023                     	ds	1
   667     0024                     nrf_send@stat:
   668                           
   669                           ; 1 bytes @ 0x4
   670     0024                     	ds	1
   671     0025                     nrf_setup@addr:
   672     0025                     nrf_send@data:	
   673                           ; 1 bytes @ 0x5
   674                           
   675                           
   676                           ; 1 bytes @ 0x5
   677     0025                     	ds	1
   678     0026                     ?_UART_init:
   679     0026                     nrf_send@clear:	
   680                           ; 1 bytes @ 0x6
   681                           
   682     0026                     UART_init@baudrate:	
   683                           ; 1 bytes @ 0x6
   684                           
   685     0026                     nrf_setup@data:	
   686                           ; 4 bytes @ 0x6
   687                           
   688                           
   689                           ; 5 bytes @ 0x6
   690     0026                     	ds	4
   691     002A                     UART_init@_XTAL_FREQ:
   692                           
   693                           ; 4 bytes @ 0xA
   694     002A                     	ds	4
   695     002E                     ??_UART_init:
   696                           
   697                           ; 1 bytes @ 0xE
   698     002E                     	ds	12
   699     003A                     ??_main:
   700                           
   701                           ; 1 bytes @ 0x1A
   702     003A                     	ds	3
   703     003D                     main@data:
   704                           
   705                           ; 3 bytes @ 0x1D
   706     003D                     	ds	3
   707     0040                     main@i:
   708                           
   709                           ; 2 bytes @ 0x20
   710     0040                     	ds	2
   711     0042                     main@j:
   712                           
   713                           ; 2 bytes @ 0x22
   714     0042                     	ds	2
   715                           
   716                           	psect	maintext
   717     0646                     __pmaintext:	
   718 ;;
   719 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   720 ;;
   721 ;; *************** function _main *****************
   722 ;; Defined at:
   723 ;;		line 60 in file "main.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;  buffer         64    0[BANK3 ] unsigned char [64]
   728 ;;  j               2   34[BANK0 ] int 
   729 ;;  i               2   32[BANK0 ] int 
   730 ;;  data            3   29[BANK0 ] unsigned char [3]
   731 ;;  buffer         64    0[BANK1 ] unsigned char [64]
   732 ;; Return value:  Size  Location     Type
   733 ;;                  2  187[None  ] int 
   734 ;; Registers used:
   735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : B00/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   741 ;;      Params:         0       0       0       0       0
   742 ;;      Locals:         0       7      64      64       0
   743 ;;      Temps:          0       3       0       0       0
   744 ;;      Totals:         0      10      64      64       0
   745 ;;Total ram usage:      138 bytes
   746 ;; Hardware stack levels required when called: 5
   747 ;; This function calls:
   748 ;;		_SPI_init_master
   749 ;;		_UART_init
   750 ;;		_UART_write_text
   751 ;;		_nrf_send
   752 ;;		_nrf_set_tx_mode
   753 ;;		_nrf_setup
   754 ;;		_sprintf
   755 ;; This function is called by:
   756 ;;		Startup code after reset
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760     0646                     _main:	
   761                           ;psect for function _main
   762                           
   763     0646                     l1622:	
   764                           ;incstack = 0
   765                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   766                           
   767                           
   768                           ;main.c: 63:     OSCCONbits.IRCF = 0x07;
   769     0646  3070               	movlw	112
   770     0647  1683               	bsf	3,5	;RP0=1, select bank1
   771     0648  1303               	bcf	3,6	;RP1=0, select bank1
   772     0649  048F               	iorwf	15,f	;volatile
   773     064A                     l1624:
   774                           
   775                           ;main.c: 66:     UART_init(9600, 8000000UL);
   776     064A  3000               	movlw	0
   777     064B  1283               	bcf	3,5	;RP0=0, select bank0
   778     064C  1303               	bcf	3,6	;RP1=0, select bank0
   779     064D  00A9               	movwf	UART_init@baudrate+3
   780     064E  3000               	movlw	0
   781     064F  00A8               	movwf	UART_init@baudrate+2
   782     0650  3025               	movlw	37
   783     0651  00A7               	movwf	UART_init@baudrate+1
   784     0652  3080               	movlw	128
   785     0653  00A6               	movwf	UART_init@baudrate
   786     0654  3000               	movlw	0
   787     0655  00AD               	movwf	UART_init@_XTAL_FREQ+3
   788     0656  307A               	movlw	122
   789     0657  00AC               	movwf	UART_init@_XTAL_FREQ+2
   790     0658  3012               	movlw	18
   791     0659  00AB               	movwf	UART_init@_XTAL_FREQ+1
   792     065A  3000               	movlw	0
   793     065B  00AA               	movwf	UART_init@_XTAL_FREQ
   794     065C  120A  118A  253E  120A  118A  	fcall	_UART_init
   795     0661                     l1626:
   796                           
   797                           ;main.c: 69:     { char buffer[64]; sprintf(buffer, "BOOTED\n"); UART_write_text(buffer)
      +                          ; };
   798     0661  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   799     0662  1283               	bcf	3,5	;RP0=0, select bank0
   800     0663  1303               	bcf	3,6	;RP1=0, select bank0
   801     0664  00A0               	movwf	sprintf@sp
   802     0665  3000               	movlw	0
   803     0666  00A1               	movwf	sprintf@sp+1
   804     0667  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   805     0668  00A2               	movwf	sprintf@f
   806     0669  120A  118A  24DC  120A  118A  	fcall	_sprintf
   807     066E                     l1628:
   808     066E  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   809     066F  00F1               	movwf	UART_write_text@text
   810     0670  3000               	movlw	0
   811     0671  00F2               	movwf	UART_write_text@text+1
   812     0672  120A  118A  24A5  120A  118A  	fcall	_UART_write_text
   813     0677                     l1630:
   814                           
   815                           ;main.c: 72:     SPI_init_master();
   816     0677  120A  118A  232F  120A  118A  	fcall	_SPI_init_master
   817     067C                     l1632:
   818                           
   819                           ;main.c: 75:     nrf_setup(RADIO_ADDR, 5, 3);
   820     067C  3005               	movlw	5
   821     067D  1283               	bcf	3,5	;RP0=0, select bank0
   822     067E  1303               	bcf	3,6	;RP1=0, select bank0
   823     067F  00A0               	movwf	nrf_setup@addr_size
   824     0680  3003               	movlw	3
   825     0681  00A1               	movwf	nrf_setup@payload_size
   826     0682  30E3               	movlw	(low (_RADIO_ADDR| 0))& (0+255)
   827     0683  120A  118A  2709  120A  118A  	fcall	_nrf_setup
   828     0688                     l1634:
   829                           
   830                           ;main.c: 79:     nrf_set_tx_mode();
   831     0688  120A  118A  23D4  120A  118A  	fcall	_nrf_set_tx_mode
   832     068D                     l1636:
   833                           
   834                           ;main.c: 85:     {;main.c: 89:         uint8_t data[3] = "AB";
   835     068D  1683               	bsf	3,5	;RP0=1, select bank1
   836     068E  1303               	bcf	3,6	;RP1=0, select bank1
   837     068F  0860               	movf	main@F1433^(0+128),w
   838     0690  1283               	bcf	3,5	;RP0=0, select bank0
   839     0691  1303               	bcf	3,6	;RP1=0, select bank0
   840     0692  00BD               	movwf	main@data
   841     0693  1683               	bsf	3,5	;RP0=1, select bank1
   842     0694  1303               	bcf	3,6	;RP1=0, select bank1
   843     0695  0861               	movf	(main@F1433+1)^(0+128),w
   844     0696  1283               	bcf	3,5	;RP0=0, select bank0
   845     0697  1303               	bcf	3,6	;RP1=0, select bank0
   846     0698  00BE               	movwf	main@data+1
   847     0699  1683               	bsf	3,5	;RP0=1, select bank1
   848     069A  1303               	bcf	3,6	;RP1=0, select bank1
   849     069B  0862               	movf	(main@F1433+2)^(0+128),w
   850     069C  1283               	bcf	3,5	;RP0=0, select bank0
   851     069D  1303               	bcf	3,6	;RP1=0, select bank0
   852     069E  00BF               	movwf	main@data+2
   853     069F                     l1638:
   854                           
   855                           ;main.c: 90:         for (int i = 0; i < 10; i++)
   856     069F  01C0               	clrf	main@i
   857     06A0  01C1               	clrf	main@i+1
   858     06A1                     l1644:
   859                           
   860                           ;main.c: 91:         {;main.c: 92:             for (int j = 0; j < 3 -1; j++)
   861     06A1  1283               	bcf	3,5	;RP0=0, select bank0
   862     06A2  1303               	bcf	3,6	;RP1=0, select bank0
   863     06A3  01C2               	clrf	main@j
   864     06A4  01C3               	clrf	main@j+1
   865     06A5                     l1650:
   866                           
   867                           ;main.c: 93:             {;main.c: 94:                 data[j] += 1;
   868     06A5  3001               	movlw	1
   869     06A6  1283               	bcf	3,5	;RP0=0, select bank0
   870     06A7  1303               	bcf	3,6	;RP1=0, select bank0
   871     06A8  00BA               	movwf	??_main
   872     06A9  0842               	movf	main@j,w
   873     06AA  3E3D               	addlw	(low (main@data| 0))& (0+255)
   874     06AB  0084               	movwf	4
   875     06AC  083A               	movf	??_main,w
   876     06AD  1383               	bcf	3,7	;select IRP bank0
   877     06AE  0780               	addwf	0,f
   878     06AF                     l1652:
   879                           
   880                           ;main.c: 95:             }
   881     06AF  3001               	movlw	1
   882     06B0  07C2               	addwf	main@j,f
   883     06B1  1803               	skipnc
   884     06B2  0AC3               	incf	main@j+1,f
   885     06B3  3000               	movlw	0
   886     06B4  07C3               	addwf	main@j+1,f
   887     06B5                     l1654:
   888     06B5  0843               	movf	main@j+1,w
   889     06B6  3A80               	xorlw	128
   890     06B7  00FF               	movwf	btemp+1
   891     06B8  3080               	movlw	128
   892     06B9  027F               	subwf	btemp+1,w
   893     06BA  1D03               	skipz
   894     06BB  2EBE               	goto	u745
   895     06BC  3002               	movlw	2
   896     06BD  0242               	subwf	main@j,w
   897     06BE                     u745:
   898     06BE  1C03               	skipc
   899     06BF  2EC1               	goto	u741
   900     06C0  2EC2               	goto	u740
   901     06C1                     u741:
   902     06C1  2EA5               	goto	l1650
   903     06C2                     u740:
   904     06C2                     l1656:
   905                           
   906                           ;main.c: 96:             nrf_send(data, 3);
   907     06C2  3003               	movlw	3
   908     06C3  1283               	bcf	3,5	;RP0=0, select bank0
   909     06C4  1303               	bcf	3,6	;RP1=0, select bank0
   910     06C5  00A3               	movwf	nrf_send@len
   911     06C6  303D               	movlw	(low (main@data| 0))& (0+255)
   912     06C7  120A  118A  2448  120A  118A  	fcall	_nrf_send
   913     06CC                     l1658:
   914                           
   915                           ;main.c: 97:             _delay((unsigned long)((500)*(8000000UL/4000.0)));
   916     06CC  3006               	movlw	6
   917     06CD  1283               	bcf	3,5	;RP0=0, select bank0
   918     06CE  1303               	bcf	3,6	;RP1=0, select bank0
   919     06CF  00BC               	movwf	??_main+2
   920     06D0  3013               	movlw	19
   921     06D1  00BB               	movwf	??_main+1
   922     06D2  30AD               	movlw	173
   923     06D3  00BA               	movwf	??_main
   924     06D4                     u767:
   925     06D4  0BBA               	decfsz	??_main,f
   926     06D5  2ED4               	goto	u767
   927     06D6  0BBB               	decfsz	??_main+1,f
   928     06D7  2ED4               	goto	u767
   929     06D8  0BBC               	decfsz	??_main+2,f
   930     06D9  2ED4               	goto	u767
   931     06DA                     l1660:
   932                           
   933                           ;main.c: 98:             { char buffer[64]; sprintf(buffer, "Sent\n"); UART_write_text(b
      +                          uffer); };
   934     06DA  3090               	movlw	(low (main@buffer_200| (0+256)))& (0+255)
   935     06DB  1283               	bcf	3,5	;RP0=0, select bank0
   936     06DC  1303               	bcf	3,6	;RP1=0, select bank0
   937     06DD  00A0               	movwf	sprintf@sp
   938     06DE  3001               	movlw	1
   939     06DF  00A1               	movwf	sprintf@sp+1
   940     06E0  301B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   941     06E1  00A2               	movwf	sprintf@f
   942     06E2  120A  118A  24DC  120A  118A  	fcall	_sprintf
   943     06E7                     l1662:
   944     06E7  3090               	movlw	(low (main@buffer_200| (0+256)))& (0+255)
   945     06E8  00F1               	movwf	UART_write_text@text
   946     06E9  3001               	movlw	1
   947     06EA  00F2               	movwf	UART_write_text@text+1
   948     06EB  120A  118A  24A5  120A  118A  	fcall	_UART_write_text
   949     06F0                     l1664:
   950                           
   951                           ;main.c: 99:         }
   952     06F0  3001               	movlw	1
   953     06F1  1283               	bcf	3,5	;RP0=0, select bank0
   954     06F2  1303               	bcf	3,6	;RP1=0, select bank0
   955     06F3  07C0               	addwf	main@i,f
   956     06F4  1803               	skipnc
   957     06F5  0AC1               	incf	main@i+1,f
   958     06F6  3000               	movlw	0
   959     06F7  07C1               	addwf	main@i+1,f
   960     06F8                     l1666:
   961     06F8  0841               	movf	main@i+1,w
   962     06F9  3A80               	xorlw	128
   963     06FA  00FF               	movwf	btemp+1
   964     06FB  3080               	movlw	128
   965     06FC  027F               	subwf	btemp+1,w
   966     06FD  1D03               	skipz
   967     06FE  2F01               	goto	u755
   968     06FF  300A               	movlw	10
   969     0700  0240               	subwf	main@i,w
   970     0701                     u755:
   971     0701  1C03               	skipc
   972     0702  2F04               	goto	u751
   973     0703  2F05               	goto	u750
   974     0704                     u751:
   975     0704  2EA1               	goto	l1644
   976     0705                     u750:
   977     0705  2E8D               	goto	l1636
   978     0706  120A  118A  2800   	ljmp	start
   979     0709                     __end_of_main:
   980                           
   981                           	psect	text1
   982     04DC                     __ptext1:	
   983 ;; *************** function _sprintf *****************
   984 ;; Defined at:
   985 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  sp              2    0[BANK0 ] PTR unsigned char 
   988 ;;		 -> main@buffer_200(64), main@buffer(64), char_to_binary_string@output(10), 
   989 ;;  f               1    2[BANK0 ] PTR const unsigned char 
   990 ;;		 -> STR_3(6), STR_2(8), STR_1(18), 
   991 ;; Auto vars:     Size  Location     Type
   992 ;;  tmpval          4    0        struct .
   993 ;;  cp              2    0        PTR const unsigned char 
   994 ;;  len             2    0        unsigned int 
   995 ;;  val             2    0        unsigned int 
   996 ;;  c               1    3[COMMON] unsigned char 
   997 ;;  ap              1    2[COMMON] PTR void [1]
   998 ;;		 -> ?_sprintf(2), 
   999 ;;  flag            1    0        unsigned char 
  1000 ;;  prec            1    0        char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  2    0[BANK0 ] int 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         0      19       0       0       0
  1011 ;;      Locals:         2       0       0       0       0
  1012 ;;      Temps:          2       0       0       0       0
  1013 ;;      Totals:         4      19       0       0       0
  1014 ;;Total ram usage:       23 bytes
  1015 ;; Hardware stack levels used: 2
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;;		_char_to_binary_string
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024     04DC                     _sprintf:	
  1025                           ;psect for function _sprintf
  1026                           
  1027     04DC                     l1512:	
  1028                           ;incstack = 0
  1029                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath]
  1030                           
  1031                           
  1032                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1033     04DC  3023               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  1034     04DD  00F2               	movwf	sprintf@ap
  1035                           
  1036                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1037     04DE  2D25               	goto	l1534
  1038     04DF                     l1514:
  1039                           
  1040                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1041     04DF  3025               	movlw	37
  1042     04E0  0673               	xorwf	sprintf@c,w
  1043     04E1  1903               	btfsc	3,2
  1044     04E2  2CE4               	goto	u631
  1045     04E3  2CE5               	goto	u630
  1046     04E4                     u631:
  1047     04E4  2CF3               	goto	l1520
  1048     04E5                     u630:
  1049     04E5                     l1516:
  1050                           
  1051                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1052     04E5  0820               	movf	sprintf@sp,w
  1053     04E6  0084               	movwf	4
  1054     04E7  1783               	bsf	3,7
  1055     04E8  1C21               	btfss	sprintf@sp+1,0
  1056     04E9  1383               	bcf	3,7
  1057     04EA  0873               	movf	sprintf@c,w
  1058     04EB  0080               	movwf	0
  1059     04EC                     l1518:
  1060     04EC  3001               	movlw	1
  1061     04ED  07A0               	addwf	sprintf@sp,f
  1062     04EE  1803               	skipnc
  1063     04EF  0AA1               	incf	sprintf@sp+1,f
  1064     04F0  3000               	movlw	0
  1065     04F1  07A1               	addwf	sprintf@sp+1,f
  1066                           
  1067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1068     04F2  2D25               	goto	l1534
  1069     04F3                     l1520:
  1070                           
  1071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1072     04F3  2D0B               	goto	l1532
  1073     04F4                     l1522:
  1074                           
  1075                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
  1076     04F4  0872               	movf	sprintf@ap,w
  1077     04F5  0084               	movwf	4
  1078     04F6  1383               	bcf	3,7	;select IRP bank0
  1079     04F7  0800               	movf	0,w
  1080     04F8  00F3               	movwf	sprintf@c
  1081     04F9                     l1524:
  1082     04F9  3002               	movlw	2
  1083     04FA  00F0               	movwf	??_sprintf
  1084     04FB  0870               	movf	??_sprintf,w
  1085     04FC  07F2               	addwf	sprintf@ap,f
  1086     04FD                     l1526:
  1087                           
  1088                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  1089     04FD  0820               	movf	sprintf@sp,w
  1090     04FE  0084               	movwf	4
  1091     04FF  1783               	bsf	3,7
  1092     0500  1C21               	btfss	sprintf@sp+1,0
  1093     0501  1383               	bcf	3,7
  1094     0502  0873               	movf	sprintf@c,w
  1095     0503  0080               	movwf	0
  1096     0504                     l1528:
  1097     0504  3001               	movlw	1
  1098     0505  07A0               	addwf	sprintf@sp,f
  1099     0506  1803               	skipnc
  1100     0507  0AA1               	incf	sprintf@sp+1,f
  1101     0508  3000               	movlw	0
  1102     0509  07A1               	addwf	sprintf@sp+1,f
  1103                           
  1104                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 836:    continue;
  1105     050A  2D25               	goto	l1534
  1106     050B                     l1532:
  1107     050B  3001               	movlw	1
  1108     050C  07A2               	addwf	sprintf@f,f
  1109     050D  30FF               	movlw	-1
  1110     050E  0722               	addwf	sprintf@f,w
  1111     050F  0084               	movwf	4
  1112     0510  120A  118A  2003  120A  118A  	fcall	stringdir
  1113     0515  00F3               	movwf	sprintf@c
  1114     0516  00F0               	movwf	??_sprintf
  1115     0517  01F1               	clrf	??_sprintf+1
  1116                           
  1117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1118                           ; Switch size 1, requested type "simple"
  1119                           ; Number of cases is 1, Range of values is 0 to 0
  1120                           ; switch strategies available:
  1121                           ; Name         Instructions Cycles
  1122                           ; simple_byte            4     3 (average)
  1123                           ; direct_byte           11     8 (fixed)
  1124                           ; jumptable            260     6 (fixed)
  1125                           ;	Chosen strategy is simple_byte
  1126     0518  0871               	movf	??_sprintf+1,w
  1127     0519  3A00               	xorlw	0	; case 0
  1128     051A  1903               	skipnz
  1129     051B  2D1D               	goto	l1718
  1130     051C  2CFD               	goto	l1526
  1131     051D                     l1718:
  1132                           
  1133                           ; Switch size 1, requested type "simple"
  1134                           ; Number of cases is 2, Range of values is 0 to 99
  1135                           ; switch strategies available:
  1136                           ; Name         Instructions Cycles
  1137                           ; simple_byte            7     4 (average)
  1138                           ; jumptable            260     6 (fixed)
  1139                           ;	Chosen strategy is simple_byte
  1140     051D  0870               	movf	??_sprintf,w
  1141     051E  3A00               	xorlw	0	; case 0
  1142     051F  1903               	skipnz
  1143     0520  2D37               	goto	l1536
  1144     0521  3A63               	xorlw	99	; case 99
  1145     0522  1903               	skipnz
  1146     0523  2CF4               	goto	l1522
  1147     0524  2CFD               	goto	l1526
  1148     0525                     l1534:
  1149                           
  1150                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1151     0525  3001               	movlw	1
  1152     0526  1283               	bcf	3,5	;RP0=0, select bank0
  1153     0527  1303               	bcf	3,6	;RP1=0, select bank0
  1154     0528  07A2               	addwf	sprintf@f,f
  1155     0529  30FF               	movlw	-1
  1156     052A  0722               	addwf	sprintf@f,w
  1157     052B  0084               	movwf	4
  1158     052C  120A  118A  2003  120A  118A  	fcall	stringdir
  1159     0531  00F3               	movwf	sprintf@c
  1160     0532  0873               	movf	sprintf@c,w
  1161     0533  1D03               	btfss	3,2
  1162     0534  2D36               	goto	u641
  1163     0535  2D37               	goto	u640
  1164     0536                     u641:
  1165     0536  2CDF               	goto	l1514
  1166     0537                     u640:
  1167     0537                     l1536:
  1168                           
  1169                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1170     0537  0820               	movf	sprintf@sp,w
  1171     0538  0084               	movwf	4
  1172     0539  1783               	bsf	3,7
  1173     053A  1C21               	btfss	sprintf@sp+1,0
  1174     053B  1383               	bcf	3,7
  1175     053C  0180               	clrf	0
  1176     053D                     l296:
  1177     053D  0008               	return
  1178     053E                     __end_of_sprintf:
  1179                           
  1180                           	psect	text2
  1181     0709                     __ptext2:	
  1182 ;; *************** function _nrf_setup *****************
  1183 ;; Defined at:
  1184 ;;		line 175 in file "./nrf24l01.h"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  addr            1    wreg     PTR unsigned char 
  1187 ;;		 -> RADIO_ADDR(5), 
  1188 ;;  addr_size       1    0[BANK0 ] unsigned char 
  1189 ;;  payload_size    1    1[BANK0 ] unsigned char 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  addr            1    5[BANK0 ] PTR unsigned char 
  1192 ;;		 -> RADIO_ADDR(5), 
  1193 ;;  data            5    6[BANK0 ] unsigned char [5]
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1203 ;;      Params:         0       2       0       0       0
  1204 ;;      Locals:         0       6       0       0       0
  1205 ;;      Temps:          0       3       0       0       0
  1206 ;;      Totals:         0      11       0       0       0
  1207 ;;Total ram usage:       11 bytes
  1208 ;; Hardware stack levels used: 1
  1209 ;; Hardware stack levels required when called: 4
  1210 ;; This function calls:
  1211 ;;		_arrcpy
  1212 ;;		_nrf_flush_rxtx
  1213 ;;		_nrf_write_register
  1214 ;; This function is called by:
  1215 ;;		_main
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219     0709                     _nrf_setup:	
  1220                           ;psect for function _nrf_setup
  1221                           
  1222                           
  1223                           ;incstack = 0
  1224                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1225                           ;nrf_setup@addr stored from wreg
  1226     0709  1283               	bcf	3,5	;RP0=0, select bank0
  1227     070A  1303               	bcf	3,6	;RP1=0, select bank0
  1228     070B  00A5               	movwf	nrf_setup@addr
  1229     070C                     l1446:
  1230                           
  1231                           ;./nrf24l01.h: 175:     void nrf_setup(uint8_t *addr, uint8_t addr_size, uint8_t payload
      +                          _size);./nrf24l01.h: 176:     {;./nrf24l01.h: 177:         TRISD3 = 0;
  1232     070C  1683               	bsf	3,5	;RP0=1, select bank1
  1233     070D  1303               	bcf	3,6	;RP1=0, select bank1
  1234     070E  1188               	bcf	8,3	;volatile
  1235                           
  1236                           ;./nrf24l01.h: 178:         TRISD2 = 0;
  1237     070F  1108               	bcf	8,2	;volatile
  1238                           
  1239                           ;./nrf24l01.h: 180:         RD3 = 1;
  1240     0710  1283               	bcf	3,5	;RP0=0, select bank0
  1241     0711  1303               	bcf	3,6	;RP1=0, select bank0
  1242     0712  1588               	bsf	8,3	;volatile
  1243                           
  1244                           ;./nrf24l01.h: 181:         RD2 = 0;
  1245     0713  1108               	bcf	8,2	;volatile
  1246     0714                     l1448:
  1247                           
  1248                           ;./nrf24l01.h: 183:         _delay((unsigned long)((100)*(8000000UL/4000.0)));
  1249     0714  3002               	movlw	2
  1250     0715  1283               	bcf	3,5	;RP0=0, select bank0
  1251     0716  1303               	bcf	3,6	;RP1=0, select bank0
  1252     0717  00A4               	movwf	??_nrf_setup+2
  1253     0718  3004               	movlw	4
  1254     0719  00A3               	movwf	??_nrf_setup+1
  1255     071A  30B9               	movlw	185
  1256     071B  00A2               	movwf	??_nrf_setup
  1257     071C                     u777:
  1258     071C  0BA2               	decfsz	??_nrf_setup,f
  1259     071D  2F1C               	goto	u777
  1260     071E  0BA3               	decfsz	??_nrf_setup+1,f
  1261     071F  2F1C               	goto	u777
  1262     0720  0BA4               	decfsz	??_nrf_setup+2,f
  1263     0721  2F1C               	goto	u777
  1264     0722  2F23               	nop2
  1265                           
  1266                           ;./nrf24l01.h: 185:         uint8_t data[5];;./nrf24l01.h: 187:         data[0] = 0x0B;
  1267     0723  300B               	movlw	11
  1268     0724  1283               	bcf	3,5	;RP0=0, select bank0
  1269     0725  1303               	bcf	3,6	;RP1=0, select bank0
  1270     0726  00A6               	movwf	nrf_setup@data
  1271     0727                     l1450:
  1272                           
  1273                           ;./nrf24l01.h: 188:         nrf_write_register(0x00, (uint8_t *)&data, 1);
  1274     0727  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1275     0728  00FA               	movwf	nrf_write_register@data
  1276     0729  01FB               	clrf	nrf_write_register@len
  1277     072A  0AFB               	incf	nrf_write_register@len,f
  1278     072B  3000               	movlw	0
  1279     072C  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1280     0731                     l1452:
  1281                           
  1282                           ;./nrf24l01.h: 189:         data[0] = 0x00;
  1283     0731  1283               	bcf	3,5	;RP0=0, select bank0
  1284     0732  1303               	bcf	3,6	;RP1=0, select bank0
  1285     0733  01A6               	clrf	nrf_setup@data
  1286     0734                     l1454:
  1287                           
  1288                           ;./nrf24l01.h: 190:         nrf_write_register(0x01, (uint8_t *)&data, 1);
  1289     0734  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1290     0735  00FA               	movwf	nrf_write_register@data
  1291     0736  01FB               	clrf	nrf_write_register@len
  1292     0737  0AFB               	incf	nrf_write_register@len,f
  1293     0738  3001               	movlw	1
  1294     0739  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1295     073E                     l1456:
  1296                           
  1297                           ;./nrf24l01.h: 191:         data[0] = 0x01;
  1298     073E  1283               	bcf	3,5	;RP0=0, select bank0
  1299     073F  1303               	bcf	3,6	;RP1=0, select bank0
  1300     0740  01A6               	clrf	nrf_setup@data
  1301     0741  0AA6               	incf	nrf_setup@data,f
  1302     0742                     l1458:
  1303                           
  1304                           ;./nrf24l01.h: 192:         nrf_write_register(0x02, (uint8_t *)&data, 1);
  1305     0742  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1306     0743  00FA               	movwf	nrf_write_register@data
  1307     0744  01FB               	clrf	nrf_write_register@len
  1308     0745  0AFB               	incf	nrf_write_register@len,f
  1309     0746  3002               	movlw	2
  1310     0747  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1311     074C                     l1460:
  1312                           
  1313                           ;./nrf24l01.h: 193:         data[0] = 0b00000011;
  1314     074C  3003               	movlw	3
  1315     074D  1283               	bcf	3,5	;RP0=0, select bank0
  1316     074E  1303               	bcf	3,6	;RP1=0, select bank0
  1317     074F  00A6               	movwf	nrf_setup@data
  1318                           
  1319                           ;./nrf24l01.h: 195:         switch (addr_size){
  1320     0750  2F5A               	goto	l1468
  1321     0751                     l121:	
  1322                           ;./nrf24l01.h: 196:             case 3:
  1323                           
  1324                           
  1325                           ;./nrf24l01.h: 197:                 data[0] = 0x01;
  1326     0751  01A6               	clrf	nrf_setup@data
  1327     0752  0AA6               	incf	nrf_setup@data,f
  1328                           
  1329                           ;./nrf24l01.h: 198:                 break;
  1330     0753  2F6D               	goto	l1470
  1331     0754                     l1462:
  1332                           
  1333                           ;./nrf24l01.h: 200:                 data[0] = 0x02 ;
  1334     0754  3002               	movlw	2
  1335     0755  00A6               	movwf	nrf_setup@data
  1336                           
  1337                           ;./nrf24l01.h: 201:                 break;
  1338     0756  2F6D               	goto	l1470
  1339     0757                     l1464:
  1340                           
  1341                           ;./nrf24l01.h: 203:                 data[0] = 0x03;
  1342     0757  3003               	movlw	3
  1343     0758  00A6               	movwf	nrf_setup@data
  1344                           
  1345                           ;./nrf24l01.h: 204:                 break;
  1346     0759  2F6D               	goto	l1470
  1347     075A                     l1468:
  1348     075A  0820               	movf	nrf_setup@addr_size,w
  1349     075B  00A2               	movwf	??_nrf_setup
  1350     075C  01A3               	clrf	??_nrf_setup+1
  1351                           
  1352                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1353                           ; Switch size 1, requested type "simple"
  1354                           ; Number of cases is 1, Range of values is 0 to 0
  1355                           ; switch strategies available:
  1356                           ; Name         Instructions Cycles
  1357                           ; simple_byte            4     3 (average)
  1358                           ; direct_byte           11     8 (fixed)
  1359                           ; jumptable            260     6 (fixed)
  1360                           ;	Chosen strategy is simple_byte
  1361     075D  0823               	movf	??_nrf_setup+1,w
  1362     075E  3A00               	xorlw	0	; case 0
  1363     075F  1903               	skipnz
  1364     0760  2F62               	goto	l1720
  1365     0761  2F6D               	goto	l1470
  1366     0762                     l1720:
  1367                           
  1368                           ; Switch size 1, requested type "simple"
  1369                           ; Number of cases is 3, Range of values is 3 to 5
  1370                           ; switch strategies available:
  1371                           ; Name         Instructions Cycles
  1372                           ; simple_byte           10     6 (average)
  1373                           ; direct_byte           20    11 (fixed)
  1374                           ; jumptable            263     9 (fixed)
  1375                           ;	Chosen strategy is simple_byte
  1376     0762  0822               	movf	??_nrf_setup,w
  1377     0763  3A03               	xorlw	3	; case 3
  1378     0764  1903               	skipnz
  1379     0765  2F51               	goto	l121
  1380     0766  3A07               	xorlw	7	; case 4
  1381     0767  1903               	skipnz
  1382     0768  2F54               	goto	l1462
  1383     0769  3A01               	xorlw	1	; case 5
  1384     076A  1903               	skipnz
  1385     076B  2F57               	goto	l1464
  1386     076C  2F6D               	goto	l1470
  1387     076D                     l1470:
  1388                           
  1389                           ;./nrf24l01.h: 207:         nrf_write_register(0x03, (uint8_t *)&data, 1);
  1390     076D  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1391     076E  00FA               	movwf	nrf_write_register@data
  1392     076F  01FB               	clrf	nrf_write_register@len
  1393     0770  0AFB               	incf	nrf_write_register@len,f
  1394     0771  3003               	movlw	3
  1395     0772  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1396     0777                     l1472:
  1397                           
  1398                           ;./nrf24l01.h: 208:         data[0] = 0x00;
  1399     0777  1283               	bcf	3,5	;RP0=0, select bank0
  1400     0778  1303               	bcf	3,6	;RP1=0, select bank0
  1401     0779  01A6               	clrf	nrf_setup@data
  1402     077A                     l1474:
  1403                           
  1404                           ;./nrf24l01.h: 209:         nrf_write_register(0x04, (uint8_t *)&data, 1);
  1405     077A  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1406     077B  00FA               	movwf	nrf_write_register@data
  1407     077C  01FB               	clrf	nrf_write_register@len
  1408     077D  0AFB               	incf	nrf_write_register@len,f
  1409     077E  3004               	movlw	4
  1410     077F  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1411     0784                     l1476:
  1412                           
  1413                           ;./nrf24l01.h: 210:         data[0] = 0x01;
  1414     0784  1283               	bcf	3,5	;RP0=0, select bank0
  1415     0785  1303               	bcf	3,6	;RP1=0, select bank0
  1416     0786  01A6               	clrf	nrf_setup@data
  1417     0787  0AA6               	incf	nrf_setup@data,f
  1418     0788                     l1478:
  1419                           
  1420                           ;./nrf24l01.h: 211:         nrf_write_register(0x05, (uint8_t *)&data, 1);
  1421     0788  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1422     0789  00FA               	movwf	nrf_write_register@data
  1423     078A  01FB               	clrf	nrf_write_register@len
  1424     078B  0AFB               	incf	nrf_write_register@len,f
  1425     078C  3005               	movlw	5
  1426     078D  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1427     0792                     l1480:
  1428                           
  1429                           ;./nrf24l01.h: 212:         data[0] = 0x26;
  1430     0792  3026               	movlw	38
  1431     0793  1283               	bcf	3,5	;RP0=0, select bank0
  1432     0794  1303               	bcf	3,6	;RP1=0, select bank0
  1433     0795  00A6               	movwf	nrf_setup@data
  1434     0796                     l1482:
  1435                           
  1436                           ;./nrf24l01.h: 213:         nrf_write_register(0x06, (uint8_t *)&data, 1);
  1437     0796  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1438     0797  00FA               	movwf	nrf_write_register@data
  1439     0798  01FB               	clrf	nrf_write_register@len
  1440     0799  0AFB               	incf	nrf_write_register@len,f
  1441     079A  3006               	movlw	6
  1442     079B  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1443     07A0                     l1484:
  1444                           
  1445                           ;./nrf24l01.h: 214:         data[0] = payload_size;
  1446     07A0  1283               	bcf	3,5	;RP0=0, select bank0
  1447     07A1  1303               	bcf	3,6	;RP1=0, select bank0
  1448     07A2  0821               	movf	nrf_setup@payload_size,w
  1449     07A3  00A6               	movwf	nrf_setup@data
  1450     07A4                     l1486:
  1451                           
  1452                           ;./nrf24l01.h: 215:         nrf_write_register(0x11, (uint8_t *)&data, 1);
  1453     07A4  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1454     07A5  00FA               	movwf	nrf_write_register@data
  1455     07A6  01FB               	clrf	nrf_write_register@len
  1456     07A7  0AFB               	incf	nrf_write_register@len,f
  1457     07A8  3011               	movlw	17
  1458     07A9  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1459     07AE                     l1488:
  1460                           
  1461                           ;./nrf24l01.h: 217:         arrcpy(data, addr, addr_size);
  1462     07AE  1283               	bcf	3,5	;RP0=0, select bank0
  1463     07AF  1303               	bcf	3,6	;RP1=0, select bank0
  1464     07B0  0825               	movf	nrf_setup@addr,w
  1465     07B1  00F0               	movwf	arrcpy@src
  1466     07B2  0820               	movf	nrf_setup@addr_size,w
  1467     07B3  00F1               	movwf	arrcpy@len
  1468     07B4  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1469     07B5  120A  118A  23B7  120A  118A  	fcall	_arrcpy
  1470     07BA                     l1490:
  1471                           
  1472                           ;./nrf24l01.h: 218:         nrf_write_register(0x0A, data, addr_size);
  1473     07BA  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1474     07BB  00FA               	movwf	nrf_write_register@data
  1475     07BC  1283               	bcf	3,5	;RP0=0, select bank0
  1476     07BD  1303               	bcf	3,6	;RP1=0, select bank0
  1477     07BE  0820               	movf	nrf_setup@addr_size,w
  1478     07BF  00FB               	movwf	nrf_write_register@len
  1479     07C0  300A               	movlw	10
  1480     07C1  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1481     07C6                     l1492:
  1482                           
  1483                           ;./nrf24l01.h: 220:         arrcpy(data, addr, addr_size);
  1484     07C6  1283               	bcf	3,5	;RP0=0, select bank0
  1485     07C7  1303               	bcf	3,6	;RP1=0, select bank0
  1486     07C8  0825               	movf	nrf_setup@addr,w
  1487     07C9  00F0               	movwf	arrcpy@src
  1488     07CA  0820               	movf	nrf_setup@addr_size,w
  1489     07CB  00F1               	movwf	arrcpy@len
  1490     07CC  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1491     07CD  120A  118A  23B7  120A  118A  	fcall	_arrcpy
  1492     07D2                     l1494:
  1493                           
  1494                           ;./nrf24l01.h: 221:         nrf_write_register(0x10, data, addr_size);
  1495     07D2  3026               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1496     07D3  00FA               	movwf	nrf_write_register@data
  1497     07D4  1283               	bcf	3,5	;RP0=0, select bank0
  1498     07D5  1303               	bcf	3,6	;RP1=0, select bank0
  1499     07D6  0820               	movf	nrf_setup@addr_size,w
  1500     07D7  00FB               	movwf	nrf_write_register@len
  1501     07D8  3010               	movlw	16
  1502     07D9  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1503     07DE                     l1496:
  1504                           
  1505                           ;./nrf24l01.h: 223:         nrf_flush_rxtx();
  1506     07DE  120A  118A  2383  120A  118A  	fcall	_nrf_flush_rxtx
  1507     07E3                     l125:
  1508     07E3  0008               	return
  1509     07E4                     __end_of_nrf_setup:
  1510                           
  1511                           	psect	text3
  1512     0383                     __ptext3:	
  1513 ;; *************** function _nrf_flush_rxtx *****************
  1514 ;; Defined at:
  1515 ;;		line 165 in file "./nrf24l01.h"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;  data            1   13[COMMON] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1529 ;;      Params:         0       0       0       0       0
  1530 ;;      Locals:         1       0       0       0       0
  1531 ;;      Temps:          0       0       0       0       0
  1532 ;;      Totals:         1       0       0       0       0
  1533 ;;Total ram usage:        1 bytes
  1534 ;; Hardware stack levels used: 1
  1535 ;; Hardware stack levels required when called: 3
  1536 ;; This function calls:
  1537 ;;		_nrf_write_command
  1538 ;;		_nrf_write_register
  1539 ;; This function is called by:
  1540 ;;		_nrf_setup
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544     0383                     _nrf_flush_rxtx:	
  1545                           ;psect for function _nrf_flush_rxtx
  1546                           
  1547     0383                     l1358:	
  1548                           ;incstack = 0
  1549                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1550                           
  1551                           
  1552                           ;./nrf24l01.h: 167:         uint8_t data = 0b01110000;
  1553     0383  3070               	movlw	112
  1554     0384  00FD               	movwf	nrf_flush_rxtx@data
  1555     0385                     l1360:
  1556                           
  1557                           ;./nrf24l01.h: 168:         nrf_write_register(0x07, &data, 1);
  1558     0385  307D               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1559     0386  00FA               	movwf	nrf_write_register@data
  1560     0387  01FB               	clrf	nrf_write_register@len
  1561     0388  0AFB               	incf	nrf_write_register@len,f
  1562     0389  3007               	movlw	7
  1563     038A  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1564     038F                     l1362:
  1565                           
  1566                           ;./nrf24l01.h: 169:         nrf_write_command(0b11100001);
  1567     038F  30E1               	movlw	225
  1568     0390  120A  118A  2360  120A  118A  	fcall	_nrf_write_command
  1569     0395                     l1364:
  1570                           
  1571                           ;./nrf24l01.h: 170:         nrf_write_command(0b11100010);
  1572     0395  30E2               	movlw	226
  1573     0396  120A  118A  2360  120A  118A  	fcall	_nrf_write_command
  1574     039B                     l117:
  1575     039B  0008               	return
  1576     039C                     __end_of_nrf_flush_rxtx:
  1577                           
  1578                           	psect	text4
  1579     03B7                     __ptext4:	
  1580 ;; *************** function _arrcpy *****************
  1581 ;; Defined at:
  1582 ;;		line 97 in file "./nrf24l01.h"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  dst             1    wreg     PTR unsigned char 
  1585 ;;		 -> nrf_setup@data(5), 
  1586 ;;  src             1    0[COMMON] PTR unsigned char 
  1587 ;;		 -> RADIO_ADDR(5), 
  1588 ;;  len             1    1[COMMON] unsigned char 
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  dst             1    5[COMMON] PTR unsigned char 
  1591 ;;		 -> nrf_setup@data(5), 
  1592 ;;  i               1    6[COMMON] unsigned char 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  1    wreg      void 
  1595 ;; Registers used:
  1596 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1602 ;;      Params:         2       0       0       0       0
  1603 ;;      Locals:         2       0       0       0       0
  1604 ;;      Temps:          3       0       0       0       0
  1605 ;;      Totals:         7       0       0       0       0
  1606 ;;Total ram usage:        7 bytes
  1607 ;; Hardware stack levels used: 1
  1608 ;; This function calls:
  1609 ;;		Nothing
  1610 ;; This function is called by:
  1611 ;;		_nrf_setup
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615     03B7                     _arrcpy:	
  1616                           ;psect for function _arrcpy
  1617                           
  1618                           
  1619                           ;incstack = 0
  1620                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0]
  1621                           ;arrcpy@dst stored from wreg
  1622     03B7  00F5               	movwf	arrcpy@dst
  1623     03B8                     l1340:
  1624                           
  1625                           ;./nrf24l01.h: 97:     void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);./nrf24l01.h
      +                          : 98:     {;./nrf24l01.h: 99:         for (uint8_t i = 0; i < len; i++)
  1626     03B8  01F6               	clrf	arrcpy@i
  1627     03B9  2BCD               	goto	l1346
  1628     03BA                     l1342:
  1629                           
  1630                           ;./nrf24l01.h: 100:         {;./nrf24l01.h: 101:             dst[i] = src[i];
  1631     03BA  0876               	movf	arrcpy@i,w
  1632     03BB  0770               	addwf	arrcpy@src,w
  1633     03BC  00F2               	movwf	??_arrcpy
  1634     03BD  0872               	movf	??_arrcpy,w
  1635     03BE  0084               	movwf	4
  1636     03BF  1383               	bcf	3,7	;select IRP bank0
  1637     03C0  0800               	movf	0,w
  1638     03C1  00F3               	movwf	??_arrcpy+1
  1639     03C2  0876               	movf	arrcpy@i,w
  1640     03C3  0775               	addwf	arrcpy@dst,w
  1641     03C4  00F4               	movwf	??_arrcpy+2
  1642     03C5  0874               	movf	??_arrcpy+2,w
  1643     03C6  0084               	movwf	4
  1644     03C7  0873               	movf	??_arrcpy+1,w
  1645     03C8  0080               	movwf	0
  1646     03C9                     l1344:
  1647                           
  1648                           ;./nrf24l01.h: 102:         }
  1649     03C9  3001               	movlw	1
  1650     03CA  00F2               	movwf	??_arrcpy
  1651     03CB  0872               	movf	??_arrcpy,w
  1652     03CC  07F6               	addwf	arrcpy@i,f
  1653     03CD                     l1346:
  1654     03CD  0871               	movf	arrcpy@len,w
  1655     03CE  0276               	subwf	arrcpy@i,w
  1656     03CF  1C03               	skipc
  1657     03D0  2BD2               	goto	u441
  1658     03D1  2BD3               	goto	u440
  1659     03D2                     u441:
  1660     03D2  2BBA               	goto	l1342
  1661     03D3                     u440:
  1662     03D3                     l90:
  1663     03D3  0008               	return
  1664     03D4                     __end_of_arrcpy:
  1665                           
  1666                           	psect	text5
  1667     0448                     __ptext5:	
  1668 ;; *************** function _nrf_send *****************
  1669 ;; Defined at:
  1670 ;;		line 266 in file "./nrf24l01.h"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  data            1    wreg     PTR unsigned char 
  1673 ;;		 -> main@data(3), 
  1674 ;;  len             1    3[BANK0 ] unsigned char 
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;  data            1    5[BANK0 ] PTR unsigned char 
  1677 ;;		 -> main@data(3), 
  1678 ;;  clear           1    6[BANK0 ] unsigned char 
  1679 ;;  stat            1    4[BANK0 ] unsigned char 
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  1    wreg      void 
  1682 ;; Registers used:
  1683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1689 ;;      Params:         0       1       0       0       0
  1690 ;;      Locals:         0       3       0       0       0
  1691 ;;      Temps:          0       0       0       0       0
  1692 ;;      Totals:         0       4       0       0       0
  1693 ;;Total ram usage:        4 bytes
  1694 ;; Hardware stack levels used: 1
  1695 ;; Hardware stack levels required when called: 4
  1696 ;; This function calls:
  1697 ;;		_nrf_set_tx_mode
  1698 ;;		_nrf_write_command
  1699 ;;		_nrf_write_payload
  1700 ;;		_nrf_write_register
  1701 ;; This function is called by:
  1702 ;;		_main
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706     0448                     _nrf_send:	
  1707                           ;psect for function _nrf_send
  1708                           
  1709                           
  1710                           ;incstack = 0
  1711                           ; Regs used in _nrf_send: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1712                           ;nrf_send@data stored from wreg
  1713     0448  1283               	bcf	3,5	;RP0=0, select bank0
  1714     0449  1303               	bcf	3,6	;RP1=0, select bank0
  1715     044A  00A5               	movwf	nrf_send@data
  1716     044B                     l1502:
  1717                           
  1718                           ;./nrf24l01.h: 266:     void nrf_send(uint8_t *data, uint8_t len);./nrf24l01.h: 267:    
      +                           {;./nrf24l01.h: 268:         nrf_set_tx_mode();
  1719     044B  120A  118A  23D4  120A  118A  	fcall	_nrf_set_tx_mode
  1720                           
  1721                           ;./nrf24l01.h: 269:         nrf_write_payload(data, len);
  1722     0450  1283               	bcf	3,5	;RP0=0, select bank0
  1723     0451  1303               	bcf	3,6	;RP1=0, select bank0
  1724     0452  0823               	movf	nrf_send@len,w
  1725     0453  00FD               	movwf	nrf_write_payload@len
  1726     0454  0825               	movf	nrf_send@data,w
  1727     0455  120A  118A  239C  120A  118A  	fcall	_nrf_write_payload
  1728     045A                     l1504:
  1729                           
  1730                           ;./nrf24l01.h: 274:         {;./nrf24l01.h: 275:             stat = nrf_write_command(0b
      +                          11111111);
  1731     045A  30FF               	movlw	255
  1732     045B  120A  118A  2360  120A  118A  	fcall	_nrf_write_command
  1733     0460  1283               	bcf	3,5	;RP0=0, select bank0
  1734     0461  1303               	bcf	3,6	;RP1=0, select bank0
  1735     0462  00A4               	movwf	nrf_send@stat
  1736     0463                     l1506:
  1737                           
  1738                           ;./nrf24l01.h: 276:         } while ((stat & 0x20) == 0);
  1739     0463  1EA4               	btfss	nrf_send@stat,5
  1740     0464  2C66               	goto	u621
  1741     0465  2C67               	goto	u620
  1742     0466                     u621:
  1743     0466  2C5A               	goto	l1504
  1744     0467                     u620:
  1745     0467                     l1508:
  1746                           
  1747                           ;./nrf24l01.h: 279:         uint8_t clear = 0x20;
  1748     0467  3020               	movlw	32
  1749     0468  00A6               	movwf	nrf_send@clear
  1750     0469                     l1510:
  1751                           
  1752                           ;./nrf24l01.h: 280:         nrf_write_register(0x07, &clear, 1);
  1753     0469  3026               	movlw	(low (nrf_send@clear| 0))& (0+255)
  1754     046A  00FA               	movwf	nrf_write_register@data
  1755     046B  01FB               	clrf	nrf_write_register@len
  1756     046C  0AFB               	incf	nrf_write_register@len,f
  1757     046D  3007               	movlw	7
  1758     046E  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1759     0473                     l141:
  1760     0473  0008               	return
  1761     0474                     __end_of_nrf_send:
  1762                           
  1763                           	psect	text6
  1764     039C                     __ptext6:	
  1765 ;; *************** function _nrf_write_payload *****************
  1766 ;; Defined at:
  1767 ;;		line 143 in file "./nrf24l01.h"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  data            1    wreg     PTR unsigned char 
  1770 ;;		 -> main@data(3), 
  1771 ;;  len             1   13[COMMON] unsigned char 
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  data            1    1[BANK0 ] PTR unsigned char 
  1774 ;;		 -> main@data(3), 
  1775 ;;  status          1    0        unsigned char 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      unsigned char 
  1778 ;; Registers used:
  1779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1785 ;;      Params:         1       0       0       0       0
  1786 ;;      Locals:         0       1       0       0       0
  1787 ;;      Temps:          0       1       0       0       0
  1788 ;;      Totals:         1       2       0       0       0
  1789 ;;Total ram usage:        3 bytes
  1790 ;; Hardware stack levels used: 1
  1791 ;; Hardware stack levels required when called: 3
  1792 ;; This function calls:
  1793 ;;		_nrf_write_register
  1794 ;; This function is called by:
  1795 ;;		_nrf_send
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799     039C                     _nrf_write_payload:	
  1800                           ;psect for function _nrf_write_payload
  1801                           
  1802                           
  1803                           ;incstack = 0
  1804                           ; Regs used in _nrf_write_payload: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1805                           ;nrf_write_payload@data stored from wreg
  1806     039C  1283               	bcf	3,5	;RP0=0, select bank0
  1807     039D  1303               	bcf	3,6	;RP1=0, select bank0
  1808     039E  00A1               	movwf	nrf_write_payload@data
  1809     039F                     l1348:
  1810     039F  0821               	movf	nrf_write_payload@data,w
  1811     03A0  00FA               	movwf	nrf_write_register@data
  1812     03A1  087D               	movf	nrf_write_payload@len,w
  1813     03A2  00FB               	movwf	nrf_write_register@len
  1814     03A3  30A0               	movlw	160
  1815     03A4  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1816     03A9                     l1350:
  1817                           
  1818                           ;./nrf24l01.h: 146:         RD2 = 1;
  1819     03A9  1283               	bcf	3,5	;RP0=0, select bank0
  1820     03AA  1303               	bcf	3,6	;RP1=0, select bank0
  1821     03AB  1508               	bsf	8,2	;volatile
  1822     03AC                     l1352:
  1823                           
  1824                           ;./nrf24l01.h: 147:         _delay((unsigned long)((20)*(8000000UL/4000000.0)));
  1825     03AC  300C               	movlw	12
  1826     03AD  1283               	bcf	3,5	;RP0=0, select bank0
  1827     03AE  1303               	bcf	3,6	;RP1=0, select bank0
  1828     03AF  00A0               	movwf	??_nrf_write_payload
  1829     03B0                     u787:
  1830     03B0  0BA0               	decfsz	??_nrf_write_payload,f
  1831     03B1  2BB0               	goto	u787
  1832     03B2  0000               	nop
  1833     03B3                     l1354:
  1834                           
  1835                           ;./nrf24l01.h: 148:         RD2 = 0;
  1836     03B3  1283               	bcf	3,5	;RP0=0, select bank0
  1837     03B4  1303               	bcf	3,6	;RP1=0, select bank0
  1838     03B5  1108               	bcf	8,2	;volatile
  1839     03B6                     l111:
  1840     03B6  0008               	return
  1841     03B7                     __end_of_nrf_write_payload:
  1842                           
  1843                           	psect	text7
  1844     0360                     __ptext7:	
  1845 ;; *************** function _nrf_write_command *****************
  1846 ;; Defined at:
  1847 ;;		line 153 in file "./nrf24l01.h"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  command         1    wreg     unsigned char 
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  command         1    4[COMMON] unsigned char 
  1852 ;;  status          1    5[COMMON] unsigned char 
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  1    wreg      unsigned char 
  1855 ;; Registers used:
  1856 ;;		wreg, status,2, status,0, pclath, cstack
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1862 ;;      Params:         0       0       0       0       0
  1863 ;;      Locals:         2       0       0       0       0
  1864 ;;      Temps:          0       0       0       0       0
  1865 ;;      Totals:         2       0       0       0       0
  1866 ;;Total ram usage:        2 bytes
  1867 ;; Hardware stack levels used: 1
  1868 ;; Hardware stack levels required when called: 1
  1869 ;; This function calls:
  1870 ;;		_SPI_write
  1871 ;; This function is called by:
  1872 ;;		_nrf_flush_rxtx
  1873 ;;		_nrf_send
  1874 ;;		_nrf_data_available
  1875 ;;		_nrf_read
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879     0360                     _nrf_write_command:	
  1880                           ;psect for function _nrf_write_command
  1881                           
  1882                           
  1883                           ;incstack = 0
  1884                           ; Regs used in _nrf_write_command: [wreg+status,2+status,0+pclath+cstack]
  1885                           ;nrf_write_command@command stored from wreg
  1886     0360  00F4               	movwf	nrf_write_command@command
  1887     0361                     l1326:
  1888                           
  1889                           ;./nrf24l01.h: 153:     uint8_t nrf_write_command(uint8_t command);./nrf24l01.h: 154:   
      +                            {;./nrf24l01.h: 155:         RD3 = 0;
  1890     0361  1283               	bcf	3,5	;RP0=0, select bank0
  1891     0362  1303               	bcf	3,6	;RP1=0, select bank0
  1892     0363  1188               	bcf	8,3	;volatile
  1893     0364                     l1328:
  1894                           
  1895                           ;./nrf24l01.h: 156:         uint8_t status = SPI_write(command);
  1896     0364  0874               	movf	nrf_write_command@command,w
  1897     0365  120A  118A  23F8  120A  118A  	fcall	_SPI_write
  1898     036A  00F5               	movwf	nrf_write_command@status
  1899     036B                     l1330:
  1900                           
  1901                           ;./nrf24l01.h: 157:         RD3 = 1;
  1902     036B  1283               	bcf	3,5	;RP0=0, select bank0
  1903     036C  1303               	bcf	3,6	;RP1=0, select bank0
  1904     036D  1588               	bsf	8,3	;volatile
  1905     036E                     l1332:
  1906                           
  1907                           ;./nrf24l01.h: 158:         return status;
  1908     036E  0875               	movf	nrf_write_command@status,w
  1909     036F                     l114:
  1910     036F  0008               	return
  1911     0370                     __end_of_nrf_write_command:
  1912                           
  1913                           	psect	text8
  1914     03D4                     __ptext8:	
  1915 ;; *************** function _nrf_set_tx_mode *****************
  1916 ;; Defined at:
  1917 ;;		line 242 in file "./nrf24l01.h"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;		None
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  config          1    2[BANK0 ] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1931 ;;      Params:         0       0       0       0       0
  1932 ;;      Locals:         0       1       0       0       0
  1933 ;;      Temps:          0       1       0       0       0
  1934 ;;      Totals:         0       2       0       0       0
  1935 ;;Total ram usage:        2 bytes
  1936 ;; Hardware stack levels used: 1
  1937 ;; Hardware stack levels required when called: 3
  1938 ;; This function calls:
  1939 ;;		_nrf_read_register
  1940 ;;		_nrf_write_register
  1941 ;; This function is called by:
  1942 ;;		_nrf_send
  1943 ;;		_main
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947     03D4                     _nrf_set_tx_mode:	
  1948                           ;psect for function _nrf_set_tx_mode
  1949                           
  1950     03D4                     l1366:	
  1951                           ;incstack = 0
  1952                           ; Regs used in _nrf_set_tx_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1953                           
  1954                           
  1955                           ;./nrf24l01.h: 244:         uint8_t config;;./nrf24l01.h: 245:         nrf_read_register
      +                          (0x00, &config, 1);
  1956     03D4  3022               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1957     03D5  00FC               	movwf	nrf_read_register@data
  1958     03D6  01FD               	clrf	nrf_read_register@len
  1959     03D7  0AFD               	incf	nrf_read_register@len,f
  1960     03D8  3000               	movlw	0
  1961     03D9  120A  118A  2352  120A  118A  	fcall	_nrf_read_register
  1962     03DE                     l1368:
  1963                           
  1964                           ;./nrf24l01.h: 247:         RD2 = 0;
  1965     03DE  1283               	bcf	3,5	;RP0=0, select bank0
  1966     03DF  1303               	bcf	3,6	;RP1=0, select bank0
  1967     03E0  1108               	bcf	8,2	;volatile
  1968     03E1                     l1370:
  1969                           
  1970                           ;./nrf24l01.h: 249:         if (!(config & 0x01))
  1971     03E1  1822               	btfsc	nrf_set_tx_mode@config,0
  1972     03E2  2BE4               	goto	u451
  1973     03E3  2BE5               	goto	u450
  1974     03E4                     u451:
  1975     03E4  2BE6               	goto	l1374
  1976     03E5                     u450:
  1977     03E5  2BF7               	goto	l133
  1978     03E6                     l1374:
  1979                           
  1980                           ;./nrf24l01.h: 252:         config &= ~0x01;
  1981     03E6  30FE               	movlw	254
  1982     03E7  00A1               	movwf	??_nrf_set_tx_mode
  1983     03E8  0821               	movf	??_nrf_set_tx_mode,w
  1984     03E9  05A2               	andwf	nrf_set_tx_mode@config,f
  1985     03EA                     l1376:
  1986                           
  1987                           ;./nrf24l01.h: 253:         nrf_write_register(0x00, &config, 1);
  1988     03EA  3022               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1989     03EB  00FA               	movwf	nrf_write_register@data
  1990     03EC  01FB               	clrf	nrf_write_register@len
  1991     03ED  0AFB               	incf	nrf_write_register@len,f
  1992     03EE  3000               	movlw	0
  1993     03EF  120A  118A  2345  120A  118A  	fcall	_nrf_write_register
  1994     03F4                     l1378:
  1995                           
  1996                           ;./nrf24l01.h: 255:         RD2 = 0;
  1997     03F4  1283               	bcf	3,5	;RP0=0, select bank0
  1998     03F5  1303               	bcf	3,6	;RP1=0, select bank0
  1999     03F6  1108               	bcf	8,2	;volatile
  2000     03F7                     l133:
  2001     03F7  0008               	return
  2002     03F8                     __end_of_nrf_set_tx_mode:
  2003                           
  2004                           	psect	text9
  2005     0345                     __ptext9:	
  2006 ;; *************** function _nrf_write_register *****************
  2007 ;; Defined at:
  2008 ;;		line 131 in file "./nrf24l01.h"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  reg             1    wreg     unsigned char 
  2011 ;;  data            1   10[COMMON] PTR unsigned char 
  2012 ;;		 -> main@data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  2013 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  2014 ;;  len             1   11[COMMON] unsigned char 
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  reg             1   12[COMMON] unsigned char 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      unsigned char 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2026 ;;      Params:         2       0       0       0       0
  2027 ;;      Locals:         1       0       0       0       0
  2028 ;;      Temps:          0       0       0       0       0
  2029 ;;      Totals:         3       0       0       0       0
  2030 ;;Total ram usage:        3 bytes
  2031 ;; Hardware stack levels used: 1
  2032 ;; Hardware stack levels required when called: 2
  2033 ;; This function calls:
  2034 ;;		_nrf_command_with_data
  2035 ;; This function is called by:
  2036 ;;		_nrf_write_payload
  2037 ;;		_nrf_flush_rxtx
  2038 ;;		_nrf_setup
  2039 ;;		_nrf_set_tx_mode
  2040 ;;		_nrf_send
  2041 ;;		_nrf_set_rx_mode
  2042 ;;		_nrf_read
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046     0345                     _nrf_write_register:	
  2047                           ;psect for function _nrf_write_register
  2048                           
  2049                           
  2050                           ;incstack = 0
  2051                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2052                           ;nrf_write_register@reg stored from wreg
  2053     0345  00FC               	movwf	nrf_write_register@reg
  2054     0346                     l1318:
  2055                           
  2056                           ;./nrf24l01.h: 131:     uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t l
      +                          en);./nrf24l01.h: 132:     {;./nrf24l01.h: 133:         return nrf_command_with_data(reg
      +                           | 0b00100000, data, len);
  2057     0346  087A               	movf	nrf_write_register@data,w
  2058     0347  00F4               	movwf	nrf_command_with_data@data
  2059     0348  087B               	movf	nrf_write_register@len,w
  2060     0349  00F5               	movwf	nrf_command_with_data@len
  2061     034A  087C               	movf	nrf_write_register@reg,w
  2062     034B  3820               	iorlw	32
  2063     034C  120A  118A  2420  120A  118A  	fcall	_nrf_command_with_data
  2064     0351                     l105:
  2065     0351  0008               	return
  2066     0352                     __end_of_nrf_write_register:
  2067                           
  2068                           	psect	text10
  2069     0420                     __ptext10:	
  2070 ;; *************** function _nrf_command_with_data *****************
  2071 ;; Defined at:
  2072 ;;		line 124 in file "./nrf24l01.h"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  command         1    wreg     unsigned char 
  2075 ;;  data            1    4[COMMON] PTR unsigned char 
  2076 ;;		 -> main@data(3), nrf_read@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  2077 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  2078 ;;  len             1    5[COMMON] unsigned char 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  command         1    7[COMMON] unsigned char 
  2081 ;;  i               1    9[COMMON] unsigned char 
  2082 ;;  status          1    8[COMMON] unsigned char 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      unsigned char 
  2085 ;; Registers used:
  2086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2092 ;;      Params:         2       0       0       0       0
  2093 ;;      Locals:         3       0       0       0       0
  2094 ;;      Temps:          1       0       0       0       0
  2095 ;;      Totals:         6       0       0       0       0
  2096 ;;Total ram usage:        6 bytes
  2097 ;; Hardware stack levels used: 1
  2098 ;; Hardware stack levels required when called: 1
  2099 ;; This function calls:
  2100 ;;		_SPI_write
  2101 ;; This function is called by:
  2102 ;;		_nrf_write_register
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106     0420                     _nrf_command_with_data:	
  2107                           ;psect for function _nrf_command_with_data
  2108                           
  2109                           
  2110                           ;incstack = 0
  2111                           ; Regs used in _nrf_command_with_data: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2112                           ;nrf_command_with_data@command stored from wreg
  2113     0420  00F7               	movwf	nrf_command_with_data@command
  2114     0421                     l1302:
  2115                           
  2116                           ;./nrf24l01.h: 124:     uint8_t nrf_command_with_data(uint8_t command, uint8_t *data, ui
      +                          nt8_t len);./nrf24l01.h: 125:     {;./nrf24l01.h: 126:         RD3 = 0; uint8_t status =
      +                           SPI_write(command); for (uint8_t i = 0; i < len; i++) { SPI_write(data[i]); } RD3 = 1; 
      +                          return status;
  2117     0421  1283               	bcf	3,5	;RP0=0, select bank0
  2118     0422  1303               	bcf	3,6	;RP1=0, select bank0
  2119     0423  1188               	bcf	8,3	;volatile
  2120     0424                     l1304:
  2121     0424  0877               	movf	nrf_command_with_data@command,w
  2122     0425  120A  118A  23F8  120A  118A  	fcall	_SPI_write
  2123     042A  00F8               	movwf	nrf_command_with_data@status
  2124     042B                     l1306:
  2125     042B  01F9               	clrf	nrf_command_with_data@i
  2126     042C  2C3D               	goto	l1312
  2127     042D                     l1308:
  2128     042D  0879               	movf	nrf_command_with_data@i,w
  2129     042E  0774               	addwf	nrf_command_with_data@data,w
  2130     042F  00F6               	movwf	??_nrf_command_with_data
  2131     0430  0876               	movf	??_nrf_command_with_data,w
  2132     0431  0084               	movwf	4
  2133     0432  1383               	bcf	3,7	;select IRP bank0
  2134     0433  0800               	movf	0,w
  2135     0434  120A  118A  23F8  120A  118A  	fcall	_SPI_write
  2136     0439                     l1310:
  2137     0439  3001               	movlw	1
  2138     043A  00F6               	movwf	??_nrf_command_with_data
  2139     043B  0876               	movf	??_nrf_command_with_data,w
  2140     043C  07F9               	addwf	nrf_command_with_data@i,f
  2141     043D                     l1312:
  2142     043D  0875               	movf	nrf_command_with_data@len,w
  2143     043E  0279               	subwf	nrf_command_with_data@i,w
  2144     043F  1C03               	skipc
  2145     0440  2C42               	goto	u421
  2146     0441  2C43               	goto	u420
  2147     0442                     u421:
  2148     0442  2C2D               	goto	l1308
  2149     0443                     u420:
  2150     0443                     l101:
  2151     0443  1283               	bcf	3,5	;RP0=0, select bank0
  2152     0444  1303               	bcf	3,6	;RP1=0, select bank0
  2153     0445  1588               	bsf	8,3	;volatile
  2154     0446                     l1314:
  2155     0446  0878               	movf	nrf_command_with_data@status,w
  2156     0447                     l102:
  2157     0447  0008               	return
  2158     0448                     __end_of_nrf_command_with_data:
  2159                           
  2160                           	psect	text11
  2161     0352                     __ptext11:	
  2162 ;; *************** function _nrf_read_register *****************
  2163 ;; Defined at:
  2164 ;;		line 137 in file "./nrf24l01.h"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  reg             1    wreg     unsigned char 
  2167 ;;  data            1   12[COMMON] PTR unsigned char 
  2168 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  2169 ;;  len             1   13[COMMON] unsigned char 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  reg             1    0[BANK0 ] unsigned char 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      unsigned char 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2181 ;;      Params:         2       0       0       0       0
  2182 ;;      Locals:         0       1       0       0       0
  2183 ;;      Temps:          0       0       0       0       0
  2184 ;;      Totals:         2       1       0       0       0
  2185 ;;Total ram usage:        3 bytes
  2186 ;; Hardware stack levels used: 1
  2187 ;; Hardware stack levels required when called: 2
  2188 ;; This function calls:
  2189 ;;		_nrf_command_with_data_overwrite
  2190 ;; This function is called by:
  2191 ;;		_nrf_set_tx_mode
  2192 ;;		_nrf_set_rx_mode
  2193 ;;		_nrf_read
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197     0352                     _nrf_read_register:	
  2198                           ;psect for function _nrf_read_register
  2199                           
  2200                           
  2201                           ;incstack = 0
  2202                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2203                           ;nrf_read_register@reg stored from wreg
  2204     0352  1283               	bcf	3,5	;RP0=0, select bank0
  2205     0353  1303               	bcf	3,6	;RP1=0, select bank0
  2206     0354  00A0               	movwf	nrf_read_register@reg
  2207     0355                     l1322:
  2208                           
  2209                           ;./nrf24l01.h: 137:     uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t le
      +                          n);./nrf24l01.h: 138:     {;./nrf24l01.h: 139:         return nrf_command_with_data_over
      +                          write(reg | 0b00000000, data, len);
  2210     0355  087C               	movf	nrf_read_register@data,w
  2211     0356  00F4               	movwf	nrf_command_with_data_overwrite@data
  2212     0357  087D               	movf	nrf_read_register@len,w
  2213     0358  00F5               	movwf	nrf_command_with_data_overwrite@len
  2214     0359  0820               	movf	nrf_read_register@reg,w
  2215     035A  120A  118A  2474  120A  118A  	fcall	_nrf_command_with_data_overwrite
  2216     035F                     l108:
  2217     035F  0008               	return
  2218     0360                     __end_of_nrf_read_register:
  2219                           
  2220                           	psect	text12
  2221     0474                     __ptext12:	
  2222 ;; *************** function _nrf_command_with_data_overwrite *****************
  2223 ;; Defined at:
  2224 ;;		line 118 in file "./nrf24l01.h"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  command         1    wreg     unsigned char 
  2227 ;;  data            1    4[COMMON] PTR unsigned char 
  2228 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  2229 ;;  len             1    5[COMMON] unsigned char 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  command         1    9[COMMON] unsigned char 
  2232 ;;  i               1   11[COMMON] unsigned char 
  2233 ;;  status          1   10[COMMON] unsigned char 
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      unsigned char 
  2236 ;; Registers used:
  2237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2243 ;;      Params:         2       0       0       0       0
  2244 ;;      Locals:         3       0       0       0       0
  2245 ;;      Temps:          3       0       0       0       0
  2246 ;;      Totals:         8       0       0       0       0
  2247 ;;Total ram usage:        8 bytes
  2248 ;; Hardware stack levels used: 1
  2249 ;; Hardware stack levels required when called: 1
  2250 ;; This function calls:
  2251 ;;		_SPI_write
  2252 ;; This function is called by:
  2253 ;;		_nrf_read_register
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257     0474                     _nrf_command_with_data_overwrite:	
  2258                           ;psect for function _nrf_command_with_data_overwrite
  2259                           
  2260                           
  2261                           ;incstack = 0
  2262                           ; Regs used in _nrf_command_with_data_overwrite: [wreg-fsr0h+status,2+status,0+pclath+cs
      +                          tack]
  2263                           ;nrf_command_with_data_overwrite@command stored from wreg
  2264     0474  00F9               	movwf	nrf_command_with_data_overwrite@command
  2265     0475                     l1286:
  2266                           
  2267                           ;./nrf24l01.h: 118:     uint8_t nrf_command_with_data_overwrite(uint8_t command, uint8_t
      +                           *data, uint8_t len);./nrf24l01.h: 119:     {;./nrf24l01.h: 120:         RD3 = 0; uint8_
      +                          t status = SPI_write(command); for (uint8_t i = 0; i < len; i++) { data[i] = SPI_write(d
      +                          ata[i]); } RD3 = 1; return status;
  2268     0475  1283               	bcf	3,5	;RP0=0, select bank0
  2269     0476  1303               	bcf	3,6	;RP1=0, select bank0
  2270     0477  1188               	bcf	8,3	;volatile
  2271     0478                     l1288:
  2272     0478  0879               	movf	nrf_command_with_data_overwrite@command,w
  2273     0479  120A  118A  23F8  120A  118A  	fcall	_SPI_write
  2274     047E  00FA               	movwf	nrf_command_with_data_overwrite@status
  2275     047F                     l1290:
  2276     047F  01FB               	clrf	nrf_command_with_data_overwrite@i
  2277     0480  2C9A               	goto	l1296
  2278     0481                     l1292:
  2279     0481  087B               	movf	nrf_command_with_data_overwrite@i,w
  2280     0482  0774               	addwf	nrf_command_with_data_overwrite@data,w
  2281     0483  00F6               	movwf	??_nrf_command_with_data_overwrite
  2282     0484  0876               	movf	??_nrf_command_with_data_overwrite,w
  2283     0485  0084               	movwf	4
  2284     0486  1383               	bcf	3,7	;select IRP bank0
  2285     0487  0800               	movf	0,w
  2286     0488  120A  118A  23F8  120A  118A  	fcall	_SPI_write
  2287     048D  00F7               	movwf	??_nrf_command_with_data_overwrite+1
  2288     048E  087B               	movf	nrf_command_with_data_overwrite@i,w
  2289     048F  0774               	addwf	nrf_command_with_data_overwrite@data,w
  2290     0490  00F8               	movwf	??_nrf_command_with_data_overwrite+2
  2291     0491  0878               	movf	??_nrf_command_with_data_overwrite+2,w
  2292     0492  0084               	movwf	4
  2293     0493  0877               	movf	??_nrf_command_with_data_overwrite+1,w
  2294     0494  1383               	bcf	3,7	;select IRP bank0
  2295     0495  0080               	movwf	0
  2296     0496                     l1294:
  2297     0496  3001               	movlw	1
  2298     0497  00F6               	movwf	??_nrf_command_with_data_overwrite
  2299     0498  0876               	movf	??_nrf_command_with_data_overwrite,w
  2300     0499  07FB               	addwf	nrf_command_with_data_overwrite@i,f
  2301     049A                     l1296:
  2302     049A  0875               	movf	nrf_command_with_data_overwrite@len,w
  2303     049B  027B               	subwf	nrf_command_with_data_overwrite@i,w
  2304     049C  1C03               	skipc
  2305     049D  2C9F               	goto	u411
  2306     049E  2CA0               	goto	u410
  2307     049F                     u411:
  2308     049F  2C81               	goto	l1292
  2309     04A0                     u410:
  2310     04A0                     l95:
  2311     04A0  1283               	bcf	3,5	;RP0=0, select bank0
  2312     04A1  1303               	bcf	3,6	;RP1=0, select bank0
  2313     04A2  1588               	bsf	8,3	;volatile
  2314     04A3                     l1298:
  2315     04A3  087A               	movf	nrf_command_with_data_overwrite@status,w
  2316     04A4                     l96:
  2317     04A4  0008               	return
  2318     04A5                     __end_of_nrf_command_with_data_overwrite:
  2319                           
  2320                           	psect	text13
  2321     03F8                     __ptext13:	
  2322 ;; *************** function _SPI_write *****************
  2323 ;; Defined at:
  2324 ;;		line 39 in file "./softwarespi.h"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  data            1    wreg     unsigned char 
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;  data            1    1[COMMON] unsigned char 
  2329 ;;  i               1    3[COMMON] unsigned char 
  2330 ;;  read            1    2[COMMON] unsigned char 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      unsigned char 
  2333 ;; Registers used:
  2334 ;;		wreg, status,2, status,0
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2340 ;;      Params:         0       0       0       0       0
  2341 ;;      Locals:         3       0       0       0       0
  2342 ;;      Temps:          1       0       0       0       0
  2343 ;;      Totals:         4       0       0       0       0
  2344 ;;Total ram usage:        4 bytes
  2345 ;; Hardware stack levels used: 1
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_nrf_command_with_data_overwrite
  2350 ;;		_nrf_command_with_data
  2351 ;;		_nrf_write_command
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355     03F8                     _SPI_write:	
  2356                           ;psect for function _SPI_write
  2357                           
  2358                           
  2359                           ;incstack = 0
  2360                           ; Regs used in _SPI_write: [wreg+status,2+status,0]
  2361                           ;SPI_write@data stored from wreg
  2362     03F8  00F1               	movwf	SPI_write@data
  2363     03F9                     l1266:
  2364                           
  2365                           ;./softwarespi.h: 40:         uint8_t read = 0;
  2366     03F9  01F2               	clrf	SPI_write@read
  2367                           
  2368                           ;./softwarespi.h: 43:         for(uint8_t i = 0; i < 8; i++){
  2369     03FA  01F3               	clrf	SPI_write@i
  2370     03FB                     l56:
  2371                           
  2372                           ;./softwarespi.h: 44:             if(data & 0x80){
  2373     03FB  1FF1               	btfss	SPI_write@data,7
  2374     03FC  2BFE               	goto	u391
  2375     03FD  2BFF               	goto	u390
  2376     03FE                     u391:
  2377     03FE  2C03               	goto	l58
  2378     03FF                     u390:
  2379     03FF                     l1272:
  2380                           
  2381                           ;./softwarespi.h: 45:                 RC5 = 1;
  2382     03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2383     0400  1303               	bcf	3,6	;RP1=0, select bank0
  2384     0401  1687               	bsf	7,5	;volatile
  2385                           
  2386                           ;./softwarespi.h: 46:             }else{
  2387     0402  2C06               	goto	l59
  2388     0403                     l58:
  2389                           
  2390                           ;./softwarespi.h: 47:                 RC5 = 0;
  2391     0403  1283               	bcf	3,5	;RP0=0, select bank0
  2392     0404  1303               	bcf	3,6	;RP1=0, select bank0
  2393     0405  1287               	bcf	7,5	;volatile
  2394     0406                     l59:	
  2395                           ;./softwarespi.h: 48:             }
  2396                           
  2397                           
  2398                           ;./softwarespi.h: 49:             RC3 = 1;
  2399     0406  1587               	bsf	7,3	;volatile
  2400                           
  2401                           ;./softwarespi.h: 50:             RC3 = 0;
  2402     0407  1187               	bcf	7,3	;volatile
  2403     0408                     l1274:
  2404                           
  2405                           ;./softwarespi.h: 52:             read <<= 1;
  2406     0408  1003               	clrc
  2407     0409  0DF2               	rlf	SPI_write@read,f
  2408     040A                     l1276:
  2409                           
  2410                           ;./softwarespi.h: 53:             read |= RC4;
  2411     040A  3000               	movlw	0
  2412     040B  1A07               	btfsc	7,4	;volatile
  2413     040C  3001               	movlw	1
  2414     040D  00F0               	movwf	??_SPI_write
  2415     040E  0870               	movf	??_SPI_write,w
  2416     040F  04F2               	iorwf	SPI_write@read,f
  2417     0410                     l1278:
  2418                           
  2419                           ;./softwarespi.h: 54:             data <<= 1;
  2420     0410  1003               	clrc
  2421     0411  0DF1               	rlf	SPI_write@data,f
  2422                           
  2423                           ;./softwarespi.h: 55:         }
  2424     0412  3001               	movlw	1
  2425     0413  00F0               	movwf	??_SPI_write
  2426     0414  0870               	movf	??_SPI_write,w
  2427     0415  07F3               	addwf	SPI_write@i,f
  2428     0416                     l1280:
  2429     0416  3008               	movlw	8
  2430     0417  0273               	subwf	SPI_write@i,w
  2431     0418  1C03               	skipc
  2432     0419  2C1B               	goto	u401
  2433     041A  2C1C               	goto	u400
  2434     041B                     u401:
  2435     041B  2BFB               	goto	l56
  2436     041C                     u400:
  2437     041C                     l1282:
  2438                           
  2439                           ;./softwarespi.h: 56:         read >>= 1;
  2440     041C  1003               	clrc
  2441     041D  0CF2               	rrf	SPI_write@read,f
  2442                           
  2443                           ;./softwarespi.h: 58:         return read;
  2444     041E  0872               	movf	SPI_write@read,w
  2445     041F                     l60:
  2446     041F  0008               	return
  2447     0420                     __end_of_SPI_write:
  2448                           
  2449                           	psect	text14
  2450     04A5                     __ptext14:	
  2451 ;; *************** function _UART_write_text *****************
  2452 ;; Defined at:
  2453 ;;		line 41 in file "./uart.h"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  text            2    1[COMMON] PTR unsigned char 
  2456 ;;		 -> main@buffer_200(64), main@buffer(64), 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  i               2    6[COMMON] int 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      void 
  2461 ;; Registers used:
  2462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2468 ;;      Params:         2       0       0       0       0
  2469 ;;      Locals:         2       0       0       0       0
  2470 ;;      Temps:          3       0       0       0       0
  2471 ;;      Totals:         7       0       0       0       0
  2472 ;;Total ram usage:        7 bytes
  2473 ;; Hardware stack levels used: 1
  2474 ;; Hardware stack levels required when called: 1
  2475 ;; This function calls:
  2476 ;;		_UART_write
  2477 ;; This function is called by:
  2478 ;;		_main
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482     04A5                     _UART_write_text:	
  2483                           ;psect for function _UART_write_text
  2484                           
  2485     04A5                     l1438:	
  2486                           ;incstack = 0
  2487                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2488                           
  2489                           
  2490                           ;./uart.h: 41:  void UART_write_text(char *text);./uart.h: 42:  {;./uart.h: 43:   for (i
      +                          nt i = 0; text[i] != '\0'; i++)
  2491     04A5  01F6               	clrf	UART_write_text@i
  2492     04A6  01F7               	clrf	UART_write_text@i+1
  2493     04A7  2CC5               	goto	l1444
  2494     04A8                     l1440:
  2495                           
  2496                           ;./uart.h: 44:    UART_write(text[i]);
  2497     04A8  0876               	movf	UART_write_text@i,w
  2498     04A9  0771               	addwf	UART_write_text@text,w
  2499     04AA  00F4               	movwf	??_UART_write_text+1
  2500     04AB  0872               	movf	UART_write_text@text+1,w
  2501     04AC  00F3               	movwf	??_UART_write_text
  2502     04AD  1803               	skipnc
  2503     04AE  0AF3               	incf	??_UART_write_text,f
  2504     04AF  1FF6               	btfss	UART_write_text@i,7
  2505     04B0  2CB2               	goto	u590
  2506     04B1  03F3               	decf	??_UART_write_text,f
  2507     04B2                     u590:
  2508     04B2  0873               	movf	??_UART_write_text,w
  2509     04B3  00F5               	movwf	??_UART_write_text+2
  2510     04B4  0874               	movf	??_UART_write_text+1,w
  2511     04B5  0084               	movwf	4
  2512     04B6  1783               	bsf	3,7
  2513     04B7  1C75               	btfss	??_UART_write_text+2,0
  2514     04B8  1383               	bcf	3,7
  2515     04B9  0800               	movf	0,w
  2516     04BA  120A  118A  2339  120A  118A  	fcall	_UART_write
  2517     04BF                     l1442:
  2518     04BF  3001               	movlw	1
  2519     04C0  07F6               	addwf	UART_write_text@i,f
  2520     04C1  1803               	skipnc
  2521     04C2  0AF7               	incf	UART_write_text@i+1,f
  2522     04C3  3000               	movlw	0
  2523     04C4  07F7               	addwf	UART_write_text@i+1,f
  2524     04C5                     l1444:
  2525     04C5  0876               	movf	UART_write_text@i,w
  2526     04C6  0771               	addwf	UART_write_text@text,w
  2527     04C7  00F4               	movwf	??_UART_write_text+1
  2528     04C8  0872               	movf	UART_write_text@text+1,w
  2529     04C9  00F3               	movwf	??_UART_write_text
  2530     04CA  1803               	skipnc
  2531     04CB  0AF3               	incf	??_UART_write_text,f
  2532     04CC  1FF6               	btfss	UART_write_text@i,7
  2533     04CD  2CCF               	goto	u600
  2534     04CE  03F3               	decf	??_UART_write_text,f
  2535     04CF                     u600:
  2536     04CF  0873               	movf	??_UART_write_text,w
  2537     04D0  00F5               	movwf	??_UART_write_text+2
  2538     04D1  0874               	movf	??_UART_write_text+1,w
  2539     04D2  0084               	movwf	4
  2540     04D3  1783               	bsf	3,7
  2541     04D4  1C75               	btfss	??_UART_write_text+2,0
  2542     04D5  1383               	bcf	3,7
  2543     04D6  0800               	movf	0,w
  2544     04D7  1D03               	btfss	3,2
  2545     04D8  2CDA               	goto	u611
  2546     04D9  2CDB               	goto	u610
  2547     04DA                     u611:
  2548     04DA  2CA8               	goto	l1440
  2549     04DB                     u610:
  2550     04DB                     l75:
  2551     04DB  0008               	return
  2552     04DC                     __end_of_UART_write_text:
  2553                           
  2554                           	psect	text15
  2555     0339                     __ptext15:	
  2556 ;; *************** function _UART_write *****************
  2557 ;; Defined at:
  2558 ;;		line 33 in file "./uart.h"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  data            1    wreg     unsigned char 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  data            1    0[COMMON] unsigned char 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2572 ;;      Params:         0       0       0       0       0
  2573 ;;      Locals:         1       0       0       0       0
  2574 ;;      Temps:          0       0       0       0       0
  2575 ;;      Totals:         1       0       0       0       0
  2576 ;;Total ram usage:        1 bytes
  2577 ;; Hardware stack levels used: 1
  2578 ;; This function calls:
  2579 ;;		Nothing
  2580 ;; This function is called by:
  2581 ;;		_UART_write_text
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585     0339                     _UART_write:	
  2586                           ;psect for function _UART_write
  2587                           
  2588                           
  2589                           ;incstack = 0
  2590                           ; Regs used in _UART_write: [wreg]
  2591                           ;UART_write@data stored from wreg
  2592     0339  00F0               	movwf	UART_write@data
  2593     033A                     l1336:
  2594     033A                     l66:	
  2595                           ;./uart.h: 36:    ;
  2596                           
  2597                           
  2598                           ;./uart.h: 35:   while (!TRMT)
  2599     033A  1683               	bsf	3,5	;RP0=1, select bank1
  2600     033B  1303               	bcf	3,6	;RP1=0, select bank1
  2601     033C  1C98               	btfss	24,1	;volatile
  2602     033D  2B3F               	goto	u431
  2603     033E  2B40               	goto	u430
  2604     033F                     u431:
  2605     033F  2B3A               	goto	l66
  2606     0340                     u430:
  2607     0340                     l1338:
  2608                           
  2609                           ;./uart.h: 37:   TXREG = data;
  2610     0340  0870               	movf	UART_write@data,w
  2611     0341  1283               	bcf	3,5	;RP0=0, select bank0
  2612     0342  1303               	bcf	3,6	;RP1=0, select bank0
  2613     0343  0099               	movwf	25	;volatile
  2614     0344                     l69:
  2615     0344  0008               	return
  2616     0345                     __end_of_UART_write:
  2617                           
  2618                           	psect	text16
  2619     053E                     __ptext16:	
  2620 ;; *************** function _UART_init *****************
  2621 ;; Defined at:
  2622 ;;		line 19 in file "./uart.h"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  baudrate        4    6[BANK0 ] const long 
  2625 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, pclath, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2637 ;;      Params:         0       8       0       0       0
  2638 ;;      Locals:         0       0       0       0       0
  2639 ;;      Temps:          0      12       0       0       0
  2640 ;;      Totals:         0      20       0       0       0
  2641 ;;Total ram usage:       20 bytes
  2642 ;; Hardware stack levels used: 1
  2643 ;; Hardware stack levels required when called: 1
  2644 ;; This function calls:
  2645 ;;		___aldiv
  2646 ;; This function is called by:
  2647 ;;		_main
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651     053E                     _UART_init:	
  2652                           ;psect for function _UART_init
  2653                           
  2654     053E                     l1422:	
  2655                           ;incstack = 0
  2656                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  2657                           
  2658                           
  2659                           ;./uart.h: 19:  void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 20:  
      +                          {;./uart.h: 21:   BRGH = 1;
  2660     053E  1683               	bsf	3,5	;RP0=1, select bank1
  2661     053F  1303               	bcf	3,6	;RP1=0, select bank1
  2662     0540  1518               	bsf	24,2	;volatile
  2663     0541                     l1424:
  2664                           
  2665                           ;./uart.h: 22:   SPBRG = (_XTAL_FREQ - baudrate * 16) / (baudrate * 16);
  2666     0541  1283               	bcf	3,5	;RP0=0, select bank0
  2667     0542  1303               	bcf	3,6	;RP1=0, select bank0
  2668     0543  0826               	movf	UART_init@baudrate,w
  2669     0544  00AE               	movwf	??_UART_init
  2670     0545  0827               	movf	UART_init@baudrate+1,w
  2671     0546  00AF               	movwf	??_UART_init+1
  2672     0547  0828               	movf	UART_init@baudrate+2,w
  2673     0548  00B0               	movwf	??_UART_init+2
  2674     0549  0829               	movf	UART_init@baudrate+3,w
  2675     054A  00B1               	movwf	??_UART_init+3
  2676     054B  3004               	movlw	4
  2677     054C                     u565:
  2678     054C  1003               	clrc
  2679     054D  0DAE               	rlf	??_UART_init,f
  2680     054E  0DAF               	rlf	??_UART_init+1,f
  2681     054F  0DB0               	rlf	??_UART_init+2,f
  2682     0550  0DB1               	rlf	??_UART_init+3,f
  2683     0551                     u560:
  2684     0551  3EFF               	addlw	-1
  2685     0552  1D03               	skipz
  2686     0553  2D4C               	goto	u565
  2687     0554  0831               	movf	??_UART_init+3,w
  2688     0555  00F3               	movwf	___aldiv@divisor+3
  2689     0556  0830               	movf	??_UART_init+2,w
  2690     0557  00F2               	movwf	___aldiv@divisor+2
  2691     0558  082F               	movf	??_UART_init+1,w
  2692     0559  00F1               	movwf	___aldiv@divisor+1
  2693     055A  082E               	movf	??_UART_init,w
  2694     055B  00F0               	movwf	___aldiv@divisor
  2695     055C  0826               	movf	UART_init@baudrate,w
  2696     055D  00B2               	movwf	??_UART_init+4
  2697     055E  0827               	movf	UART_init@baudrate+1,w
  2698     055F  00B3               	movwf	??_UART_init+5
  2699     0560  0828               	movf	UART_init@baudrate+2,w
  2700     0561  00B4               	movwf	??_UART_init+6
  2701     0562  0829               	movf	UART_init@baudrate+3,w
  2702     0563  00B5               	movwf	??_UART_init+7
  2703     0564  3004               	movlw	4
  2704     0565                     u575:
  2705     0565  1003               	clrc
  2706     0566  0DB2               	rlf	??_UART_init+4,f
  2707     0567  0DB3               	rlf	??_UART_init+5,f
  2708     0568  0DB4               	rlf	??_UART_init+6,f
  2709     0569  0DB5               	rlf	??_UART_init+7,f
  2710     056A                     u570:
  2711     056A  3EFF               	addlw	-1
  2712     056B  1D03               	skipz
  2713     056C  2D65               	goto	u575
  2714     056D  082A               	movf	UART_init@_XTAL_FREQ,w
  2715     056E  00B6               	movwf	??_UART_init+8
  2716     056F  082B               	movf	UART_init@_XTAL_FREQ+1,w
  2717     0570  00B7               	movwf	??_UART_init+9
  2718     0571  082C               	movf	UART_init@_XTAL_FREQ+2,w
  2719     0572  00B8               	movwf	??_UART_init+10
  2720     0573  082D               	movf	UART_init@_XTAL_FREQ+3,w
  2721     0574  00B9               	movwf	??_UART_init+11
  2722     0575  0832               	movf	??_UART_init+4,w
  2723     0576  02B6               	subwf	??_UART_init+8,f
  2724     0577  0833               	movf	??_UART_init+5,w
  2725     0578  1C03               	skipc
  2726     0579  0F33               	incfsz	??_UART_init+5,w
  2727     057A  2D7C               	goto	u581
  2728     057B  2D7D               	goto	u582
  2729     057C                     u581:
  2730     057C  02B7               	subwf	??_UART_init+9,f
  2731     057D                     u582:
  2732     057D  0834               	movf	??_UART_init+6,w
  2733     057E  1C03               	skipc
  2734     057F  0F34               	incfsz	??_UART_init+6,w
  2735     0580  2D82               	goto	u583
  2736     0581  2D83               	goto	u584
  2737     0582                     u583:
  2738     0582  02B8               	subwf	??_UART_init+10,f
  2739     0583                     u584:
  2740     0583  0835               	movf	??_UART_init+7,w
  2741     0584  1C03               	skipc
  2742     0585  0F35               	incfsz	??_UART_init+7,w
  2743     0586  2D88               	goto	u585
  2744     0587  2D89               	goto	u586
  2745     0588                     u585:
  2746     0588  02B9               	subwf	??_UART_init+11,f
  2747     0589                     u586:
  2748     0589  0839               	movf	??_UART_init+11,w
  2749     058A  00F7               	movwf	___aldiv@dividend+3
  2750     058B  0838               	movf	??_UART_init+10,w
  2751     058C  00F6               	movwf	___aldiv@dividend+2
  2752     058D  0837               	movf	??_UART_init+9,w
  2753     058E  00F5               	movwf	___aldiv@dividend+1
  2754     058F  0836               	movf	??_UART_init+8,w
  2755     0590  00F4               	movwf	___aldiv@dividend
  2756     0591  120A  118A  25A9  120A  118A  	fcall	___aldiv
  2757     0596  0870               	movf	?___aldiv,w
  2758     0597  1683               	bsf	3,5	;RP0=1, select bank1
  2759     0598  1303               	bcf	3,6	;RP1=0, select bank1
  2760     0599  0099               	movwf	25	;volatile
  2761     059A                     l1426:
  2762                           
  2763                           ;./uart.h: 23:   SYNC = 0;
  2764     059A  1218               	bcf	24,4	;volatile
  2765     059B                     l1428:
  2766                           
  2767                           ;./uart.h: 24:   SPEN = 1;
  2768     059B  1283               	bcf	3,5	;RP0=0, select bank0
  2769     059C  1303               	bcf	3,6	;RP1=0, select bank0
  2770     059D  1798               	bsf	24,7	;volatile
  2771     059E                     l1430:
  2772                           
  2773                           ;./uart.h: 25:   TRISC7 = 1;
  2774     059E  1683               	bsf	3,5	;RP0=1, select bank1
  2775     059F  1303               	bcf	3,6	;RP1=0, select bank1
  2776     05A0  1787               	bsf	7,7	;volatile
  2777     05A1                     l1432:
  2778                           
  2779                           ;./uart.h: 26:   TRISC6 = 1;
  2780     05A1  1707               	bsf	7,6	;volatile
  2781     05A2                     l1434:
  2782                           
  2783                           ;./uart.h: 27:   CREN = 1;
  2784     05A2  1283               	bcf	3,5	;RP0=0, select bank0
  2785     05A3  1303               	bcf	3,6	;RP1=0, select bank0
  2786     05A4  1618               	bsf	24,4	;volatile
  2787     05A5                     l1436:
  2788                           
  2789                           ;./uart.h: 28:   TXEN = 1;
  2790     05A5  1683               	bsf	3,5	;RP0=1, select bank1
  2791     05A6  1303               	bcf	3,6	;RP1=0, select bank1
  2792     05A7  1698               	bsf	24,5	;volatile
  2793     05A8                     l63:
  2794     05A8  0008               	return
  2795     05A9                     __end_of_UART_init:
  2796                           
  2797                           	psect	text17
  2798     05A9                     __ptext17:	
  2799 ;; *************** function ___aldiv *****************
  2800 ;; Defined at:
  2801 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;  divisor         4    0[COMMON] long 
  2804 ;;  dividend        4    4[COMMON] long 
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;  quotient        4    2[BANK0 ] long 
  2807 ;;  sign            1    1[BANK0 ] unsigned char 
  2808 ;;  counter         1    0[BANK0 ] unsigned char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  4    0[COMMON] long 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2, status,0
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2818 ;;      Params:         8       0       0       0       0
  2819 ;;      Locals:         0       6       0       0       0
  2820 ;;      Temps:          1       0       0       0       0
  2821 ;;      Totals:         9       6       0       0       0
  2822 ;;Total ram usage:       15 bytes
  2823 ;; Hardware stack levels used: 1
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_UART_init
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831     05A9                     ___aldiv:	
  2832                           ;psect for function ___aldiv
  2833                           
  2834     05A9                     l1380:	
  2835                           ;incstack = 0
  2836                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2837                           
  2838     05A9  1283               	bcf	3,5	;RP0=0, select bank0
  2839     05AA  1303               	bcf	3,6	;RP1=0, select bank0
  2840     05AB  01A1               	clrf	___aldiv@sign
  2841     05AC                     l1382:
  2842     05AC  1FF3               	btfss	___aldiv@divisor+3,7
  2843     05AD  2DAF               	goto	u461
  2844     05AE  2DB0               	goto	u460
  2845     05AF                     u461:
  2846     05AF  2DBD               	goto	l365
  2847     05B0                     u460:
  2848     05B0                     l1384:
  2849     05B0  09F0               	comf	___aldiv@divisor,f
  2850     05B1  09F1               	comf	___aldiv@divisor+1,f
  2851     05B2  09F2               	comf	___aldiv@divisor+2,f
  2852     05B3  09F3               	comf	___aldiv@divisor+3,f
  2853     05B4  0AF0               	incf	___aldiv@divisor,f
  2854     05B5  1903               	skipnz
  2855     05B6  0AF1               	incf	___aldiv@divisor+1,f
  2856     05B7  1903               	skipnz
  2857     05B8  0AF2               	incf	___aldiv@divisor+2,f
  2858     05B9  1903               	skipnz
  2859     05BA  0AF3               	incf	___aldiv@divisor+3,f
  2860     05BB  01A1               	clrf	___aldiv@sign
  2861     05BC  0AA1               	incf	___aldiv@sign,f
  2862     05BD                     l365:
  2863     05BD  1FF7               	btfss	___aldiv@dividend+3,7
  2864     05BE  2DC0               	goto	u471
  2865     05BF  2DC1               	goto	u470
  2866     05C0                     u471:
  2867     05C0  2DD0               	goto	l1390
  2868     05C1                     u470:
  2869     05C1                     l1386:
  2870     05C1  09F4               	comf	___aldiv@dividend,f
  2871     05C2  09F5               	comf	___aldiv@dividend+1,f
  2872     05C3  09F6               	comf	___aldiv@dividend+2,f
  2873     05C4  09F7               	comf	___aldiv@dividend+3,f
  2874     05C5  0AF4               	incf	___aldiv@dividend,f
  2875     05C6  1903               	skipnz
  2876     05C7  0AF5               	incf	___aldiv@dividend+1,f
  2877     05C8  1903               	skipnz
  2878     05C9  0AF6               	incf	___aldiv@dividend+2,f
  2879     05CA  1903               	skipnz
  2880     05CB  0AF7               	incf	___aldiv@dividend+3,f
  2881     05CC                     l1388:
  2882     05CC  3001               	movlw	1
  2883     05CD  00F8               	movwf	??___aldiv
  2884     05CE  0878               	movf	??___aldiv,w
  2885     05CF  06A1               	xorwf	___aldiv@sign,f
  2886     05D0                     l1390:
  2887     05D0  3000               	movlw	0
  2888     05D1  00A5               	movwf	___aldiv@quotient+3
  2889     05D2  3000               	movlw	0
  2890     05D3  00A4               	movwf	___aldiv@quotient+2
  2891     05D4  3000               	movlw	0
  2892     05D5  00A3               	movwf	___aldiv@quotient+1
  2893     05D6  3000               	movlw	0
  2894     05D7  00A2               	movwf	___aldiv@quotient
  2895     05D8                     l1392:
  2896     05D8  0873               	movf	___aldiv@divisor+3,w
  2897     05D9  0472               	iorwf	___aldiv@divisor+2,w
  2898     05DA  0471               	iorwf	___aldiv@divisor+1,w
  2899     05DB  0470               	iorwf	___aldiv@divisor,w
  2900     05DC  1903               	skipnz
  2901     05DD  2DDF               	goto	u481
  2902     05DE  2DE0               	goto	u480
  2903     05DF                     u481:
  2904     05DF  2E2D               	goto	l1412
  2905     05E0                     u480:
  2906     05E0                     l1394:
  2907     05E0  01A0               	clrf	___aldiv@counter
  2908     05E1  0AA0               	incf	___aldiv@counter,f
  2909     05E2  2DF0               	goto	l1398
  2910     05E3                     l1396:
  2911     05E3  3001               	movlw	1
  2912     05E4  00F8               	movwf	??___aldiv
  2913     05E5                     u495:
  2914     05E5  1003               	clrc
  2915     05E6  0DF0               	rlf	___aldiv@divisor,f
  2916     05E7  0DF1               	rlf	___aldiv@divisor+1,f
  2917     05E8  0DF2               	rlf	___aldiv@divisor+2,f
  2918     05E9  0DF3               	rlf	___aldiv@divisor+3,f
  2919     05EA  0BF8               	decfsz	??___aldiv,f
  2920     05EB  2DE5               	goto	u495
  2921     05EC  3001               	movlw	1
  2922     05ED  00F8               	movwf	??___aldiv
  2923     05EE  0878               	movf	??___aldiv,w
  2924     05EF  07A0               	addwf	___aldiv@counter,f
  2925     05F0                     l1398:
  2926     05F0  1FF3               	btfss	___aldiv@divisor+3,7
  2927     05F1  2DF3               	goto	u501
  2928     05F2  2DF4               	goto	u500
  2929     05F3                     u501:
  2930     05F3  2DE3               	goto	l1396
  2931     05F4                     u500:
  2932     05F4                     l1400:
  2933     05F4  3001               	movlw	1
  2934     05F5  00F8               	movwf	??___aldiv
  2935     05F6                     u515:
  2936     05F6  1003               	clrc
  2937     05F7  0DA2               	rlf	___aldiv@quotient,f
  2938     05F8  0DA3               	rlf	___aldiv@quotient+1,f
  2939     05F9  0DA4               	rlf	___aldiv@quotient+2,f
  2940     05FA  0DA5               	rlf	___aldiv@quotient+3,f
  2941     05FB  0BF8               	decfsz	??___aldiv,f
  2942     05FC  2DF6               	goto	u515
  2943     05FD                     l1402:
  2944     05FD  0873               	movf	___aldiv@divisor+3,w
  2945     05FE  0277               	subwf	___aldiv@dividend+3,w
  2946     05FF  1D03               	skipz
  2947     0600  2E0B               	goto	u525
  2948     0601  0872               	movf	___aldiv@divisor+2,w
  2949     0602  0276               	subwf	___aldiv@dividend+2,w
  2950     0603  1D03               	skipz
  2951     0604  2E0B               	goto	u525
  2952     0605  0871               	movf	___aldiv@divisor+1,w
  2953     0606  0275               	subwf	___aldiv@dividend+1,w
  2954     0607  1D03               	skipz
  2955     0608  2E0B               	goto	u525
  2956     0609  0870               	movf	___aldiv@divisor,w
  2957     060A  0274               	subwf	___aldiv@dividend,w
  2958     060B                     u525:
  2959     060B  1C03               	skipc
  2960     060C  2E0E               	goto	u521
  2961     060D  2E0F               	goto	u520
  2962     060E                     u521:
  2963     060E  2E1E               	goto	l1408
  2964     060F                     u520:
  2965     060F                     l1404:
  2966     060F  0870               	movf	___aldiv@divisor,w
  2967     0610  02F4               	subwf	___aldiv@dividend,f
  2968     0611  0871               	movf	___aldiv@divisor+1,w
  2969     0612  1C03               	skipc
  2970     0613  0F71               	incfsz	___aldiv@divisor+1,w
  2971     0614  02F5               	subwf	___aldiv@dividend+1,f
  2972     0615  0872               	movf	___aldiv@divisor+2,w
  2973     0616  1C03               	skipc
  2974     0617  0F72               	incfsz	___aldiv@divisor+2,w
  2975     0618  02F6               	subwf	___aldiv@dividend+2,f
  2976     0619  0873               	movf	___aldiv@divisor+3,w
  2977     061A  1C03               	skipc
  2978     061B  0F73               	incfsz	___aldiv@divisor+3,w
  2979     061C  02F7               	subwf	___aldiv@dividend+3,f
  2980     061D                     l1406:
  2981     061D  1422               	bsf	___aldiv@quotient,0
  2982     061E                     l1408:
  2983     061E  3001               	movlw	1
  2984     061F                     u535:
  2985     061F  1003               	clrc
  2986     0620  0CF3               	rrf	___aldiv@divisor+3,f
  2987     0621  0CF2               	rrf	___aldiv@divisor+2,f
  2988     0622  0CF1               	rrf	___aldiv@divisor+1,f
  2989     0623  0CF0               	rrf	___aldiv@divisor,f
  2990     0624  3EFF               	addlw	-1
  2991     0625  1D03               	skipz
  2992     0626  2E1F               	goto	u535
  2993     0627                     l1410:
  2994     0627  3001               	movlw	1
  2995     0628  02A0               	subwf	___aldiv@counter,f
  2996     0629  1D03               	btfss	3,2
  2997     062A  2E2C               	goto	u541
  2998     062B  2E2D               	goto	u540
  2999     062C                     u541:
  3000     062C  2DF4               	goto	l1400
  3001     062D                     u540:
  3002     062D                     l1412:
  3003     062D  0821               	movf	___aldiv@sign,w
  3004     062E  1903               	btfsc	3,2
  3005     062F  2E31               	goto	u551
  3006     0630  2E32               	goto	u550
  3007     0631                     u551:
  3008     0631  2E3D               	goto	l1416
  3009     0632                     u550:
  3010     0632                     l1414:
  3011     0632  09A2               	comf	___aldiv@quotient,f
  3012     0633  09A3               	comf	___aldiv@quotient+1,f
  3013     0634  09A4               	comf	___aldiv@quotient+2,f
  3014     0635  09A5               	comf	___aldiv@quotient+3,f
  3015     0636  0AA2               	incf	___aldiv@quotient,f
  3016     0637  1903               	skipnz
  3017     0638  0AA3               	incf	___aldiv@quotient+1,f
  3018     0639  1903               	skipnz
  3019     063A  0AA4               	incf	___aldiv@quotient+2,f
  3020     063B  1903               	skipnz
  3021     063C  0AA5               	incf	___aldiv@quotient+3,f
  3022     063D                     l1416:
  3023     063D  0825               	movf	___aldiv@quotient+3,w
  3024     063E  00F3               	movwf	?___aldiv+3
  3025     063F  0824               	movf	___aldiv@quotient+2,w
  3026     0640  00F2               	movwf	?___aldiv+2
  3027     0641  0823               	movf	___aldiv@quotient+1,w
  3028     0642  00F1               	movwf	?___aldiv+1
  3029     0643  0822               	movf	___aldiv@quotient,w
  3030     0644  00F0               	movwf	?___aldiv
  3031     0645                     l375:
  3032     0645  0008               	return
  3033     0646                     __end_of___aldiv:
  3034                           
  3035                           	psect	text18
  3036     032F                     __ptext18:	
  3037 ;; *************** function _SPI_init_master *****************
  3038 ;; Defined at:
  3039 ;;		line 28 in file "./softwarespi.h"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;		None
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;		None
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		None
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3053 ;;      Params:         0       0       0       0       0
  3054 ;;      Locals:         0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0
  3056 ;;      Totals:         0       0       0       0       0
  3057 ;;Total ram usage:        0 bytes
  3058 ;; Hardware stack levels used: 1
  3059 ;; This function calls:
  3060 ;;		Nothing
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066     032F                     _SPI_init_master:	
  3067                           ;psect for function _SPI_init_master
  3068                           
  3069     032F                     l1420:	
  3070                           ;incstack = 0
  3071                           ; Regs used in _SPI_init_master: []
  3072                           
  3073                           
  3074                           ;./softwarespi.h: 30:         TRISC3 = 0;
  3075     032F  1683               	bsf	3,5	;RP0=1, select bank1
  3076     0330  1303               	bcf	3,6	;RP1=0, select bank1
  3077     0331  1187               	bcf	7,3	;volatile
  3078                           
  3079                           ;./softwarespi.h: 31:         TRISC5 = 0;
  3080     0332  1287               	bcf	7,5	;volatile
  3081                           
  3082                           ;./softwarespi.h: 32:         TRISC4 = 1;
  3083     0333  1607               	bsf	7,4	;volatile
  3084                           
  3085                           ;./softwarespi.h: 35:         RC3 = 0;
  3086     0334  1283               	bcf	3,5	;RP0=0, select bank0
  3087     0335  1303               	bcf	3,6	;RP1=0, select bank0
  3088     0336  1187               	bcf	7,3	;volatile
  3089                           
  3090                           ;./softwarespi.h: 36:         RC5 = 0;
  3091     0337  1287               	bcf	7,5	;volatile
  3092     0338                     l53:
  3093     0338  0008               	return
  3094     0339                     __end_of_SPI_init_master:
  3095     007E                     btemp	set	126	;btemp
  3096     007E                     wtemp0	set	126
  3097                           
  3098                           	psect	config
  3099                           
  3100                           ;Config register CONFIG1 @ 0x2007
  3101                           ;	Oscillator Selection bits
  3102                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  3103                           ;	Watchdog Timer Enable bit
  3104                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3105                           ;	Power-up Timer Enable bit
  3106                           ;	PWRTE = OFF, PWRT disabled
  3107                           ;	RE3/MCLR pin function select bit
  3108                           ;	MCLRE = 0x1, unprogrammed default
  3109                           ;	Code Protection bit
  3110                           ;	CP = OFF, Program memory code protection is disabled
  3111                           ;	Data Code Protection bit
  3112                           ;	CPD = OFF, Data memory code protection is disabled
  3113                           ;	Brown Out Reset Selection bits
  3114                           ;	BOREN = OFF, BOR disabled
  3115                           ;	Internal External Switchover bit
  3116                           ;	IESO = 0x1, unprogrammed default
  3117                           ;	Fail-Safe Clock Monitor Enabled bit
  3118                           ;	FCMEN = 0x1, unprogrammed default
  3119                           ;	Low Voltage Programming Enable bit
  3120                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3121                           ;	In-Circuit Debugger Mode bit
  3122                           ;	DEBUG = 0x1, unprogrammed default
  3123     2007                     	org	8199
  3124     2007  2CF2               	dw	11506
  3125                           
  3126                           ;Config register CONFIG2 @ 0x2008
  3127                           ;	Brown-out Reset Selection bit
  3128                           ;	BOR4V = 0x1, unprogrammed default
  3129                           ;	Flash Program Memory Self Write Enable bits
  3130                           ;	WRT = OFF, Write protection off
  3131     2008                     	org	8200
  3132     2008  3FFF               	dw	16383

Data Sizes:
    Strings     32
    Constant    0
    Data        8
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      46
    BANK1            80     64      72
    BANK3            96     64      64
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_3(CODE[6]), STR_2(CODE[8]), STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_200(BANK3[64]), main@buffer(BANK1[64]), char_to_binary_string@output(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    nrf_send@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_setup@addr	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK1[5]), 

    nrf_write_payload@data	PTR unsigned char  size(1) Largest target is 3
		 -> main@data(BANK0[3]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_set_tx_mode@config(BANK0[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[3]), nrf_read@clear(COMMON[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(BANK0[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command_with_data@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[3]), nrf_read@clear(COMMON[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(BANK0[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command_with_data_overwrite@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_set_tx_mode@config(BANK0[1]), nrf_set_rx_mode@config(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 5
		 -> RADIO_ADDR(BANK1[5]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_setup@data(BANK0[5]), 

    UART_write_text@text	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_200(BANK3[64]), main@buffer(BANK1[64]), 


Critical Paths under _main in COMMON

    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_send->_nrf_write_payload
    _nrf_write_payload->_nrf_write_register
    _nrf_write_command->_SPI_write
    _nrf_set_tx_mode->_nrf_read_register
    _nrf_write_register->_nrf_command_with_data
    _nrf_command_with_data->_SPI_write
    _nrf_read_register->_nrf_command_with_data_overwrite
    _nrf_command_with_data_overwrite->_SPI_write
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _nrf_send->_nrf_set_tx_mode
    _nrf_set_tx_mode->_nrf_read_register
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               138   138      0   22792
                                             26 BANK0     10    10      0
                                              0 BANK1     64    64      0
                                              0 BANK3     64    64      0
                    _SPI_init_master
                          _UART_init
                    _UART_write_text
                           _nrf_send
                    _nrf_set_tx_mode
                          _nrf_setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             35    16     19     545
                                              0 COMMON     4     4      0
                                              0 BANK0     19     0     19
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                           11     9      2    7067
                                              0 BANK0     11     9      2
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3044
                                             13 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               7     5      2     504
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _nrf_send                                             4     3      1   10159
                                              3 BANK0      4     3      1
                    _nrf_set_tx_mode
                  _nrf_write_command
                  _nrf_write_payload
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_payload                                    4     3      1    3040
                                             13 COMMON     1     0      1
                                              0 BANK0      2     2      0
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0     140
                                              4 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_set_tx_mode                                      2     2      0    3899
                                              1 BANK0      2     2      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    2880
                                             10 COMMON     3     1      2
              _nrf_command_with_data
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data                                6     4      2     382
                                              4 COMMON     6     4      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2     948
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
    _nrf_command_with_data_overwrite
 ---------------------------------------------------------------------------------
 (3) _nrf_command_with_data_overwrite                      8     6      2     426
                                              4 COMMON     8     6      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            4     4      0      95
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      7     5      2     186
                                              1 COMMON     7     5      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_init
     ___aldiv
   _UART_write_text
     _UART_write
   _nrf_send
     _nrf_set_tx_mode
       _nrf_read_register
         _nrf_command_with_data_overwrite
           _SPI_write
       _nrf_write_register
         _nrf_command_with_data
           _SPI_write
     _nrf_write_command
       _SPI_write
     _nrf_write_payload
       _nrf_write_register
     _nrf_write_register
   _nrf_set_tx_mode
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     40      40       9       66.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     40      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      2E       5       57.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      C4      12        0.0%
ABS                  0      0      C4       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Apr 19 10:40:30 2023

                                      pc 0002                                       l60 041F  
                                     l53 0338                                       l63 05A8  
                                     l56 03FB                                       l66 033A  
                                     l58 0403                                       l90 03D3  
                                     l75 04DB                                       l59 0406  
                                     l69 0344                                       l95 04A0  
                                     l96 04A4                                       fsr 0004  
                  nrf_set_tx_mode@config 0022                                      l101 0443  
                                    l102 0447                                      l111 03B6  
                                    l105 0351                                      l121 0751  
                                    l114 036F                                      l108 035F  
                                    l133 03F7                                      l141 0473  
                                    l117 039B                                      l125 07E3  
                                    l365 05BD                                      l375 0645  
                                    l296 053D                                      _RC3 003B  
                                    _RC4 003C                                      _RD2 0042  
                                    _RC5 003D                                      _RD3 0043  
                                    u400 041C                                      u401 041B  
                                    u410 04A0                                      u411 049F  
                                    u500 05F4                                      u420 0443  
                                    u501 05F3                                      u421 0442  
                                    u430 0340                                      u431 033F  
                                    u520 060F                                      u600 04CF  
                                    u440 03D3                                      u521 060E  
                                    u441 03D2                                      u610 04DB  
                                    u450 03E5                                      u515 05F6  
                                    u611 04DA                                      u451 03E4  
                                    u540 062D                                      u460 05B0  
                                    u620 0467                                      u541 062C  
                                    u525 060B                                      u461 05AF  
                                    u621 0466                                      u550 0632  
                                    u470 05C1                                      u390 03FF  
                                    u630 04E5                                      u551 0631  
                                    u535 061F                                      u471 05C0  
                                    u391 03FE                                      u631 04E4  
                                    u480 05E0                                      u560 0551  
                                    u640 0537                                      u481 05DF  
                                    u641 0536                                      u570 056A  
                                    u740 06C2                                      u581 057C  
                                    u565 054C                                      u741 06C1  
                                    u582 057D                                      u590 04B2  
                                    u750 0705                                      u495 05E5  
                                    u583 0582                                      u575 0565  
                                    u751 0704                                      u584 0583  
                                    u585 0588                                      u745 06BE  
                                    u586 0589                                      u755 0701  
                                    u767 06D4                                      u777 071C  
                                    u787 03B0                                      fsr0 0004  
                                    indf 0000                   nrf_command_with_data@i 0079  
                                   l1310 0439                                     l1302 0421  
                                   l1400 05F4                                     l1312 043D  
                                   l1304 0424                                     l1410 0627  
                                   l1402 05FD                                     l1322 0355  
                                   l1314 0446                                     l1306 042B  
                                   l1330 036B                                     l1420 032F  
                                   l1404 060F                                     l1412 062D  
                                   l1308 042D                                     l1332 036E  
                                   l1340 03B8                                     l1414 0632  
                                   l1406 061D                                     l1430 059E  
                                   l1422 053E                                     l1318 0346  
                                   l1326 0361                                     l1350 03A9  
                                   l1510 0469                                     l1502 044B  
                                   l1342 03BA                                     l1416 063D  
                                   l1408 061E                                     l1432 05A1  
                                   l1424 0541                                     l1336 033A  
                                   l1440 04A8                                     l1280 0416  
                                   l1272 03FF                                     l1328 0364  
                                   l1352 03AC                                     l1504 045A  
                                   l1344 03C9                                     l1360 0385  
                                   l1520 04F3                                     l1512 04DC  
                                   l1434 05A2                                     l1426 059A  
                                   l1338 0340                                     l1442 04BF  
                                   l1282 041C                                     l1274 0408  
                                   l1266 03F9                                     l1290 047F  
                                   l1370 03E1                                     l1354 03B3  
                                   l1506 0463                                     l1346 03CD  
                                   l1362 038F                                     l1450 0727  
                                   l1522 04F4                                     l1514 04DF  
                                   l1380 05A9                                     l1436 05A5  
                                   l1428 059B                                     l1444 04C5  
                                   l1276 040A                                     l1292 0481  
                                   l1348 039F                                     l1508 0467  
                                   l1364 0395                                     l1460 074C  
                                   l1452 0731                                     l1524 04F9  
                                   l1532 050B                                     l1516 04E5  
                                   l1390 05D0                                     l1382 05AC  
                                   l1438 04A5                                     l1278 0410  
                                   l1294 0496                                     l1286 0475  
                                   l1374 03E6                                     l1366 03D4  
                                   l1358 0383                                     l1462 0754  
                                   l1470 076D                                     l1454 0734  
                                   l1446 070C                                     l1526 04FD  
                                   l1518 04EC                                     l1534 0525  
                                   l1630 0677                                     l1622 0646  
                                   l1392 05D8                                     l1384 05B0  
                                   l1296 049A                                     l1288 0478  
                                   l1376 03EA                                     l1368 03DE  
                                   l1480 0792                                     l1472 0777  
                                   l1720 0762                                     l1464 0757  
                                   l1456 073E                                     l1448 0714  
                                   l1536 0537                                     l1528 0504  
                                   l1632 067C                                     l1624 064A  
                                   l1394 05E0                                     l1386 05C1  
                                   l1298 04A3                                     l1378 03F4  
                                   l1490 07BA                                     l1482 0796  
                                   l1474 077A                                     l1458 0742  
                                   l1650 06A5                                     l1634 0688  
                                   l1626 0661                                     l1396 05E3  
                                   l1388 05CC                                     l1492 07C6  
                                   l1484 07A0                                     l1476 0784  
                                   l1468 075A                                     l1660 06DA  
                                   l1652 06AF                                     l1644 06A1  
                                   l1636 068D                                     l1628 066E  
                                   l1398 05F0                                     l1494 07D2  
                                   l1486 07A4                                     l1478 0788  
                                   l1718 051D                                     l1662 06E7  
                                   l1654 06B5                                     l1638 069F  
                                   l1496 07DE                                     l1488 07AE  
                                   l1664 06F0                                     l1656 06C2  
                                   l1666 06F8                                     l1658 06CC  
                                   STR_1 0009                                     STR_2 001B  
                                   STR_3 0023                                     _BRGH 04C2  
                                   _CREN 00C4                                     _RCIF 0065  
                                   _SPEN 00C7                                     _TRMT 04C1  
                                   _TXEN 04C5                                     _SYNC 04C4  
                                   _main 0646                                     btemp 007E  
                                   start 0000  __end_of_nrf_command_with_data_overwrite 04A5  
      ??_nrf_command_with_data_overwrite 0076         ?_nrf_command_with_data_overwrite 0074  
        _nrf_command_with_data_overwrite 0474                         UART_write_text@i 0076  
                        __end_of___aldiv 0646                                    ?_main 0070  
       nrf_command_with_data_overwrite@i 007B                                    _RCREG 001A  
                                  _SPBRG 0099                                    _TXREG 0019  
          __end_of_nrf_command_with_data 0448                              ?_UART_write 0070  
                                  main@i 0040                                    main@j 0042  
                                  pclath 000A                                    status 0003  
                                  wtemp0 007E                          __end_of_sprintf 053E  
                        __initialization 07E4                             __end_of_main 0709  
                                 ??_main 003A                     nrf_write_payload@len 007D  
               nrf_command_with_data@len 0075                    nrf_setup@payload_size 0021  
                                 _TRISC3 043B                                   _TRISC4 043C  
                                 _TRISD2 0442                                   _TRISC5 043D  
                                 _TRISD3 0443                                   _TRISC6 043E  
                                 _TRISC7 043F                                ??___aldiv 0078  
                      __end_of_UART_init 05A9                           _nrf_flush_rxtx 0383  
            char_to_binary_string@output 0044                                   _arrcpy 03B7  
           nrf_command_with_data@command 0077                         __end_of_nrf_send 0474  
                        _UART_write_text 04A5                        __end_of_SPI_write 0420  
                              ??_sprintf 0070                       nrf_flush_rxtx@data 007D  
                __end_of__initialization 07FC                   __end_of_nrf_flush_rxtx 039C  
                         __pcstackCOMMON 0070                             __pidataBANK1 0327  
             __end_of_nrf_write_register 0352                        ??_SPI_init_master 0070  
                      ??_nrf_set_tx_mode 0021                    nrf_write_payload@data 0021  
                             __pbssBANK0 0044                    nrf_write_register@len 007B  
                  nrf_write_register@reg 007C                           main@buffer_200 0190  
                        ?_nrf_flush_rxtx 0070                               __pmaintext 0646  
                                ?_arrcpy 0070                  __end_of_UART_write_text 04DC  
                           ??_UART_write 0070                              nrf_send@len 0023  
                             __stringtab 0003                                ?_nrf_send 0023  
                                ___aldiv 05A9                       __end_of_UART_write 0345  
                                __ptext1 04DC                                  __ptext2 0709  
                                __ptext3 0383                                  __ptext4 03B7  
                                __ptext5 0448                                  __ptext6 039C  
                                __ptext7 0360                                  __ptext8 03D4  
                                __ptext9 0345                     nrf_read_register@len 007D  
                   nrf_read_register@reg 0020                         ___aldiv@dividend 0074  
                  _nrf_command_with_data 0420                                  _sprintf 04DC  
                                arrcpy@i 0076                     end_of_initialization 07FC  
                      __end_of_nrf_setup 07E4                      UART_init@_XTAL_FREQ 002A  
                             ??_nrf_send 007E      nrf_command_with_data_overwrite@data 0074  
                       ___aldiv@quotient 0022                         ?_UART_write_text 0071  
                              _UART_init 053E                            nrf_send@clear 0026  
                              _SPI_write 03F8                               main@buffer 00A0  
                        _SPI_init_master 032F                          _nrf_set_tx_mode 03D4  
                          nrf_setup@addr 0025                            nrf_setup@data 0026  
                         __end_of_arrcpy 03D4                               ?_UART_init 0026  
                    start_initialization 07E4                   ?_nrf_command_with_data 0074  
                     nrf_setup@addr_size 0020                       _nrf_write_register 0345  
                             ?_SPI_write 0070                         ??_nrf_flush_rxtx 007D  
                    ?_nrf_write_register 007A                               init_fetch0 0370  
                               ??_arrcpy 0072                              __pdataBANK1 00E0  
                   ??_nrf_write_register 007C                   nrf_write_register@data 007A  
                              ___latbits 0002                            __pcstackBANK0 0020  
                          __pcstackBANK1 00A0                            __pcstackBANK3 0190  
                    UART_write_text@text 0071                  __end_of_SPI_init_master 0339  
                __end_of_nrf_set_tx_mode 03F8                            SPI_write@data 0071  
                          SPI_write@read 0072                                 ?___aldiv 0070  
                              __pstrings 0003                              ??_UART_init 002E  
                               ?_sprintf 0020                              ??_SPI_write 0070  
                        ___aldiv@divisor 0070                          ___aldiv@counter 0020  
                              _nrf_setup 0709                                main@F1433 00E0  
                      _nrf_read_register 0352                       ?_nrf_read_register 007C  
                           nrf_send@data 0025                              __stringbase 0008  
                           nrf_send@stat 0024                           UART_write@data 0070  
 nrf_command_with_data_overwrite@command 0079                                arrcpy@len 0071  
                              arrcpy@dst 0075                                arrcpy@src 0070  
                    ??_nrf_read_register 007E                        _nrf_write_command 0360  
                     ?_nrf_write_command 0070                        _nrf_write_payload 039C  
                             ?_nrf_setup 0020                       ?_nrf_write_payload 007D  
                       ?_SPI_init_master 0070                         ?_nrf_set_tx_mode 0070  
              __end_of_nrf_read_register 0360                      ??_nrf_write_command 0074  
                    ??_nrf_write_payload 0020                       __end_of__stringtab 0009  
            nrf_command_with_data@status 0078                  ??_nrf_command_with_data 0076  
                             SPI_write@i 0073                __end_of_nrf_write_command 0370  
                               __ptext10 0420                                 __ptext11 0352  
                               __ptext12 0474                                 __ptext13 03F8  
                               __ptext14 04A5                                 __ptext15 0339  
                               __ptext16 053E                                 __ptext17 05A9  
                               __ptext18 032F                    nrf_read_register@data 007C  
              __end_of_nrf_write_payload 03B7                                 _nrf_send 0448  
                               main@data 003D                               _RADIO_ADDR 00E3  
  nrf_command_with_data_overwrite@status 007A                                 init_ram0 0374  
              nrf_command_with_data@data 0074                                sprintf@ap 0072  
                              sprintf@sp 0020                 nrf_write_command@command 0074  
                      UART_init@baudrate 0026                              ??_nrf_setup 0022  
                              stringcode 0003                               _OSCCONbits 008F  
     nrf_command_with_data_overwrite@len 0075                                 sprintf@c 0073  
                               sprintf@f 0022                                 stringdir 0003  
                               stringtab 0003                             ___aldiv@sign 0021  
                nrf_write_command@status 0075                               _UART_write 0339  
                      ??_UART_write_text 0073  
