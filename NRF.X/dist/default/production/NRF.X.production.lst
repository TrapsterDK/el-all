

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Mar 27 18:57:43 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30     0000                     
    31                           ; Generated 09/02/2023 GMT
    32                           ; 
    33                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65     0000                     	;# 
    66     0001                     	;# 
    67     0002                     	;# 
    68     0003                     	;# 
    69     0004                     	;# 
    70     0005                     	;# 
    71     0006                     	;# 
    72     0007                     	;# 
    73     0008                     	;# 
    74     0009                     	;# 
    75     000A                     	;# 
    76     000B                     	;# 
    77     000C                     	;# 
    78     000D                     	;# 
    79     000E                     	;# 
    80     000E                     	;# 
    81     000F                     	;# 
    82     0010                     	;# 
    83     0011                     	;# 
    84     0012                     	;# 
    85     0013                     	;# 
    86     0014                     	;# 
    87     0015                     	;# 
    88     0015                     	;# 
    89     0016                     	;# 
    90     0017                     	;# 
    91     0018                     	;# 
    92     0019                     	;# 
    93     001A                     	;# 
    94     001B                     	;# 
    95     001B                     	;# 
    96     001C                     	;# 
    97     001D                     	;# 
    98     001E                     	;# 
    99     001F                     	;# 
   100     0081                     	;# 
   101     0085                     	;# 
   102     0086                     	;# 
   103     0087                     	;# 
   104     0088                     	;# 
   105     0089                     	;# 
   106     008C                     	;# 
   107     008D                     	;# 
   108     008E                     	;# 
   109     008F                     	;# 
   110     0090                     	;# 
   111     0091                     	;# 
   112     0092                     	;# 
   113     0093                     	;# 
   114     0093                     	;# 
   115     0093                     	;# 
   116     0094                     	;# 
   117     0095                     	;# 
   118     0096                     	;# 
   119     0097                     	;# 
   120     0098                     	;# 
   121     0099                     	;# 
   122     009A                     	;# 
   123     009B                     	;# 
   124     009C                     	;# 
   125     009D                     	;# 
   126     009E                     	;# 
   127     009F                     	;# 
   128     0105                     	;# 
   129     0107                     	;# 
   130     0108                     	;# 
   131     0109                     	;# 
   132     010C                     	;# 
   133     010C                     	;# 
   134     010D                     	;# 
   135     010E                     	;# 
   136     010F                     	;# 
   137     0185                     	;# 
   138     0187                     	;# 
   139     0188                     	;# 
   140     0189                     	;# 
   141     018C                     	;# 
   142     018D                     	;# 
   143     0000                     	;# 
   144     0001                     	;# 
   145     0002                     	;# 
   146     0003                     	;# 
   147     0004                     	;# 
   148     0005                     	;# 
   149     0006                     	;# 
   150     0007                     	;# 
   151     0008                     	;# 
   152     0009                     	;# 
   153     000A                     	;# 
   154     000B                     	;# 
   155     000C                     	;# 
   156     000D                     	;# 
   157     000E                     	;# 
   158     000E                     	;# 
   159     000F                     	;# 
   160     0010                     	;# 
   161     0011                     	;# 
   162     0012                     	;# 
   163     0013                     	;# 
   164     0014                     	;# 
   165     0015                     	;# 
   166     0015                     	;# 
   167     0016                     	;# 
   168     0017                     	;# 
   169     0018                     	;# 
   170     0019                     	;# 
   171     001A                     	;# 
   172     001B                     	;# 
   173     001B                     	;# 
   174     001C                     	;# 
   175     001D                     	;# 
   176     001E                     	;# 
   177     001F                     	;# 
   178     0081                     	;# 
   179     0085                     	;# 
   180     0086                     	;# 
   181     0087                     	;# 
   182     0088                     	;# 
   183     0089                     	;# 
   184     008C                     	;# 
   185     008D                     	;# 
   186     008E                     	;# 
   187     008F                     	;# 
   188     0090                     	;# 
   189     0091                     	;# 
   190     0092                     	;# 
   191     0093                     	;# 
   192     0093                     	;# 
   193     0093                     	;# 
   194     0094                     	;# 
   195     0095                     	;# 
   196     0096                     	;# 
   197     0097                     	;# 
   198     0098                     	;# 
   199     0099                     	;# 
   200     009A                     	;# 
   201     009B                     	;# 
   202     009C                     	;# 
   203     009D                     	;# 
   204     009E                     	;# 
   205     009F                     	;# 
   206     0105                     	;# 
   207     0107                     	;# 
   208     0108                     	;# 
   209     0109                     	;# 
   210     010C                     	;# 
   211     010C                     	;# 
   212     010D                     	;# 
   213     010E                     	;# 
   214     010F                     	;# 
   215     0185                     	;# 
   216     0187                     	;# 
   217     0188                     	;# 
   218     0189                     	;# 
   219     018C                     	;# 
   220     018D                     	;# 
   221                           
   222                           	psect	idataBANK0
   223     041E                     __pidataBANK0:
   224                           
   225                           ;initializer for _RXTX_ADDR
   226     041E  34B5               	retlw	181
   227     041F  3423               	retlw	35
   228     0420  34A5               	retlw	165
   229     0013                     _SSPBUF	set	19
   230     0014                     _SSPCON	set	20
   231     001A                     _RCREG	set	26
   232     0019                     _TXREG	set	25
   233     0042                     _RD2	set	66
   234     0043                     _RD3	set	67
   235     0065                     _RCIF	set	101
   236     00C4                     _CREN	set	196
   237     00C7                     _SPEN	set	199
   238     008F                     _OSCCONbits	set	143
   239     0087                     _TRISCbits	set	135
   240     0094                     _SSPSTAT	set	148
   241     0099                     _SPBRG	set	153
   242     0442                     _TRISD2	set	1090
   243     0443                     _TRISD3	set	1091
   244     04A0                     _BF	set	1184
   245     04A7                     _SMP	set	1191
   246     04A6                     _CKE	set	1190
   247     04C1                     _TRMT	set	1217
   248     04C5                     _TXEN	set	1221
   249     043E                     _TRISC6	set	1086
   250     043F                     _TRISC7	set	1087
   251     04C4                     _SYNC	set	1220
   252     04C2                     _BRGH	set	1218
   253                           
   254                           	psect	strings
   255     0003                     __pstrings:
   256     0003                     stringtab:
   257     0003                     __stringtab:
   258                           
   259                           ;	String table - string pointers are 1 byte each
   260     0003  1BFF               	btfsc	btemp+1,7
   261     0004  280D               	ljmp	stringcode
   262     0005  1383               	bcf	3,7
   263     0006  187F               	btfsc	btemp+1,0
   264     0007  1783               	bsf	3,7
   265     0008  0800               	movf	0,w
   266     0009  0A84               	incf	4,f
   267     000A  1903               	skipnz
   268     000B  0AFF               	incf	btemp+1,f
   269     000C  0008               	return
   270     000D                     stringcode:
   271     000D                     stringdir:
   272     000D  3000               	movlw	high stringdir
   273     000E  008A               	movwf	10
   274     000F  0804               	movf	4,w
   275     0010  0A84               	incf	4,f
   276     0011  0782               	addwf	2,f
   277     0012                     __stringbase:
   278     0012  3400               	retlw	0
   279     0013                     __end_of__stringtab:
   280     0013                     STR_1:
   281     0013  3425               	retlw	37	;'%'
   282     0014  3463               	retlw	99	;'c'
   283     0015  3425               	retlw	37	;'%'
   284     0016  3463               	retlw	99	;'c'
   285     0017  3425               	retlw	37	;'%'
   286     0018  3463               	retlw	99	;'c'
   287     0019  3425               	retlw	37	;'%'
   288     001A  3463               	retlw	99	;'c'
   289     001B  3425               	retlw	37	;'%'
   290     001C  3463               	retlw	99	;'c'
   291     001D  3425               	retlw	37	;'%'
   292     001E  3463               	retlw	99	;'c'
   293     001F  3425               	retlw	37	;'%'
   294     0020  3463               	retlw	99	;'c'
   295     0021  3425               	retlw	37	;'%'
   296     0022  3463               	retlw	99	;'c'
   297     0023  340A               	retlw	10
   298     0024  3400               	retlw	0
   299     0025                     STR_2:
   300     0025  3442               	retlw	66	;'B'
   301     0026  344F               	retlw	79	;'O'
   302     0027  344F               	retlw	79	;'O'
   303     0028  3454               	retlw	84	;'T'
   304     0029  3445               	retlw	69	;'E'
   305     002A  3444               	retlw	68	;'D'
   306     002B  340A               	retlw	10
   307     002C  3400               	retlw	0
   308     002D                     STR_3:
   309     002D  3441               	retlw	65	;'A'
   310     002E  344C               	retlw	76	;'L'
   311     002F  3444               	retlw	68	;'D'
   312     0030  3441               	retlw	65	;'A'
   313     0031  3400               	retlw	0
   314     0032                     STR_6:
   315     0032  3447               	retlw	71	;'G'
   316     0033  3446               	retlw	70	;'F'
   317     0034  3445               	retlw	69	;'E'
   318     0035  3441               	retlw	65	;'A'
   319     0036  3400               	retlw	0
   320     0037                     STR_5:
   321     0037  3442               	retlw	66	;'B'
   322     0038  3455               	retlw	85	;'U'
   323     0039  3453               	retlw	83	;'S'
   324     003A  3441               	retlw	65	;'A'
   325     003B  3400               	retlw	0
   326     002D                     
   327                           	psect	cinit
   328     07E0                     start_initialization:	
   329                           ; #config settings
   330                           
   331     07E0                     __initialization:
   332                           
   333                           ; Initialize objects allocated to BANK0
   334     07E0  120A  118A  241E  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   335     07E5  00CC               	movwf	__pdataBANK0& (0+127)
   336     07E6  120A  118A  241F  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   337     07EB  00CD               	movwf	(__pdataBANK0+1)& (0+127)
   338     07EC  120A  118A  2420  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   339     07F1  00CE               	movwf	(__pdataBANK0+2)& (0+127)
   340                           
   341                           ; Clear objects allocated to BANK0
   342     07F2  01C2               	clrf	__pbssBANK0& (0+127)
   343     07F3  01C3               	clrf	(__pbssBANK0+1)& (0+127)
   344     07F4  01C4               	clrf	(__pbssBANK0+2)& (0+127)
   345     07F5  01C5               	clrf	(__pbssBANK0+3)& (0+127)
   346     07F6  01C6               	clrf	(__pbssBANK0+4)& (0+127)
   347     07F7  01C7               	clrf	(__pbssBANK0+5)& (0+127)
   348     07F8  01C8               	clrf	(__pbssBANK0+6)& (0+127)
   349     07F9  01C9               	clrf	(__pbssBANK0+7)& (0+127)
   350     07FA  01CA               	clrf	(__pbssBANK0+8)& (0+127)
   351     07FB  01CB               	clrf	(__pbssBANK0+9)& (0+127)
   352     07FC                     end_of_initialization:	
   353                           ;End of C runtime variable initialization code
   354                           
   355     07FC                     __end_of__initialization:
   356     07FC  0183               	clrf	3
   357     07FD  120A  118A  2E71   	ljmp	_main	;jump to C main() function
   358                           
   359                           	psect	bssBANK0
   360     0042                     __pbssBANK0:
   361     0042                     char_to_binary_string@output:
   362     0042                     	ds	10
   363                           
   364                           	psect	dataBANK0
   365     004C                     __pdataBANK0:
   366     004C                     _RXTX_ADDR:
   367     004C                     	ds	3
   368                           
   369                           	psect	cstackCOMMON
   370     0070                     __pcstackCOMMON:
   371     0070                     ?_UART_write:
   372     0070                     ??_UART_write:	
   373                           ; 1 bytes @ 0x0
   374                           
   375     0070                     ?_UART_write_text:	
   376                           ; 1 bytes @ 0x0
   377                           
   378     0070                     ?_SPI_init_master:	
   379                           ; 1 bytes @ 0x0
   380                           
   381     0070                     ??_SPI_init_master:	
   382                           ; 1 bytes @ 0x0
   383                           
   384     0070                     ?_SPI_write:	
   385                           ; 1 bytes @ 0x0
   386                           
   387     0070                     ??_SPI_write:	
   388                           ; 1 bytes @ 0x0
   389                           
   390     0070                     ?_arrcpy:	
   391                           ; 1 bytes @ 0x0
   392                           
   393     0070                     ?_nrf_write_command:	
   394                           ; 1 bytes @ 0x0
   395                           
   396     0070                     ?_nrf_flush_rxtx:	
   397                           ; 1 bytes @ 0x0
   398                           
   399     0070                     ?_nrf_set_tx_mode:	
   400                           ; 1 bytes @ 0x0
   401                           
   402     0070                     ?_main:	
   403                           ; 1 bytes @ 0x0
   404                           
   405     0070                     ?___aldiv:	
   406                           ; 2 bytes @ 0x0
   407                           
   408     0070                     UART_write@data:	
   409                           ; 4 bytes @ 0x0
   410                           
   411     0070                     SPI_write@data:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     arrcpy@src:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     ___aldiv@divisor:	
   418                           ; 2 bytes @ 0x0
   419                           
   420                           
   421                           ; 4 bytes @ 0x0
   422     0070                     	ds	1
   423     0071                     ??_UART_write_text:
   424     0071                     ?_nrf_command:	
   425                           ; 1 bytes @ 0x1
   426                           
   427     0071                     ??_nrf_write_command:	
   428                           ; 1 bytes @ 0x1
   429                           
   430     0071                     nrf_command@data:	
   431                           ; 1 bytes @ 0x1
   432                           
   433     0071                     nrf_write_command@NRF_command:	
   434                           ; 1 bytes @ 0x1
   435                           
   436     0071                     UART_write_text@i:	
   437                           ; 1 bytes @ 0x1
   438                           
   439                           
   440                           ; 2 bytes @ 0x1
   441     0071                     	ds	1
   442     0072                     arrcpy@len:
   443     0072                     nrf_command@len:	
   444                           ; 1 bytes @ 0x2
   445                           
   446     0072                     nrf_write_command@status:	
   447                           ; 1 bytes @ 0x2
   448                           
   449                           
   450                           ; 1 bytes @ 0x2
   451     0072                     	ds	1
   452     0073                     ??_arrcpy:
   453     0073                     ??_nrf_command:	
   454                           ; 1 bytes @ 0x3
   455                           
   456     0073                     UART_write_text@text:	
   457                           ; 1 bytes @ 0x3
   458                           
   459                           
   460                           ; 1 bytes @ 0x3
   461     0073                     	ds	1
   462     0074                     arrcpy@dst:
   463     0074                     ___aldiv@dividend:	
   464                           ; 1 bytes @ 0x4
   465                           
   466                           
   467                           ; 4 bytes @ 0x4
   468     0074                     	ds	1
   469     0075                     arrcpy@i:
   470     0075                     nrf_command@NRF_command:	
   471                           ; 1 bytes @ 0x5
   472                           
   473                           
   474                           ; 1 bytes @ 0x5
   475     0075                     	ds	1
   476     0076                     nrf_command@status:
   477                           
   478                           ; 1 bytes @ 0x6
   479     0076                     	ds	1
   480     0077                     nrf_command@i:
   481                           
   482                           ; 1 bytes @ 0x7
   483     0077                     	ds	1
   484     0078                     ?_nrf_write_register:
   485     0078                     ?_nrf_read_register:	
   486                           ; 1 bytes @ 0x8
   487                           
   488     0078                     ??___aldiv:	
   489                           ; 1 bytes @ 0x8
   490                           
   491     0078                     nrf_write_register@data:	
   492                           ; 1 bytes @ 0x8
   493                           
   494     0078                     nrf_read_register@data:	
   495                           ; 1 bytes @ 0x8
   496                           
   497                           
   498                           ; 1 bytes @ 0x8
   499     0078                     	ds	1
   500     0079                     nrf_write_register@len:
   501     0079                     nrf_read_register@len:	
   502                           ; 1 bytes @ 0x9
   503                           
   504                           
   505                           ; 1 bytes @ 0x9
   506     0079                     	ds	1
   507     007A                     ??_nrf_write_register:
   508     007A                     ??_nrf_read_register:	
   509                           ; 1 bytes @ 0xA
   510                           
   511     007A                     nrf_write_register@reg:	
   512                           ; 1 bytes @ 0xA
   513                           
   514     007A                     nrf_read_register@reg:	
   515                           ; 1 bytes @ 0xA
   516                           
   517                           
   518                           ; 1 bytes @ 0xA
   519     007A                     	ds	1
   520     007B                     ?_nrf_write_payload:
   521     007B                     ??_nrf_flush_rxtx:	
   522                           ; 1 bytes @ 0xB
   523                           
   524     007B                     ??_nrf_set_tx_mode:	
   525                           ; 1 bytes @ 0xB
   526                           
   527     007B                     nrf_write_payload@len:	
   528                           ; 1 bytes @ 0xB
   529                           
   530     007B                     nrf_flush_rxtx@data:	
   531                           ; 1 bytes @ 0xB
   532                           
   533     007B                     nrf_set_tx_mode@config:	
   534                           ; 1 bytes @ 0xB
   535                           
   536                           
   537                           ; 1 bytes @ 0xB
   538     007B                     	ds	1
   539     007C                     ??_nrf_write_payload:
   540     007C                     ?_nrf_setup:	
   541                           ; 1 bytes @ 0xC
   542                           
   543     007C                     nrf_setup@payload_size:	
   544                           ; 1 bytes @ 0xC
   545                           
   546                           
   547                           ; 1 bytes @ 0xC
   548     007C                     	ds	1
   549     007D                     nrf_write_payload@data:
   550                           
   551                           ; 1 bytes @ 0xD
   552     007D                     	ds	1
   553     007E                     ??_nrf_send:
   554                           
   555                           	psect	cstackBANK0
   556     0020                     __pcstackBANK0:	
   557                           ; 1 bytes @ 0xE
   558                           
   559     0020                     ??_nrf_setup:
   560     0020                     ?_nrf_send:	
   561                           ; 1 bytes @ 0x0
   562                           
   563     0020                     nrf_send@len:	
   564                           ; 1 bytes @ 0x0
   565                           
   566     0020                     ___aldiv@counter:	
   567                           ; 1 bytes @ 0x0
   568                           
   569                           
   570                           ; 1 bytes @ 0x0
   571     0020                     	ds	1
   572     0021                     nrf_send@stat:
   573     0021                     ___aldiv@sign:	
   574                           ; 1 bytes @ 0x1
   575                           
   576                           
   577                           ; 1 bytes @ 0x1
   578     0021                     	ds	1
   579     0022                     nrf_setup@rxtx_addr:
   580     0022                     nrf_send@clear:	
   581                           ; 1 bytes @ 0x2
   582                           
   583     0022                     ___aldiv@quotient:	
   584                           ; 1 bytes @ 0x2
   585                           
   586                           
   587                           ; 4 bytes @ 0x2
   588     0022                     	ds	1
   589     0023                     nrf_send@data:
   590     0023                     nrf_setup@data:	
   591                           ; 1 bytes @ 0x3
   592                           
   593                           
   594                           ; 5 bytes @ 0x3
   595     0023                     	ds	3
   596     0026                     ?_UART_init:
   597     0026                     UART_init@baudrate:	
   598                           ; 1 bytes @ 0x6
   599                           
   600                           
   601                           ; 4 bytes @ 0x6
   602     0026                     	ds	4
   603     002A                     UART_init@_XTAL_FREQ:
   604                           
   605                           ; 4 bytes @ 0xA
   606     002A                     	ds	4
   607     002E                     ??_UART_init:
   608                           
   609                           ; 1 bytes @ 0xE
   610     002E                     	ds	12
   611     003A                     ??_main:
   612                           
   613                           ; 1 bytes @ 0x1A
   614     003A                     	ds	3
   615     003D                     main@data:
   616                           
   617                           ; 5 bytes @ 0x1D
   618     003D                     	ds	5
   619                           
   620                           	psect	maintext
   621     0671                     __pmaintext:	
   622 ;;
   623 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   624 ;;
   625 ;; *************** function _main *****************
   626 ;; Defined at:
   627 ;;		line 312 in file "main.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;  data            5   29[BANK0 ] unsigned char [5]
   632 ;; Return value:  Size  Location     Type
   633 ;;                  2  183[None  ] int 
   634 ;; Registers used:
   635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : B00/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   641 ;;      Params:         0       0       0       0       0
   642 ;;      Locals:         0       5       0       0       0
   643 ;;      Temps:          0       3       0       0       0
   644 ;;      Totals:         0       8       0       0       0
   645 ;;Total ram usage:        8 bytes
   646 ;; Hardware stack levels required when called: 5
   647 ;; This function calls:
   648 ;;		_SPI_init_master
   649 ;;		_UART_init
   650 ;;		_UART_write_text
   651 ;;		_arrcpy
   652 ;;		_nrf_send
   653 ;;		_nrf_set_tx_mode
   654 ;;		_nrf_setup
   655 ;; This function is called by:
   656 ;;		Startup code after reset
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660     0671                     _main:	
   661                           ;psect for function _main
   662                           
   663     0671                     l1410:	
   664                           ;incstack = 0
   665                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   666                           
   667                           
   668                           ;main.c: 314:     OSCCONbits.IRCF = 111;
   669     0671  3070               	movlw	112
   670     0672  1683               	bsf	3,5	;RP0=1, select bank1
   671     0673  1303               	bcf	3,6	;RP1=0, select bank1
   672     0674  048F               	iorwf	15,f	;volatile
   673     0675                     l1412:
   674                           
   675                           ;main.c: 316:     UART_init(9600, 8000000UL);
   676     0675  3000               	movlw	0
   677     0676  1283               	bcf	3,5	;RP0=0, select bank0
   678     0677  1303               	bcf	3,6	;RP1=0, select bank0
   679     0678  00A9               	movwf	UART_init@baudrate+3
   680     0679  3000               	movlw	0
   681     067A  00A8               	movwf	UART_init@baudrate+2
   682     067B  3025               	movlw	37
   683     067C  00A7               	movwf	UART_init@baudrate+1
   684     067D  3080               	movlw	128
   685     067E  00A6               	movwf	UART_init@baudrate
   686     067F  3000               	movlw	0
   687     0680  00AD               	movwf	UART_init@_XTAL_FREQ+3
   688     0681  307A               	movlw	122
   689     0682  00AC               	movwf	UART_init@_XTAL_FREQ+2
   690     0683  3012               	movlw	18
   691     0684  00AB               	movwf	UART_init@_XTAL_FREQ+1
   692     0685  3000               	movlw	0
   693     0686  00AA               	movwf	UART_init@_XTAL_FREQ
   694     0687  120A  118A  2569  120A  118A  	fcall	_UART_init
   695     068C                     l1414:
   696                           
   697                           ;main.c: 318:     UART_write_text("BOOTED\n");
   698     068C  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   699     068D  120A  118A  24C2  120A  118A  	fcall	_UART_write_text
   700     0692                     l1416:
   701                           
   702                           ;main.c: 320:     SPI_init_master();
   703     0692  120A  118A  2439  120A  118A  	fcall	_SPI_init_master
   704     0697                     l1418:
   705                           
   706                           ;main.c: 324:     nrf_setup((uint8_t*)"ALDA", 5);
   707     0697  3005               	movlw	5
   708     0698  00FC               	movwf	nrf_setup@payload_size
   709     0699  301B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   710     069A  120A  118A  2722  120A  118A  	fcall	_nrf_setup
   711     069F                     l1420:
   712                           
   713                           ;main.c: 326:     nrf_set_tx_mode();
   714     069F  120A  118A  24A1  120A  118A  	fcall	_nrf_set_tx_mode
   715     06A4                     l1422:
   716                           
   717                           ;main.c: 331:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   718     06A4  3006               	movlw	6
   719     06A5  1283               	bcf	3,5	;RP0=0, select bank0
   720     06A6  1303               	bcf	3,6	;RP1=0, select bank0
   721     06A7  00BB               	movwf	??_main+1
   722     06A8  302F               	movlw	47
   723     06A9  00BA               	movwf	??_main
   724     06AA                     u627:
   725     06AA  0BBA               	decfsz	??_main,f
   726     06AB  2EAA               	goto	u627
   727     06AC  0BBB               	decfsz	??_main+1,f
   728     06AD  2EAA               	goto	u627
   729     06AE  2EAF               	nop2
   730     06AF                     l1424:
   731                           
   732                           ;main.c: 333:     {;main.c: 335:         uint8_t data[5];;main.c: 336:         arrcpy(da
      +                          ta, "ALDA", 5);
   733     06AF  301B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   734     06B0  00F0               	movwf	arrcpy@src
   735     06B1  3080               	movlw	128
   736     06B2  00F1               	movwf	arrcpy@src+1
   737     06B3  3005               	movlw	5
   738     06B4  00F2               	movwf	arrcpy@len
   739     06B5  303D               	movlw	(low (main@data| 0))& (0+255)
   740     06B6  120A  118A  24E7  120A  118A  	fcall	_arrcpy
   741     06BB                     l1426:
   742                           
   743                           ;main.c: 337:         nrf_send(data, 5);
   744     06BB  3005               	movlw	5
   745     06BC  1283               	bcf	3,5	;RP0=0, select bank0
   746     06BD  1303               	bcf	3,6	;RP1=0, select bank0
   747     06BE  00A0               	movwf	nrf_send@len
   748     06BF  303D               	movlw	(low (main@data| 0))& (0+255)
   749     06C0  120A  118A  250C  120A  118A  	fcall	_nrf_send
   750     06C5                     l1428:
   751                           
   752                           ;main.c: 338:         _delay((unsigned long)((200)*(8000000UL/4000.0)));
   753     06C5  3003               	movlw	3
   754     06C6  1283               	bcf	3,5	;RP0=0, select bank0
   755     06C7  1303               	bcf	3,6	;RP1=0, select bank0
   756     06C8  00BC               	movwf	??_main+2
   757     06C9  3008               	movlw	8
   758     06CA  00BB               	movwf	??_main+1
   759     06CB  3076               	movlw	118
   760     06CC  00BA               	movwf	??_main
   761     06CD                     u637:
   762     06CD  0BBA               	decfsz	??_main,f
   763     06CE  2ECD               	goto	u637
   764     06CF  0BBB               	decfsz	??_main+1,f
   765     06D0  2ECD               	goto	u637
   766     06D1  0BBC               	decfsz	??_main+2,f
   767     06D2  2ECD               	goto	u637
   768     06D3  0000               	nop
   769     06D4                     l1430:
   770                           
   771                           ;main.c: 339:         arrcpy(data, "BUSA", 5);
   772     06D4  3025               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   773     06D5  00F0               	movwf	arrcpy@src
   774     06D6  3080               	movlw	128
   775     06D7  00F1               	movwf	arrcpy@src+1
   776     06D8  3005               	movlw	5
   777     06D9  00F2               	movwf	arrcpy@len
   778     06DA  303D               	movlw	(low (main@data| 0))& (0+255)
   779     06DB  120A  118A  24E7  120A  118A  	fcall	_arrcpy
   780     06E0                     l1432:
   781                           
   782                           ;main.c: 341:         nrf_send(data, 5);
   783     06E0  3005               	movlw	5
   784     06E1  1283               	bcf	3,5	;RP0=0, select bank0
   785     06E2  1303               	bcf	3,6	;RP1=0, select bank0
   786     06E3  00A0               	movwf	nrf_send@len
   787     06E4  303D               	movlw	(low (main@data| 0))& (0+255)
   788     06E5  120A  118A  250C  120A  118A  	fcall	_nrf_send
   789     06EA                     l1434:
   790                           
   791                           ;main.c: 342:         _delay((unsigned long)((200)*(8000000UL/4000.0)));
   792     06EA  3003               	movlw	3
   793     06EB  1283               	bcf	3,5	;RP0=0, select bank0
   794     06EC  1303               	bcf	3,6	;RP1=0, select bank0
   795     06ED  00BC               	movwf	??_main+2
   796     06EE  3008               	movlw	8
   797     06EF  00BB               	movwf	??_main+1
   798     06F0  3076               	movlw	118
   799     06F1  00BA               	movwf	??_main
   800     06F2                     u647:
   801     06F2  0BBA               	decfsz	??_main,f
   802     06F3  2EF2               	goto	u647
   803     06F4  0BBB               	decfsz	??_main+1,f
   804     06F5  2EF2               	goto	u647
   805     06F6  0BBC               	decfsz	??_main+2,f
   806     06F7  2EF2               	goto	u647
   807     06F8  0000               	nop
   808     06F9                     l1436:
   809                           
   810                           ;main.c: 343:         arrcpy(data, "GFEA", 5);
   811     06F9  3020               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   812     06FA  00F0               	movwf	arrcpy@src
   813     06FB  3080               	movlw	128
   814     06FC  00F1               	movwf	arrcpy@src+1
   815     06FD  3005               	movlw	5
   816     06FE  00F2               	movwf	arrcpy@len
   817     06FF  303D               	movlw	(low (main@data| 0))& (0+255)
   818     0700  120A  118A  24E7  120A  118A  	fcall	_arrcpy
   819     0705                     l1438:
   820                           
   821                           ;main.c: 345:         nrf_send(data, 5);
   822     0705  3005               	movlw	5
   823     0706  1283               	bcf	3,5	;RP0=0, select bank0
   824     0707  1303               	bcf	3,6	;RP1=0, select bank0
   825     0708  00A0               	movwf	nrf_send@len
   826     0709  303D               	movlw	(low (main@data| 0))& (0+255)
   827     070A  120A  118A  250C  120A  118A  	fcall	_nrf_send
   828     070F                     l1440:
   829                           
   830                           ;main.c: 346:         _delay((unsigned long)((200)*(8000000UL/4000.0)));
   831     070F  3003               	movlw	3
   832     0710  1283               	bcf	3,5	;RP0=0, select bank0
   833     0711  1303               	bcf	3,6	;RP1=0, select bank0
   834     0712  00BC               	movwf	??_main+2
   835     0713  3008               	movlw	8
   836     0714  00BB               	movwf	??_main+1
   837     0715  3076               	movlw	118
   838     0716  00BA               	movwf	??_main
   839     0717                     u657:
   840     0717  0BBA               	decfsz	??_main,f
   841     0718  2F17               	goto	u657
   842     0719  0BBB               	decfsz	??_main+1,f
   843     071A  2F17               	goto	u657
   844     071B  0BBC               	decfsz	??_main+2,f
   845     071C  2F17               	goto	u657
   846     071D  0000               	nop
   847     071E  2EAF               	goto	l1424
   848     071F  120A  118A  2800   	ljmp	start
   849     0722                     __end_of_main:
   850                           
   851                           	psect	text1
   852     0722                     __ptext1:	
   853 ;; *************** function _nrf_setup *****************
   854 ;; Defined at:
   855 ;;		line 202 in file "main.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  rxtx_addr       1    wreg     PTR unsigned char 
   858 ;;		 -> STR_3(5), 
   859 ;;  payload_size    1   12[COMMON] unsigned char 
   860 ;; Auto vars:     Size  Location     Type
   861 ;;  rxtx_addr       1    2[BANK0 ] PTR unsigned char 
   862 ;;		 -> STR_3(5), 
   863 ;;  data            5    3[BANK0 ] unsigned char [5]
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   873 ;;      Params:         1       0       0       0       0
   874 ;;      Locals:         0       6       0       0       0
   875 ;;      Temps:          0       2       0       0       0
   876 ;;      Totals:         1       8       0       0       0
   877 ;;Total ram usage:        9 bytes
   878 ;; Hardware stack levels used: 1
   879 ;; Hardware stack levels required when called: 4
   880 ;; This function calls:
   881 ;;		_arrcpy
   882 ;;		_nrf_flush_rxtx
   883 ;;		_nrf_write_register
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889     0722                     _nrf_setup:	
   890                           ;psect for function _nrf_setup
   891                           
   892     0722                     l1272:	
   893                           ;incstack = 0
   894                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   895                           
   896                           
   897                           ;main.c: 202: void nrf_setup(uint8_t *rxtx_addr, uint8_t payload_size);main.c: 203: {;ma
      +                          in.c: 204:     TRISD3 = 0;
   898     0722  1683               	bsf	3,5	;RP0=1, select bank1
   899     0723  1303               	bcf	3,6	;RP1=0, select bank1
   900     0724  1188               	bcf	8,3	;volatile
   901                           
   902                           ;main.c: 205:     TRISD2 = 0;
   903     0725  1108               	bcf	8,2	;volatile
   904     0726                     l1274:
   905                           
   906                           ;main.c: 207:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   907     0726  3006               	movlw	6
   908     0727  1283               	bcf	3,5	;RP0=0, select bank0
   909     0728  1303               	bcf	3,6	;RP1=0, select bank0
   910     0729  00A1               	movwf	??_nrf_setup+1
   911     072A  302F               	movlw	47
   912     072B  00A0               	movwf	??_nrf_setup
   913     072C                     u667:
   914     072C  0BA0               	decfsz	??_nrf_setup,f
   915     072D  2F2C               	goto	u667
   916     072E  0BA1               	decfsz	??_nrf_setup+1,f
   917     072F  2F2C               	goto	u667
   918     0730  2F31               	nop2
   919     0731                     l1276:
   920                           
   921                           ;main.c: 209:     RD3 = 1;
   922     0731  1283               	bcf	3,5	;RP0=0, select bank0
   923     0732  1303               	bcf	3,6	;RP1=0, select bank0
   924     0733  1588               	bsf	8,3	;volatile
   925     0734                     l1278:
   926                           
   927                           ;main.c: 210:     RD2 = 0;
   928     0734  1108               	bcf	8,2	;volatile
   929                           
   930                           ;main.c: 212:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   931     0735  3006               	movlw	6
   932     0736  1283               	bcf	3,5	;RP0=0, select bank0
   933     0737  1303               	bcf	3,6	;RP1=0, select bank0
   934     0738  00A1               	movwf	??_nrf_setup+1
   935     0739  302F               	movlw	47
   936     073A  00A0               	movwf	??_nrf_setup
   937     073B                     u677:
   938     073B  0BA0               	decfsz	??_nrf_setup,f
   939     073C  2F3B               	goto	u677
   940     073D  0BA1               	decfsz	??_nrf_setup+1,f
   941     073E  2F3B               	goto	u677
   942     073F  2F40               	nop2
   943                           
   944                           ;main.c: 214:     uint8_t data[5];;main.c: 216:     data[0] = 0x0B;
   945     0740  300B               	movlw	11
   946     0741  1283               	bcf	3,5	;RP0=0, select bank0
   947     0742  1303               	bcf	3,6	;RP1=0, select bank0
   948     0743  00A3               	movwf	nrf_setup@data
   949     0744                     l1280:
   950                           
   951                           ;main.c: 217:     nrf_write_register(0x00, &data, 1);
   952     0744  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
   953     0745  00F8               	movwf	nrf_write_register@data
   954     0746  01F9               	clrf	nrf_write_register@len
   955     0747  0AF9               	incf	nrf_write_register@len,f
   956     0748  3000               	movlw	0
   957     0749  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
   958     074E                     l1282:
   959                           
   960                           ;main.c: 218:     data[0] = 0x00;
   961     074E  1283               	bcf	3,5	;RP0=0, select bank0
   962     074F  1303               	bcf	3,6	;RP1=0, select bank0
   963     0750  01A3               	clrf	nrf_setup@data
   964     0751                     l1284:
   965                           
   966                           ;main.c: 219:     nrf_write_register(0x01, &data, 1);
   967     0751  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
   968     0752  00F8               	movwf	nrf_write_register@data
   969     0753  01F9               	clrf	nrf_write_register@len
   970     0754  0AF9               	incf	nrf_write_register@len,f
   971     0755  3001               	movlw	1
   972     0756  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
   973     075B                     l1286:
   974                           
   975                           ;main.c: 220:     data[0] = 0x01;
   976     075B  1283               	bcf	3,5	;RP0=0, select bank0
   977     075C  1303               	bcf	3,6	;RP1=0, select bank0
   978     075D  01A3               	clrf	nrf_setup@data
   979     075E  0AA3               	incf	nrf_setup@data,f
   980     075F                     l1288:
   981                           
   982                           ;main.c: 221:     nrf_write_register(0x02, &data, 1);
   983     075F  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
   984     0760  00F8               	movwf	nrf_write_register@data
   985     0761  01F9               	clrf	nrf_write_register@len
   986     0762  0AF9               	incf	nrf_write_register@len,f
   987     0763  3002               	movlw	2
   988     0764  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
   989     0769                     l1290:
   990                           
   991                           ;main.c: 222:     data[0] = 0x01;
   992     0769  1283               	bcf	3,5	;RP0=0, select bank0
   993     076A  1303               	bcf	3,6	;RP1=0, select bank0
   994     076B  01A3               	clrf	nrf_setup@data
   995     076C  0AA3               	incf	nrf_setup@data,f
   996     076D                     l1292:
   997                           
   998                           ;main.c: 223:     nrf_write_register(0x03, &data, 1);
   999     076D  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1000     076E  00F8               	movwf	nrf_write_register@data
  1001     076F  01F9               	clrf	nrf_write_register@len
  1002     0770  0AF9               	incf	nrf_write_register@len,f
  1003     0771  3003               	movlw	3
  1004     0772  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1005     0777                     l1294:
  1006                           
  1007                           ;main.c: 224:     data[0] = 0x00;
  1008     0777  1283               	bcf	3,5	;RP0=0, select bank0
  1009     0778  1303               	bcf	3,6	;RP1=0, select bank0
  1010     0779  01A3               	clrf	nrf_setup@data
  1011     077A                     l1296:
  1012                           
  1013                           ;main.c: 225:     nrf_write_register(0x04, &data, 1);
  1014     077A  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1015     077B  00F8               	movwf	nrf_write_register@data
  1016     077C  01F9               	clrf	nrf_write_register@len
  1017     077D  0AF9               	incf	nrf_write_register@len,f
  1018     077E  3004               	movlw	4
  1019     077F  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1020     0784                     l1298:
  1021                           
  1022                           ;main.c: 226:     data[0] = 0x01;
  1023     0784  1283               	bcf	3,5	;RP0=0, select bank0
  1024     0785  1303               	bcf	3,6	;RP1=0, select bank0
  1025     0786  01A3               	clrf	nrf_setup@data
  1026     0787  0AA3               	incf	nrf_setup@data,f
  1027     0788                     l1300:
  1028                           
  1029                           ;main.c: 227:     nrf_write_register(0x05, &data, 1);
  1030     0788  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1031     0789  00F8               	movwf	nrf_write_register@data
  1032     078A  01F9               	clrf	nrf_write_register@len
  1033     078B  0AF9               	incf	nrf_write_register@len,f
  1034     078C  3005               	movlw	5
  1035     078D  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1036                           
  1037                           ;main.c: 228:     data[0] = 0x26;
  1038     0792  3026               	movlw	38
  1039     0793  1283               	bcf	3,5	;RP0=0, select bank0
  1040     0794  1303               	bcf	3,6	;RP1=0, select bank0
  1041     0795  00A3               	movwf	nrf_setup@data
  1042     0796                     l1302:
  1043                           
  1044                           ;main.c: 229:     nrf_write_register(0x06, &data, 1);
  1045     0796  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1046     0797  00F8               	movwf	nrf_write_register@data
  1047     0798  01F9               	clrf	nrf_write_register@len
  1048     0799  0AF9               	incf	nrf_write_register@len,f
  1049     079A  3006               	movlw	6
  1050     079B  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1051     07A0                     l1304:
  1052                           
  1053                           ;main.c: 230:     data[0] = 0x05;
  1054     07A0  3005               	movlw	5
  1055     07A1  1283               	bcf	3,5	;RP0=0, select bank0
  1056     07A2  1303               	bcf	3,6	;RP1=0, select bank0
  1057     07A3  00A3               	movwf	nrf_setup@data
  1058                           
  1059                           ;main.c: 231:     nrf_write_register(0x11, &data, 1);
  1060     07A4  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1061     07A5  00F8               	movwf	nrf_write_register@data
  1062     07A6  01F9               	clrf	nrf_write_register@len
  1063     07A7  0AF9               	incf	nrf_write_register@len,f
  1064     07A8  3011               	movlw	17
  1065     07A9  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1066                           
  1067                           ;main.c: 233:     arrcpy(data, RXTX_ADDR, sizeof(RXTX_ADDR));
  1068     07AE  304C               	movlw	(low (_RXTX_ADDR| 0))& (0+255)
  1069     07AF  00F0               	movwf	arrcpy@src
  1070     07B0  3000               	movlw	0
  1071     07B1  00F1               	movwf	arrcpy@src+1
  1072     07B2  3003               	movlw	3
  1073     07B3  00F2               	movwf	arrcpy@len
  1074     07B4  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1075     07B5  120A  118A  24E7  120A  118A  	fcall	_arrcpy
  1076                           
  1077                           ;main.c: 234:     nrf_write_register(0x0A, data, sizeof(RXTX_ADDR));
  1078     07BA  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1079     07BB  00F8               	movwf	nrf_write_register@data
  1080     07BC  3003               	movlw	3
  1081     07BD  00F9               	movwf	nrf_write_register@len
  1082     07BE  300A               	movlw	10
  1083     07BF  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1084                           
  1085                           ;main.c: 236:     arrcpy(data, RXTX_ADDR, sizeof(RXTX_ADDR));
  1086     07C4  304C               	movlw	(low (_RXTX_ADDR| 0))& (0+255)
  1087     07C5  00F0               	movwf	arrcpy@src
  1088     07C6  3000               	movlw	0
  1089     07C7  00F1               	movwf	arrcpy@src+1
  1090     07C8  3003               	movlw	3
  1091     07C9  00F2               	movwf	arrcpy@len
  1092     07CA  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1093     07CB  120A  118A  24E7  120A  118A  	fcall	_arrcpy
  1094                           
  1095                           ;main.c: 237:     nrf_write_register(0x10, data, sizeof(RXTX_ADDR));
  1096     07D0  3023               	movlw	(low (nrf_setup@data| 0))& (0+255)
  1097     07D1  00F8               	movwf	nrf_write_register@data
  1098     07D2  3003               	movlw	3
  1099     07D3  00F9               	movwf	nrf_write_register@len
  1100     07D4  3010               	movlw	16
  1101     07D5  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1102                           
  1103                           ;main.c: 239:     nrf_flush_rxtx();
  1104     07DA  120A  118A  2488  120A  118A  	fcall	_nrf_flush_rxtx
  1105     07DF                     l160:
  1106     07DF  0008               	return
  1107     07E0                     __end_of_nrf_setup:
  1108                           
  1109                           	psect	text2
  1110     0488                     __ptext2:	
  1111 ;; *************** function _nrf_flush_rxtx *****************
  1112 ;; Defined at:
  1113 ;;		line 187 in file "main.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  data            1   11[COMMON] unsigned char 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1127 ;;      Params:         0       0       0       0       0
  1128 ;;      Locals:         1       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0
  1130 ;;      Totals:         1       0       0       0       0
  1131 ;;Total ram usage:        1 bytes
  1132 ;; Hardware stack levels used: 1
  1133 ;; Hardware stack levels required when called: 3
  1134 ;; This function calls:
  1135 ;;		_nrf_write_command
  1136 ;;		_nrf_write_register
  1137 ;; This function is called by:
  1138 ;;		_nrf_setup
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142     0488                     _nrf_flush_rxtx:	
  1143                           ;psect for function _nrf_flush_rxtx
  1144                           
  1145     0488                     l1172:	
  1146                           ;incstack = 0
  1147                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1148                           
  1149                           
  1150                           ;main.c: 189:     uint8_t data = 0b01110000;
  1151     0488  3070               	movlw	112
  1152     0489  00FB               	movwf	nrf_flush_rxtx@data
  1153     048A                     l1174:
  1154                           
  1155                           ;main.c: 190:     nrf_write_register(0x07, &data, 1);
  1156     048A  307B               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1157     048B  00F8               	movwf	nrf_write_register@data
  1158     048C  01F9               	clrf	nrf_write_register@len
  1159     048D  0AF9               	incf	nrf_write_register@len,f
  1160     048E  3007               	movlw	7
  1161     048F  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1162     0494                     l1176:
  1163                           
  1164                           ;main.c: 191:     nrf_write_command(0b11100001);
  1165     0494  30E1               	movlw	225
  1166     0495  120A  118A  2462  120A  118A  	fcall	_nrf_write_command
  1167     049A                     l1178:
  1168                           
  1169                           ;main.c: 192:     nrf_write_command(0b11100010);
  1170     049A  30E2               	movlw	226
  1171     049B  120A  118A  2462  120A  118A  	fcall	_nrf_write_command
  1172     04A0                     l157:
  1173     04A0  0008               	return
  1174     04A1                     __end_of_nrf_flush_rxtx:
  1175                           
  1176                           	psect	text3
  1177     04E7                     __ptext3:	
  1178 ;; *************** function _arrcpy *****************
  1179 ;; Defined at:
  1180 ;;		line 47 in file "main.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  dst             1    wreg     PTR unsigned char 
  1183 ;;		 -> main@data(5), nrf_setup@data(5), 
  1184 ;;  src             2    0[COMMON] PTR unsigned char 
  1185 ;;		 -> STR_6(5), STR_5(5), STR_4(5), RXTX_ADDR(3), 
  1186 ;;  len             1    2[COMMON] unsigned char 
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;  dst             1    4[COMMON] PTR unsigned char 
  1189 ;;		 -> main@data(5), nrf_setup@data(5), 
  1190 ;;  i               1    5[COMMON] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1200 ;;      Params:         3       0       0       0       0
  1201 ;;      Locals:         2       0       0       0       0
  1202 ;;      Temps:          1       0       0       0       0
  1203 ;;      Totals:         6       0       0       0       0
  1204 ;;Total ram usage:        6 bytes
  1205 ;; Hardware stack levels used: 2
  1206 ;; This function calls:
  1207 ;;		Nothing
  1208 ;; This function is called by:
  1209 ;;		_nrf_setup
  1210 ;;		_main
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214     04E7                     _arrcpy:	
  1215                           ;psect for function _arrcpy
  1216                           
  1217                           
  1218                           ;incstack = 0
  1219                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1220                           ;arrcpy@dst stored from wreg
  1221     04E7  00F4               	movwf	arrcpy@dst
  1222     04E8                     l1156:
  1223                           
  1224                           ;main.c: 47: void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);main.c: 48: {;main.c: 
      +                          49:     for (uint8_t i = 0; i < len; i++)
  1225     04E8  01F5               	clrf	arrcpy@i
  1226     04E9  2D05               	goto	l1162
  1227     04EA                     l1158:
  1228                           
  1229                           ;main.c: 50:     {;main.c: 51:         dst[i] = src[i];
  1230     04EA  0875               	movf	arrcpy@i,w
  1231     04EB  0770               	addwf	arrcpy@src,w
  1232     04EC  0084               	movwf	4
  1233     04ED  0871               	movf	arrcpy@src+1,w
  1234     04EE  1803               	skipnc
  1235     04EF  0A71               	incf	arrcpy@src+1,w
  1236     04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1237     04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1238     04F2  00FF               	movwf	btemp+1
  1239     04F3  120A  118A  2003  120A  118A  	fcall	stringtab
  1240     04F8  00FF               	movwf	btemp+1
  1241     04F9  0875               	movf	arrcpy@i,w
  1242     04FA  0774               	addwf	arrcpy@dst,w
  1243     04FB  00F3               	movwf	??_arrcpy
  1244     04FC  0873               	movf	??_arrcpy,w
  1245     04FD  0084               	movwf	4
  1246     04FE  087F               	movf	btemp+1,w
  1247     04FF  1383               	bcf	3,7	;select IRP bank0
  1248     0500  0080               	movwf	0
  1249     0501                     l1160:
  1250                           
  1251                           ;main.c: 52:     }
  1252     0501  3001               	movlw	1
  1253     0502  00FF               	movwf	btemp+1
  1254     0503  087F               	movf	btemp+1,w
  1255     0504  07F5               	addwf	arrcpy@i,f
  1256     0505                     l1162:
  1257     0505  0872               	movf	arrcpy@len,w
  1258     0506  0275               	subwf	arrcpy@i,w
  1259     0507  1C03               	skipc
  1260     0508  2D0A               	goto	u351
  1261     0509  2D0B               	goto	u350
  1262     050A                     u351:
  1263     050A  2CEA               	goto	l1158
  1264     050B                     u350:
  1265     050B                     l134:
  1266     050B  0008               	return
  1267     050C                     __end_of_arrcpy:
  1268                           
  1269                           	psect	text4
  1270     050C                     __ptext4:	
  1271 ;; *************** function _nrf_send *****************
  1272 ;; Defined at:
  1273 ;;		line 284 in file "main.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;  data            1    wreg     PTR unsigned char 
  1276 ;;		 -> main@data(5), 
  1277 ;;  len             1    0[BANK0 ] unsigned char 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  data            1    3[BANK0 ] PTR unsigned char 
  1280 ;;		 -> main@data(5), 
  1281 ;;  clear           1    2[BANK0 ] unsigned char 
  1282 ;;  stat            1    1[BANK0 ] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1292 ;;      Params:         0       1       0       0       0
  1293 ;;      Locals:         0       3       0       0       0
  1294 ;;      Temps:          0       0       0       0       0
  1295 ;;      Totals:         0       4       0       0       0
  1296 ;;Total ram usage:        4 bytes
  1297 ;; Hardware stack levels used: 1
  1298 ;; Hardware stack levels required when called: 4
  1299 ;; This function calls:
  1300 ;;		_nrf_set_tx_mode
  1301 ;;		_nrf_write_command
  1302 ;;		_nrf_write_payload
  1303 ;;		_nrf_write_register
  1304 ;; This function is called by:
  1305 ;;		_main
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309     050C                     _nrf_send:	
  1310                           ;psect for function _nrf_send
  1311                           
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in _nrf_send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1315                           ;nrf_send@data stored from wreg
  1316     050C  1283               	bcf	3,5	;RP0=0, select bank0
  1317     050D  1303               	bcf	3,6	;RP1=0, select bank0
  1318     050E  00A3               	movwf	nrf_send@data
  1319     050F                     l1306:
  1320                           
  1321                           ;main.c: 284: void nrf_send(uint8_t *data, uint8_t len);main.c: 285: {;main.c: 286:     
      +                          nrf_set_tx_mode();
  1322     050F  120A  118A  24A1  120A  118A  	fcall	_nrf_set_tx_mode
  1323                           
  1324                           ;main.c: 287:     nrf_write_payload(data, len);
  1325     0514  1283               	bcf	3,5	;RP0=0, select bank0
  1326     0515  1303               	bcf	3,6	;RP1=0, select bank0
  1327     0516  0820               	movf	nrf_send@len,w
  1328     0517  00FB               	movwf	nrf_write_payload@len
  1329     0518  0823               	movf	nrf_send@data,w
  1330     0519  120A  118A  2472  120A  118A  	fcall	_nrf_write_payload
  1331     051E                     l1308:
  1332                           
  1333                           ;main.c: 292:     {;main.c: 293:         stat = nrf_write_command(0b11111111);
  1334     051E  30FF               	movlw	255
  1335     051F  120A  118A  2462  120A  118A  	fcall	_nrf_write_command
  1336     0524  1283               	bcf	3,5	;RP0=0, select bank0
  1337     0525  1303               	bcf	3,6	;RP1=0, select bank0
  1338     0526  00A1               	movwf	nrf_send@stat
  1339     0527                     l1310:
  1340                           
  1341                           ;main.c: 294:     } while ((stat & 0x20) == 0);
  1342     0527  1EA1               	btfss	nrf_send@stat,5
  1343     0528  2D2A               	goto	u511
  1344     0529  2D2B               	goto	u510
  1345     052A                     u511:
  1346     052A  2D1E               	goto	l1308
  1347     052B                     u510:
  1348     052B                     l1312:
  1349                           
  1350                           ;main.c: 297:     uint8_t clear = 0x20;
  1351     052B  3020               	movlw	32
  1352     052C  00A2               	movwf	nrf_send@clear
  1353     052D                     l1314:
  1354                           
  1355                           ;main.c: 298:     nrf_write_register(0x07, &clear, 1);
  1356     052D  3022               	movlw	(low (nrf_send@clear| 0))& (0+255)
  1357     052E  00F8               	movwf	nrf_write_register@data
  1358     052F  01F9               	clrf	nrf_write_register@len
  1359     0530  0AF9               	incf	nrf_write_register@len,f
  1360     0531  3007               	movlw	7
  1361     0532  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1362     0537                     l176:
  1363     0537  0008               	return
  1364     0538                     __end_of_nrf_send:
  1365                           
  1366                           	psect	text5
  1367     0472                     __ptext5:	
  1368 ;; *************** function _nrf_write_payload *****************
  1369 ;; Defined at:
  1370 ;;		line 163 in file "main.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  data            1    wreg     PTR unsigned char 
  1373 ;;		 -> main@data(5), 
  1374 ;;  len             1   11[COMMON] unsigned char 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  data            1   13[COMMON] PTR unsigned char 
  1377 ;;		 -> main@data(5), 
  1378 ;;  status          1    0        unsigned char 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      unsigned char 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1388 ;;      Params:         1       0       0       0       0
  1389 ;;      Locals:         1       0       0       0       0
  1390 ;;      Temps:          1       0       0       0       0
  1391 ;;      Totals:         3       0       0       0       0
  1392 ;;Total ram usage:        3 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; Hardware stack levels required when called: 3
  1395 ;; This function calls:
  1396 ;;		_nrf_write_register
  1397 ;; This function is called by:
  1398 ;;		_nrf_send
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402     0472                     _nrf_write_payload:	
  1403                           ;psect for function _nrf_write_payload
  1404                           
  1405                           
  1406                           ;incstack = 0
  1407                           ; Regs used in _nrf_write_payload: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1408                           ;nrf_write_payload@data stored from wreg
  1409     0472  00FD               	movwf	nrf_write_payload@data
  1410     0473                     l1164:
  1411     0473  087D               	movf	nrf_write_payload@data,w
  1412     0474  00F8               	movwf	nrf_write_register@data
  1413     0475  087B               	movf	nrf_write_payload@len,w
  1414     0476  00F9               	movwf	nrf_write_register@len
  1415     0477  30A0               	movlw	160
  1416     0478  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1417     047D                     l1166:
  1418                           
  1419                           ;main.c: 166:     RD2 = 1;
  1420     047D  1283               	bcf	3,5	;RP0=0, select bank0
  1421     047E  1303               	bcf	3,6	;RP1=0, select bank0
  1422     047F  1508               	bsf	8,2	;volatile
  1423     0480                     l1168:
  1424                           
  1425                           ;main.c: 167:     _delay((unsigned long)((20)*(8000000UL/4000000.0)));
  1426     0480  300D               	movlw	13
  1427     0481  00FC               	movwf	??_nrf_write_payload
  1428     0482                     u687:
  1429     0482  0BFC               	decfsz	??_nrf_write_payload,f
  1430     0483  2C82               	goto	u687
  1431     0484                     l1170:
  1432                           
  1433                           ;main.c: 168:     RD2 = 0;
  1434     0484  1283               	bcf	3,5	;RP0=0, select bank0
  1435     0485  1303               	bcf	3,6	;RP1=0, select bank0
  1436     0486  1108               	bcf	8,2	;volatile
  1437     0487                     l151:
  1438     0487  0008               	return
  1439     0488                     __end_of_nrf_write_payload:
  1440                           
  1441                           	psect	text6
  1442     0462                     __ptext6:	
  1443 ;; *************** function _nrf_write_command *****************
  1444 ;; Defined at:
  1445 ;;		line 173 in file "main.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;  NRF_command     1    wreg     unsigned char 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  NRF_command     1    1[COMMON] unsigned char 
  1450 ;;  status          1    2[COMMON] unsigned char 
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  1    wreg      unsigned char 
  1453 ;; Registers used:
  1454 ;;		wreg, pclath, cstack
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1460 ;;      Params:         0       0       0       0       0
  1461 ;;      Locals:         2       0       0       0       0
  1462 ;;      Temps:          0       0       0       0       0
  1463 ;;      Totals:         2       0       0       0       0
  1464 ;;Total ram usage:        2 bytes
  1465 ;; Hardware stack levels used: 1
  1466 ;; Hardware stack levels required when called: 1
  1467 ;; This function calls:
  1468 ;;		_SPI_write
  1469 ;; This function is called by:
  1470 ;;		_nrf_flush_rxtx
  1471 ;;		_nrf_send
  1472 ;;		_nrf_data_available
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476     0462                     _nrf_write_command:	
  1477                           ;psect for function _nrf_write_command
  1478                           
  1479                           
  1480                           ;incstack = 0
  1481                           ; Regs used in _nrf_write_command: [wreg+pclath+cstack]
  1482                           ;nrf_write_command@NRF_command stored from wreg
  1483     0462  00F1               	movwf	nrf_write_command@NRF_command
  1484     0463                     l1142:
  1485                           
  1486                           ;main.c: 173: uint8_t nrf_write_command(uint8_t NRF_command);main.c: 174: {;main.c: 175:
      +                               RD3 = 0;
  1487     0463  1283               	bcf	3,5	;RP0=0, select bank0
  1488     0464  1303               	bcf	3,6	;RP1=0, select bank0
  1489     0465  1188               	bcf	8,3	;volatile
  1490     0466                     l1144:
  1491                           
  1492                           ;main.c: 176:     uint8_t status = SPI_write(NRF_command);
  1493     0466  0871               	movf	nrf_write_command@NRF_command,w
  1494     0467  120A  118A  2453  120A  118A  	fcall	_SPI_write
  1495     046C  00F2               	movwf	nrf_write_command@status
  1496     046D                     l1146:
  1497                           
  1498                           ;main.c: 177:     RD3 = 1;
  1499     046D  1283               	bcf	3,5	;RP0=0, select bank0
  1500     046E  1303               	bcf	3,6	;RP1=0, select bank0
  1501     046F  1588               	bsf	8,3	;volatile
  1502     0470                     l1148:
  1503                           
  1504                           ;main.c: 178:     return status;
  1505     0470  0872               	movf	nrf_write_command@status,w
  1506     0471                     l154:
  1507     0471  0008               	return
  1508     0472                     __end_of_nrf_write_command:
  1509                           
  1510                           	psect	text7
  1511     04A1                     __ptext7:	
  1512 ;; *************** function _nrf_set_tx_mode *****************
  1513 ;; Defined at:
  1514 ;;		line 260 in file "main.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  config          1   11[COMMON] unsigned char 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1528 ;;      Params:         0       0       0       0       0
  1529 ;;      Locals:         1       0       0       0       0
  1530 ;;      Temps:          0       0       0       0       0
  1531 ;;      Totals:         1       0       0       0       0
  1532 ;;Total ram usage:        1 bytes
  1533 ;; Hardware stack levels used: 1
  1534 ;; Hardware stack levels required when called: 3
  1535 ;; This function calls:
  1536 ;;		_nrf_read_register
  1537 ;;		_nrf_write_register
  1538 ;; This function is called by:
  1539 ;;		_nrf_send
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544     04A1                     _nrf_set_tx_mode:	
  1545                           ;psect for function _nrf_set_tx_mode
  1546                           
  1547     04A1                     l1180:	
  1548                           ;incstack = 0
  1549                           ; Regs used in _nrf_set_tx_mode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1550                           
  1551                           
  1552                           ;main.c: 262:     uint8_t config;;main.c: 263:     nrf_read_register(0x00, &config, 1);
  1553     04A1  307B               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1554     04A2  00F8               	movwf	nrf_read_register@data
  1555     04A3  01F9               	clrf	nrf_read_register@len
  1556     04A4  0AF9               	incf	nrf_read_register@len,f
  1557     04A5  3000               	movlw	0
  1558     04A6  120A  118A  242D  120A  118A  	fcall	_nrf_read_register
  1559     04AB                     l1182:
  1560                           
  1561                           ;main.c: 265:     if (!(config & 0x01))
  1562     04AB  187B               	btfsc	nrf_set_tx_mode@config,0
  1563     04AC  2CAE               	goto	u361
  1564     04AD  2CAF               	goto	u360
  1565     04AE                     u361:
  1566     04AE  2CB0               	goto	l1186
  1567     04AF                     u360:
  1568     04AF  2CC1               	goto	l168
  1569     04B0                     l1186:
  1570                           
  1571                           ;main.c: 268:     config &= ~0x01;
  1572     04B0  30FE               	movlw	254
  1573     04B1  00FF               	movwf	btemp+1
  1574     04B2  087F               	movf	btemp+1,w
  1575     04B3  05FB               	andwf	nrf_set_tx_mode@config,f
  1576     04B4                     l1188:
  1577                           
  1578                           ;main.c: 269:     nrf_write_register(0x00, &config, 1);
  1579     04B4  307B               	movlw	(low (nrf_set_tx_mode@config| 0))& (0+255)
  1580     04B5  00F8               	movwf	nrf_write_register@data
  1581     04B6  01F9               	clrf	nrf_write_register@len
  1582     04B7  0AF9               	incf	nrf_write_register@len,f
  1583     04B8  3000               	movlw	0
  1584     04B9  120A  118A  2446  120A  118A  	fcall	_nrf_write_register
  1585     04BE                     l1190:
  1586                           
  1587                           ;main.c: 271:     RD2 = 0;
  1588     04BE  1283               	bcf	3,5	;RP0=0, select bank0
  1589     04BF  1303               	bcf	3,6	;RP1=0, select bank0
  1590     04C0  1108               	bcf	8,2	;volatile
  1591     04C1                     l168:
  1592     04C1  0008               	return
  1593     04C2                     __end_of_nrf_set_tx_mode:
  1594                           
  1595                           	psect	text8
  1596     0446                     __ptext8:	
  1597 ;; *************** function _nrf_write_register *****************
  1598 ;; Defined at:
  1599 ;;		line 149 in file "main.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  reg             1    wreg     unsigned char 
  1602 ;;  data            1    8[COMMON] PTR unsigned char 
  1603 ;;		 -> main@data(5), nrf_read_data@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1604 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1605 ;;  len             1    9[COMMON] unsigned char 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  reg             1   10[COMMON] unsigned char 
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      unsigned char 
  1610 ;; Registers used:
  1611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1617 ;;      Params:         2       0       0       0       0
  1618 ;;      Locals:         1       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0
  1620 ;;      Totals:         3       0       0       0       0
  1621 ;;Total ram usage:        3 bytes
  1622 ;; Hardware stack levels used: 1
  1623 ;; Hardware stack levels required when called: 2
  1624 ;; This function calls:
  1625 ;;		_nrf_command
  1626 ;; This function is called by:
  1627 ;;		_nrf_write_payload
  1628 ;;		_nrf_flush_rxtx
  1629 ;;		_nrf_setup
  1630 ;;		_nrf_set_tx_mode
  1631 ;;		_nrf_send
  1632 ;;		_nrf_set_rx_mode
  1633 ;;		_nrf_read_data
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637     0446                     _nrf_write_register:	
  1638                           ;psect for function _nrf_write_register
  1639                           
  1640                           
  1641                           ;incstack = 0
  1642                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1643                           ;nrf_write_register@reg stored from wreg
  1644     0446  00FA               	movwf	nrf_write_register@reg
  1645     0447                     l1134:
  1646                           
  1647                           ;main.c: 149: uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t len);main.c
      +                          : 150: {;main.c: 151:     return nrf_command(reg | 0b00100000, data, len);
  1648     0447  0878               	movf	nrf_write_register@data,w
  1649     0448  00F1               	movwf	nrf_command@data
  1650     0449  0879               	movf	nrf_write_register@len,w
  1651     044A  00F2               	movwf	nrf_command@len
  1652     044B  087A               	movf	nrf_write_register@reg,w
  1653     044C  3820               	iorlw	32
  1654     044D  120A  118A  2538  120A  118A  	fcall	_nrf_command
  1655     0452                     l145:
  1656     0452  0008               	return
  1657     0453                     __end_of_nrf_write_register:
  1658                           
  1659                           	psect	text9
  1660     042D                     __ptext9:	
  1661 ;; *************** function _nrf_read_register *****************
  1662 ;; Defined at:
  1663 ;;		line 156 in file "main.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;  reg             1    wreg     unsigned char 
  1666 ;;  data            1    8[COMMON] PTR unsigned char 
  1667 ;;		 -> nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1668 ;;  len             1    9[COMMON] unsigned char 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  reg             1   10[COMMON] unsigned char 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      unsigned char 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1680 ;;      Params:         2       0       0       0       0
  1681 ;;      Locals:         1       0       0       0       0
  1682 ;;      Temps:          0       0       0       0       0
  1683 ;;      Totals:         3       0       0       0       0
  1684 ;;Total ram usage:        3 bytes
  1685 ;; Hardware stack levels used: 1
  1686 ;; Hardware stack levels required when called: 2
  1687 ;; This function calls:
  1688 ;;		_nrf_command
  1689 ;; This function is called by:
  1690 ;;		_nrf_set_tx_mode
  1691 ;;		_nrf_set_rx_mode
  1692 ;;		_nrf_read_data
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696     042D                     _nrf_read_register:	
  1697                           ;psect for function _nrf_read_register
  1698                           
  1699                           
  1700                           ;incstack = 0
  1701                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1702                           ;nrf_read_register@reg stored from wreg
  1703     042D  00FA               	movwf	nrf_read_register@reg
  1704     042E                     l1138:
  1705                           
  1706                           ;main.c: 156: uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t len);main.c:
      +                           157: {;main.c: 158:     return nrf_command(reg | 0b00000000, data, len);
  1707     042E  0878               	movf	nrf_read_register@data,w
  1708     042F  00F1               	movwf	nrf_command@data
  1709     0430  0879               	movf	nrf_read_register@len,w
  1710     0431  00F2               	movwf	nrf_command@len
  1711     0432  087A               	movf	nrf_read_register@reg,w
  1712     0433  120A  118A  2538  120A  118A  	fcall	_nrf_command
  1713     0438                     l148:
  1714     0438  0008               	return
  1715     0439                     __end_of_nrf_read_register:
  1716                           
  1717                           	psect	text10
  1718     0538                     __ptext10:	
  1719 ;; *************** function _nrf_command *****************
  1720 ;; Defined at:
  1721 ;;		line 134 in file "main.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  NRF_command     1    wreg     unsigned char 
  1724 ;;  data            1    1[COMMON] PTR unsigned char 
  1725 ;;		 -> main@data(5), nrf_read_data@clear(1), nrf_send@clear(1), nrf_set_tx_mode@config(1), 
  1726 ;;		 -> nrf_set_rx_mode@config(1), nrf_setup@data(5), nrf_flush_rxtx@data(1), 
  1727 ;;  len             1    2[COMMON] unsigned char 
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;  NRF_command     1    5[COMMON] unsigned char 
  1730 ;;  i               1    7[COMMON] unsigned char 
  1731 ;;  status          1    6[COMMON] unsigned char 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      unsigned char 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1741 ;;      Params:         2       0       0       0       0
  1742 ;;      Locals:         3       0       0       0       0
  1743 ;;      Temps:          2       0       0       0       0
  1744 ;;      Totals:         7       0       0       0       0
  1745 ;;Total ram usage:        7 bytes
  1746 ;; Hardware stack levels used: 1
  1747 ;; Hardware stack levels required when called: 1
  1748 ;; This function calls:
  1749 ;;		_SPI_write
  1750 ;; This function is called by:
  1751 ;;		_nrf_write_register
  1752 ;;		_nrf_read_register
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756     0538                     _nrf_command:	
  1757                           ;psect for function _nrf_command
  1758                           
  1759                           
  1760                           ;incstack = 0
  1761                           ; Regs used in _nrf_command: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1762                           ;nrf_command@NRF_command stored from wreg
  1763     0538  00F5               	movwf	nrf_command@NRF_command
  1764     0539                     l1118:
  1765                           
  1766                           ;main.c: 134: uint8_t nrf_command(uint8_t NRF_command, uint8_t *data, uint8_t len);main.
      +                          c: 135: {;main.c: 136:     RD3 = 0;
  1767     0539  1283               	bcf	3,5	;RP0=0, select bank0
  1768     053A  1303               	bcf	3,6	;RP1=0, select bank0
  1769     053B  1188               	bcf	8,3	;volatile
  1770     053C                     l1120:
  1771                           
  1772                           ;main.c: 138:     uint8_t status = SPI_write(NRF_command);
  1773     053C  0875               	movf	nrf_command@NRF_command,w
  1774     053D  120A  118A  2453  120A  118A  	fcall	_SPI_write
  1775     0542  00F6               	movwf	nrf_command@status
  1776     0543                     l1122:
  1777                           
  1778                           ;main.c: 139:     for (uint8_t i = 0; i < len; i++)
  1779     0543  01F7               	clrf	nrf_command@i
  1780     0544  2D5E               	goto	l1128
  1781     0545                     l1124:
  1782                           
  1783                           ;main.c: 140:         data[i] = SPI_write(data[i]);
  1784     0545  0877               	movf	nrf_command@i,w
  1785     0546  0771               	addwf	nrf_command@data,w
  1786     0547  00F3               	movwf	??_nrf_command
  1787     0548  0873               	movf	??_nrf_command,w
  1788     0549  0084               	movwf	4
  1789     054A  1383               	bcf	3,7	;select IRP bank0
  1790     054B  0800               	movf	0,w
  1791     054C  120A  118A  2453  120A  118A  	fcall	_SPI_write
  1792     0551  00FF               	movwf	btemp+1
  1793     0552  0877               	movf	nrf_command@i,w
  1794     0553  0771               	addwf	nrf_command@data,w
  1795     0554  00F4               	movwf	??_nrf_command+1
  1796     0555  0874               	movf	??_nrf_command+1,w
  1797     0556  0084               	movwf	4
  1798     0557  087F               	movf	btemp+1,w
  1799     0558  1383               	bcf	3,7	;select IRP bank0
  1800     0559  0080               	movwf	0
  1801     055A                     l1126:
  1802     055A  3001               	movlw	1
  1803     055B  00FF               	movwf	btemp+1
  1804     055C  087F               	movf	btemp+1,w
  1805     055D  07F7               	addwf	nrf_command@i,f
  1806     055E                     l1128:
  1807     055E  0872               	movf	nrf_command@len,w
  1808     055F  0277               	subwf	nrf_command@i,w
  1809     0560  1C03               	skipc
  1810     0561  2D63               	goto	u331
  1811     0562  2D64               	goto	u330
  1812     0563                     u331:
  1813     0563  2D45               	goto	l1124
  1814     0564                     u330:
  1815     0564                     l141:
  1816                           
  1817                           ;main.c: 142:     RD3 = 1;
  1818     0564  1283               	bcf	3,5	;RP0=0, select bank0
  1819     0565  1303               	bcf	3,6	;RP1=0, select bank0
  1820     0566  1588               	bsf	8,3	;volatile
  1821     0567                     l1130:
  1822                           
  1823                           ;main.c: 144:     return status;
  1824     0567  0876               	movf	nrf_command@status,w
  1825     0568                     l142:
  1826     0568  0008               	return
  1827     0569                     __end_of_nrf_command:
  1828                           
  1829                           	psect	text11
  1830     0453                     __ptext11:	
  1831 ;; *************** function _SPI_write *****************
  1832 ;; Defined at:
  1833 ;;		line 25 in file "./spi.h"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  data            1    wreg     unsigned char 
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;  data            1    0[COMMON] unsigned char 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  1    wreg      unsigned char 
  1840 ;; Registers used:
  1841 ;;		wreg
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1847 ;;      Params:         0       0       0       0       0
  1848 ;;      Locals:         1       0       0       0       0
  1849 ;;      Temps:          0       0       0       0       0
  1850 ;;      Totals:         1       0       0       0       0
  1851 ;;Total ram usage:        1 bytes
  1852 ;; Hardware stack levels used: 1
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_nrf_command
  1857 ;;		_nrf_write_command
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861     0453                     _SPI_write:	
  1862                           ;psect for function _SPI_write
  1863                           
  1864                           
  1865                           ;incstack = 0
  1866                           ; Regs used in _SPI_write: [wreg]
  1867                           ;SPI_write@data stored from wreg
  1868     0453  00F0               	movwf	SPI_write@data
  1869     0454                     l1112:
  1870                           
  1871                           ;./spi.h: 25: uint8_t SPI_write(uint8_t data);./spi.h: 26: {;./spi.h: 27:     SSPBUF = d
      +                          ata;
  1872     0454  0870               	movf	SPI_write@data,w
  1873     0455  1283               	bcf	3,5	;RP0=0, select bank0
  1874     0456  1303               	bcf	3,6	;RP1=0, select bank0
  1875     0457  0093               	movwf	19	;volatile
  1876     0458                     l88:	
  1877                           ;./spi.h: 28:     while (!BF);
  1878                           
  1879     0458  1683               	bsf	3,5	;RP0=1, select bank1
  1880     0459  1303               	bcf	3,6	;RP1=0, select bank1
  1881     045A  1C14               	btfss	20,0	;volatile
  1882     045B  2C5D               	goto	u321
  1883     045C  2C5E               	goto	u320
  1884     045D                     u321:
  1885     045D  2C58               	goto	l88
  1886     045E                     u320:
  1887     045E                     l1114:
  1888                           
  1889                           ;./spi.h: 29:     return SSPBUF;
  1890     045E  1283               	bcf	3,5	;RP0=0, select bank0
  1891     045F  1303               	bcf	3,6	;RP1=0, select bank0
  1892     0460  0813               	movf	19,w	;volatile
  1893     0461                     l91:
  1894     0461  0008               	return
  1895     0462                     __end_of_SPI_write:
  1896                           
  1897                           	psect	text12
  1898     04C2                     __ptext12:	
  1899 ;; *************** function _UART_write_text *****************
  1900 ;; Defined at:
  1901 ;;		line 33 in file "./uart.h"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;  text            1    wreg     PTR unsigned char 
  1904 ;;		 -> STR_2(8), 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  text            1    3[COMMON] PTR unsigned char 
  1907 ;;		 -> STR_2(8), 
  1908 ;;  i               2    1[COMMON] int 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1918 ;;      Params:         0       0       0       0       0
  1919 ;;      Locals:         3       0       0       0       0
  1920 ;;      Temps:          0       0       0       0       0
  1921 ;;      Totals:         3       0       0       0       0
  1922 ;;Total ram usage:        3 bytes
  1923 ;; Hardware stack levels used: 1
  1924 ;; Hardware stack levels required when called: 1
  1925 ;; This function calls:
  1926 ;;		_UART_write
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932     04C2                     _UART_write_text:	
  1933                           ;psect for function _UART_write_text
  1934                           
  1935                           
  1936                           ;incstack = 0
  1937                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1938                           ;UART_write_text@text stored from wreg
  1939     04C2  00F3               	movwf	UART_write_text@text
  1940     04C3                     l1250:
  1941                           
  1942                           ;./uart.h: 33: void UART_write_text(char *text);./uart.h: 34: {;./uart.h: 35:   for(int 
      +                          i=0;text[i]!='\0';i++)
  1943     04C3  01F1               	clrf	UART_write_text@i
  1944     04C4  01F2               	clrf	UART_write_text@i+1
  1945     04C5  2CD9               	goto	l1256
  1946     04C6                     l1252:
  1947                           
  1948                           ;./uart.h: 36:     UART_write(text[i]);
  1949     04C6  0871               	movf	UART_write_text@i,w
  1950     04C7  0773               	addwf	UART_write_text@text,w
  1951     04C8  0084               	movwf	4
  1952     04C9  120A  118A  200D  120A  118A  	fcall	stringdir
  1953     04CE  120A  118A  2421  120A  118A  	fcall	_UART_write
  1954     04D3                     l1254:
  1955     04D3  3001               	movlw	1
  1956     04D4  07F1               	addwf	UART_write_text@i,f
  1957     04D5  1803               	skipnc
  1958     04D6  0AF2               	incf	UART_write_text@i+1,f
  1959     04D7  3000               	movlw	0
  1960     04D8  07F2               	addwf	UART_write_text@i+1,f
  1961     04D9                     l1256:
  1962     04D9  0871               	movf	UART_write_text@i,w
  1963     04DA  0773               	addwf	UART_write_text@text,w
  1964     04DB  0084               	movwf	4
  1965     04DC  120A  118A  200D  120A  118A  	fcall	stringdir
  1966     04E1  3A00               	xorlw	0
  1967     04E2  1D03               	skipz
  1968     04E3  2CE5               	goto	u501
  1969     04E4  2CE6               	goto	u500
  1970     04E5                     u501:
  1971     04E5  2CC6               	goto	l1252
  1972     04E6                     u500:
  1973     04E6                     l67:
  1974     04E6  0008               	return
  1975     04E7                     __end_of_UART_write_text:
  1976                           
  1977                           	psect	text13
  1978     0421                     __ptext13:	
  1979 ;; *************** function _UART_write *****************
  1980 ;; Defined at:
  1981 ;;		line 27 in file "./uart.h"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  data            1    wreg     unsigned char 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  data            1    0[COMMON] unsigned char 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1995 ;;      Params:         0       0       0       0       0
  1996 ;;      Locals:         1       0       0       0       0
  1997 ;;      Temps:          0       0       0       0       0
  1998 ;;      Totals:         1       0       0       0       0
  1999 ;;Total ram usage:        1 bytes
  2000 ;; Hardware stack levels used: 1
  2001 ;; This function calls:
  2002 ;;		Nothing
  2003 ;; This function is called by:
  2004 ;;		_UART_write_text
  2005 ;;		_UART_write_array
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009     0421                     _UART_write:	
  2010                           ;psect for function _UART_write
  2011                           
  2012                           
  2013                           ;incstack = 0
  2014                           ; Regs used in _UART_write: [wreg]
  2015                           ;UART_write@data stored from wreg
  2016     0421  00F0               	movwf	UART_write@data
  2017     0422                     l1152:
  2018     0422                     l58:	
  2019                           ;./uart.h: 27: void UART_write(char data);./uart.h: 28: {;./uart.h: 29:   while(!TRMT);
  2020                           
  2021     0422  1683               	bsf	3,5	;RP0=1, select bank1
  2022     0423  1303               	bcf	3,6	;RP1=0, select bank1
  2023     0424  1C98               	btfss	24,1	;volatile
  2024     0425  2C27               	goto	u341
  2025     0426  2C28               	goto	u340
  2026     0427                     u341:
  2027     0427  2C22               	goto	l58
  2028     0428                     u340:
  2029     0428                     l1154:
  2030                           
  2031                           ;./uart.h: 30:   TXREG = data;
  2032     0428  0870               	movf	UART_write@data,w
  2033     0429  1283               	bcf	3,5	;RP0=0, select bank0
  2034     042A  1303               	bcf	3,6	;RP1=0, select bank0
  2035     042B  0099               	movwf	25	;volatile
  2036     042C                     l61:
  2037     042C  0008               	return
  2038     042D                     __end_of_UART_write:
  2039                           
  2040                           	psect	text14
  2041     0569                     __ptext14:	
  2042 ;; *************** function _UART_init *****************
  2043 ;; Defined at:
  2044 ;;		line 15 in file "./uart.h"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;  baudrate        4    6[BANK0 ] const long 
  2047 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2059 ;;      Params:         0       8       0       0       0
  2060 ;;      Locals:         0       0       0       0       0
  2061 ;;      Temps:          0      12       0       0       0
  2062 ;;      Totals:         0      20       0       0       0
  2063 ;;Total ram usage:       20 bytes
  2064 ;; Hardware stack levels used: 1
  2065 ;; Hardware stack levels required when called: 1
  2066 ;; This function calls:
  2067 ;;		___aldiv
  2068 ;; This function is called by:
  2069 ;;		_main
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073     0569                     _UART_init:	
  2074                           ;psect for function _UART_init
  2075                           
  2076     0569                     l1234:	
  2077                           ;incstack = 0
  2078                           ; Regs used in _UART_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2079                           
  2080                           
  2081                           ;./uart.h: 15: void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 16: {;
      +                          ./uart.h: 17:     BRGH = 1;
  2082     0569  1683               	bsf	3,5	;RP0=1, select bank1
  2083     056A  1303               	bcf	3,6	;RP1=0, select bank1
  2084     056B  1518               	bsf	24,2	;volatile
  2085     056C                     l1236:
  2086                           
  2087                           ;./uart.h: 18:     SPBRG = (_XTAL_FREQ - baudrate*16)/(baudrate*16);
  2088     056C  1283               	bcf	3,5	;RP0=0, select bank0
  2089     056D  1303               	bcf	3,6	;RP1=0, select bank0
  2090     056E  0826               	movf	UART_init@baudrate,w
  2091     056F  00AE               	movwf	??_UART_init
  2092     0570  0827               	movf	UART_init@baudrate+1,w
  2093     0571  00AF               	movwf	??_UART_init+1
  2094     0572  0828               	movf	UART_init@baudrate+2,w
  2095     0573  00B0               	movwf	??_UART_init+2
  2096     0574  0829               	movf	UART_init@baudrate+3,w
  2097     0575  00B1               	movwf	??_UART_init+3
  2098     0576  3004               	movlw	4
  2099     0577                     u475:
  2100     0577  1003               	clrc
  2101     0578  0DAE               	rlf	??_UART_init,f
  2102     0579  0DAF               	rlf	??_UART_init+1,f
  2103     057A  0DB0               	rlf	??_UART_init+2,f
  2104     057B  0DB1               	rlf	??_UART_init+3,f
  2105     057C                     u470:
  2106     057C  3EFF               	addlw	-1
  2107     057D  1D03               	skipz
  2108     057E  2D77               	goto	u475
  2109     057F  0831               	movf	??_UART_init+3,w
  2110     0580  00F3               	movwf	___aldiv@divisor+3
  2111     0581  0830               	movf	??_UART_init+2,w
  2112     0582  00F2               	movwf	___aldiv@divisor+2
  2113     0583  082F               	movf	??_UART_init+1,w
  2114     0584  00F1               	movwf	___aldiv@divisor+1
  2115     0585  082E               	movf	??_UART_init,w
  2116     0586  00F0               	movwf	___aldiv@divisor
  2117     0587  0826               	movf	UART_init@baudrate,w
  2118     0588  00B2               	movwf	??_UART_init+4
  2119     0589  0827               	movf	UART_init@baudrate+1,w
  2120     058A  00B3               	movwf	??_UART_init+5
  2121     058B  0828               	movf	UART_init@baudrate+2,w
  2122     058C  00B4               	movwf	??_UART_init+6
  2123     058D  0829               	movf	UART_init@baudrate+3,w
  2124     058E  00B5               	movwf	??_UART_init+7
  2125     058F  3004               	movlw	4
  2126     0590                     u485:
  2127     0590  1003               	clrc
  2128     0591  0DB2               	rlf	??_UART_init+4,f
  2129     0592  0DB3               	rlf	??_UART_init+5,f
  2130     0593  0DB4               	rlf	??_UART_init+6,f
  2131     0594  0DB5               	rlf	??_UART_init+7,f
  2132     0595                     u480:
  2133     0595  3EFF               	addlw	-1
  2134     0596  1D03               	skipz
  2135     0597  2D90               	goto	u485
  2136     0598  082A               	movf	UART_init@_XTAL_FREQ,w
  2137     0599  00B6               	movwf	??_UART_init+8
  2138     059A  082B               	movf	UART_init@_XTAL_FREQ+1,w
  2139     059B  00B7               	movwf	??_UART_init+9
  2140     059C  082C               	movf	UART_init@_XTAL_FREQ+2,w
  2141     059D  00B8               	movwf	??_UART_init+10
  2142     059E  082D               	movf	UART_init@_XTAL_FREQ+3,w
  2143     059F  00B9               	movwf	??_UART_init+11
  2144     05A0  0832               	movf	??_UART_init+4,w
  2145     05A1  02B6               	subwf	??_UART_init+8,f
  2146     05A2  0833               	movf	??_UART_init+5,w
  2147     05A3  1C03               	skipc
  2148     05A4  0F33               	incfsz	??_UART_init+5,w
  2149     05A5  2DA7               	goto	u491
  2150     05A6  2DA8               	goto	u492
  2151     05A7                     u491:
  2152     05A7  02B7               	subwf	??_UART_init+9,f
  2153     05A8                     u492:
  2154     05A8  0834               	movf	??_UART_init+6,w
  2155     05A9  1C03               	skipc
  2156     05AA  0F34               	incfsz	??_UART_init+6,w
  2157     05AB  2DAD               	goto	u493
  2158     05AC  2DAE               	goto	u494
  2159     05AD                     u493:
  2160     05AD  02B8               	subwf	??_UART_init+10,f
  2161     05AE                     u494:
  2162     05AE  0835               	movf	??_UART_init+7,w
  2163     05AF  1C03               	skipc
  2164     05B0  0F35               	incfsz	??_UART_init+7,w
  2165     05B1  2DB3               	goto	u495
  2166     05B2  2DB4               	goto	u496
  2167     05B3                     u495:
  2168     05B3  02B9               	subwf	??_UART_init+11,f
  2169     05B4                     u496:
  2170     05B4  0839               	movf	??_UART_init+11,w
  2171     05B5  00F7               	movwf	___aldiv@dividend+3
  2172     05B6  0838               	movf	??_UART_init+10,w
  2173     05B7  00F6               	movwf	___aldiv@dividend+2
  2174     05B8  0837               	movf	??_UART_init+9,w
  2175     05B9  00F5               	movwf	___aldiv@dividend+1
  2176     05BA  0836               	movf	??_UART_init+8,w
  2177     05BB  00F4               	movwf	___aldiv@dividend
  2178     05BC  120A  118A  25D4  120A  118A  	fcall	___aldiv
  2179     05C1  0870               	movf	?___aldiv,w
  2180     05C2  1683               	bsf	3,5	;RP0=1, select bank1
  2181     05C3  1303               	bcf	3,6	;RP1=0, select bank1
  2182     05C4  0099               	movwf	25	;volatile
  2183     05C5                     l1238:
  2184                           
  2185                           ;./uart.h: 19:     SYNC = 0;
  2186     05C5  1218               	bcf	24,4	;volatile
  2187     05C6                     l1240:
  2188                           
  2189                           ;./uart.h: 20:     SPEN = 1;
  2190     05C6  1283               	bcf	3,5	;RP0=0, select bank0
  2191     05C7  1303               	bcf	3,6	;RP1=0, select bank0
  2192     05C8  1798               	bsf	24,7	;volatile
  2193     05C9                     l1242:
  2194                           
  2195                           ;./uart.h: 21:     TRISC7 = 1;
  2196     05C9  1683               	bsf	3,5	;RP0=1, select bank1
  2197     05CA  1303               	bcf	3,6	;RP1=0, select bank1
  2198     05CB  1787               	bsf	7,7	;volatile
  2199     05CC                     l1244:
  2200                           
  2201                           ;./uart.h: 22:     TRISC6 = 1;
  2202     05CC  1707               	bsf	7,6	;volatile
  2203     05CD                     l1246:
  2204                           
  2205                           ;./uart.h: 23:     CREN = 1;
  2206     05CD  1283               	bcf	3,5	;RP0=0, select bank0
  2207     05CE  1303               	bcf	3,6	;RP1=0, select bank0
  2208     05CF  1618               	bsf	24,4	;volatile
  2209     05D0                     l1248:
  2210                           
  2211                           ;./uart.h: 24:     TXEN = 1;
  2212     05D0  1683               	bsf	3,5	;RP0=1, select bank1
  2213     05D1  1303               	bcf	3,6	;RP1=0, select bank1
  2214     05D2  1698               	bsf	24,5	;volatile
  2215     05D3                     l55:
  2216     05D3  0008               	return
  2217     05D4                     __end_of_UART_init:
  2218                           
  2219                           	psect	text15
  2220     05D4                     __ptext15:	
  2221 ;; *************** function ___aldiv *****************
  2222 ;; Defined at:
  2223 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  divisor         4    0[COMMON] long 
  2226 ;;  dividend        4    4[COMMON] long 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  quotient        4    2[BANK0 ] long 
  2229 ;;  sign            1    1[BANK0 ] unsigned char 
  2230 ;;  counter         1    0[BANK0 ] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  4    0[COMMON] long 
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0, btemp+1
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2240 ;;      Params:         8       0       0       0       0
  2241 ;;      Locals:         0       6       0       0       0
  2242 ;;      Temps:          1       0       0       0       0
  2243 ;;      Totals:         9       6       0       0       0
  2244 ;;Total ram usage:       15 bytes
  2245 ;; Hardware stack levels used: 1
  2246 ;; This function calls:
  2247 ;;		Nothing
  2248 ;; This function is called by:
  2249 ;;		_UART_init
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253     05D4                     ___aldiv:	
  2254                           ;psect for function ___aldiv
  2255                           
  2256     05D4                     l1192:	
  2257                           ;incstack = 0
  2258                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  2259                           
  2260     05D4  1283               	bcf	3,5	;RP0=0, select bank0
  2261     05D5  1303               	bcf	3,6	;RP1=0, select bank0
  2262     05D6  01A1               	clrf	___aldiv@sign
  2263     05D7                     l1194:
  2264     05D7  1FF3               	btfss	___aldiv@divisor+3,7
  2265     05D8  2DDA               	goto	u371
  2266     05D9  2DDB               	goto	u370
  2267     05DA                     u371:
  2268     05DA  2DE8               	goto	l338
  2269     05DB                     u370:
  2270     05DB                     l1196:
  2271     05DB  09F0               	comf	___aldiv@divisor,f
  2272     05DC  09F1               	comf	___aldiv@divisor+1,f
  2273     05DD  09F2               	comf	___aldiv@divisor+2,f
  2274     05DE  09F3               	comf	___aldiv@divisor+3,f
  2275     05DF  0AF0               	incf	___aldiv@divisor,f
  2276     05E0  1903               	skipnz
  2277     05E1  0AF1               	incf	___aldiv@divisor+1,f
  2278     05E2  1903               	skipnz
  2279     05E3  0AF2               	incf	___aldiv@divisor+2,f
  2280     05E4  1903               	skipnz
  2281     05E5  0AF3               	incf	___aldiv@divisor+3,f
  2282     05E6  01A1               	clrf	___aldiv@sign
  2283     05E7  0AA1               	incf	___aldiv@sign,f
  2284     05E8                     l338:
  2285     05E8  1FF7               	btfss	___aldiv@dividend+3,7
  2286     05E9  2DEB               	goto	u381
  2287     05EA  2DEC               	goto	u380
  2288     05EB                     u381:
  2289     05EB  2DFB               	goto	l1202
  2290     05EC                     u380:
  2291     05EC                     l1198:
  2292     05EC  09F4               	comf	___aldiv@dividend,f
  2293     05ED  09F5               	comf	___aldiv@dividend+1,f
  2294     05EE  09F6               	comf	___aldiv@dividend+2,f
  2295     05EF  09F7               	comf	___aldiv@dividend+3,f
  2296     05F0  0AF4               	incf	___aldiv@dividend,f
  2297     05F1  1903               	skipnz
  2298     05F2  0AF5               	incf	___aldiv@dividend+1,f
  2299     05F3  1903               	skipnz
  2300     05F4  0AF6               	incf	___aldiv@dividend+2,f
  2301     05F5  1903               	skipnz
  2302     05F6  0AF7               	incf	___aldiv@dividend+3,f
  2303     05F7                     l1200:
  2304     05F7  3001               	movlw	1
  2305     05F8  00FF               	movwf	btemp+1
  2306     05F9  087F               	movf	btemp+1,w
  2307     05FA  06A1               	xorwf	___aldiv@sign,f
  2308     05FB                     l1202:
  2309     05FB  3000               	movlw	0
  2310     05FC  00A5               	movwf	___aldiv@quotient+3
  2311     05FD  3000               	movlw	0
  2312     05FE  00A4               	movwf	___aldiv@quotient+2
  2313     05FF  3000               	movlw	0
  2314     0600  00A3               	movwf	___aldiv@quotient+1
  2315     0601  3000               	movlw	0
  2316     0602  00A2               	movwf	___aldiv@quotient
  2317     0603                     l1204:
  2318     0603  0873               	movf	___aldiv@divisor+3,w
  2319     0604  0472               	iorwf	___aldiv@divisor+2,w
  2320     0605  0471               	iorwf	___aldiv@divisor+1,w
  2321     0606  0470               	iorwf	___aldiv@divisor,w
  2322     0607  1903               	skipnz
  2323     0608  2E0A               	goto	u391
  2324     0609  2E0B               	goto	u390
  2325     060A                     u391:
  2326     060A  2E58               	goto	l1226
  2327     060B                     u390:
  2328     060B                     l1206:
  2329     060B  01A0               	clrf	___aldiv@counter
  2330     060C  0AA0               	incf	___aldiv@counter,f
  2331     060D  2E1B               	goto	l1212
  2332     060E                     l1208:
  2333     060E  3001               	movlw	1
  2334     060F  00F8               	movwf	??___aldiv
  2335     0610                     u405:
  2336     0610  1003               	clrc
  2337     0611  0DF0               	rlf	___aldiv@divisor,f
  2338     0612  0DF1               	rlf	___aldiv@divisor+1,f
  2339     0613  0DF2               	rlf	___aldiv@divisor+2,f
  2340     0614  0DF3               	rlf	___aldiv@divisor+3,f
  2341     0615  0BF8               	decfsz	??___aldiv,f
  2342     0616  2E10               	goto	u405
  2343     0617                     l1210:
  2344     0617  3001               	movlw	1
  2345     0618  00FF               	movwf	btemp+1
  2346     0619  087F               	movf	btemp+1,w
  2347     061A  07A0               	addwf	___aldiv@counter,f
  2348     061B                     l1212:
  2349     061B  1FF3               	btfss	___aldiv@divisor+3,7
  2350     061C  2E1E               	goto	u411
  2351     061D  2E1F               	goto	u410
  2352     061E                     u411:
  2353     061E  2E0E               	goto	l1208
  2354     061F                     u410:
  2355     061F                     l1214:
  2356     061F  3001               	movlw	1
  2357     0620  00F8               	movwf	??___aldiv
  2358     0621                     u425:
  2359     0621  1003               	clrc
  2360     0622  0DA2               	rlf	___aldiv@quotient,f
  2361     0623  0DA3               	rlf	___aldiv@quotient+1,f
  2362     0624  0DA4               	rlf	___aldiv@quotient+2,f
  2363     0625  0DA5               	rlf	___aldiv@quotient+3,f
  2364     0626  0BF8               	decfsz	??___aldiv,f
  2365     0627  2E21               	goto	u425
  2366     0628                     l1216:
  2367     0628  0873               	movf	___aldiv@divisor+3,w
  2368     0629  0277               	subwf	___aldiv@dividend+3,w
  2369     062A  1D03               	skipz
  2370     062B  2E36               	goto	u435
  2371     062C  0872               	movf	___aldiv@divisor+2,w
  2372     062D  0276               	subwf	___aldiv@dividend+2,w
  2373     062E  1D03               	skipz
  2374     062F  2E36               	goto	u435
  2375     0630  0871               	movf	___aldiv@divisor+1,w
  2376     0631  0275               	subwf	___aldiv@dividend+1,w
  2377     0632  1D03               	skipz
  2378     0633  2E36               	goto	u435
  2379     0634  0870               	movf	___aldiv@divisor,w
  2380     0635  0274               	subwf	___aldiv@dividend,w
  2381     0636                     u435:
  2382     0636  1C03               	skipc
  2383     0637  2E39               	goto	u431
  2384     0638  2E3A               	goto	u430
  2385     0639                     u431:
  2386     0639  2E49               	goto	l1222
  2387     063A                     u430:
  2388     063A                     l1218:
  2389     063A  0870               	movf	___aldiv@divisor,w
  2390     063B  02F4               	subwf	___aldiv@dividend,f
  2391     063C  0871               	movf	___aldiv@divisor+1,w
  2392     063D  1C03               	skipc
  2393     063E  0F71               	incfsz	___aldiv@divisor+1,w
  2394     063F  02F5               	subwf	___aldiv@dividend+1,f
  2395     0640  0872               	movf	___aldiv@divisor+2,w
  2396     0641  1C03               	skipc
  2397     0642  0F72               	incfsz	___aldiv@divisor+2,w
  2398     0643  02F6               	subwf	___aldiv@dividend+2,f
  2399     0644  0873               	movf	___aldiv@divisor+3,w
  2400     0645  1C03               	skipc
  2401     0646  0F73               	incfsz	___aldiv@divisor+3,w
  2402     0647  02F7               	subwf	___aldiv@dividend+3,f
  2403     0648                     l1220:
  2404     0648  1422               	bsf	___aldiv@quotient,0
  2405     0649                     l1222:
  2406     0649  3001               	movlw	1
  2407     064A                     u445:
  2408     064A  1003               	clrc
  2409     064B  0CF3               	rrf	___aldiv@divisor+3,f
  2410     064C  0CF2               	rrf	___aldiv@divisor+2,f
  2411     064D  0CF1               	rrf	___aldiv@divisor+1,f
  2412     064E  0CF0               	rrf	___aldiv@divisor,f
  2413     064F  3EFF               	addlw	-1
  2414     0650  1D03               	skipz
  2415     0651  2E4A               	goto	u445
  2416     0652                     l1224:
  2417     0652  3001               	movlw	1
  2418     0653  02A0               	subwf	___aldiv@counter,f
  2419     0654  1D03               	btfss	3,2
  2420     0655  2E57               	goto	u451
  2421     0656  2E58               	goto	u450
  2422     0657                     u451:
  2423     0657  2E1F               	goto	l1214
  2424     0658                     u450:
  2425     0658                     l1226:
  2426     0658  0821               	movf	___aldiv@sign,w
  2427     0659  1903               	btfsc	3,2
  2428     065A  2E5C               	goto	u461
  2429     065B  2E5D               	goto	u460
  2430     065C                     u461:
  2431     065C  2E68               	goto	l1230
  2432     065D                     u460:
  2433     065D                     l1228:
  2434     065D  09A2               	comf	___aldiv@quotient,f
  2435     065E  09A3               	comf	___aldiv@quotient+1,f
  2436     065F  09A4               	comf	___aldiv@quotient+2,f
  2437     0660  09A5               	comf	___aldiv@quotient+3,f
  2438     0661  0AA2               	incf	___aldiv@quotient,f
  2439     0662  1903               	skipnz
  2440     0663  0AA3               	incf	___aldiv@quotient+1,f
  2441     0664  1903               	skipnz
  2442     0665  0AA4               	incf	___aldiv@quotient+2,f
  2443     0666  1903               	skipnz
  2444     0667  0AA5               	incf	___aldiv@quotient+3,f
  2445     0668                     l1230:
  2446     0668  0825               	movf	___aldiv@quotient+3,w
  2447     0669  00F3               	movwf	?___aldiv+3
  2448     066A  0824               	movf	___aldiv@quotient+2,w
  2449     066B  00F2               	movwf	?___aldiv+2
  2450     066C  0823               	movf	___aldiv@quotient+1,w
  2451     066D  00F1               	movwf	?___aldiv+1
  2452     066E  0822               	movf	___aldiv@quotient,w
  2453     066F  00F0               	movwf	?___aldiv
  2454     0670                     l348:
  2455     0670  0008               	return
  2456     0671                     __end_of___aldiv:
  2457                           
  2458                           	psect	text16
  2459     0439                     __ptext16:	
  2460 ;; *************** function _SPI_init_master *****************
  2461 ;; Defined at:
  2462 ;;		line 15 in file "./spi.h"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;		None
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;		None
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  1    wreg      void 
  2469 ;; Registers used:
  2470 ;;		wreg, status,2
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2476 ;;      Params:         0       0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0
  2478 ;;      Temps:          0       0       0       0       0
  2479 ;;      Totals:         0       0       0       0       0
  2480 ;;Total ram usage:        0 bytes
  2481 ;; Hardware stack levels used: 1
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_main
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489     0439                     _SPI_init_master:	
  2490                           ;psect for function _SPI_init_master
  2491                           
  2492     0439                     l1258:	
  2493                           ;incstack = 0
  2494                           ; Regs used in _SPI_init_master: [wreg+status,2]
  2495                           
  2496                           
  2497                           ;./spi.h: 16:     SSPCON = 0b01100001;
  2498     0439  3061               	movlw	97
  2499     043A  1283               	bcf	3,5	;RP0=0, select bank0
  2500     043B  1303               	bcf	3,6	;RP1=0, select bank0
  2501     043C  0094               	movwf	20	;volatile
  2502     043D                     l1260:
  2503                           
  2504                           ;./spi.h: 17:     SSPSTAT = 0b00000000;
  2505     043D  1683               	bsf	3,5	;RP0=1, select bank1
  2506     043E  1303               	bcf	3,6	;RP1=0, select bank1
  2507     043F  0194               	clrf	20	;volatile
  2508     0440                     l1262:
  2509                           
  2510                           ;./spi.h: 18:     CKE = 1;
  2511     0440  1714               	bsf	20,6	;volatile
  2512     0441                     l1264:
  2513                           
  2514                           ;./spi.h: 19:     SMP = 1;
  2515     0441  1794               	bsf	20,7	;volatile
  2516     0442                     l1266:
  2517                           
  2518                           ;./spi.h: 20:     TRISCbits.TRISC5 = 0;
  2519     0442  1287               	bcf	7,5	;volatile
  2520     0443                     l1268:
  2521                           
  2522                           ;./spi.h: 21:     TRISCbits.TRISC4 = 1;
  2523     0443  1607               	bsf	7,4	;volatile
  2524     0444                     l1270:
  2525                           
  2526                           ;./spi.h: 22:     TRISCbits.TRISC3 = 0;
  2527     0444  1187               	bcf	7,3	;volatile
  2528     0445                     l85:
  2529     0445  0008               	return
  2530     0446                     __end_of_SPI_init_master:
  2531     007E                     btemp	set	126	;btemp
  2532     007E                     wtemp0	set	126
  2533                           
  2534                           	psect	config
  2535                           
  2536                           ;Config register CONFIG1 @ 0x2007
  2537                           ;	Oscillator Selection bits
  2538                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2539                           ;	Watchdog Timer Enable bit
  2540                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2541                           ;	Power-up Timer Enable bit
  2542                           ;	PWRTE = OFF, PWRT disabled
  2543                           ;	RE3/MCLR pin function select bit
  2544                           ;	MCLRE = 0x1, unprogrammed default
  2545                           ;	Code Protection bit
  2546                           ;	CP = OFF, Program memory code protection is disabled
  2547                           ;	Data Code Protection bit
  2548                           ;	CPD = OFF, Data memory code protection is disabled
  2549                           ;	Brown Out Reset Selection bits
  2550                           ;	BOREN = OFF, BOR disabled
  2551                           ;	Internal External Switchover bit
  2552                           ;	IESO = 0x1, unprogrammed default
  2553                           ;	Fail-Safe Clock Monitor Enabled bit
  2554                           ;	FCMEN = 0x1, unprogrammed default
  2555                           ;	Low Voltage Programming Enable bit
  2556                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2557                           ;	In-Circuit Debugger Mode bit
  2558                           ;	DEBUG = 0x1, unprogrammed default
  2559     2007                     	org	8199
  2560     2007  2CF2               	dw	11506
  2561                           
  2562                           ;Config register CONFIG2 @ 0x2008
  2563                           ;	Brown-out Reset Selection bit
  2564                           ;	BOR4V = 0x1, unprogrammed default
  2565                           ;	Flash Program Memory Self Write Enable bits
  2566                           ;	WRT = OFF, Write protection off
  2567     2008                     	org	8200
  2568     2008  3FFF               	dw	16383

Data Sizes:
    Strings     41
    Constant    0
    Data        3
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     34      47
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    _doprnt$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 

    _doprnt$1	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    _doprnt$0	PTR struct __prbuf size(1) Largest target is 3
		 -> sprintf@pb(COMMON[2]), 

    nrf_setup@rxtx_addr	PTR unsigned char  size(1) Largest target is 5
		 -> STR_3(CODE[5]), 

    S665__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> NULL(), 

    pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> NULL(), 

    S665__prbuf$ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    nrf_send@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[5]), 

    nrf_write_payload@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[5]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[5]), nrf_read_data@clear(COMMON[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(COMMON[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command@data	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[5]), nrf_read_data@clear(COMMON[1]), nrf_send@clear(BANK0[1]), nrf_set_tx_mode@config(COMMON[1]), 
		 -> nrf_set_rx_mode@config(COMMON[1]), nrf_setup@data(BANK0[5]), nrf_flush_rxtx@data(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(2) Largest target is 5
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), RXTX_ADDR(BANK0[3]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> main@data(BANK0[5]), nrf_setup@data(BANK0[5]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    UART_write_text@text	PTR unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), 


Critical Paths under _main in COMMON

    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_send->_nrf_write_payload
    _nrf_write_payload->_nrf_write_register
    _nrf_write_command->_SPI_write
    _nrf_set_tx_mode->_nrf_read_register
    _nrf_set_tx_mode->_nrf_write_register
    _nrf_write_register->_nrf_command
    _nrf_read_register->_nrf_command
    _nrf_command->_SPI_write
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   24419
                                             26 BANK0      8     8      0
                    _SPI_init_master
                          _UART_init
                    _UART_write_text
                             _arrcpy
                           _nrf_send
                    _nrf_set_tx_mode
                          _nrf_setup
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                            9     8      1    7561
                                             12 COMMON     1     0      1
                                              0 BANK0      8     8      0
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3096
                                             11 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (3) _arrcpy                                               6     3      3    1059
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _nrf_send                                             4     3      1   10747
                                              0 BANK0      4     3      1
                    _nrf_set_tx_mode
                  _nrf_write_command
                  _nrf_write_payload
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_payload                                    4     3      1    3157
                                             11 COMMON     3     2      1
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_set_tx_mode                                      1     1      0    4100
                                             11 COMMON     1     1      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    3003
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2    1027
                                              8 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (3) _nrf_command                                          7     5      2     505
                                              1 COMMON     7     5      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      3     3      0     145
                                              1 COMMON     3     3      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_init
     ___aldiv
   _UART_write_text
     _UART_write
   _arrcpy
   _nrf_send
     _nrf_set_tx_mode
       _nrf_read_register
         _nrf_command
           _SPI_write
       _nrf_write_register
         _nrf_command
     _nrf_write_command
       _SPI_write
     _nrf_write_payload
       _nrf_write_register
     _nrf_write_register
   _nrf_set_tx_mode
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      2F       5       58.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3D      12        0.0%
ABS                  0      0      3D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Mar 27 18:57:43 2023

                           pc 0002                            _BF 04A0                            l61 042C  
                          l55 05D3                            l58 0422                            l67 04E6  
                          l91 0461                            l85 0445                            l88 0458  
                          fsr 0004         nrf_set_tx_mode@config 007B                           l141 0564  
                         l142 0568                           l134 050B                           l151 0487  
                         l160 07DF                           l145 0452                           l154 0471  
                         l148 0438                           l157 04A0                           l168 04C1  
                         l176 0537                           l338 05E8                           l348 0670  
                         _CKE 04A6                           _RD2 0042                           _RD3 0043  
                         u320 045E                           u321 045D                           u410 061F  
                         u330 0564                           u411 061E                           u331 0563  
                         u340 0428                           u500 04E6                           u405 0610  
                         u341 0427                           u501 04E5                           u430 063A  
                         u510 052B                           u350 050B                           u431 0639  
                         u511 052A                           u351 050A                           u360 04AF  
                         u425 0621                           u361 04AE                           u450 0658  
                         u370 05DB                           u451 0657                           u435 0636  
                         u371 05DA                           u460 065D                           u380 05EC  
                         u461 065C                           u445 064A                           u381 05EB  
                         u390 060B                           u470 057C                           u391 060A  
                         u480 0595                           u491 05A7                           u475 0577  
                         u627 06AA                           u492 05A8                           u493 05AD  
                         u485 0590                           u637 06CD                           u494 05AE  
                         u495 05B3                           u647 06F2                           u496 05B4  
                         u657 0717                           u667 072C                           u677 073B  
                         u687 0482                           _SMP 04A7                           fsr0 0004  
                         indf 0000                          l1200 05F7                          l1112 0454  
                        l1120 053C                          l1210 0617                          l1202 05FB  
                        l1114 045E                          l1130 0567                          l1122 0543  
                        l1220 0648                          l1212 061B                          l1204 0603  
                        l1124 0545                          l1300 0788                          l1230 0668  
                        l1222 0649                          l1214 061F                          l1206 060B  
                        l1126 055A                          l1118 0539                          l1134 0447  
                        l1142 0463                          l1310 0527                          l1302 0796  
                        l1224 0652                          l1216 0628                          l1208 060E  
                        l1240 05C6                          l1152 0422                          l1128 055E  
                        l1144 0466                          l1312 052B                          l1160 0501  
                        l1304 07A0                          l1218 063A                          l1226 0658  
                        l1242 05C9                          l1234 0569                          l1154 0428  
                        l1250 04C3                          l1138 042E                          l1146 046D  
                        l1170 0484                          l1314 052D                          l1306 050F  
                        l1162 0505                          l1410 0671                          l1260 043D  
                        l1228 065D                          l1244 05CC                          l1236 056C  
                        l1252 04C6                          l1180 04A1                          l1148 0470  
                        l1164 0473                          l1308 051E                          l1156 04E8  
                        l1172 0488                          l1420 069F                          l1412 0675  
                        l1270 0444                          l1262 0440                          l1246 05CD  
                        l1238 05C5                          l1254 04D3                          l1190 04BE  
                        l1182 04AB                          l1166 047D                          l1158 04EA  
                        l1174 048A                          l1430 06D4                          l1422 06A4  
                        l1414 068C                          l1264 0441                          l1192 05D4  
                        l1248 05D0                          l1256 04D9                          l1168 0480  
                        l1176 0494                          l1280 0744                          l1272 0722  
                        l1440 070F                          l1432 06E0                          l1424 06AF  
                        l1416 0692                          l1266 0442                          l1258 0439  
                        l1194 05D7                          l1186 04B0                          l1178 049A  
                        l1290 0769                          l1282 074E                          l1274 0726  
                        l1434 06EA                          l1426 06BB                          l1418 0697  
                        l1268 0443                          l1196 05DB                          l1188 04B4  
                        l1292 076D                          l1284 0751                          l1276 0731  
                        l1436 06F9                          l1428 06C5                          l1198 05EC  
                        l1294 0777                          l1286 075B                          l1278 0734  
                        l1438 0705                          l1296 077A                          l1288 075F  
                        l1298 0784                          STR_1 0013                          STR_2 0025  
                        STR_3 002D                          STR_4 002D                          STR_5 0037  
                        STR_6 0032                          _BRGH 04C2                          _CREN 00C4  
                        _RCIF 0065                          _SPEN 00C7                          _TRMT 04C1  
                        _TXEN 04C5                          _SYNC 04C4                          _main 0671  
                        btemp 007E                          start 0000              UART_write_text@i 0071  
             __end_of___aldiv 0671                         ?_main 0070                         _RCREG 001A  
                       _SPBRG 0099                         _TXREG 0019                   ?_UART_write 0070  
                       pclath 000A                         status 0003                         wtemp0 007E  
             __initialization 07E0                  __end_of_main 0722                        ??_main 003A  
        nrf_write_payload@len 007B                  ?_nrf_command 0071         nrf_setup@payload_size 007C  
                      _TRISD2 0442                        _TRISD3 0443                        _TRISC6 043E  
                      _TRISC7 043F                        _SSPCON 0014                        _SSPBUF 0013  
                   ??___aldiv 0078             __end_of_UART_init 05D4                _nrf_flush_rxtx 0488  
 char_to_binary_string@output 0042                        _arrcpy 04E7              __end_of_nrf_send 0538  
             _UART_write_text 04C2             __end_of_SPI_write 0462            nrf_flush_rxtx@data 007B  
     __end_of__initialization 07FC        __end_of_nrf_flush_rxtx 04A1                __pcstackCOMMON 0070  
                __pidataBANK0 041E    __end_of_nrf_write_register 0453             ??_SPI_init_master 0070  
           ??_nrf_set_tx_mode 007B         nrf_write_payload@data 007D                    __pbssBANK0 0042  
       nrf_write_register@len 0079         nrf_write_register@reg 007A               ?_nrf_flush_rxtx 0070  
                  __pmaintext 0671                       ?_arrcpy 0070       __end_of_UART_write_text 04E7  
                ??_UART_write 0070                       _SSPSTAT 0094                   nrf_send@len 0020  
                  __stringtab 0003                     ?_nrf_send 0020                       ___aldiv 05D4  
          __end_of_UART_write 042D                       __ptext1 0722                       __ptext2 0488  
                     __ptext3 04E7                       __ptext4 050C                       __ptext5 0472  
                     __ptext6 0462                       __ptext7 04A1                       __ptext8 0446  
                     __ptext9 042D          nrf_read_register@len 0079          nrf_read_register@reg 007A  
            ___aldiv@dividend 0074                       arrcpy@i 0075          end_of_initialization 07FC  
           __end_of_nrf_setup 07E0           UART_init@_XTAL_FREQ 002A                    ??_nrf_send 007E  
            ___aldiv@quotient 0022              ?_UART_write_text 0070                     _UART_init 0569  
                   _TRISCbits 0087                 nrf_send@clear 0022                     _SPI_write 0453  
                   _RXTX_ADDR 004C  nrf_write_command@NRF_command 0071               _SPI_init_master 0439  
             _nrf_set_tx_mode 04A1                 nrf_setup@data 0023                __end_of_arrcpy 050C  
                  ?_UART_init 0026           start_initialization 07E0            _nrf_write_register 0446  
                  ?_SPI_write 0070              ??_nrf_flush_rxtx 007B           ?_nrf_write_register 0078  
                    ??_arrcpy 0073                   __pdataBANK0 004C          ??_nrf_write_register 007A  
      nrf_write_register@data 0078                     ___latbits 0002                 __pcstackBANK0 0020  
         UART_write_text@text 0073       __end_of_SPI_init_master 0446       __end_of_nrf_set_tx_mode 04C2  
               SPI_write@data 0070                      ?___aldiv 0070                     __pstrings 0003  
                 ??_UART_init 002E                 ??_nrf_command 0073            nrf_setup@rxtx_addr 0022  
                 ??_SPI_write 0070               ___aldiv@divisor 0070                  nrf_command@i 0077  
             ___aldiv@counter 0020                     _nrf_setup 0722               nrf_command@data 0071  
           _nrf_read_register 042D            ?_nrf_read_register 0078                  nrf_send@data 0023  
                 __stringbase 0012                  nrf_send@stat 0021                UART_write@data 0070  
                   arrcpy@len 0072                     arrcpy@dst 0074                     arrcpy@src 0070  
         ??_nrf_read_register 007A             _nrf_write_command 0462           __end_of_nrf_command 0569  
          ?_nrf_write_command 0070             _nrf_write_payload 0472                    ?_nrf_setup 007C  
          ?_nrf_write_payload 007B              ?_SPI_init_master 0070              ?_nrf_set_tx_mode 0070  
   __end_of_nrf_read_register 0439           ??_nrf_write_command 0071           ??_nrf_write_payload 007C  
          __end_of__stringtab 0013     __end_of_nrf_write_command 0472                      __ptext10 0538  
                    __ptext11 0453                      __ptext12 04C2                      __ptext13 0421  
                    __ptext14 0569                      __ptext15 05D4                      __ptext16 0439  
       nrf_read_register@data 0078     __end_of_nrf_write_payload 0488                      _nrf_send 050C  
              nrf_command@len 0072                      main@data 003D                   _nrf_command 0538  
      nrf_command@NRF_command 0075             UART_init@baudrate 0026                   ??_nrf_setup 0020  
                   stringcode 000D                    _OSCCONbits 008F                      stringdir 000D  
                    stringtab 0003                  ___aldiv@sign 0021       nrf_write_command@status 0072  
           nrf_command@status 0076                    _UART_write 0421             ??_UART_write_text 0071  
