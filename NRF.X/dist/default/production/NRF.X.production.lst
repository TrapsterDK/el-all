

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Mar 27 15:44:27 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30     0000                     
    31                           ; Version 2.40
    32                           ; Generated 04/07/2022 GMT
    33                           ; 
    34                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66     0000                     	;# 
    67     0001                     	;# 
    68     0002                     	;# 
    69     0003                     	;# 
    70     0004                     	;# 
    71     0005                     	;# 
    72     0006                     	;# 
    73     0007                     	;# 
    74     0008                     	;# 
    75     0009                     	;# 
    76     000A                     	;# 
    77     000B                     	;# 
    78     000C                     	;# 
    79     000D                     	;# 
    80     000E                     	;# 
    81     000E                     	;# 
    82     000F                     	;# 
    83     0010                     	;# 
    84     0011                     	;# 
    85     0012                     	;# 
    86     0013                     	;# 
    87     0014                     	;# 
    88     0015                     	;# 
    89     0015                     	;# 
    90     0016                     	;# 
    91     0017                     	;# 
    92     0018                     	;# 
    93     0019                     	;# 
    94     001A                     	;# 
    95     001B                     	;# 
    96     001B                     	;# 
    97     001C                     	;# 
    98     001D                     	;# 
    99     001E                     	;# 
   100     001F                     	;# 
   101     0081                     	;# 
   102     0085                     	;# 
   103     0086                     	;# 
   104     0087                     	;# 
   105     0088                     	;# 
   106     0089                     	;# 
   107     008C                     	;# 
   108     008D                     	;# 
   109     008E                     	;# 
   110     008F                     	;# 
   111     0090                     	;# 
   112     0091                     	;# 
   113     0092                     	;# 
   114     0093                     	;# 
   115     0093                     	;# 
   116     0093                     	;# 
   117     0094                     	;# 
   118     0095                     	;# 
   119     0096                     	;# 
   120     0097                     	;# 
   121     0098                     	;# 
   122     0099                     	;# 
   123     009A                     	;# 
   124     009B                     	;# 
   125     009C                     	;# 
   126     009D                     	;# 
   127     009E                     	;# 
   128     009F                     	;# 
   129     0105                     	;# 
   130     0107                     	;# 
   131     0108                     	;# 
   132     0109                     	;# 
   133     010C                     	;# 
   134     010C                     	;# 
   135     010D                     	;# 
   136     010E                     	;# 
   137     010F                     	;# 
   138     0185                     	;# 
   139     0187                     	;# 
   140     0188                     	;# 
   141     0189                     	;# 
   142     018C                     	;# 
   143     018D                     	;# 
   144     0000                     	;# 
   145     0001                     	;# 
   146     0002                     	;# 
   147     0003                     	;# 
   148     0004                     	;# 
   149     0005                     	;# 
   150     0006                     	;# 
   151     0007                     	;# 
   152     0008                     	;# 
   153     0009                     	;# 
   154     000A                     	;# 
   155     000B                     	;# 
   156     000C                     	;# 
   157     000D                     	;# 
   158     000E                     	;# 
   159     000E                     	;# 
   160     000F                     	;# 
   161     0010                     	;# 
   162     0011                     	;# 
   163     0012                     	;# 
   164     0013                     	;# 
   165     0014                     	;# 
   166     0015                     	;# 
   167     0015                     	;# 
   168     0016                     	;# 
   169     0017                     	;# 
   170     0018                     	;# 
   171     0019                     	;# 
   172     001A                     	;# 
   173     001B                     	;# 
   174     001B                     	;# 
   175     001C                     	;# 
   176     001D                     	;# 
   177     001E                     	;# 
   178     001F                     	;# 
   179     0081                     	;# 
   180     0085                     	;# 
   181     0086                     	;# 
   182     0087                     	;# 
   183     0088                     	;# 
   184     0089                     	;# 
   185     008C                     	;# 
   186     008D                     	;# 
   187     008E                     	;# 
   188     008F                     	;# 
   189     0090                     	;# 
   190     0091                     	;# 
   191     0092                     	;# 
   192     0093                     	;# 
   193     0093                     	;# 
   194     0093                     	;# 
   195     0094                     	;# 
   196     0095                     	;# 
   197     0096                     	;# 
   198     0097                     	;# 
   199     0098                     	;# 
   200     0099                     	;# 
   201     009A                     	;# 
   202     009B                     	;# 
   203     009C                     	;# 
   204     009D                     	;# 
   205     009E                     	;# 
   206     009F                     	;# 
   207     0105                     	;# 
   208     0107                     	;# 
   209     0108                     	;# 
   210     0109                     	;# 
   211     010C                     	;# 
   212     010C                     	;# 
   213     010D                     	;# 
   214     010E                     	;# 
   215     010F                     	;# 
   216     0185                     	;# 
   217     0187                     	;# 
   218     0188                     	;# 
   219     0189                     	;# 
   220     018C                     	;# 
   221     018D                     	;# 
   222                           
   223                           	psect	idataBANK0
   224     049D                     __pidataBANK0:
   225                           
   226                           ;initializer for _RXTX_ADDR
   227     049D  34B5               	retlw	181
   228     049E  3423               	retlw	35
   229     049F  34A5               	retlw	165
   230     0013                     _SSPBUF	set	19
   231     0014                     _SSPCON	set	20
   232     001A                     _RCREG	set	26
   233     0019                     _TXREG	set	25
   234     0042                     _RD2	set	66
   235     0043                     _RD3	set	67
   236     0065                     _RCIF	set	101
   237     00C4                     _CREN	set	196
   238     00C7                     _SPEN	set	199
   239     008F                     _OSCCONbits	set	143
   240     0088                     _TRISDbits	set	136
   241     0087                     _TRISCbits	set	135
   242     0094                     _SSPSTAT	set	148
   243     0099                     _SPBRG	set	153
   244     04A0                     _BF	set	1184
   245     04A7                     _SMP	set	1191
   246     04A6                     _CKE	set	1190
   247     04C1                     _TRMT	set	1217
   248     04C5                     _TXEN	set	1221
   249     043E                     _TRISC6	set	1086
   250     043F                     _TRISC7	set	1087
   251     04C4                     _SYNC	set	1220
   252     04C2                     _BRGH	set	1218
   253                           
   254                           	psect	strings
   255     0003                     __pstrings:
   256     0003                     stringtab:
   257     0003                     __stringtab:
   258     0003                     stringcode:	
   259                           ;	String table - string pointers are 1 byte each
   260                           
   261     0003                     stringdir:
   262     0003  3000               	movlw	high stringdir
   263     0004  008A               	movwf	10
   264     0005  0804               	movf	4,w
   265     0006  0A84               	incf	4,f
   266     0007  0782               	addwf	2,f
   267     0008                     __stringbase:
   268     0008  3400               	retlw	0
   269     0009                     __end_of__stringtab:
   270     0009                     STR_1:
   271     0009  3425               	retlw	37	;'%'
   272     000A  3463               	retlw	99	;'c'
   273     000B  3425               	retlw	37	;'%'
   274     000C  3463               	retlw	99	;'c'
   275     000D  3425               	retlw	37	;'%'
   276     000E  3463               	retlw	99	;'c'
   277     000F  3425               	retlw	37	;'%'
   278     0010  3463               	retlw	99	;'c'
   279     0011  3425               	retlw	37	;'%'
   280     0012  3463               	retlw	99	;'c'
   281     0013  3425               	retlw	37	;'%'
   282     0014  3463               	retlw	99	;'c'
   283     0015  3425               	retlw	37	;'%'
   284     0016  3463               	retlw	99	;'c'
   285     0017  3425               	retlw	37	;'%'
   286     0018  3463               	retlw	99	;'c'
   287     0019  340A               	retlw	10
   288     001A  3400               	retlw	0
   289     001B                     STR_4:
   290     001B  3443               	retlw	67	;'C'
   291     001C  3468               	retlw	104	;'h'
   292     001D  3461               	retlw	97	;'a'
   293     001E  3472               	retlw	114	;'r'
   294     001F  3420               	retlw	32	;' '
   295     0020  3472               	retlw	114	;'r'
   296     0021  3465               	retlw	101	;'e'
   297     0022  3461               	retlw	97	;'a'
   298     0023  3464               	retlw	100	;'d'
   299     0024  340A               	retlw	10
   300     0025  3400               	retlw	0
   301     0026                     STR_2:
   302     0026  3443               	retlw	67	;'C'
   303     0027  3468               	retlw	104	;'h'
   304     0028  3461               	retlw	97	;'a'
   305     0029  3472               	retlw	114	;'r'
   306     002A  3420               	retlw	32	;' '
   307     002B  3473               	retlw	115	;'s'
   308     002C  3465               	retlw	101	;'e'
   309     002D  346E               	retlw	110	;'n'
   310     002E  3474               	retlw	116	;'t'
   311     002F  340A               	retlw	10
   312     0030  3400               	retlw	0
   313     0031                     STR_5:
   314     0031  3442               	retlw	66	;'B'
   315     0032  344F               	retlw	79	;'O'
   316     0033  344F               	retlw	79	;'O'
   317     0034  3454               	retlw	84	;'T'
   318     0035  3445               	retlw	69	;'E'
   319     0036  3444               	retlw	68	;'D'
   320     0037  340A               	retlw	10
   321     0038  3400               	retlw	0
   322     0037                     
   323                           	psect	cinit
   324     07E0                     start_initialization:	
   325                           ; #config settings
   326                           
   327     07E0                     __initialization:
   328                           
   329                           ; Initialize objects allocated to BANK0
   330     07E0  120A  118A  249D  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   331     07E5  00C7               	movwf	__pdataBANK0& (0+127)
   332     07E6  120A  118A  249E  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   333     07EB  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   334     07EC  120A  118A  249F  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   335     07F1  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   336                           
   337                           ; Clear objects allocated to BANK0
   338     07F2  01BD               	clrf	__pbssBANK0& (0+127)
   339     07F3  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   340     07F4  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   341     07F5  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   342     07F6  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   343     07F7  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   344     07F8  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   345     07F9  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   346     07FA  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   347     07FB  01C6               	clrf	(__pbssBANK0+9)& (0+127)
   348     07FC                     end_of_initialization:	
   349                           ;End of C runtime variable initialization code
   350                           
   351     07FC                     __end_of__initialization:
   352     07FC  0183               	clrf	3
   353     07FD  120A  118A  2DC1   	ljmp	_main	;jump to C main() function
   354                           
   355                           	psect	bssBANK0
   356     003D                     __pbssBANK0:
   357     003D                     char_to_binary_string@output:
   358     003D                     	ds	10
   359                           
   360                           	psect	dataBANK0
   361     0047                     __pdataBANK0:
   362     0047                     _RXTX_ADDR:
   363     0047                     	ds	3
   364                           
   365                           	psect	cstackCOMMON
   366     0070                     __pcstackCOMMON:
   367     0070                     ?_UART_write:
   368     0070                     ??_UART_write:	
   369                           ; 1 bytes @ 0x0
   370                           
   371     0070                     ?_UART_write_text:	
   372                           ; 1 bytes @ 0x0
   373                           
   374     0070                     ?_SPI_init_master:	
   375                           ; 1 bytes @ 0x0
   376                           
   377     0070                     ??_SPI_init_master:	
   378                           ; 1 bytes @ 0x0
   379                           
   380     0070                     ?_SPI_write:	
   381                           ; 1 bytes @ 0x0
   382                           
   383     0070                     ??_SPI_write:	
   384                           ; 1 bytes @ 0x0
   385                           
   386     0070                     ?_arrcpy:	
   387                           ; 1 bytes @ 0x0
   388                           
   389     0070                     ?_nrf_write_command:	
   390                           ; 1 bytes @ 0x0
   391                           
   392     0070                     ?_nrf_flush_rxtx:	
   393                           ; 1 bytes @ 0x0
   394                           
   395     0070                     ?_nrf_set_rx_mode:	
   396                           ; 1 bytes @ 0x0
   397                           
   398     0070                     ?_nrf_data_available:	
   399                           ; 1 bytes @ 0x0
   400                           
   401     0070                     ?_nrf_setup:	
   402                           ; 1 bytes @ 0x0
   403                           
   404     0070                     ?_nrf_rx_char:	
   405                           ; 1 bytes @ 0x0
   406                           
   407     0070                     ?_main:	
   408                           ; 1 bytes @ 0x0
   409                           
   410     0070                     ?___aldiv:	
   411                           ; 2 bytes @ 0x0
   412                           
   413     0070                     UART_write@data:	
   414                           ; 4 bytes @ 0x0
   415                           
   416     0070                     SPI_write@data:	
   417                           ; 1 bytes @ 0x0
   418                           
   419     0070                     arrcpy@src:	
   420                           ; 1 bytes @ 0x0
   421                           
   422     0070                     ___aldiv@divisor:	
   423                           ; 1 bytes @ 0x0
   424                           
   425                           
   426                           ; 4 bytes @ 0x0
   427     0070                     	ds	1
   428     0071                     ??_UART_write_text:
   429     0071                     ?_nrf_command:	
   430                           ; 1 bytes @ 0x1
   431                           
   432     0071                     ??_nrf_write_command:	
   433                           ; 1 bytes @ 0x1
   434                           
   435     0071                     arrcpy@len:	
   436                           ; 1 bytes @ 0x1
   437                           
   438     0071                     nrf_command@data:	
   439                           ; 1 bytes @ 0x1
   440                           
   441     0071                     nrf_write_command@command:	
   442                           ; 1 bytes @ 0x1
   443                           
   444     0071                     UART_write_text@i:	
   445                           ; 1 bytes @ 0x1
   446                           
   447                           
   448                           ; 2 bytes @ 0x1
   449     0071                     	ds	1
   450     0072                     ??_arrcpy:
   451     0072                     nrf_command@len:	
   452                           ; 1 bytes @ 0x2
   453                           
   454     0072                     nrf_write_command@status:	
   455                           ; 1 bytes @ 0x2
   456                           
   457                           
   458                           ; 1 bytes @ 0x2
   459     0072                     	ds	1
   460     0073                     ??_nrf_command:
   461     0073                     ??_nrf_data_available:	
   462                           ; 1 bytes @ 0x3
   463                           
   464     0073                     UART_write_text@text:	
   465                           ; 1 bytes @ 0x3
   466                           
   467     0073                     nrf_data_available@status:	
   468                           ; 1 bytes @ 0x3
   469                           
   470                           
   471                           ; 1 bytes @ 0x3
   472     0073                     	ds	1
   473     0074                     ___aldiv@dividend:
   474                           
   475                           ; 4 bytes @ 0x4
   476     0074                     	ds	1
   477     0075                     arrcpy@dst:
   478                           
   479                           ; 1 bytes @ 0x5
   480     0075                     	ds	1
   481     0076                     arrcpy@i:
   482     0076                     nrf_command@command:	
   483                           ; 1 bytes @ 0x6
   484                           
   485                           
   486                           ; 1 bytes @ 0x6
   487     0076                     	ds	1
   488     0077                     nrf_command@status:
   489                           
   490                           ; 1 bytes @ 0x7
   491     0077                     	ds	1
   492     0078                     ??___aldiv:
   493     0078                     nrf_command@i:	
   494                           ; 1 bytes @ 0x8
   495                           
   496                           
   497                           ; 1 bytes @ 0x8
   498     0078                     	ds	1
   499     0079                     ?_nrf_write_register:
   500     0079                     ?_nrf_read_register:	
   501                           ; 1 bytes @ 0x9
   502                           
   503     0079                     nrf_write_register@data:	
   504                           ; 1 bytes @ 0x9
   505                           
   506     0079                     nrf_read_register@data:	
   507                           ; 1 bytes @ 0x9
   508                           
   509                           
   510                           ; 1 bytes @ 0x9
   511     0079                     	ds	1
   512     007A                     nrf_write_register@len:
   513     007A                     nrf_read_register@len:	
   514                           ; 1 bytes @ 0xA
   515                           
   516                           
   517                           ; 1 bytes @ 0xA
   518     007A                     	ds	1
   519     007B                     ??_nrf_write_register:
   520     007B                     ??_nrf_read_register:	
   521                           ; 1 bytes @ 0xB
   522                           
   523     007B                     nrf_write_register@reg:	
   524                           ; 1 bytes @ 0xB
   525                           
   526     007B                     nrf_read_register@reg:	
   527                           ; 1 bytes @ 0xB
   528                           
   529                           
   530                           ; 1 bytes @ 0xB
   531     007B                     	ds	1
   532     007C                     ??_nrf_flush_rxtx:
   533     007C                     ??_nrf_set_rx_mode:	
   534                           ; 1 bytes @ 0xC
   535                           
   536     007C                     ??_nrf_rx_char:	
   537                           ; 1 bytes @ 0xC
   538                           
   539     007C                     nrf_flush_rxtx@data:	
   540                           ; 1 bytes @ 0xC
   541                           
   542     007C                     nrf_set_rx_mode@config:	
   543                           ; 1 bytes @ 0xC
   544                           
   545     007C                     nrf_rx_char@clear:	
   546                           ; 1 bytes @ 0xC
   547                           
   548                           
   549                           ; 1 bytes @ 0xC
   550     007C                     	ds	1
   551     007D                     nrf_rx_char@data:
   552                           
   553                           ; 1 bytes @ 0xD
   554     007D                     	ds	1
   555                           
   556                           	psect	cstackBANK0
   557     0020                     __pcstackBANK0:
   558     0020                     ??_nrf_setup:
   559     0020                     ___aldiv@counter:	
   560                           ; 1 bytes @ 0x0
   561                           
   562                           
   563                           ; 1 bytes @ 0x0
   564     0020                     	ds	1
   565     0021                     ___aldiv@sign:
   566                           
   567                           ; 1 bytes @ 0x1
   568     0021                     	ds	1
   569     0022                     ___aldiv@quotient:
   570     0022                     nrf_setup@data:	
   571                           ; 4 bytes @ 0x2
   572                           
   573                           
   574                           ; 5 bytes @ 0x2
   575     0022                     	ds	4
   576     0026                     ?_UART_init:
   577     0026                     UART_init@baudrate:	
   578                           ; 1 bytes @ 0x6
   579                           
   580                           
   581                           ; 4 bytes @ 0x6
   582     0026                     	ds	4
   583     002A                     UART_init@_XTAL_FREQ:
   584                           
   585                           ; 4 bytes @ 0xA
   586     002A                     	ds	4
   587     002E                     ??_UART_init:
   588                           
   589                           ; 1 bytes @ 0xE
   590     002E                     	ds	12
   591     003A                     ??_main:
   592                           
   593                           ; 1 bytes @ 0x1A
   594     003A                     	ds	2
   595     003C                     main@ch:
   596                           
   597                           ; 1 bytes @ 0x1C
   598     003C                     	ds	1
   599                           
   600                           	psect	maintext
   601     05C1                     __pmaintext:	
   602 ;;
   603 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   604 ;;
   605 ;; *************** function _main *****************
   606 ;; Defined at:
   607 ;;		line 339 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;  ch              1   28[BANK0 ] unsigned char 
   612 ;; Return value:  Size  Location     Type
   613 ;;                  2  193[None  ] int 
   614 ;; Registers used:
   615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : B00/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   621 ;;      Params:         0       0       0       0       0
   622 ;;      Locals:         0       1       0       0       0
   623 ;;      Temps:          0       2       0       0       0
   624 ;;      Totals:         0       3       0       0       0
   625 ;;Total ram usage:        3 bytes
   626 ;; Hardware stack levels required when called: 5
   627 ;; This function calls:
   628 ;;		_SPI_init_master
   629 ;;		_UART_init
   630 ;;		_UART_write
   631 ;;		_UART_write_text
   632 ;;		_nrf_data_available
   633 ;;		_nrf_rx_char
   634 ;;		_nrf_set_rx_mode
   635 ;;		_nrf_setup
   636 ;; This function is called by:
   637 ;;		Startup code after reset
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641     05C1                     _main:	
   642                           ;psect for function _main
   643                           
   644     05C1                     l1449:	
   645                           ;incstack = 0
   646                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   647                           
   648                           
   649                           ;main.c: 341:     OSCCONbits.IRCF = 111;
   650     05C1  3070               	movlw	112
   651     05C2  1683               	bsf	3,5	;RP0=1, select bank1
   652     05C3  1303               	bcf	3,6	;RP1=0, select bank1
   653     05C4  048F               	iorwf	15,f	;volatile
   654     05C5                     l1451:
   655                           
   656                           ;main.c: 343:     UART_init(9600, 8000000UL);
   657     05C5  3000               	movlw	0
   658     05C6  1283               	bcf	3,5	;RP0=0, select bank0
   659     05C7  1303               	bcf	3,6	;RP1=0, select bank0
   660     05C8  00A9               	movwf	UART_init@baudrate+3
   661     05C9  3000               	movlw	0
   662     05CA  00A8               	movwf	UART_init@baudrate+2
   663     05CB  3025               	movlw	37
   664     05CC  00A7               	movwf	UART_init@baudrate+1
   665     05CD  3080               	movlw	128
   666     05CE  00A6               	movwf	UART_init@baudrate
   667     05CF  3000               	movlw	0
   668     05D0  00AD               	movwf	UART_init@_XTAL_FREQ+3
   669     05D1  307A               	movlw	122
   670     05D2  00AC               	movwf	UART_init@_XTAL_FREQ+2
   671     05D3  3012               	movlw	18
   672     05D4  00AB               	movwf	UART_init@_XTAL_FREQ+1
   673     05D5  3000               	movlw	0
   674     05D6  00AA               	movwf	UART_init@_XTAL_FREQ
   675     05D7  120A  118A  261E  120A  118A  	fcall	_UART_init
   676     05DC                     l1453:
   677                           
   678                           ;main.c: 345:     UART_write_text("BOOTED\n");
   679     05DC  3029               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   680     05DD  120A  118A  256B  120A  118A  	fcall	_UART_write_text
   681     05E2                     l1455:
   682                           
   683                           ;main.c: 347:     SPI_init_master();
   684     05E2  120A  118A  24B8  120A  118A  	fcall	_SPI_init_master
   685     05E7                     l1457:
   686                           
   687                           ;main.c: 351:     nrf_setup();
   688     05E7  120A  118A  2726  120A  118A  	fcall	_nrf_setup
   689     05EC                     l1459:
   690                           
   691                           ;main.c: 355:     nrf_set_rx_mode();
   692     05EC  120A  118A  254D  120A  118A  	fcall	_nrf_set_rx_mode
   693     05F1                     l1461:
   694                           
   695                           ;main.c: 358:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   696     05F1  3006               	movlw	6
   697     05F2  1283               	bcf	3,5	;RP0=0, select bank0
   698     05F3  1303               	bcf	3,6	;RP1=0, select bank0
   699     05F4  00BB               	movwf	??_main+1
   700     05F5  302F               	movlw	47
   701     05F6  00BA               	movwf	??_main
   702     05F7                     u687:
   703     05F7  0BBA               	decfsz	??_main,f
   704     05F8  2DF7               	goto	u687
   705     05F9  0BBB               	decfsz	??_main+1,f
   706     05FA  2DF7               	goto	u687
   707     05FB  2DFC               	nop2
   708     05FC                     l1463:
   709     05FC  120A  118A  24D2  120A  118A  	fcall	_nrf_data_available
   710     0601  3A00               	xorlw	0
   711     0602  1903               	skipnz
   712     0603  2E05               	goto	u671
   713     0604  2E06               	goto	u670
   714     0605                     u671:
   715     0605  2DFC               	goto	l1463
   716     0606                     u670:
   717     0606                     l1465:
   718                           
   719                           ;main.c: 373:         uint8_t ch = nrf_rx_char();
   720     0606  120A  118A  24FF  120A  118A  	fcall	_nrf_rx_char
   721     060B  1283               	bcf	3,5	;RP0=0, select bank0
   722     060C  1303               	bcf	3,6	;RP1=0, select bank0
   723     060D  00BC               	movwf	main@ch
   724     060E                     l1467:
   725                           
   726                           ;main.c: 374:         UART_write(ch);
   727     060E  083C               	movf	main@ch,w
   728     060F  120A  118A  24A0  120A  118A  	fcall	_UART_write
   729     0614                     l1469:
   730                           
   731                           ;main.c: 375:         UART_write_text("\n");
   732     0614  302F               	movlw	(low (((STR_5+6)-__stringbase)| (0+32768)))& (0+255)
   733     0615  120A  118A  256B  120A  118A  	fcall	_UART_write_text
   734     061A  2DFC               	goto	l1463
   735     061B  120A  118A  2800   	ljmp	start
   736     061E                     __end_of_main:
   737                           
   738                           	psect	text1
   739     0726                     __ptext1:	
   740 ;; *************** function _nrf_setup *****************
   741 ;; Defined at:
   742 ;;		line 235 in file "main.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  data            5    2[BANK0 ] unsigned char [5]
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   756 ;;      Params:         0       0       0       0       0
   757 ;;      Locals:         0       5       0       0       0
   758 ;;      Temps:          0       2       0       0       0
   759 ;;      Totals:         0       7       0       0       0
   760 ;;Total ram usage:        7 bytes
   761 ;; Hardware stack levels used: 1
   762 ;; Hardware stack levels required when called: 4
   763 ;; This function calls:
   764 ;;		_arrcpy
   765 ;;		_nrf_flush_rxtx
   766 ;;		_nrf_write_register
   767 ;; This function is called by:
   768 ;;		_main
   769 ;; This function uses a non-reentrant model
   770 ;;
   771                           
   772     0726                     _nrf_setup:	
   773                           ;psect for function _nrf_setup
   774                           
   775     0726                     l1307:	
   776                           ;incstack = 0
   777                           ; Regs used in _nrf_setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   778                           
   779                           
   780                           ;main.c: 237:     TRISDbits.TRISD3 = 0;
   781     0726  1683               	bsf	3,5	;RP0=1, select bank1
   782     0727  1303               	bcf	3,6	;RP1=0, select bank1
   783     0728  1188               	bcf	8,3	;volatile
   784                           
   785                           ;main.c: 238:     TRISDbits.TRISD2 = 0;
   786     0729  1108               	bcf	8,2	;volatile
   787     072A                     l1309:
   788                           
   789                           ;main.c: 240:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   790     072A  3006               	movlw	6
   791     072B  1283               	bcf	3,5	;RP0=0, select bank0
   792     072C  1303               	bcf	3,6	;RP1=0, select bank0
   793     072D  00A1               	movwf	??_nrf_setup+1
   794     072E  302F               	movlw	47
   795     072F  00A0               	movwf	??_nrf_setup
   796     0730                     u697:
   797     0730  0BA0               	decfsz	??_nrf_setup,f
   798     0731  2F30               	goto	u697
   799     0732  0BA1               	decfsz	??_nrf_setup+1,f
   800     0733  2F30               	goto	u697
   801     0734  2F35               	nop2
   802     0735                     l1311:
   803                           
   804                           ;main.c: 242:     RD3 = 1;
   805     0735  1283               	bcf	3,5	;RP0=0, select bank0
   806     0736  1303               	bcf	3,6	;RP1=0, select bank0
   807     0737  1588               	bsf	8,3	;volatile
   808     0738                     l1313:
   809                           
   810                           ;main.c: 243:     RD2 = 0;
   811     0738  1108               	bcf	8,2	;volatile
   812                           
   813                           ;main.c: 246:     _delay((unsigned long)((2)*(8000000UL/4000.0)));
   814     0739  3006               	movlw	6
   815     073A  1283               	bcf	3,5	;RP0=0, select bank0
   816     073B  1303               	bcf	3,6	;RP1=0, select bank0
   817     073C  00A1               	movwf	??_nrf_setup+1
   818     073D  302F               	movlw	47
   819     073E  00A0               	movwf	??_nrf_setup
   820     073F                     u707:
   821     073F  0BA0               	decfsz	??_nrf_setup,f
   822     0740  2F3F               	goto	u707
   823     0741  0BA1               	decfsz	??_nrf_setup+1,f
   824     0742  2F3F               	goto	u707
   825     0743  2F44               	nop2
   826                           
   827                           ;main.c: 248:     uint8_t data[5];;main.c: 250:     data[0] = 0x0B;
   828     0744  300B               	movlw	11
   829     0745  1283               	bcf	3,5	;RP0=0, select bank0
   830     0746  1303               	bcf	3,6	;RP1=0, select bank0
   831     0747  00A2               	movwf	nrf_setup@data
   832     0748                     l1315:
   833                           
   834                           ;main.c: 251:     nrf_write_register(0x00, &data, 1);
   835     0748  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   836     0749  00F9               	movwf	nrf_write_register@data
   837     074A  01FA               	clrf	nrf_write_register@len
   838     074B  0AFA               	incf	nrf_write_register@len,f
   839     074C  3000               	movlw	0
   840     074D  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   841     0752                     l1317:
   842                           
   843                           ;main.c: 252:     data[0] = 0x00;
   844     0752  1283               	bcf	3,5	;RP0=0, select bank0
   845     0753  1303               	bcf	3,6	;RP1=0, select bank0
   846     0754  01A2               	clrf	nrf_setup@data
   847     0755                     l1319:
   848                           
   849                           ;main.c: 253:     nrf_write_register(0x01, &data, 1);
   850     0755  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   851     0756  00F9               	movwf	nrf_write_register@data
   852     0757  01FA               	clrf	nrf_write_register@len
   853     0758  0AFA               	incf	nrf_write_register@len,f
   854     0759  3001               	movlw	1
   855     075A  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   856     075F                     l1321:
   857                           
   858                           ;main.c: 254:     data[0] = 0x01;
   859     075F  1283               	bcf	3,5	;RP0=0, select bank0
   860     0760  1303               	bcf	3,6	;RP1=0, select bank0
   861     0761  01A2               	clrf	nrf_setup@data
   862     0762  0AA2               	incf	nrf_setup@data,f
   863     0763                     l1323:
   864                           
   865                           ;main.c: 255:     nrf_write_register(0x02, &data, 1);
   866     0763  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   867     0764  00F9               	movwf	nrf_write_register@data
   868     0765  01FA               	clrf	nrf_write_register@len
   869     0766  0AFA               	incf	nrf_write_register@len,f
   870     0767  3002               	movlw	2
   871     0768  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   872     076D                     l1325:
   873                           
   874                           ;main.c: 256:     data[0] = 0x01;
   875     076D  1283               	bcf	3,5	;RP0=0, select bank0
   876     076E  1303               	bcf	3,6	;RP1=0, select bank0
   877     076F  01A2               	clrf	nrf_setup@data
   878     0770  0AA2               	incf	nrf_setup@data,f
   879     0771                     l1327:
   880                           
   881                           ;main.c: 257:     nrf_write_register(0x03, &data, 1);
   882     0771  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   883     0772  00F9               	movwf	nrf_write_register@data
   884     0773  01FA               	clrf	nrf_write_register@len
   885     0774  0AFA               	incf	nrf_write_register@len,f
   886     0775  3003               	movlw	3
   887     0776  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   888     077B                     l1329:
   889                           
   890                           ;main.c: 258:     data[0] = 0x00;
   891     077B  1283               	bcf	3,5	;RP0=0, select bank0
   892     077C  1303               	bcf	3,6	;RP1=0, select bank0
   893     077D  01A2               	clrf	nrf_setup@data
   894     077E                     l1331:
   895                           
   896                           ;main.c: 259:     nrf_write_register(0x04, &data, 1);
   897     077E  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   898     077F  00F9               	movwf	nrf_write_register@data
   899     0780  01FA               	clrf	nrf_write_register@len
   900     0781  0AFA               	incf	nrf_write_register@len,f
   901     0782  3004               	movlw	4
   902     0783  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   903     0788                     l1333:
   904                           
   905                           ;main.c: 260:     data[0] = 0x01;
   906     0788  1283               	bcf	3,5	;RP0=0, select bank0
   907     0789  1303               	bcf	3,6	;RP1=0, select bank0
   908     078A  01A2               	clrf	nrf_setup@data
   909     078B  0AA2               	incf	nrf_setup@data,f
   910     078C                     l1335:
   911                           
   912                           ;main.c: 261:     nrf_write_register(0x05, &data, 1);
   913     078C  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   914     078D  00F9               	movwf	nrf_write_register@data
   915     078E  01FA               	clrf	nrf_write_register@len
   916     078F  0AFA               	incf	nrf_write_register@len,f
   917     0790  3005               	movlw	5
   918     0791  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   919                           
   920                           ;main.c: 262:     data[0] = 0x26;
   921     0796  3026               	movlw	38
   922     0797  1283               	bcf	3,5	;RP0=0, select bank0
   923     0798  1303               	bcf	3,6	;RP1=0, select bank0
   924     0799  00A2               	movwf	nrf_setup@data
   925     079A                     l1337:
   926                           
   927                           ;main.c: 263:     nrf_write_register(0x06, &data, 1);
   928     079A  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   929     079B  00F9               	movwf	nrf_write_register@data
   930     079C  01FA               	clrf	nrf_write_register@len
   931     079D  0AFA               	incf	nrf_write_register@len,f
   932     079E  3006               	movlw	6
   933     079F  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   934     07A4                     l1339:
   935                           
   936                           ;main.c: 264:     data[0] = 0x05;
   937     07A4  3005               	movlw	5
   938     07A5  1283               	bcf	3,5	;RP0=0, select bank0
   939     07A6  1303               	bcf	3,6	;RP1=0, select bank0
   940     07A7  00A2               	movwf	nrf_setup@data
   941                           
   942                           ;main.c: 265:     nrf_write_register(0x11, &data, 1);
   943     07A8  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   944     07A9  00F9               	movwf	nrf_write_register@data
   945     07AA  01FA               	clrf	nrf_write_register@len
   946     07AB  0AFA               	incf	nrf_write_register@len,f
   947     07AC  3011               	movlw	17
   948     07AD  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   949                           
   950                           ;main.c: 267:     arrcpy(data, RXTX_ADDR, sizeof(RXTX_ADDR));
   951     07B2  3047               	movlw	(low (_RXTX_ADDR| 0))& (0+255)
   952     07B3  00F0               	movwf	arrcpy@src
   953     07B4  3003               	movlw	3
   954     07B5  00F1               	movwf	arrcpy@len
   955     07B6  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   956     07B7  120A  118A  2530  120A  118A  	fcall	_arrcpy
   957                           
   958                           ;main.c: 268:     nrf_write_register(0x0A, data, sizeof(RXTX_ADDR));
   959     07BC  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   960     07BD  00F9               	movwf	nrf_write_register@data
   961     07BE  3003               	movlw	3
   962     07BF  00FA               	movwf	nrf_write_register@len
   963     07C0  300A               	movlw	10
   964     07C1  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   965                           
   966                           ;main.c: 270:     arrcpy(data, RXTX_ADDR, sizeof(RXTX_ADDR));
   967     07C6  3047               	movlw	(low (_RXTX_ADDR| 0))& (0+255)
   968     07C7  00F0               	movwf	arrcpy@src
   969     07C8  3003               	movlw	3
   970     07C9  00F1               	movwf	arrcpy@len
   971     07CA  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   972     07CB  120A  118A  2530  120A  118A  	fcall	_arrcpy
   973                           
   974                           ;main.c: 271:     nrf_write_register(0x10, data, sizeof(RXTX_ADDR));
   975     07D0  3022               	movlw	(low (nrf_setup@data| 0))& (0+255)
   976     07D1  00F9               	movwf	nrf_write_register@data
   977     07D2  3003               	movlw	3
   978     07D3  00FA               	movwf	nrf_write_register@len
   979     07D4  3010               	movlw	16
   980     07D5  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
   981                           
   982                           ;main.c: 273:     nrf_flush_rxtx();
   983     07DA  120A  118A  2517  120A  118A  	fcall	_nrf_flush_rxtx
   984     07DF                     l169:
   985     07DF  0008               	return
   986     07E0                     __end_of_nrf_setup:
   987                           
   988                           	psect	text2
   989     0517                     __ptext2:	
   990 ;; *************** function _nrf_flush_rxtx *****************
   991 ;; Defined at:
   992 ;;		line 182 in file "main.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;		None
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  data            1   12[COMMON] unsigned char 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1006 ;;      Params:         0       0       0       0       0
  1007 ;;      Locals:         1       0       0       0       0
  1008 ;;      Temps:          0       0       0       0       0
  1009 ;;      Totals:         1       0       0       0       0
  1010 ;;Total ram usage:        1 bytes
  1011 ;; Hardware stack levels used: 1
  1012 ;; Hardware stack levels required when called: 3
  1013 ;; This function calls:
  1014 ;;		_nrf_write_command
  1015 ;;		_nrf_write_register
  1016 ;; This function is called by:
  1017 ;;		_nrf_setup
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021     0517                     _nrf_flush_rxtx:	
  1022                           ;psect for function _nrf_flush_rxtx
  1023                           
  1024     0517                     l1185:	
  1025                           ;incstack = 0
  1026                           ; Regs used in _nrf_flush_rxtx: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1027                           
  1028                           
  1029                           ;main.c: 184:     uint8_t data = 0b01110000;
  1030     0517  3070               	movlw	112
  1031     0518  00FC               	movwf	nrf_flush_rxtx@data
  1032     0519                     l1187:
  1033                           
  1034                           ;main.c: 185:     nrf_write_register(0x07, &data, 1);
  1035     0519  307C               	movlw	(low (nrf_flush_rxtx@data| 0))& (0+255)
  1036     051A  00F9               	movwf	nrf_write_register@data
  1037     051B  01FA               	clrf	nrf_write_register@len
  1038     051C  0AFA               	incf	nrf_write_register@len,f
  1039     051D  3007               	movlw	7
  1040     051E  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
  1041     0523                     l1189:
  1042                           
  1043                           ;main.c: 186:     nrf_write_command(0b11100001);
  1044     0523  30E1               	movlw	225
  1045     0524  120A  118A  24EF  120A  118A  	fcall	_nrf_write_command
  1046     0529                     l1191:
  1047                           
  1048                           ;main.c: 187:     nrf_write_command(0b11100010);
  1049     0529  30E2               	movlw	226
  1050     052A  120A  118A  24EF  120A  118A  	fcall	_nrf_write_command
  1051     052F                     l155:
  1052     052F  0008               	return
  1053     0530                     __end_of_nrf_flush_rxtx:
  1054                           
  1055                           	psect	text3
  1056     0530                     __ptext3:	
  1057 ;; *************** function _arrcpy *****************
  1058 ;; Defined at:
  1059 ;;		line 118 in file "main.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  dst             1    wreg     PTR unsigned char 
  1062 ;;		 -> nrf_setup@data(5), 
  1063 ;;  src             1    0[COMMON] PTR unsigned char 
  1064 ;;		 -> RXTX_ADDR(3), 
  1065 ;;  len             1    1[COMMON] unsigned char 
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;  dst             1    5[COMMON] PTR unsigned char 
  1068 ;;		 -> nrf_setup@data(5), 
  1069 ;;  i               1    6[COMMON] unsigned char 
  1070 ;; Return value:  Size  Location     Type
  1071 ;;                  1    wreg      void 
  1072 ;; Registers used:
  1073 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1074 ;; Tracked objects:
  1075 ;;		On entry : 0/0
  1076 ;;		On exit  : 0/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1079 ;;      Params:         2       0       0       0       0
  1080 ;;      Locals:         2       0       0       0       0
  1081 ;;      Temps:          3       0       0       0       0
  1082 ;;      Totals:         7       0       0       0       0
  1083 ;;Total ram usage:        7 bytes
  1084 ;; Hardware stack levels used: 1
  1085 ;; This function calls:
  1086 ;;		Nothing
  1087 ;; This function is called by:
  1088 ;;		_nrf_setup
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092     0530                     _arrcpy:	
  1093                           ;psect for function _arrcpy
  1094                           
  1095                           
  1096                           ;incstack = 0
  1097                           ; Regs used in _arrcpy: [wreg-fsr0h+status,2+status,0]
  1098                           ;arrcpy@dst stored from wreg
  1099     0530  00F5               	movwf	arrcpy@dst
  1100     0531                     l1173:
  1101                           
  1102                           ;main.c: 118: void arrcpy(uint8_t *dst, uint8_t *src, uint8_t len);main.c: 119: {;main.c
      +                          : 120:     for (uint8_t i = 0; i < len; i++)
  1103     0531  01F6               	clrf	arrcpy@i
  1104     0532  2D46               	goto	l1179
  1105     0533                     l1175:
  1106                           
  1107                           ;main.c: 121:     {;main.c: 122:         dst[i] = src[i];
  1108     0533  0876               	movf	arrcpy@i,w
  1109     0534  0770               	addwf	arrcpy@src,w
  1110     0535  00F2               	movwf	??_arrcpy
  1111     0536  0872               	movf	??_arrcpy,w
  1112     0537  0084               	movwf	4
  1113     0538  1383               	bcf	3,7	;select IRP bank0
  1114     0539  0800               	movf	0,w
  1115     053A  00F3               	movwf	??_arrcpy+1
  1116     053B  0876               	movf	arrcpy@i,w
  1117     053C  0775               	addwf	arrcpy@dst,w
  1118     053D  00F4               	movwf	??_arrcpy+2
  1119     053E  0874               	movf	??_arrcpy+2,w
  1120     053F  0084               	movwf	4
  1121     0540  0873               	movf	??_arrcpy+1,w
  1122     0541  0080               	movwf	0
  1123     0542                     l1177:
  1124                           
  1125                           ;main.c: 123:     }
  1126     0542  3001               	movlw	1
  1127     0543  00F2               	movwf	??_arrcpy
  1128     0544  0872               	movf	??_arrcpy,w
  1129     0545  07F6               	addwf	arrcpy@i,f
  1130     0546                     l1179:
  1131     0546  0871               	movf	arrcpy@len,w
  1132     0547  0276               	subwf	arrcpy@i,w
  1133     0548  1C03               	skipc
  1134     0549  2D4B               	goto	u381
  1135     054A  2D4C               	goto	u380
  1136     054B                     u381:
  1137     054B  2D33               	goto	l1175
  1138     054C                     u380:
  1139     054C                     l134:
  1140     054C  0008               	return
  1141     054D                     __end_of_arrcpy:
  1142                           
  1143                           	psect	text4
  1144     054D                     __ptext4:	
  1145 ;; *************** function _nrf_set_rx_mode *****************
  1146 ;; Defined at:
  1147 ;;		line 195 in file "main.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  config          1   12[COMMON] unsigned char 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1161 ;;      Params:         0       0       0       0       0
  1162 ;;      Locals:         1       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0
  1164 ;;      Totals:         1       0       0       0       0
  1165 ;;Total ram usage:        1 bytes
  1166 ;; Hardware stack levels used: 1
  1167 ;; Hardware stack levels required when called: 3
  1168 ;; This function calls:
  1169 ;;		_nrf_read_register
  1170 ;;		_nrf_write_register
  1171 ;; This function is called by:
  1172 ;;		_main
  1173 ;;		_ReadCharArray
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177     054D                     _nrf_set_rx_mode:	
  1178                           ;psect for function _nrf_set_rx_mode
  1179                           
  1180     054D                     l1279:	
  1181                           ;incstack = 0
  1182                           ; Regs used in _nrf_set_rx_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1183                           
  1184                           
  1185                           ;main.c: 197:     uint8_t config;;main.c: 198:     nrf_read_register(0x00, &config, 1);
  1186     054D  307C               	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1187     054E  00F9               	movwf	nrf_read_register@data
  1188     054F  01FA               	clrf	nrf_read_register@len
  1189     0550  0AFA               	incf	nrf_read_register@len,f
  1190     0551  3000               	movlw	0
  1191     0552  120A  118A  24AC  120A  118A  	fcall	_nrf_read_register
  1192     0557                     l1281:
  1193                           
  1194                           ;main.c: 200:     RD2 = 1;
  1195     0557  1283               	bcf	3,5	;RP0=0, select bank0
  1196     0558  1303               	bcf	3,6	;RP1=0, select bank0
  1197     0559  1508               	bsf	8,2	;volatile
  1198     055A                     l1283:
  1199                           
  1200                           ;main.c: 202:     if (config & 0x01)
  1201     055A  1C7C               	btfss	nrf_set_rx_mode@config,0
  1202     055B  2D5D               	goto	u531
  1203     055C  2D5E               	goto	u530
  1204     055D                     u531:
  1205     055D  2D5F               	goto	l158
  1206     055E                     u530:
  1207     055E  2D6A               	goto	l159
  1208     055F                     l158:
  1209                           
  1210                           ;main.c: 205:     config |= 0x01;
  1211     055F  147C               	bsf	nrf_set_rx_mode@config,0
  1212     0560                     l1287:
  1213                           
  1214                           ;main.c: 206:     nrf_write_register(0x00, &config, 1);
  1215     0560  307C               	movlw	(low (nrf_set_rx_mode@config| 0))& (0+255)
  1216     0561  00F9               	movwf	nrf_write_register@data
  1217     0562  01FA               	clrf	nrf_write_register@len
  1218     0563  0AFA               	incf	nrf_write_register@len,f
  1219     0564  3000               	movlw	0
  1220     0565  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
  1221     056A                     l159:
  1222     056A  0008               	return
  1223     056B                     __end_of_nrf_set_rx_mode:
  1224                           
  1225                           	psect	text5
  1226     04FF                     __ptext5:	
  1227 ;; *************** function _nrf_rx_char *****************
  1228 ;; Defined at:
  1229 ;;		line 307 in file "main.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;		None
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;  data            1   13[COMMON] unsigned char 
  1234 ;;  clear           1   12[COMMON] unsigned char 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      unsigned char 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1244 ;;      Params:         0       0       0       0       0
  1245 ;;      Locals:         2       0       0       0       0
  1246 ;;      Temps:          0       0       0       0       0
  1247 ;;      Totals:         2       0       0       0       0
  1248 ;;Total ram usage:        2 bytes
  1249 ;; Hardware stack levels used: 1
  1250 ;; Hardware stack levels required when called: 3
  1251 ;; This function calls:
  1252 ;;		_nrf_read_register
  1253 ;;		_nrf_write_register
  1254 ;; This function is called by:
  1255 ;;		_main
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259     04FF                     _nrf_rx_char:	
  1260                           ;psect for function _nrf_rx_char
  1261                           
  1262     04FF                     l1363:	
  1263                           ;incstack = 0
  1264                           ; Regs used in _nrf_rx_char: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1265                           
  1266                           
  1267                           ;main.c: 309:     uint8_t data;;main.c: 310:     nrf_read_register(0b01100001, &data, 1)
      +                          ;
  1268     04FF  307D               	movlw	(low (nrf_rx_char@data| 0))& (0+255)
  1269     0500  00F9               	movwf	nrf_read_register@data
  1270     0501  01FA               	clrf	nrf_read_register@len
  1271     0502  0AFA               	incf	nrf_read_register@len,f
  1272     0503  3061               	movlw	97
  1273     0504  120A  118A  24AC  120A  118A  	fcall	_nrf_read_register
  1274     0509                     l1365:
  1275                           
  1276                           ;main.c: 312:     uint8_t clear = 0x40;
  1277     0509  3040               	movlw	64
  1278     050A  00FC               	movwf	nrf_rx_char@clear
  1279     050B                     l1367:
  1280                           
  1281                           ;main.c: 313:     nrf_write_register(0x07, &clear, 1);
  1282     050B  307C               	movlw	(low (nrf_rx_char@clear| 0))& (0+255)
  1283     050C  00F9               	movwf	nrf_write_register@data
  1284     050D  01FA               	clrf	nrf_write_register@len
  1285     050E  0AFA               	incf	nrf_write_register@len,f
  1286     050F  3007               	movlw	7
  1287     0510  120A  118A  24C5  120A  118A  	fcall	_nrf_write_register
  1288                           
  1289                           ;main.c: 314:     return data;
  1290     0515  087D               	movf	nrf_rx_char@data,w
  1291     0516                     l180:
  1292     0516  0008               	return
  1293     0517                     __end_of_nrf_rx_char:
  1294                           
  1295                           	psect	text6
  1296     04C5                     __ptext6:	
  1297 ;; *************** function _nrf_write_register *****************
  1298 ;; Defined at:
  1299 ;;		line 144 in file "main.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;  reg             1    wreg     unsigned char 
  1302 ;;  data            1    9[COMMON] PTR unsigned char 
  1303 ;;		 -> nrf_rx_char@clear(1), nrf_read_payload@clear(1), nrf_tx_char@data(1), nrf_tx_char@ch(2), 
  1304 ;;		 -> nrf_setup@data(5), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), nrf_flush_rxtx@data(1), 
  1305 ;;  len             1   10[COMMON] unsigned char 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  reg             1   11[COMMON] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      unsigned char 
  1310 ;; Registers used:
  1311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1317 ;;      Params:         2       0       0       0       0
  1318 ;;      Locals:         1       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0
  1320 ;;      Totals:         3       0       0       0       0
  1321 ;;Total ram usage:        3 bytes
  1322 ;; Hardware stack levels used: 1
  1323 ;; Hardware stack levels required when called: 2
  1324 ;; This function calls:
  1325 ;;		_nrf_command
  1326 ;; This function is called by:
  1327 ;;		_nrf_flush_rxtx
  1328 ;;		_nrf_set_rx_mode
  1329 ;;		_nrf_setup
  1330 ;;		_nrf_rx_char
  1331 ;;		_nrf_write_payload
  1332 ;;		_nrf_set_tx_mode
  1333 ;;		_nrf_tx_char
  1334 ;;		_nrf_read_payload
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338     04C5                     _nrf_write_register:	
  1339                           ;psect for function _nrf_write_register
  1340                           
  1341                           
  1342                           ;incstack = 0
  1343                           ; Regs used in _nrf_write_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1344                           ;nrf_write_register@reg stored from wreg
  1345     04C5  00FB               	movwf	nrf_write_register@reg
  1346     04C6                     l1155:
  1347                           
  1348                           ;main.c: 144: uint8_t nrf_write_register(uint8_t reg, uint8_t *data, uint8_t len);main.c
      +                          : 145: {;main.c: 146:     return nrf_command(reg | 0b00100000, data, len);
  1349     04C6  0879               	movf	nrf_write_register@data,w
  1350     04C7  00F1               	movwf	nrf_command@data
  1351     04C8  087A               	movf	nrf_write_register@len,w
  1352     04C9  00F2               	movwf	nrf_command@len
  1353     04CA  087B               	movf	nrf_write_register@reg,w
  1354     04CB  3820               	iorlw	32
  1355     04CC  120A  118A  2590  120A  118A  	fcall	_nrf_command
  1356     04D1                     l143:
  1357     04D1  0008               	return
  1358     04D2                     __end_of_nrf_write_register:
  1359                           
  1360                           	psect	text7
  1361     04AC                     __ptext7:	
  1362 ;; *************** function _nrf_read_register *****************
  1363 ;; Defined at:
  1364 ;;		line 151 in file "main.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  reg             1    wreg     unsigned char 
  1367 ;;  data            1    9[COMMON] PTR unsigned char 
  1368 ;;		 -> nrf_rx_char@data(1), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1369 ;;  len             1   10[COMMON] unsigned char 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  reg             1   11[COMMON] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      unsigned char 
  1374 ;; Registers used:
  1375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1381 ;;      Params:         2       0       0       0       0
  1382 ;;      Locals:         1       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0
  1384 ;;      Totals:         3       0       0       0       0
  1385 ;;Total ram usage:        3 bytes
  1386 ;; Hardware stack levels used: 1
  1387 ;; Hardware stack levels required when called: 2
  1388 ;; This function calls:
  1389 ;;		_nrf_command
  1390 ;; This function is called by:
  1391 ;;		_nrf_set_rx_mode
  1392 ;;		_nrf_rx_char
  1393 ;;		_nrf_set_tx_mode
  1394 ;;		_nrf_read_payload
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398     04AC                     _nrf_read_register:	
  1399                           ;psect for function _nrf_read_register
  1400                           
  1401                           
  1402                           ;incstack = 0
  1403                           ; Regs used in _nrf_read_register: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1404                           ;nrf_read_register@reg stored from wreg
  1405     04AC  00FB               	movwf	nrf_read_register@reg
  1406     04AD                     l1181:
  1407                           
  1408                           ;main.c: 151: uint8_t nrf_read_register(uint8_t reg, uint8_t *data, uint8_t len);main.c:
      +                           152: {;main.c: 153:     return nrf_command(reg | 0b00000000, data, len);
  1409     04AD  0879               	movf	nrf_read_register@data,w
  1410     04AE  00F1               	movwf	nrf_command@data
  1411     04AF  087A               	movf	nrf_read_register@len,w
  1412     04B0  00F2               	movwf	nrf_command@len
  1413     04B1  087B               	movf	nrf_read_register@reg,w
  1414     04B2  120A  118A  2590  120A  118A  	fcall	_nrf_command
  1415     04B7                     l146:
  1416     04B7  0008               	return
  1417     04B8                     __end_of_nrf_read_register:
  1418                           
  1419                           	psect	text8
  1420     0590                     __ptext8:	
  1421 ;; *************** function _nrf_command *****************
  1422 ;; Defined at:
  1423 ;;		line 129 in file "main.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;  command         1    wreg     unsigned char 
  1426 ;;  data            1    1[COMMON] PTR unsigned char 
  1427 ;;		 -> nrf_rx_char@clear(1), nrf_rx_char@data(1), nrf_read_payload@clear(1), nrf_tx_char@data(1), 
  1428 ;;		 -> nrf_tx_char@ch(2), nrf_setup@data(5), nrf_set_tx_mode@config(1), nrf_set_rx_mode@config(1), 
  1429 ;;		 -> nrf_flush_rxtx@data(1), 
  1430 ;;  len             1    2[COMMON] unsigned char 
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;  command         1    6[COMMON] unsigned char 
  1433 ;;  i               1    8[COMMON] unsigned char 
  1434 ;;  status          1    7[COMMON] unsigned char 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      unsigned char 
  1437 ;; Registers used:
  1438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1444 ;;      Params:         2       0       0       0       0
  1445 ;;      Locals:         3       0       0       0       0
  1446 ;;      Temps:          3       0       0       0       0
  1447 ;;      Totals:         8       0       0       0       0
  1448 ;;Total ram usage:        8 bytes
  1449 ;; Hardware stack levels used: 1
  1450 ;; Hardware stack levels required when called: 1
  1451 ;; This function calls:
  1452 ;;		_SPI_write
  1453 ;; This function is called by:
  1454 ;;		_nrf_write_register
  1455 ;;		_nrf_read_register
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459     0590                     _nrf_command:	
  1460                           ;psect for function _nrf_command
  1461                           
  1462                           
  1463                           ;incstack = 0
  1464                           ; Regs used in _nrf_command: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1465                           ;nrf_command@command stored from wreg
  1466     0590  00F6               	movwf	nrf_command@command
  1467     0591                     l1139:
  1468                           
  1469                           ;main.c: 129: uint8_t nrf_command(uint8_t command, uint8_t *data, uint8_t len);main.c: 1
      +                          30: {;main.c: 131:     RD3 = 0;
  1470     0591  1283               	bcf	3,5	;RP0=0, select bank0
  1471     0592  1303               	bcf	3,6	;RP1=0, select bank0
  1472     0593  1188               	bcf	8,3	;volatile
  1473     0594                     l1141:
  1474                           
  1475                           ;main.c: 133:     uint8_t status = SPI_write(command);
  1476     0594  0876               	movf	nrf_command@command,w
  1477     0595  120A  118A  24E0  120A  118A  	fcall	_SPI_write
  1478     059A  00F7               	movwf	nrf_command@status
  1479     059B                     l1143:
  1480                           
  1481                           ;main.c: 134:     for (uint8_t i = 0; i < len; i++)
  1482     059B  01F8               	clrf	nrf_command@i
  1483     059C  2DB6               	goto	l1149
  1484     059D                     l1145:
  1485                           
  1486                           ;main.c: 135:         data[i] = SPI_write(data[i]);
  1487     059D  0878               	movf	nrf_command@i,w
  1488     059E  0771               	addwf	nrf_command@data,w
  1489     059F  00F3               	movwf	??_nrf_command
  1490     05A0  0873               	movf	??_nrf_command,w
  1491     05A1  0084               	movwf	4
  1492     05A2  1383               	bcf	3,7	;select IRP bank0
  1493     05A3  0800               	movf	0,w
  1494     05A4  120A  118A  24E0  120A  118A  	fcall	_SPI_write
  1495     05A9  00F4               	movwf	??_nrf_command+1
  1496     05AA  0878               	movf	nrf_command@i,w
  1497     05AB  0771               	addwf	nrf_command@data,w
  1498     05AC  00F5               	movwf	??_nrf_command+2
  1499     05AD  0875               	movf	??_nrf_command+2,w
  1500     05AE  0084               	movwf	4
  1501     05AF  0874               	movf	??_nrf_command+1,w
  1502     05B0  1383               	bcf	3,7	;select IRP bank0
  1503     05B1  0080               	movwf	0
  1504     05B2                     l1147:
  1505     05B2  3001               	movlw	1
  1506     05B3  00F3               	movwf	??_nrf_command
  1507     05B4  0873               	movf	??_nrf_command,w
  1508     05B5  07F8               	addwf	nrf_command@i,f
  1509     05B6                     l1149:
  1510     05B6  0872               	movf	nrf_command@len,w
  1511     05B7  0278               	subwf	nrf_command@i,w
  1512     05B8  1C03               	skipc
  1513     05B9  2DBB               	goto	u361
  1514     05BA  2DBC               	goto	u360
  1515     05BB                     u361:
  1516     05BB  2D9D               	goto	l1145
  1517     05BC                     u360:
  1518     05BC                     l139:
  1519                           
  1520                           ;main.c: 137:     RD3 = 1;
  1521     05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1522     05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1523     05BE  1588               	bsf	8,3	;volatile
  1524     05BF                     l1151:
  1525                           
  1526                           ;main.c: 139:     return status;
  1527     05BF  0877               	movf	nrf_command@status,w
  1528     05C0                     l140:
  1529     05C0  0008               	return
  1530     05C1                     __end_of_nrf_command:
  1531                           
  1532                           	psect	text9
  1533     04D2                     __ptext9:	
  1534 ;; *************** function _nrf_data_available *****************
  1535 ;; Defined at:
  1536 ;;		line 227 in file "main.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;  status          1    3[COMMON] unsigned char 
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      unsigned char 
  1543 ;; Registers used:
  1544 ;;		wreg, pclath, cstack
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1550 ;;      Params:         0       0       0       0       0
  1551 ;;      Locals:         1       0       0       0       0
  1552 ;;      Temps:          0       0       0       0       0
  1553 ;;      Totals:         1       0       0       0       0
  1554 ;;Total ram usage:        1 bytes
  1555 ;; Hardware stack levels used: 1
  1556 ;; Hardware stack levels required when called: 2
  1557 ;; This function calls:
  1558 ;;		_nrf_write_command
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564     04D2                     _nrf_data_available:	
  1565                           ;psect for function _nrf_data_available
  1566                           
  1567     04D2                     l1301:	
  1568                           ;incstack = 0
  1569                           ; Regs used in _nrf_data_available: [wreg+pclath+cstack]
  1570                           
  1571                           
  1572                           ;main.c: 229:     uint8_t status = nrf_write_command(0b11111111);
  1573     04D2  30FF               	movlw	255
  1574     04D3  120A  118A  24EF  120A  118A  	fcall	_nrf_write_command
  1575     04D8  00F3               	movwf	nrf_data_available@status
  1576     04D9                     l1303:
  1577                           
  1578                           ;main.c: 230:     return (status & 0x40) != 0;
  1579     04D9  1B73               	btfsc	nrf_data_available@status,6
  1580     04DA  2CDC               	goto	u551
  1581     04DB  2CDE               	goto	u550
  1582     04DC                     u551:
  1583     04DC  3001               	movlw	1
  1584     04DD  2CDF               	goto	u560
  1585     04DE                     u550:
  1586     04DE  3000               	movlw	0
  1587     04DF                     u560:
  1588     04DF                     l166:
  1589     04DF  0008               	return
  1590     04E0                     __end_of_nrf_data_available:
  1591                           
  1592                           	psect	text10
  1593     04EF                     __ptext10:	
  1594 ;; *************** function _nrf_write_command *****************
  1595 ;; Defined at:
  1596 ;;		line 168 in file "main.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  command         1    wreg     unsigned char 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  command         1    1[COMMON] unsigned char 
  1601 ;;  status          1    2[COMMON] unsigned char 
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      unsigned char 
  1604 ;; Registers used:
  1605 ;;		wreg, pclath, cstack
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1611 ;;      Params:         0       0       0       0       0
  1612 ;;      Locals:         2       0       0       0       0
  1613 ;;      Temps:          0       0       0       0       0
  1614 ;;      Totals:         2       0       0       0       0
  1615 ;;Total ram usage:        2 bytes
  1616 ;; Hardware stack levels used: 1
  1617 ;; Hardware stack levels required when called: 1
  1618 ;; This function calls:
  1619 ;;		_SPI_write
  1620 ;; This function is called by:
  1621 ;;		_nrf_flush_rxtx
  1622 ;;		_nrf_data_available
  1623 ;;		_nrf_tx_char
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627     04EF                     _nrf_write_command:	
  1628                           ;psect for function _nrf_write_command
  1629                           
  1630                           
  1631                           ;incstack = 0
  1632                           ; Regs used in _nrf_write_command: [wreg+pclath+cstack]
  1633                           ;nrf_write_command@command stored from wreg
  1634     04EF  00F1               	movwf	nrf_write_command@command
  1635     04F0                     l1159:
  1636                           
  1637                           ;main.c: 168: uint8_t nrf_write_command(uint8_t command);main.c: 169: {;main.c: 170:    
      +                           RD3 = 0;
  1638     04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1639     04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1640     04F2  1188               	bcf	8,3	;volatile
  1641     04F3                     l1161:
  1642                           
  1643                           ;main.c: 171:     uint8_t status = SPI_write(command);
  1644     04F3  0871               	movf	nrf_write_command@command,w
  1645     04F4  120A  118A  24E0  120A  118A  	fcall	_SPI_write
  1646     04F9  00F2               	movwf	nrf_write_command@status
  1647     04FA                     l1163:
  1648                           
  1649                           ;main.c: 172:     RD3 = 1;
  1650     04FA  1283               	bcf	3,5	;RP0=0, select bank0
  1651     04FB  1303               	bcf	3,6	;RP1=0, select bank0
  1652     04FC  1588               	bsf	8,3	;volatile
  1653     04FD                     l1165:
  1654                           
  1655                           ;main.c: 173:     return status;
  1656     04FD  0872               	movf	nrf_write_command@status,w
  1657     04FE                     l152:
  1658     04FE  0008               	return
  1659     04FF                     __end_of_nrf_write_command:
  1660                           
  1661                           	psect	text11
  1662     04E0                     __ptext11:	
  1663 ;; *************** function _SPI_write *****************
  1664 ;; Defined at:
  1665 ;;		line 25 in file "./spi.h"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  data            1    wreg     unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  data            1    0[COMMON] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      unsigned char 
  1672 ;; Registers used:
  1673 ;;		wreg
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1679 ;;      Params:         0       0       0       0       0
  1680 ;;      Locals:         1       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0
  1682 ;;      Totals:         1       0       0       0       0
  1683 ;;Total ram usage:        1 bytes
  1684 ;; Hardware stack levels used: 1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_nrf_command
  1689 ;;		_nrf_write_command
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693     04E0                     _SPI_write:	
  1694                           ;psect for function _SPI_write
  1695                           
  1696                           
  1697                           ;incstack = 0
  1698                           ; Regs used in _SPI_write: [wreg]
  1699                           ;SPI_write@data stored from wreg
  1700     04E0  00F0               	movwf	SPI_write@data
  1701     04E1                     l1133:
  1702                           
  1703                           ;./spi.h: 25: uint8_t SPI_write(uint8_t data);./spi.h: 26: {;./spi.h: 27:     SSPBUF = d
      +                          ata;
  1704     04E1  0870               	movf	SPI_write@data,w
  1705     04E2  1283               	bcf	3,5	;RP0=0, select bank0
  1706     04E3  1303               	bcf	3,6	;RP1=0, select bank0
  1707     04E4  0093               	movwf	19	;volatile
  1708     04E5                     l86:	
  1709                           ;./spi.h: 28:     while (!BF);
  1710                           
  1711     04E5  1683               	bsf	3,5	;RP0=1, select bank1
  1712     04E6  1303               	bcf	3,6	;RP1=0, select bank1
  1713     04E7  1C14               	btfss	20,0	;volatile
  1714     04E8  2CEA               	goto	u351
  1715     04E9  2CEB               	goto	u350
  1716     04EA                     u351:
  1717     04EA  2CE5               	goto	l86
  1718     04EB                     u350:
  1719     04EB                     l1135:
  1720                           
  1721                           ;./spi.h: 29:     return SSPBUF;
  1722     04EB  1283               	bcf	3,5	;RP0=0, select bank0
  1723     04EC  1303               	bcf	3,6	;RP1=0, select bank0
  1724     04ED  0813               	movf	19,w	;volatile
  1725     04EE                     l89:
  1726     04EE  0008               	return
  1727     04EF                     __end_of_SPI_write:
  1728                           
  1729                           	psect	text12
  1730     056B                     __ptext12:	
  1731 ;; *************** function _UART_write_text *****************
  1732 ;; Defined at:
  1733 ;;		line 33 in file "./uart.h"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  text            1    wreg     PTR unsigned char 
  1736 ;;		 -> STR_6(2), STR_5(8), STR_4(11), STR_3(11), 
  1737 ;;		 -> STR_2(11), 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  text            1    3[COMMON] PTR unsigned char 
  1740 ;;		 -> STR_6(2), STR_5(8), STR_4(11), STR_3(11), 
  1741 ;;		 -> STR_2(11), 
  1742 ;;  i               2    1[COMMON] int 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1752 ;;      Params:         0       0       0       0       0
  1753 ;;      Locals:         3       0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0
  1755 ;;      Totals:         3       0       0       0       0
  1756 ;;Total ram usage:        3 bytes
  1757 ;; Hardware stack levels used: 1
  1758 ;; Hardware stack levels required when called: 1
  1759 ;; This function calls:
  1760 ;;		_UART_write
  1761 ;; This function is called by:
  1762 ;;		_main
  1763 ;;		_SendChar
  1764 ;;		_SendCharArray
  1765 ;;		_ReadCharArray
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769     056B                     _UART_write_text:	
  1770                           ;psect for function _UART_write_text
  1771                           
  1772                           
  1773                           ;incstack = 0
  1774                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1775                           ;UART_write_text@text stored from wreg
  1776     056B  00F3               	movwf	UART_write_text@text
  1777     056C                     l1249:
  1778                           
  1779                           ;./uart.h: 33: void UART_write_text(char *text);./uart.h: 34: {;./uart.h: 35:   for(int 
      +                          i=0;text[i]!='\0';i++)
  1780     056C  01F1               	clrf	UART_write_text@i
  1781     056D  01F2               	clrf	UART_write_text@i+1
  1782     056E  2D82               	goto	l1255
  1783     056F                     l1251:
  1784                           
  1785                           ;./uart.h: 36:     UART_write(text[i]);
  1786     056F  0871               	movf	UART_write_text@i,w
  1787     0570  0773               	addwf	UART_write_text@text,w
  1788     0571  0084               	movwf	4
  1789     0572  120A  118A  2003  120A  118A  	fcall	stringdir
  1790     0577  120A  118A  24A0  120A  118A  	fcall	_UART_write
  1791     057C                     l1253:
  1792     057C  3001               	movlw	1
  1793     057D  07F1               	addwf	UART_write_text@i,f
  1794     057E  1803               	skipnc
  1795     057F  0AF2               	incf	UART_write_text@i+1,f
  1796     0580  3000               	movlw	0
  1797     0581  07F2               	addwf	UART_write_text@i+1,f
  1798     0582                     l1255:
  1799     0582  0871               	movf	UART_write_text@i,w
  1800     0583  0773               	addwf	UART_write_text@text,w
  1801     0584  0084               	movwf	4
  1802     0585  120A  118A  2003  120A  118A  	fcall	stringdir
  1803     058A  3A00               	xorlw	0
  1804     058B  1D03               	skipz
  1805     058C  2D8E               	goto	u521
  1806     058D  2D8F               	goto	u520
  1807     058E                     u521:
  1808     058E  2D6F               	goto	l1251
  1809     058F                     u520:
  1810     058F                     l65:
  1811     058F  0008               	return
  1812     0590                     __end_of_UART_write_text:
  1813                           
  1814                           	psect	text13
  1815     04A0                     __ptext13:	
  1816 ;; *************** function _UART_write *****************
  1817 ;; Defined at:
  1818 ;;		line 27 in file "./uart.h"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  data            1    wreg     unsigned char 
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;  data            1    0[COMMON] unsigned char 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		wreg
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1832 ;;      Params:         0       0       0       0       0
  1833 ;;      Locals:         1       0       0       0       0
  1834 ;;      Temps:          0       0       0       0       0
  1835 ;;      Totals:         1       0       0       0       0
  1836 ;;Total ram usage:        1 bytes
  1837 ;; Hardware stack levels used: 1
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		_UART_write_text
  1842 ;;		_main
  1843 ;;		_UART_write_array
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847     04A0                     _UART_write:	
  1848                           ;psect for function _UART_write
  1849                           
  1850                           
  1851                           ;incstack = 0
  1852                           ; Regs used in _UART_write: [wreg]
  1853                           ;UART_write@data stored from wreg
  1854     04A0  00F0               	movwf	UART_write@data
  1855     04A1                     l1169:
  1856     04A1                     l56:	
  1857                           ;./uart.h: 27: void UART_write(char data);./uart.h: 28: {;./uart.h: 29:   while(!TRMT);
  1858                           
  1859     04A1  1683               	bsf	3,5	;RP0=1, select bank1
  1860     04A2  1303               	bcf	3,6	;RP1=0, select bank1
  1861     04A3  1C98               	btfss	24,1	;volatile
  1862     04A4  2CA6               	goto	u371
  1863     04A5  2CA7               	goto	u370
  1864     04A6                     u371:
  1865     04A6  2CA1               	goto	l56
  1866     04A7                     u370:
  1867     04A7                     l1171:
  1868                           
  1869                           ;./uart.h: 30:   TXREG = data;
  1870     04A7  0870               	movf	UART_write@data,w
  1871     04A8  1283               	bcf	3,5	;RP0=0, select bank0
  1872     04A9  1303               	bcf	3,6	;RP1=0, select bank0
  1873     04AA  0099               	movwf	25	;volatile
  1874     04AB                     l59:
  1875     04AB  0008               	return
  1876     04AC                     __end_of_UART_write:
  1877                           
  1878                           	psect	text14
  1879     061E                     __ptext14:	
  1880 ;; *************** function _UART_init *****************
  1881 ;; Defined at:
  1882 ;;		line 15 in file "./uart.h"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  baudrate        4    6[BANK0 ] const long 
  1885 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;		None
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  1    wreg      void 
  1890 ;; Registers used:
  1891 ;;		wreg, status,2, status,0, pclath, cstack
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1897 ;;      Params:         0       8       0       0       0
  1898 ;;      Locals:         0       0       0       0       0
  1899 ;;      Temps:          0      12       0       0       0
  1900 ;;      Totals:         0      20       0       0       0
  1901 ;;Total ram usage:       20 bytes
  1902 ;; Hardware stack levels used: 1
  1903 ;; Hardware stack levels required when called: 1
  1904 ;; This function calls:
  1905 ;;		___aldiv
  1906 ;; This function is called by:
  1907 ;;		_main
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911     061E                     _UART_init:	
  1912                           ;psect for function _UART_init
  1913                           
  1914     061E                     l1233:	
  1915                           ;incstack = 0
  1916                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  1917                           
  1918                           
  1919                           ;./uart.h: 15: void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 16: {;
      +                          ./uart.h: 17:     BRGH = 1;
  1920     061E  1683               	bsf	3,5	;RP0=1, select bank1
  1921     061F  1303               	bcf	3,6	;RP1=0, select bank1
  1922     0620  1518               	bsf	24,2	;volatile
  1923     0621                     l1235:
  1924                           
  1925                           ;./uart.h: 18:     SPBRG = (_XTAL_FREQ - baudrate*16)/(baudrate*16);
  1926     0621  1283               	bcf	3,5	;RP0=0, select bank0
  1927     0622  1303               	bcf	3,6	;RP1=0, select bank0
  1928     0623  0826               	movf	UART_init@baudrate,w
  1929     0624  00AE               	movwf	??_UART_init
  1930     0625  0827               	movf	UART_init@baudrate+1,w
  1931     0626  00AF               	movwf	??_UART_init+1
  1932     0627  0828               	movf	UART_init@baudrate+2,w
  1933     0628  00B0               	movwf	??_UART_init+2
  1934     0629  0829               	movf	UART_init@baudrate+3,w
  1935     062A  00B1               	movwf	??_UART_init+3
  1936     062B  3004               	movlw	4
  1937     062C                     u495:
  1938     062C  1003               	clrc
  1939     062D  0DAE               	rlf	??_UART_init,f
  1940     062E  0DAF               	rlf	??_UART_init+1,f
  1941     062F  0DB0               	rlf	??_UART_init+2,f
  1942     0630  0DB1               	rlf	??_UART_init+3,f
  1943     0631                     u490:
  1944     0631  3EFF               	addlw	-1
  1945     0632  1D03               	skipz
  1946     0633  2E2C               	goto	u495
  1947     0634  0831               	movf	??_UART_init+3,w
  1948     0635  00F3               	movwf	___aldiv@divisor+3
  1949     0636  0830               	movf	??_UART_init+2,w
  1950     0637  00F2               	movwf	___aldiv@divisor+2
  1951     0638  082F               	movf	??_UART_init+1,w
  1952     0639  00F1               	movwf	___aldiv@divisor+1
  1953     063A  082E               	movf	??_UART_init,w
  1954     063B  00F0               	movwf	___aldiv@divisor
  1955     063C  0826               	movf	UART_init@baudrate,w
  1956     063D  00B2               	movwf	??_UART_init+4
  1957     063E  0827               	movf	UART_init@baudrate+1,w
  1958     063F  00B3               	movwf	??_UART_init+5
  1959     0640  0828               	movf	UART_init@baudrate+2,w
  1960     0641  00B4               	movwf	??_UART_init+6
  1961     0642  0829               	movf	UART_init@baudrate+3,w
  1962     0643  00B5               	movwf	??_UART_init+7
  1963     0644  3004               	movlw	4
  1964     0645                     u505:
  1965     0645  1003               	clrc
  1966     0646  0DB2               	rlf	??_UART_init+4,f
  1967     0647  0DB3               	rlf	??_UART_init+5,f
  1968     0648  0DB4               	rlf	??_UART_init+6,f
  1969     0649  0DB5               	rlf	??_UART_init+7,f
  1970     064A                     u500:
  1971     064A  3EFF               	addlw	-1
  1972     064B  1D03               	skipz
  1973     064C  2E45               	goto	u505
  1974     064D  082A               	movf	UART_init@_XTAL_FREQ,w
  1975     064E  00B6               	movwf	??_UART_init+8
  1976     064F  082B               	movf	UART_init@_XTAL_FREQ+1,w
  1977     0650  00B7               	movwf	??_UART_init+9
  1978     0651  082C               	movf	UART_init@_XTAL_FREQ+2,w
  1979     0652  00B8               	movwf	??_UART_init+10
  1980     0653  082D               	movf	UART_init@_XTAL_FREQ+3,w
  1981     0654  00B9               	movwf	??_UART_init+11
  1982     0655  0832               	movf	??_UART_init+4,w
  1983     0656  02B6               	subwf	??_UART_init+8,f
  1984     0657  0833               	movf	??_UART_init+5,w
  1985     0658  1C03               	skipc
  1986     0659  0F33               	incfsz	??_UART_init+5,w
  1987     065A  2E5C               	goto	u511
  1988     065B  2E5D               	goto	u512
  1989     065C                     u511:
  1990     065C  02B7               	subwf	??_UART_init+9,f
  1991     065D                     u512:
  1992     065D  0834               	movf	??_UART_init+6,w
  1993     065E  1C03               	skipc
  1994     065F  0F34               	incfsz	??_UART_init+6,w
  1995     0660  2E62               	goto	u513
  1996     0661  2E63               	goto	u514
  1997     0662                     u513:
  1998     0662  02B8               	subwf	??_UART_init+10,f
  1999     0663                     u514:
  2000     0663  0835               	movf	??_UART_init+7,w
  2001     0664  1C03               	skipc
  2002     0665  0F35               	incfsz	??_UART_init+7,w
  2003     0666  2E68               	goto	u515
  2004     0667  2E69               	goto	u516
  2005     0668                     u515:
  2006     0668  02B9               	subwf	??_UART_init+11,f
  2007     0669                     u516:
  2008     0669  0839               	movf	??_UART_init+11,w
  2009     066A  00F7               	movwf	___aldiv@dividend+3
  2010     066B  0838               	movf	??_UART_init+10,w
  2011     066C  00F6               	movwf	___aldiv@dividend+2
  2012     066D  0837               	movf	??_UART_init+9,w
  2013     066E  00F5               	movwf	___aldiv@dividend+1
  2014     066F  0836               	movf	??_UART_init+8,w
  2015     0670  00F4               	movwf	___aldiv@dividend
  2016     0671  120A  118A  2689  120A  118A  	fcall	___aldiv
  2017     0676  0870               	movf	?___aldiv,w
  2018     0677  1683               	bsf	3,5	;RP0=1, select bank1
  2019     0678  1303               	bcf	3,6	;RP1=0, select bank1
  2020     0679  0099               	movwf	25	;volatile
  2021     067A                     l1237:
  2022                           
  2023                           ;./uart.h: 19:     SYNC = 0;
  2024     067A  1218               	bcf	24,4	;volatile
  2025     067B                     l1239:
  2026                           
  2027                           ;./uart.h: 20:     SPEN = 1;
  2028     067B  1283               	bcf	3,5	;RP0=0, select bank0
  2029     067C  1303               	bcf	3,6	;RP1=0, select bank0
  2030     067D  1798               	bsf	24,7	;volatile
  2031     067E                     l1241:
  2032                           
  2033                           ;./uart.h: 21:     TRISC7 = 1;
  2034     067E  1683               	bsf	3,5	;RP0=1, select bank1
  2035     067F  1303               	bcf	3,6	;RP1=0, select bank1
  2036     0680  1787               	bsf	7,7	;volatile
  2037     0681                     l1243:
  2038                           
  2039                           ;./uart.h: 22:     TRISC6 = 1;
  2040     0681  1707               	bsf	7,6	;volatile
  2041     0682                     l1245:
  2042                           
  2043                           ;./uart.h: 23:     CREN = 1;
  2044     0682  1283               	bcf	3,5	;RP0=0, select bank0
  2045     0683  1303               	bcf	3,6	;RP1=0, select bank0
  2046     0684  1618               	bsf	24,4	;volatile
  2047     0685                     l1247:
  2048                           
  2049                           ;./uart.h: 24:     TXEN = 1;
  2050     0685  1683               	bsf	3,5	;RP0=1, select bank1
  2051     0686  1303               	bcf	3,6	;RP1=0, select bank1
  2052     0687  1698               	bsf	24,5	;volatile
  2053     0688                     l53:
  2054     0688  0008               	return
  2055     0689                     __end_of_UART_init:
  2056                           
  2057                           	psect	text15
  2058     0689                     __ptext15:	
  2059 ;; *************** function ___aldiv *****************
  2060 ;; Defined at:
  2061 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  divisor         4    0[COMMON] long 
  2064 ;;  dividend        4    4[COMMON] long 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  quotient        4    2[BANK0 ] long 
  2067 ;;  sign            1    1[BANK0 ] unsigned char 
  2068 ;;  counter         1    0[BANK0 ] unsigned char 
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  4    0[COMMON] long 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2078 ;;      Params:         8       0       0       0       0
  2079 ;;      Locals:         0       6       0       0       0
  2080 ;;      Temps:          1       0       0       0       0
  2081 ;;      Totals:         9       6       0       0       0
  2082 ;;Total ram usage:       15 bytes
  2083 ;; Hardware stack levels used: 1
  2084 ;; This function calls:
  2085 ;;		Nothing
  2086 ;; This function is called by:
  2087 ;;		_UART_init
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091     0689                     ___aldiv:	
  2092                           ;psect for function ___aldiv
  2093                           
  2094     0689                     l1193:	
  2095                           ;incstack = 0
  2096                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2097                           
  2098     0689  1283               	bcf	3,5	;RP0=0, select bank0
  2099     068A  1303               	bcf	3,6	;RP1=0, select bank0
  2100     068B  01A1               	clrf	___aldiv@sign
  2101     068C                     l1195:
  2102     068C  1FF3               	btfss	___aldiv@divisor+3,7
  2103     068D  2E8F               	goto	u391
  2104     068E  2E90               	goto	u390
  2105     068F                     u391:
  2106     068F  2E9D               	goto	l351
  2107     0690                     u390:
  2108     0690                     l1197:
  2109     0690  09F0               	comf	___aldiv@divisor,f
  2110     0691  09F1               	comf	___aldiv@divisor+1,f
  2111     0692  09F2               	comf	___aldiv@divisor+2,f
  2112     0693  09F3               	comf	___aldiv@divisor+3,f
  2113     0694  0AF0               	incf	___aldiv@divisor,f
  2114     0695  1903               	skipnz
  2115     0696  0AF1               	incf	___aldiv@divisor+1,f
  2116     0697  1903               	skipnz
  2117     0698  0AF2               	incf	___aldiv@divisor+2,f
  2118     0699  1903               	skipnz
  2119     069A  0AF3               	incf	___aldiv@divisor+3,f
  2120     069B  01A1               	clrf	___aldiv@sign
  2121     069C  0AA1               	incf	___aldiv@sign,f
  2122     069D                     l351:
  2123     069D  1FF7               	btfss	___aldiv@dividend+3,7
  2124     069E  2EA0               	goto	u401
  2125     069F  2EA1               	goto	u400
  2126     06A0                     u401:
  2127     06A0  2EB0               	goto	l1203
  2128     06A1                     u400:
  2129     06A1                     l1199:
  2130     06A1  09F4               	comf	___aldiv@dividend,f
  2131     06A2  09F5               	comf	___aldiv@dividend+1,f
  2132     06A3  09F6               	comf	___aldiv@dividend+2,f
  2133     06A4  09F7               	comf	___aldiv@dividend+3,f
  2134     06A5  0AF4               	incf	___aldiv@dividend,f
  2135     06A6  1903               	skipnz
  2136     06A7  0AF5               	incf	___aldiv@dividend+1,f
  2137     06A8  1903               	skipnz
  2138     06A9  0AF6               	incf	___aldiv@dividend+2,f
  2139     06AA  1903               	skipnz
  2140     06AB  0AF7               	incf	___aldiv@dividend+3,f
  2141     06AC                     l1201:
  2142     06AC  3001               	movlw	1
  2143     06AD  00F8               	movwf	??___aldiv
  2144     06AE  0878               	movf	??___aldiv,w
  2145     06AF  06A1               	xorwf	___aldiv@sign,f
  2146     06B0                     l1203:
  2147     06B0  3000               	movlw	0
  2148     06B1  00A5               	movwf	___aldiv@quotient+3
  2149     06B2  3000               	movlw	0
  2150     06B3  00A4               	movwf	___aldiv@quotient+2
  2151     06B4  3000               	movlw	0
  2152     06B5  00A3               	movwf	___aldiv@quotient+1
  2153     06B6  3000               	movlw	0
  2154     06B7  00A2               	movwf	___aldiv@quotient
  2155     06B8                     l1205:
  2156     06B8  0873               	movf	___aldiv@divisor+3,w
  2157     06B9  0472               	iorwf	___aldiv@divisor+2,w
  2158     06BA  0471               	iorwf	___aldiv@divisor+1,w
  2159     06BB  0470               	iorwf	___aldiv@divisor,w
  2160     06BC  1903               	skipnz
  2161     06BD  2EBF               	goto	u411
  2162     06BE  2EC0               	goto	u410
  2163     06BF                     u411:
  2164     06BF  2F0D               	goto	l1225
  2165     06C0                     u410:
  2166     06C0                     l1207:
  2167     06C0  01A0               	clrf	___aldiv@counter
  2168     06C1  0AA0               	incf	___aldiv@counter,f
  2169     06C2  2ED0               	goto	l1211
  2170     06C3                     l1209:
  2171     06C3  3001               	movlw	1
  2172     06C4  00F8               	movwf	??___aldiv
  2173     06C5                     u425:
  2174     06C5  1003               	clrc
  2175     06C6  0DF0               	rlf	___aldiv@divisor,f
  2176     06C7  0DF1               	rlf	___aldiv@divisor+1,f
  2177     06C8  0DF2               	rlf	___aldiv@divisor+2,f
  2178     06C9  0DF3               	rlf	___aldiv@divisor+3,f
  2179     06CA  0BF8               	decfsz	??___aldiv,f
  2180     06CB  2EC5               	goto	u425
  2181     06CC  3001               	movlw	1
  2182     06CD  00F8               	movwf	??___aldiv
  2183     06CE  0878               	movf	??___aldiv,w
  2184     06CF  07A0               	addwf	___aldiv@counter,f
  2185     06D0                     l1211:
  2186     06D0  1FF3               	btfss	___aldiv@divisor+3,7
  2187     06D1  2ED3               	goto	u431
  2188     06D2  2ED4               	goto	u430
  2189     06D3                     u431:
  2190     06D3  2EC3               	goto	l1209
  2191     06D4                     u430:
  2192     06D4                     l1213:
  2193     06D4  3001               	movlw	1
  2194     06D5  00F8               	movwf	??___aldiv
  2195     06D6                     u445:
  2196     06D6  1003               	clrc
  2197     06D7  0DA2               	rlf	___aldiv@quotient,f
  2198     06D8  0DA3               	rlf	___aldiv@quotient+1,f
  2199     06D9  0DA4               	rlf	___aldiv@quotient+2,f
  2200     06DA  0DA5               	rlf	___aldiv@quotient+3,f
  2201     06DB  0BF8               	decfsz	??___aldiv,f
  2202     06DC  2ED6               	goto	u445
  2203     06DD                     l1215:
  2204     06DD  0873               	movf	___aldiv@divisor+3,w
  2205     06DE  0277               	subwf	___aldiv@dividend+3,w
  2206     06DF  1D03               	skipz
  2207     06E0  2EEB               	goto	u455
  2208     06E1  0872               	movf	___aldiv@divisor+2,w
  2209     06E2  0276               	subwf	___aldiv@dividend+2,w
  2210     06E3  1D03               	skipz
  2211     06E4  2EEB               	goto	u455
  2212     06E5  0871               	movf	___aldiv@divisor+1,w
  2213     06E6  0275               	subwf	___aldiv@dividend+1,w
  2214     06E7  1D03               	skipz
  2215     06E8  2EEB               	goto	u455
  2216     06E9  0870               	movf	___aldiv@divisor,w
  2217     06EA  0274               	subwf	___aldiv@dividend,w
  2218     06EB                     u455:
  2219     06EB  1C03               	skipc
  2220     06EC  2EEE               	goto	u451
  2221     06ED  2EEF               	goto	u450
  2222     06EE                     u451:
  2223     06EE  2EFE               	goto	l1221
  2224     06EF                     u450:
  2225     06EF                     l1217:
  2226     06EF  0870               	movf	___aldiv@divisor,w
  2227     06F0  02F4               	subwf	___aldiv@dividend,f
  2228     06F1  0871               	movf	___aldiv@divisor+1,w
  2229     06F2  1C03               	skipc
  2230     06F3  0F71               	incfsz	___aldiv@divisor+1,w
  2231     06F4  02F5               	subwf	___aldiv@dividend+1,f
  2232     06F5  0872               	movf	___aldiv@divisor+2,w
  2233     06F6  1C03               	skipc
  2234     06F7  0F72               	incfsz	___aldiv@divisor+2,w
  2235     06F8  02F6               	subwf	___aldiv@dividend+2,f
  2236     06F9  0873               	movf	___aldiv@divisor+3,w
  2237     06FA  1C03               	skipc
  2238     06FB  0F73               	incfsz	___aldiv@divisor+3,w
  2239     06FC  02F7               	subwf	___aldiv@dividend+3,f
  2240     06FD                     l1219:
  2241     06FD  1422               	bsf	___aldiv@quotient,0
  2242     06FE                     l1221:
  2243     06FE  3001               	movlw	1
  2244     06FF                     u465:
  2245     06FF  1003               	clrc
  2246     0700  0CF3               	rrf	___aldiv@divisor+3,f
  2247     0701  0CF2               	rrf	___aldiv@divisor+2,f
  2248     0702  0CF1               	rrf	___aldiv@divisor+1,f
  2249     0703  0CF0               	rrf	___aldiv@divisor,f
  2250     0704  3EFF               	addlw	-1
  2251     0705  1D03               	skipz
  2252     0706  2EFF               	goto	u465
  2253     0707                     l1223:
  2254     0707  3001               	movlw	1
  2255     0708  02A0               	subwf	___aldiv@counter,f
  2256     0709  1D03               	btfss	3,2
  2257     070A  2F0C               	goto	u471
  2258     070B  2F0D               	goto	u470
  2259     070C                     u471:
  2260     070C  2ED4               	goto	l1213
  2261     070D                     u470:
  2262     070D                     l1225:
  2263     070D  0821               	movf	___aldiv@sign,w
  2264     070E  1903               	btfsc	3,2
  2265     070F  2F11               	goto	u481
  2266     0710  2F12               	goto	u480
  2267     0711                     u481:
  2268     0711  2F1D               	goto	l1229
  2269     0712                     u480:
  2270     0712                     l1227:
  2271     0712  09A2               	comf	___aldiv@quotient,f
  2272     0713  09A3               	comf	___aldiv@quotient+1,f
  2273     0714  09A4               	comf	___aldiv@quotient+2,f
  2274     0715  09A5               	comf	___aldiv@quotient+3,f
  2275     0716  0AA2               	incf	___aldiv@quotient,f
  2276     0717  1903               	skipnz
  2277     0718  0AA3               	incf	___aldiv@quotient+1,f
  2278     0719  1903               	skipnz
  2279     071A  0AA4               	incf	___aldiv@quotient+2,f
  2280     071B  1903               	skipnz
  2281     071C  0AA5               	incf	___aldiv@quotient+3,f
  2282     071D                     l1229:
  2283     071D  0825               	movf	___aldiv@quotient+3,w
  2284     071E  00F3               	movwf	?___aldiv+3
  2285     071F  0824               	movf	___aldiv@quotient+2,w
  2286     0720  00F2               	movwf	?___aldiv+2
  2287     0721  0823               	movf	___aldiv@quotient+1,w
  2288     0722  00F1               	movwf	?___aldiv+1
  2289     0723  0822               	movf	___aldiv@quotient,w
  2290     0724  00F0               	movwf	?___aldiv
  2291     0725                     l361:
  2292     0725  0008               	return
  2293     0726                     __end_of___aldiv:
  2294                           
  2295                           	psect	text16
  2296     04B8                     __ptext16:	
  2297 ;; *************** function _SPI_init_master *****************
  2298 ;; Defined at:
  2299 ;;		line 15 in file "./spi.h"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;		None
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;		None
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, status,2
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2313 ;;      Params:         0       0       0       0       0
  2314 ;;      Locals:         0       0       0       0       0
  2315 ;;      Temps:          0       0       0       0       0
  2316 ;;      Totals:         0       0       0       0       0
  2317 ;;Total ram usage:        0 bytes
  2318 ;; Hardware stack levels used: 1
  2319 ;; This function calls:
  2320 ;;		Nothing
  2321 ;; This function is called by:
  2322 ;;		_main
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326     04B8                     _SPI_init_master:	
  2327                           ;psect for function _SPI_init_master
  2328                           
  2329     04B8                     l1257:	
  2330                           ;incstack = 0
  2331                           ; Regs used in _SPI_init_master: [wreg+status,2]
  2332                           
  2333                           
  2334                           ;./spi.h: 16:     SSPCON = 0b01100001;
  2335     04B8  3061               	movlw	97
  2336     04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2337     04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2338     04BB  0094               	movwf	20	;volatile
  2339     04BC                     l1259:
  2340                           
  2341                           ;./spi.h: 17:     SSPSTAT = 0b00000000;
  2342     04BC  1683               	bsf	3,5	;RP0=1, select bank1
  2343     04BD  1303               	bcf	3,6	;RP1=0, select bank1
  2344     04BE  0194               	clrf	20	;volatile
  2345     04BF                     l1261:
  2346                           
  2347                           ;./spi.h: 18:     CKE = 1;
  2348     04BF  1714               	bsf	20,6	;volatile
  2349     04C0                     l1263:
  2350                           
  2351                           ;./spi.h: 19:     SMP = 1;
  2352     04C0  1794               	bsf	20,7	;volatile
  2353     04C1                     l1265:
  2354                           
  2355                           ;./spi.h: 20:     TRISCbits.TRISC5 = 0;
  2356     04C1  1287               	bcf	7,5	;volatile
  2357     04C2                     l1267:
  2358                           
  2359                           ;./spi.h: 21:     TRISCbits.TRISC4 = 1;
  2360     04C2  1607               	bsf	7,4	;volatile
  2361     04C3                     l1269:
  2362                           
  2363                           ;./spi.h: 22:     TRISCbits.TRISC3 = 0;
  2364     04C3  1187               	bcf	7,3	;volatile
  2365     04C4                     l83:
  2366     04C4  0008               	return
  2367     04C5                     __end_of_SPI_init_master:
  2368     007E                     btemp	set	126	;btemp
  2369     007E                     wtemp0	set	126
  2370                           
  2371                           	psect	config
  2372                           
  2373                           ;Config register CONFIG1 @ 0x2007
  2374                           ;	Oscillator Selection bits
  2375                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2376                           ;	Watchdog Timer Enable bit
  2377                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2378                           ;	Power-up Timer Enable bit
  2379                           ;	PWRTE = OFF, PWRT disabled
  2380                           ;	RE3/MCLR pin function select bit
  2381                           ;	MCLRE = 0x1, unprogrammed default
  2382                           ;	Code Protection bit
  2383                           ;	CP = OFF, Program memory code protection is disabled
  2384                           ;	Data Code Protection bit
  2385                           ;	CPD = OFF, Data memory code protection is disabled
  2386                           ;	Brown Out Reset Selection bits
  2387                           ;	BOREN = OFF, BOR disabled
  2388                           ;	Internal External Switchover bit
  2389                           ;	IESO = 0x1, unprogrammed default
  2390                           ;	Fail-Safe Clock Monitor Enabled bit
  2391                           ;	FCMEN = 0x1, unprogrammed default
  2392                           ;	Low Voltage Programming Enable bit
  2393                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2394                           ;	In-Circuit Debugger Mode bit
  2395                           ;	DEBUG = 0x1, unprogrammed default
  2396     2007                     	org	8199
  2397     2007  2CF2               	dw	11506
  2398                           
  2399                           ;Config register CONFIG2 @ 0x2008
  2400                           ;	Brown-out Reset Selection bit
  2401                           ;	BOR4V = 0x1, unprogrammed default
  2402                           ;	Flash Program Memory Self Write Enable bits
  2403                           ;	WRT = OFF, Write protection off
  2404     2008                     	org	8200
  2405     2008  3FFF               	dw	16383

Data Sizes:
    Strings     48
    Constant    0
    Data        3
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      42
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    _doprnt$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 

    _doprnt$1	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    _doprnt$0	PTR struct __prbuf size(1) Largest target is 3
		 -> sprintf@pb(COMMON[2]), 

    S705__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> Absolute function(), 

    pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> Absolute function(), 

    S705__prbuf$ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    nrf_read_register@data	PTR unsigned char  size(1) Largest target is 1
		 -> nrf_rx_char@data(COMMON[1]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 

    nrf_write_register@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_rx_char@clear(COMMON[1]), nrf_read_payload@clear(COMMON[1]), nrf_tx_char@data(COMMON[1]), nrf_tx_char@ch(COMMON[2]), 
		 -> nrf_setup@data(BANK0[5]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), nrf_flush_rxtx@data(COMMON[1]), 

    nrf_command@data	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_rx_char@clear(COMMON[1]), nrf_rx_char@data(COMMON[1]), nrf_read_payload@clear(COMMON[1]), nrf_tx_char@data(COMMON[1]), 
		 -> nrf_tx_char@ch(COMMON[2]), nrf_setup@data(BANK0[5]), nrf_set_tx_mode@config(COMMON[1]), nrf_set_rx_mode@config(COMMON[1]), 
		 -> nrf_flush_rxtx@data(COMMON[1]), 

    arrcpy@src	PTR unsigned char  size(1) Largest target is 3
		 -> RXTX_ADDR(BANK0[3]), 

    arrcpy@dst	PTR unsigned char  size(1) Largest target is 5
		 -> nrf_setup@data(BANK0[5]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    UART_write_text@text	PTR unsigned char  size(1) Largest target is 11
		 -> STR_6(CODE[2]), STR_5(CODE[8]), STR_4(CODE[11]), STR_3(CODE[11]), 
		 -> STR_2(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_nrf_rx_char
    _nrf_setup->_nrf_flush_rxtx
    _nrf_flush_rxtx->_nrf_write_register
    _nrf_set_rx_mode->_nrf_read_register
    _nrf_set_rx_mode->_nrf_write_register
    _nrf_rx_char->_nrf_read_register
    _nrf_rx_char->_nrf_write_register
    _nrf_write_register->_nrf_command
    _nrf_read_register->_nrf_command
    _nrf_command->_SPI_write
    _nrf_data_available->_nrf_write_command
    _nrf_write_command->_SPI_write
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   17077
                                             26 BANK0      3     3      0
                    _SPI_init_master
                          _UART_init
                         _UART_write
                    _UART_write_text
                 _nrf_data_available
                        _nrf_rx_char
                    _nrf_set_rx_mode
                          _nrf_setup
 ---------------------------------------------------------------------------------
 (1) _nrf_setup                                            7     7      0    7184
                                              0 BANK0      7     7      0
                             _arrcpy
                     _nrf_flush_rxtx
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_flush_rxtx                                       1     1      0    3248
                                             12 COMMON     1     1      0
                  _nrf_write_command
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _arrcpy                                               7     5      2     504
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _nrf_set_rx_mode                                      1     1      0    4404
                                             12 COMMON     1     1      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (1) _nrf_rx_char                                          2     2      0    4407
                                             12 COMMON     2     2      0
                  _nrf_read_register
                 _nrf_write_register
 ---------------------------------------------------------------------------------
 (2) _nrf_write_register                                   3     1      2    3155
                                              9 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (2) _nrf_read_register                                    3     1      2    1179
                                              9 COMMON     3     1      2
                        _nrf_command
 ---------------------------------------------------------------------------------
 (3) _nrf_command                                          8     6      2     505
                                              1 COMMON     8     6      2
                          _SPI_write
 ---------------------------------------------------------------------------------
 (1) _nrf_data_available                                   1     1      0      90
                                              3 COMMON     1     1      0
                  _nrf_write_command
 ---------------------------------------------------------------------------------
 (3) _nrf_write_command                                    2     2      0      67
                                              1 COMMON     2     2      0
                          _SPI_write
 ---------------------------------------------------------------------------------
 (4) _SPI_write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      3     3      0     277
                                              1 COMMON     3     3      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master
   _UART_init
     ___aldiv
   _UART_write
   _UART_write_text
     _UART_write
   _nrf_data_available
     _nrf_write_command
       _SPI_write
   _nrf_rx_char
     _nrf_read_register
       _nrf_command
         _SPI_write
     _nrf_write_register
       _nrf_command
   _nrf_set_rx_mode
     _nrf_read_register
     _nrf_write_register
   _nrf_setup
     _arrcpy
     _nrf_flush_rxtx
       _nrf_write_command
       _nrf_write_register
     _nrf_write_register

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1D      2A       5       52.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      38      12        0.0%
ABS                  0      0      38       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Mar 27 15:44:27 2023

                          pc 0002                           _BF 04A0                           l53 0688  
                         l56 04A1                           l65 058F                           l83 04C4  
                         l59 04AB                           l86 04E5                           l89 04EE  
                         fsr 0004                          l140 05C0                          l134 054C  
                        l143 04D1                          l152 04FE                          l146 04B7  
                        l139 05BC                          l155 052F                          l180 0516  
                        l166 04DF                          l158 055F                          l351 069D  
                        l159 056A                          l361 0725                          l169 07DF  
                        _CKE 04A6                          _RD2 0042                          _RD3 0043  
                        u400 06A1                          u401 06A0                          u410 06C0  
                        u411 06BF                          u500 064A                          u430 06D4  
                        u350 04EB                          u431 06D3                          u511 065C  
                        u351 04EA                          u512 065D                          u520 058F  
                        u360 05BC                          u425 06C5                          u513 0662  
                        u505 0645                          u521 058E                          u361 05BB  
                        u450 06EF                          u514 0663                          u370 04A7  
                        u530 055E                          u451 06EE                          u515 0668  
                        u371 04A6                          u531 055D                          u516 0669  
                        u380 054C                          u445 06D6                          u381 054B  
                        u470 070D                          u390 0690                          u550 04DE  
                        u471 070C                          u455 06EB                          u391 068F  
                        u551 04DC                          u480 0712                          u560 04DF  
                        u481 0711                          u465 06FF                          u490 0631  
                        u707 073F                          u670 0606                          u495 062C  
                        u671 0605                          u687 05F7                          u697 0730  
                        _SMP 04A7                          fsr0 0004                          indf 0000  
                       l1201 06AC                         l1211 06D0                         l1203 06B0  
                       l1221 06FE                         l1213 06D4                         l1205 06B8  
                       l1133 04E1                         l1301 04D2                         l1141 0594  
                       l1223 0707                         l1215 06DD                         l1207 06C0  
                       l1135 04EB                         l1303 04D9                         l1151 05BF  
                       l1143 059B                         l1311 0735                         l1217 06EF  
                       l1209 06C3                         l1225 070D                         l1241 067E  
                       l1233 061E                         l1161 04F3                         l1145 059D  
                       l1321 075F                         l1313 0738                         l1227 0712  
                       l1219 06FD                         l1243 0681                         l1235 0621  
                       l1171 04A7                         l1251 056F                         l1163 04FA  
                       l1147 05B2                         l1139 0591                         l1155 04C6  
                       l1331 077E                         l1323 0763                         l1315 0748  
                       l1307 0726                         l1261 04BF                         l1229 071D  
                       l1245 0682                         l1237 067A                         l1253 057C  
                       l1165 04FD                         l1149 05B6                         l1181 04AD  
                       l1173 0531                         l1333 0788                         l1325 076D  
                       l1317 0752                         l1309 072A                         l1263 04C0  
                       l1247 0685                         l1239 067B                         l1255 0582  
                       l1159 04F0                         l1175 0533                         l1191 0529  
                       l1335 078C                         l1327 0771                         l1319 0755  
                       l1265 04C1                         l1257 04B8                         l1193 0689  
                       l1169 04A1                         l1249 056C                         l1281 0557  
                       l1177 0542                         l1185 0517                         l1337 079A  
                       l1329 077B                         l1267 04C2                         l1259 04BC  
                       l1195 068C                         l1363 04FF                         l1283 055A  
                       l1179 0546                         l1187 0519                         l1339 07A4  
                       l1451 05C5                         l1269 04C3                         l1197 0690  
                       l1365 0509                         l1189 0523                         l1461 05F1  
                       l1453 05DC                         l1199 06A1                         l1367 050B  
                       l1287 0560                         l1279 054D                         l1463 05FC  
                       l1455 05E2                         l1465 0606                         l1457 05E7  
                       l1449 05C1                         l1467 060E                         l1459 05EC  
                       l1469 0614                         STR_1 0009                         STR_2 0026  
                       STR_4 001B                         STR_5 0031                         STR_6 0037  
                       _BRGH 04C2                         _CREN 00C4                         _RCIF 0065  
                       _SPEN 00C7                         _TRMT 04C1                         _TXEN 04C5  
                       _SYNC 04C4                         _main 05C1                         btemp 007E  
                       start 0000             UART_write_text@i 0071              __end_of___aldiv 0726  
                      ?_main 0070                        _RCREG 001A                        _SPBRG 0099  
                      _TXREG 0019                  ?_UART_write 0070                        pclath 000A  
                      status 0003                        wtemp0 007E              __initialization 07E0  
               __end_of_main 061E                       ??_main 003A                 ?_nrf_command 0071  
               ?_nrf_rx_char 0070                       _TRISC6 043E                       _TRISC7 043F  
                     _SSPCON 0014                       _SSPBUF 0013                    ??___aldiv 0078  
          __end_of_UART_init 0689               _nrf_flush_rxtx 0517  char_to_binary_string@output 003D  
                     _arrcpy 0530                       main@ch 003C              _UART_write_text 056B  
          __end_of_SPI_write 04EF     nrf_data_available@status 0073              nrf_rx_char@data 007D  
         nrf_flush_rxtx@data 007C      __end_of__initialization 07FC       __end_of_nrf_flush_rxtx 0530  
             __pcstackCOMMON 0070                 __pidataBANK0 049D   __end_of_nrf_write_register 04D2  
          ??_nrf_set_rx_mode 007C            ??_SPI_init_master 0070                   __pbssBANK0 003D  
      nrf_write_register@len 007A        nrf_write_register@reg 007B              ?_nrf_flush_rxtx 0070  
                 __pmaintext 05C1                      ?_arrcpy 0070      __end_of_UART_write_text 0590  
               ??_UART_write 0070                      _SSPSTAT 0094                   __stringtab 0003  
                    ___aldiv 0689           __end_of_UART_write 04AC                      __ptext1 0726  
                    __ptext2 0517                      __ptext3 0530                      __ptext4 054D  
                    __ptext5 04FF                      __ptext6 04C5                      __ptext7 04AC  
                    __ptext8 0590                      __ptext9 04D2         nrf_read_register@len 007A  
       nrf_read_register@reg 007B             ___aldiv@dividend 0074                      arrcpy@i 0076  
       end_of_initialization 07FC            __end_of_nrf_setup 07E0          UART_init@_XTAL_FREQ 002A  
           ___aldiv@quotient 0022             ?_UART_write_text 0070                    _UART_init 061E  
           nrf_rx_char@clear 007C                    _TRISCbits 0087                    _TRISDbits 0088  
                  _SPI_write 04E0                    _RXTX_ADDR 0047              _nrf_set_rx_mode 054D  
            _SPI_init_master 04B8                nrf_setup@data 0022               __end_of_arrcpy 054D  
                 ?_UART_init 0026          start_initialization 07E0   __end_of_nrf_data_available 04E0  
         _nrf_write_register 04C5                   ?_SPI_write 0070             ??_nrf_flush_rxtx 007C  
        ?_nrf_write_register 0079                     ??_arrcpy 0072                  __pdataBANK0 0047  
       ??_nrf_write_register 007B       nrf_write_register@data 0079                    ___latbits 0002  
              __pcstackBANK0 0020          UART_write_text@text 0073      __end_of_nrf_set_rx_mode 056B  
    __end_of_SPI_init_master 04C5                SPI_write@data 0070                     ?___aldiv 0070  
                  __pstrings 0003                  ??_UART_init 002E                ??_nrf_command 0073  
              ??_nrf_rx_char 007C                  ??_SPI_write 0070              ___aldiv@divisor 0070  
               nrf_command@i 0078              ___aldiv@counter 0020                    _nrf_setup 0726  
            nrf_command@data 0071            _nrf_read_register 04AC        nrf_set_rx_mode@config 007C  
         ?_nrf_read_register 0079                  __stringbase 0008               UART_write@data 0070  
                  arrcpy@len 0071                    arrcpy@dst 0075                    arrcpy@src 0070  
        ??_nrf_read_register 007B            _nrf_write_command 04EF          __end_of_nrf_command 05C1  
         ?_nrf_write_command 0070          __end_of_nrf_rx_char 0517                   ?_nrf_setup 0070  
           ?_nrf_set_rx_mode 0070             ?_SPI_init_master 0070    __end_of_nrf_read_register 04B8  
        ??_nrf_write_command 0071           __end_of__stringtab 0009    __end_of_nrf_write_command 04FF  
                   __ptext10 04EF                     __ptext11 04E0                     __ptext12 056B  
                   __ptext13 04A0                     __ptext14 061E                     __ptext15 0689  
                   __ptext16 04B8        nrf_read_register@data 0079           _nrf_data_available 04D2  
             nrf_command@len 0072          ?_nrf_data_available 0070                  _nrf_command 0590  
       ??_nrf_data_available 0073                  _nrf_rx_char 04FF     nrf_write_command@command 0071  
          UART_init@baudrate 0026           nrf_command@command 0076                  ??_nrf_setup 0020  
                  stringcode 0003                   _OSCCONbits 008F                     stringdir 0003  
                   stringtab 0003                 ___aldiv@sign 0021      nrf_write_command@status 0072  
          nrf_command@status 0077                   _UART_write 04A0            ??_UART_write_text 0071  
