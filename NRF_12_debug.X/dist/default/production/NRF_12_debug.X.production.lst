

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Apr 17 15:17:44 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Version 2.40
    22                           ; Generated 04/07/2022 GMT
    23                           ; 
    24                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56     0000                     	;# 
    57     0001                     	;# 
    58     0002                     	;# 
    59     0003                     	;# 
    60     0004                     	;# 
    61     0005                     	;# 
    62     0006                     	;# 
    63     0007                     	;# 
    64     0008                     	;# 
    65     0009                     	;# 
    66     000A                     	;# 
    67     000B                     	;# 
    68     000C                     	;# 
    69     000D                     	;# 
    70     000E                     	;# 
    71     000E                     	;# 
    72     000F                     	;# 
    73     0010                     	;# 
    74     0011                     	;# 
    75     0012                     	;# 
    76     0013                     	;# 
    77     0014                     	;# 
    78     0015                     	;# 
    79     0015                     	;# 
    80     0016                     	;# 
    81     0017                     	;# 
    82     0018                     	;# 
    83     0019                     	;# 
    84     001A                     	;# 
    85     001B                     	;# 
    86     001B                     	;# 
    87     001C                     	;# 
    88     001D                     	;# 
    89     001E                     	;# 
    90     001F                     	;# 
    91     0081                     	;# 
    92     0085                     	;# 
    93     0086                     	;# 
    94     0087                     	;# 
    95     0088                     	;# 
    96     0089                     	;# 
    97     008C                     	;# 
    98     008D                     	;# 
    99     008E                     	;# 
   100     008F                     	;# 
   101     0090                     	;# 
   102     0091                     	;# 
   103     0092                     	;# 
   104     0093                     	;# 
   105     0093                     	;# 
   106     0093                     	;# 
   107     0094                     	;# 
   108     0095                     	;# 
   109     0096                     	;# 
   110     0097                     	;# 
   111     0098                     	;# 
   112     0099                     	;# 
   113     009A                     	;# 
   114     009B                     	;# 
   115     009C                     	;# 
   116     009D                     	;# 
   117     009E                     	;# 
   118     009F                     	;# 
   119     0105                     	;# 
   120     0107                     	;# 
   121     0108                     	;# 
   122     0109                     	;# 
   123     010C                     	;# 
   124     010C                     	;# 
   125     010D                     	;# 
   126     010E                     	;# 
   127     010F                     	;# 
   128     0185                     	;# 
   129     0187                     	;# 
   130     0188                     	;# 
   131     0189                     	;# 
   132     018C                     	;# 
   133     018D                     	;# 
   134     0000                     	;# 
   135     0001                     	;# 
   136     0002                     	;# 
   137     0003                     	;# 
   138     0004                     	;# 
   139     0005                     	;# 
   140     0006                     	;# 
   141     0007                     	;# 
   142     0008                     	;# 
   143     0009                     	;# 
   144     000A                     	;# 
   145     000B                     	;# 
   146     000C                     	;# 
   147     000D                     	;# 
   148     000E                     	;# 
   149     000E                     	;# 
   150     000F                     	;# 
   151     0010                     	;# 
   152     0011                     	;# 
   153     0012                     	;# 
   154     0013                     	;# 
   155     0014                     	;# 
   156     0015                     	;# 
   157     0015                     	;# 
   158     0016                     	;# 
   159     0017                     	;# 
   160     0018                     	;# 
   161     0019                     	;# 
   162     001A                     	;# 
   163     001B                     	;# 
   164     001B                     	;# 
   165     001C                     	;# 
   166     001D                     	;# 
   167     001E                     	;# 
   168     001F                     	;# 
   169     0081                     	;# 
   170     0085                     	;# 
   171     0086                     	;# 
   172     0087                     	;# 
   173     0088                     	;# 
   174     0089                     	;# 
   175     008C                     	;# 
   176     008D                     	;# 
   177     008E                     	;# 
   178     008F                     	;# 
   179     0090                     	;# 
   180     0091                     	;# 
   181     0092                     	;# 
   182     0093                     	;# 
   183     0093                     	;# 
   184     0093                     	;# 
   185     0094                     	;# 
   186     0095                     	;# 
   187     0096                     	;# 
   188     0097                     	;# 
   189     0098                     	;# 
   190     0099                     	;# 
   191     009A                     	;# 
   192     009B                     	;# 
   193     009C                     	;# 
   194     009D                     	;# 
   195     009E                     	;# 
   196     009F                     	;# 
   197     0105                     	;# 
   198     0107                     	;# 
   199     0108                     	;# 
   200     0109                     	;# 
   201     010C                     	;# 
   202     010C                     	;# 
   203     010D                     	;# 
   204     010E                     	;# 
   205     010F                     	;# 
   206     0185                     	;# 
   207     0187                     	;# 
   208     0188                     	;# 
   209     0189                     	;# 
   210     018C                     	;# 
   211     018D                     	;# 
   212     001A                     _RCREG	set	26
   213     0019                     _TXREG	set	25
   214     0044                     _RD4	set	68
   215     0065                     _RCIF	set	101
   216     00C4                     _CREN	set	196
   217     00C7                     _SPEN	set	199
   218     008F                     _OSCCONbits	set	143
   219     0099                     _SPBRG	set	153
   220     0444                     _TRISD4	set	1092
   221     04C1                     _TRMT	set	1217
   222     04C5                     _TXEN	set	1221
   223     043E                     _TRISC6	set	1086
   224     043F                     _TRISC7	set	1087
   225     04C4                     _SYNC	set	1220
   226     04C2                     _BRGH	set	1218
   227                           
   228                           	psect	strings
   229     0003                     __pstrings:
   230     0003                     stringtab:
   231     0003                     __stringtab:
   232                           
   233                           ;	String table - string pointers are 1 byte each
   234     0003  1BFF               	btfsc	btemp+1,7
   235     0004  280D               	ljmp	stringcode
   236     0005  1383               	bcf	3,7
   237     0006  187F               	btfsc	btemp+1,0
   238     0007  1783               	bsf	3,7
   239     0008  0800               	movf	0,w
   240     0009  0A84               	incf	4,f
   241     000A  1903               	skipnz
   242     000B  0AFF               	incf	btemp+1,f
   243     000C  0008               	return
   244     000D                     stringcode:
   245     000D                     stringdir:
   246     000D  3000               	movlw	high stringdir
   247     000E  008A               	movwf	10
   248     000F  0804               	movf	4,w
   249     0010  0A84               	incf	4,f
   250     0011  0782               	addwf	2,f
   251     0012                     __stringbase:
   252     0012  3400               	retlw	0
   253     0013                     __end_of__stringtab:
   254     0013                     STR_1:
   255     0013  3425               	retlw	37	;'%'
   256     0014  3463               	retlw	99	;'c'
   257     0015  3425               	retlw	37	;'%'
   258     0016  3463               	retlw	99	;'c'
   259     0017  3425               	retlw	37	;'%'
   260     0018  3463               	retlw	99	;'c'
   261     0019  3425               	retlw	37	;'%'
   262     001A  3463               	retlw	99	;'c'
   263     001B  3425               	retlw	37	;'%'
   264     001C  3463               	retlw	99	;'c'
   265     001D  3425               	retlw	37	;'%'
   266     001E  3463               	retlw	99	;'c'
   267     001F  3425               	retlw	37	;'%'
   268     0020  3463               	retlw	99	;'c'
   269     0021  3425               	retlw	37	;'%'
   270     0022  3463               	retlw	99	;'c'
   271     0023  340A               	retlw	10
   272     0024  3400               	retlw	0
   273     0025                     STR_3:
   274     0025  3452               	retlw	82	;'R'
   275     0026  3465               	retlw	101	;'e'
   276     0027  3463               	retlw	99	;'c'
   277     0028  3469               	retlw	105	;'i'
   278     0029  3465               	retlw	101	;'e'
   279     002A  3476               	retlw	118	;'v'
   280     002B  3465               	retlw	101	;'e'
   281     002C  3464               	retlw	100	;'d'
   282     002D  3420               	retlw	32	;' '
   283     002E  3425               	retlw	37	;'%'
   284     002F  3473               	retlw	115	;'s'
   285     0030  340A               	retlw	10
   286     0031  3400               	retlw	0
   287     0032                     STR_2:
   288     0032  3442               	retlw	66	;'B'
   289     0033  344F               	retlw	79	;'O'
   290     0034  344F               	retlw	79	;'O'
   291     0035  3454               	retlw	84	;'T'
   292     0036  3445               	retlw	69	;'E'
   293     0037  3444               	retlw	68	;'D'
   294     0038  340A               	retlw	10
   295     0039  3400               	retlw	0
   296     003A                     STR_4:
   297     003A  3428               	retlw	40	;'('
   298     003B  346E               	retlw	110	;'n'
   299     003C  3475               	retlw	117	;'u'
   300     003D  346C               	retlw	108	;'l'
   301     003E  346C               	retlw	108	;'l'
   302     003F  3429               	retlw	41	;')'
   303     0040  3400               	retlw	0
   304                           
   305                           	psect	cinit
   306     07F0                     start_initialization:	
   307                           ; #config settings
   308                           
   309     07F0                     __initialization:
   310                           
   311                           ; Clear objects allocated to BANK0
   312     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   313     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   314     07F2  01C8               	clrf	__pbssBANK0& (0+127)
   315     07F3  01C9               	clrf	(__pbssBANK0+1)& (0+127)
   316     07F4  01CA               	clrf	(__pbssBANK0+2)& (0+127)
   317     07F5  01CB               	clrf	(__pbssBANK0+3)& (0+127)
   318     07F6  01CC               	clrf	(__pbssBANK0+4)& (0+127)
   319     07F7  01CD               	clrf	(__pbssBANK0+5)& (0+127)
   320     07F8  01CE               	clrf	(__pbssBANK0+6)& (0+127)
   321     07F9  01CF               	clrf	(__pbssBANK0+7)& (0+127)
   322     07FA  01D0               	clrf	(__pbssBANK0+8)& (0+127)
   323     07FB  01D1               	clrf	(__pbssBANK0+9)& (0+127)
   324     07FC                     end_of_initialization:	
   325                           ;End of C runtime variable initialization code
   326                           
   327     07FC                     __end_of__initialization:
   328     07FC  0183               	clrf	3
   329     07FD  120A  118A  2E10   	ljmp	_main	;jump to C main() function
   330                           
   331                           	psect	bssBANK0
   332     0048                     __pbssBANK0:
   333     0048                     char_to_binary_string@output:
   334     0048                     	ds	10
   335                           
   336                           	psect	cstackBANK3
   337     0190                     __pcstackBANK3:
   338     0190                     main@buffer_116:
   339                           
   340                           ; 64 bytes @ 0x0
   341     0190                     	ds	64
   342                           
   343                           	psect	cstackBANK1
   344     00A0                     __pcstackBANK1:
   345     00A0                     main@buffer:
   346                           
   347                           ; 64 bytes @ 0x0
   348     00A0                     	ds	64
   349                           
   350                           	psect	cstackCOMMON
   351     0070                     __pcstackCOMMON:
   352     0070                     ??_sprintf:
   353     0070                     ?_char_to_binary_string:	
   354                           ; 1 bytes @ 0x0
   355                           
   356     0070                     ?_UART_write:	
   357                           ; 1 bytes @ 0x0
   358                           
   359     0070                     ??_UART_write:	
   360                           ; 1 bytes @ 0x0
   361                           
   362     0070                     ?_main:	
   363                           ; 1 bytes @ 0x0
   364                           
   365     0070                     ?___aldiv:	
   366                           ; 2 bytes @ 0x0
   367                           
   368     0070                     UART_write@data:	
   369                           ; 4 bytes @ 0x0
   370                           
   371     0070                     ___aldiv@divisor:	
   372                           ; 1 bytes @ 0x0
   373                           
   374                           
   375                           ; 4 bytes @ 0x0
   376     0070                     	ds	1
   377     0071                     ?_UART_write_text:
   378     0071                     UART_write_text@text:	
   379                           ; 1 bytes @ 0x1
   380                           
   381                           
   382                           ; 2 bytes @ 0x1
   383     0071                     	ds	1
   384     0072                     sprintf@ap:
   385                           
   386                           ; 1 bytes @ 0x2
   387     0072                     	ds	1
   388     0073                     ??_UART_write_text:
   389     0073                     sprintf@cp:	
   390                           ; 1 bytes @ 0x3
   391                           
   392                           
   393                           ; 2 bytes @ 0x3
   394     0073                     	ds	1
   395     0074                     ___aldiv@dividend:
   396                           
   397                           ; 4 bytes @ 0x4
   398     0074                     	ds	1
   399     0075                     sprintf@c:
   400                           
   401                           ; 1 bytes @ 0x5
   402     0075                     	ds	1
   403     0076                     ??_char_to_binary_string:
   404     0076                     UART_write_text@i:	
   405                           ; 1 bytes @ 0x6
   406                           
   407                           
   408                           ; 2 bytes @ 0x6
   409     0076                     	ds	2
   410     0078                     ??___aldiv:
   411                           
   412                           ; 1 bytes @ 0x8
   413     0078                     	ds	1
   414     0079                     ??_main:
   415                           
   416                           ; 1 bytes @ 0x9
   417     0079                     	ds	2
   418                           
   419                           	psect	cstackBANK0
   420     0020                     __pcstackBANK0:
   421     0020                     ?_sprintf:
   422     0020                     ___aldiv@counter:	
   423                           ; 2 bytes @ 0x0
   424                           
   425     0020                     sprintf@sp:	
   426                           ; 1 bytes @ 0x0
   427                           
   428                           
   429                           ; 2 bytes @ 0x0
   430     0020                     	ds	1
   431     0021                     ___aldiv@sign:
   432                           
   433                           ; 1 bytes @ 0x1
   434     0021                     	ds	1
   435     0022                     sprintf@f:
   436     0022                     ___aldiv@quotient:	
   437                           ; 1 bytes @ 0x2
   438                           
   439                           
   440                           ; 4 bytes @ 0x2
   441     0022                     	ds	4
   442     0026                     ?_UART_init:
   443     0026                     UART_init@baudrate:	
   444                           ; 1 bytes @ 0x6
   445                           
   446                           
   447                           ; 4 bytes @ 0x6
   448     0026                     	ds	4
   449     002A                     UART_init@_XTAL_FREQ:
   450                           
   451                           ; 4 bytes @ 0xA
   452     002A                     	ds	4
   453     002E                     ??_UART_init:
   454                           
   455                           ; 1 bytes @ 0xE
   456     002E                     	ds	5
   457     0033                     _char_to_binary_string$89:
   458                           
   459                           ; 2 bytes @ 0x13
   460     0033                     	ds	2
   461     0035                     _char_to_binary_string$90:
   462                           
   463                           ; 2 bytes @ 0x15
   464     0035                     	ds	2
   465     0037                     _char_to_binary_string$91:
   466                           
   467                           ; 2 bytes @ 0x17
   468     0037                     	ds	2
   469     0039                     _char_to_binary_string$92:
   470                           
   471                           ; 2 bytes @ 0x19
   472     0039                     	ds	2
   473     003B                     _char_to_binary_string$93:
   474                           
   475                           ; 2 bytes @ 0x1B
   476     003B                     	ds	2
   477     003D                     _char_to_binary_string$94:
   478                           
   479                           ; 2 bytes @ 0x1D
   480     003D                     	ds	2
   481     003F                     _char_to_binary_string$95:
   482                           
   483                           ; 2 bytes @ 0x1F
   484     003F                     	ds	2
   485     0041                     _char_to_binary_string$96:
   486                           
   487                           ; 2 bytes @ 0x21
   488     0041                     	ds	2
   489     0043                     char_to_binary_string@character:
   490                           
   491                           ; 1 bytes @ 0x23
   492     0043                     	ds	1
   493     0044                     _main$757:
   494                           
   495                           ; 1 bytes @ 0x24
   496     0044                     	ds	1
   497     0045                     main@data:
   498                           
   499                           ; 1 bytes @ 0x25
   500     0045                     	ds	1
   501     0046                     main@i:
   502                           
   503                           ; 2 bytes @ 0x26
   504     0046                     	ds	2
   505                           
   506                           	psect	maintext
   507     0610                     __pmaintext:	
   508 ;;
   509 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   510 ;;
   511 ;; *************** function _main *****************
   512 ;; Defined at:
   513 ;;		line 44 in file "main.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;		None
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  buffer         64    0[BANK3 ] unsigned char [64]
   518 ;;  i               2   38[BANK0 ] int 
   519 ;;  data            1   37[BANK0 ] unsigned char 
   520 ;;  buffer         64    0[BANK1 ] unsigned char [64]
   521 ;; Return value:  Size  Location     Type
   522 ;;                  2   99[None  ] int 
   523 ;; Registers used:
   524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : B00/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   530 ;;      Params:         0       0       0       0       0
   531 ;;      Locals:         0       4      64      64       0
   532 ;;      Temps:          2       0       0       0       0
   533 ;;      Totals:         2       4      64      64       0
   534 ;;Total ram usage:      134 bytes
   535 ;; Hardware stack levels required when called: 3
   536 ;; This function calls:
   537 ;;		_UART_init
   538 ;;		_UART_write_text
   539 ;;		_char_to_binary_string
   540 ;;		_sprintf
   541 ;; This function is called by:
   542 ;;		Startup code after reset
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546     0610                     _main:	
   547                           ;psect for function _main
   548                           
   549     0610                     l1132:	
   550                           ;incstack = 0
   551                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   552                           
   553                           
   554                           ;main.c: 47:     OSCCONbits.IRCF = 0x07;
   555     0610  3070               	movlw	112
   556     0611  1683               	bsf	3,5	;RP0=1, select bank1
   557     0612  1303               	bcf	3,6	;RP1=0, select bank1
   558     0613  048F               	iorwf	15,f	;volatile
   559     0614                     l1134:
   560                           
   561                           ;main.c: 50:     UART_init(9600, 8000000UL);
   562     0614  3000               	movlw	0
   563     0615  1283               	bcf	3,5	;RP0=0, select bank0
   564     0616  1303               	bcf	3,6	;RP1=0, select bank0
   565     0617  00A9               	movwf	UART_init@baudrate+3
   566     0618  3000               	movlw	0
   567     0619  00A8               	movwf	UART_init@baudrate+2
   568     061A  3025               	movlw	37
   569     061B  00A7               	movwf	UART_init@baudrate+1
   570     061C  3080               	movlw	128
   571     061D  00A6               	movwf	UART_init@baudrate
   572     061E  3000               	movlw	0
   573     061F  00AD               	movwf	UART_init@_XTAL_FREQ+3
   574     0620  307A               	movlw	122
   575     0621  00AC               	movwf	UART_init@_XTAL_FREQ+2
   576     0622  3012               	movlw	18
   577     0623  00AB               	movwf	UART_init@_XTAL_FREQ+1
   578     0624  3000               	movlw	0
   579     0625  00AA               	movwf	UART_init@_XTAL_FREQ
   580     0626  120A  118A  250D  120A  118A  	fcall	_UART_init
   581     062B                     l1136:
   582                           
   583                           ;main.c: 53:     { char buffer[64]; sprintf(buffer, "BOOTED\n"); UART_write_text(buffer)
      +                          ; };
   584     062B  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   585     062C  1283               	bcf	3,5	;RP0=0, select bank0
   586     062D  1303               	bcf	3,6	;RP1=0, select bank0
   587     062E  00A0               	movwf	sprintf@sp
   588     062F  3000               	movlw	0
   589     0630  00A1               	movwf	sprintf@sp+1
   590     0631  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   591     0632  00A2               	movwf	sprintf@f
   592     0633  120A  118A  2749  120A  118A  	fcall	_sprintf
   593     0638                     l1138:
   594     0638  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   595     0639  00F1               	movwf	UART_write_text@text
   596     063A  3000               	movlw	0
   597     063B  00F2               	movwf	UART_write_text@text+1
   598     063C  120A  118A  24D6  120A  118A  	fcall	_UART_write_text
   599     0641                     l1140:
   600                           
   601                           ;main.c: 55:     TRISD4 = 1;
   602     0641  1683               	bsf	3,5	;RP0=1, select bank1
   603     0642  1303               	bcf	3,6	;RP1=0, select bank1
   604     0643  1608               	bsf	8,4	;volatile
   605     0644                     l101:	
   606                           ;main.c: 61:             ;
   607                           
   608                           
   609                           ;main.c: 60:         while (RD4 == 0)
   610     0644  1283               	bcf	3,5	;RP0=0, select bank0
   611     0645  1303               	bcf	3,6	;RP1=0, select bank0
   612     0646  1E08               	btfss	8,4	;volatile
   613     0647  2E49               	goto	u631
   614     0648  2E4A               	goto	u630
   615     0649                     u631:
   616     0649  2E44               	goto	l101
   617     064A                     u630:
   618     064A                     l1142:
   619                           
   620                           ;main.c: 63:         _delay((unsigned long)((12)*(8000000UL/4000.0)));
   621     064A  3020               	movlw	32
   622     064B  00FA               	movwf	??_main+1
   623     064C  3029               	movlw	41
   624     064D  00F9               	movwf	??_main
   625     064E                     u667:
   626     064E  0BF9               	decfsz	??_main,f
   627     064F  2E4E               	goto	u667
   628     0650  0BFA               	decfsz	??_main+1,f
   629     0651  2E4E               	goto	u667
   630     0652  2E53               	nop2
   631     0653                     l1144:
   632                           
   633                           ;main.c: 66:         uint8_t data = 0;
   634     0653  1283               	bcf	3,5	;RP0=0, select bank0
   635     0654  1303               	bcf	3,6	;RP1=0, select bank0
   636     0655  01C5               	clrf	main@data
   637     0656                     l1146:
   638                           
   639                           ;main.c: 67:         for (int i = 0; i < 8; i++)
   640     0656  01C6               	clrf	main@i
   641     0657  01C7               	clrf	main@i+1
   642     0658                     l1152:
   643                           
   644                           ;main.c: 68:         {;main.c: 69:             data |= (RD4 << i);
   645     0658  3000               	movlw	0
   646     0659  1283               	bcf	3,5	;RP0=0, select bank0
   647     065A  1303               	bcf	3,6	;RP1=0, select bank0
   648     065B  1A08               	btfsc	8,4	;volatile
   649     065C  3001               	movlw	1
   650     065D  00F9               	movwf	??_main
   651     065E  0A46               	incf	main@i,w
   652     065F  2E62               	goto	u644
   653     0660                     u645:
   654     0660  1003               	clrc
   655     0661  0DF9               	rlf	??_main,f
   656     0662                     u644:
   657     0662  3EFF               	addlw	-1
   658     0663  1D03               	skipz
   659     0664  2E60               	goto	u645
   660     0665  0879               	movf	??_main,w
   661     0666  00FA               	movwf	??_main+1
   662     0667  087A               	movf	??_main+1,w
   663     0668  04C5               	iorwf	main@data,f
   664     0669                     l1154:
   665                           
   666                           ;main.c: 70:             _delay((unsigned long)((10)*(8000000UL/4000.0)));
   667     0669  301A               	movlw	26
   668     066A  00FA               	movwf	??_main+1
   669     066B  30F8               	movlw	248
   670     066C  00F9               	movwf	??_main
   671     066D                     u677:
   672     066D  0BF9               	decfsz	??_main,f
   673     066E  2E6D               	goto	u677
   674     066F  0BFA               	decfsz	??_main+1,f
   675     0670  2E6D               	goto	u677
   676     0671  0000               	nop
   677     0672                     l1156:
   678                           
   679                           ;main.c: 71:         }
   680     0672  3001               	movlw	1
   681     0673  1283               	bcf	3,5	;RP0=0, select bank0
   682     0674  1303               	bcf	3,6	;RP1=0, select bank0
   683     0675  07C6               	addwf	main@i,f
   684     0676  1803               	skipnc
   685     0677  0AC7               	incf	main@i+1,f
   686     0678  3000               	movlw	0
   687     0679  07C7               	addwf	main@i+1,f
   688     067A                     l1158:
   689     067A  0847               	movf	main@i+1,w
   690     067B  3A80               	xorlw	128
   691     067C  00FF               	movwf	btemp+1
   692     067D  3080               	movlw	128
   693     067E  027F               	subwf	btemp+1,w
   694     067F  1D03               	skipz
   695     0680  2E83               	goto	u655
   696     0681  3008               	movlw	8
   697     0682  0246               	subwf	main@i,w
   698     0683                     u655:
   699     0683  1C03               	skipc
   700     0684  2E86               	goto	u651
   701     0685  2E87               	goto	u650
   702     0686                     u651:
   703     0686  2E58               	goto	l1152
   704     0687                     u650:
   705     0687                     l1160:
   706                           
   707                           ;main.c: 72:         { char buffer[64]; sprintf(buffer, "Recieved %s\n", char_to_binary_
      +                          string(data)); UART_write_text(buffer); };
   708     0687  1283               	bcf	3,5	;RP0=0, select bank0
   709     0688  1303               	bcf	3,6	;RP1=0, select bank0
   710     0689  0845               	movf	main@data,w
   711     068A  120A  118A  2578  120A  118A  	fcall	_char_to_binary_string
   712     068F  1283               	bcf	3,5	;RP0=0, select bank0
   713     0690  1303               	bcf	3,6	;RP1=0, select bank0
   714     0691  00C4               	movwf	_main$757
   715                           
   716                           ;main.c: 72:         { char buffer[64]; sprintf(buffer, "Recieved %s\n", char_to_binary_
      +                          string(data)); UART_write_text(buffer); };
   717     0692  3090               	movlw	(low (main@buffer_116| (0+256)))& (0+255)
   718     0693  00A0               	movwf	sprintf@sp
   719     0694  3001               	movlw	1
   720     0695  00A1               	movwf	sprintf@sp+1
   721     0696  3013               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   722     0697  00A2               	movwf	sprintf@f
   723     0698  0844               	movf	_main$757,w
   724     0699  00A3               	movwf	low ((?_sprintf| 0+3))
   725     069A  120A  118A  2749  120A  118A  	fcall	_sprintf
   726     069F                     l1162:
   727     069F  3090               	movlw	(low (main@buffer_116| (0+256)))& (0+255)
   728     06A0  00F1               	movwf	UART_write_text@text
   729     06A1  3001               	movlw	1
   730     06A2  00F2               	movwf	UART_write_text@text+1
   731     06A3  120A  118A  24D6  120A  118A  	fcall	_UART_write_text
   732     06A8  2E44               	goto	l101
   733     06A9  120A  118A  2800   	ljmp	start
   734     06AC                     __end_of_main:
   735                           
   736                           	psect	text1
   737     0578                     __ptext1:	
   738 ;; *************** function _char_to_binary_string *****************
   739 ;; Defined at:
   740 ;;		line 35 in file "main.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;  character       1    wreg     unsigned char 
   743 ;; Auto vars:     Size  Location     Type
   744 ;;  character       1   35[BANK0 ] unsigned char 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      PTR unsigned char 
   747 ;; Registers used:
   748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   754 ;;      Params:         0       0       0       0       0
   755 ;;      Locals:         0      17       0       0       0
   756 ;;      Temps:          0       0       0       0       0
   757 ;;      Totals:         0      17       0       0       0
   758 ;;Total ram usage:       17 bytes
   759 ;; Hardware stack levels used: 1
   760 ;; Hardware stack levels required when called: 2
   761 ;; This function calls:
   762 ;;		_sprintf
   763 ;; This function is called by:
   764 ;;		_main
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768     0578                     _char_to_binary_string:	
   769                           ;psect for function _char_to_binary_string
   770                           
   771                           
   772                           ;incstack = 0
   773                           ; Regs used in _char_to_binary_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
   774                           ;char_to_binary_string@character stored from wreg
   775     0578  1283               	bcf	3,5	;RP0=0, select bank0
   776     0579  1303               	bcf	3,6	;RP1=0, select bank0
   777     057A  00C3               	movwf	char_to_binary_string@character
   778     057B                     l1078:
   779                           
   780                           ;main.c: 35: char *char_to_binary_string(char character);main.c: 36: {;main.c: 37:     s
      +                          tatic char output[10];;main.c: 39:     sprintf(output, "%c%c%c%c%c%c%c%c" "\n", (charact
      +                          er & 0x80 ? '1' : '0'), (character & 0x40 ? '1' : '0'), (character & 0x20 ? '1' : '0'), 
      +                          (character & 0x10 ? '1' : '0'), (character & 0x08 ? '1' : '0'), (character & 0x04 ? '1' 
      +                          : '0'), (character & 0x02 ? '1' : '0'), (character & 0x01 ? '1' : '0'));
   781     057B  1843               	btfsc	char_to_binary_string@character,0
   782     057C  2D7E               	goto	u551
   783     057D  2D7F               	goto	u550
   784     057E                     u551:
   785     057E  2D84               	goto	l1082
   786     057F                     u550:
   787     057F                     l1080:
   788     057F  3030               	movlw	48
   789     0580  00B3               	movwf	_char_to_binary_string$89
   790     0581  3000               	movlw	0
   791     0582  00B4               	movwf	_char_to_binary_string$89+1
   792     0583  2D88               	goto	l1084
   793     0584                     l1082:
   794     0584  3031               	movlw	49
   795     0585  00B3               	movwf	_char_to_binary_string$89
   796     0586  3000               	movlw	0
   797     0587  00B4               	movwf	_char_to_binary_string$89+1
   798     0588                     l1084:
   799     0588  18C3               	btfsc	char_to_binary_string@character,1
   800     0589  2D8B               	goto	u561
   801     058A  2D8C               	goto	u560
   802     058B                     u561:
   803     058B  2D91               	goto	l1088
   804     058C                     u560:
   805     058C                     l1086:
   806     058C  3030               	movlw	48
   807     058D  00B5               	movwf	_char_to_binary_string$90
   808     058E  3000               	movlw	0
   809     058F  00B6               	movwf	_char_to_binary_string$90+1
   810     0590  2D95               	goto	l1090
   811     0591                     l1088:
   812     0591  3031               	movlw	49
   813     0592  00B5               	movwf	_char_to_binary_string$90
   814     0593  3000               	movlw	0
   815     0594  00B6               	movwf	_char_to_binary_string$90+1
   816     0595                     l1090:
   817     0595  1943               	btfsc	char_to_binary_string@character,2
   818     0596  2D98               	goto	u571
   819     0597  2D99               	goto	u570
   820     0598                     u571:
   821     0598  2D9E               	goto	l1094
   822     0599                     u570:
   823     0599                     l1092:
   824     0599  3030               	movlw	48
   825     059A  00B7               	movwf	_char_to_binary_string$91
   826     059B  3000               	movlw	0
   827     059C  00B8               	movwf	_char_to_binary_string$91+1
   828     059D  2DA2               	goto	l1096
   829     059E                     l1094:
   830     059E  3031               	movlw	49
   831     059F  00B7               	movwf	_char_to_binary_string$91
   832     05A0  3000               	movlw	0
   833     05A1  00B8               	movwf	_char_to_binary_string$91+1
   834     05A2                     l1096:
   835     05A2  19C3               	btfsc	char_to_binary_string@character,3
   836     05A3  2DA5               	goto	u581
   837     05A4  2DA6               	goto	u580
   838     05A5                     u581:
   839     05A5  2DAB               	goto	l1100
   840     05A6                     u580:
   841     05A6                     l1098:
   842     05A6  3030               	movlw	48
   843     05A7  00B9               	movwf	_char_to_binary_string$92
   844     05A8  3000               	movlw	0
   845     05A9  00BA               	movwf	_char_to_binary_string$92+1
   846     05AA  2DAF               	goto	l1102
   847     05AB                     l1100:
   848     05AB  3031               	movlw	49
   849     05AC  00B9               	movwf	_char_to_binary_string$92
   850     05AD  3000               	movlw	0
   851     05AE  00BA               	movwf	_char_to_binary_string$92+1
   852     05AF                     l1102:
   853     05AF  1A43               	btfsc	char_to_binary_string@character,4
   854     05B0  2DB2               	goto	u591
   855     05B1  2DB3               	goto	u590
   856     05B2                     u591:
   857     05B2  2DB8               	goto	l1106
   858     05B3                     u590:
   859     05B3                     l1104:
   860     05B3  3030               	movlw	48
   861     05B4  00BB               	movwf	_char_to_binary_string$93
   862     05B5  3000               	movlw	0
   863     05B6  00BC               	movwf	_char_to_binary_string$93+1
   864     05B7  2DBC               	goto	l1108
   865     05B8                     l1106:
   866     05B8  3031               	movlw	49
   867     05B9  00BB               	movwf	_char_to_binary_string$93
   868     05BA  3000               	movlw	0
   869     05BB  00BC               	movwf	_char_to_binary_string$93+1
   870     05BC                     l1108:
   871     05BC  1AC3               	btfsc	char_to_binary_string@character,5
   872     05BD  2DBF               	goto	u601
   873     05BE  2DC0               	goto	u600
   874     05BF                     u601:
   875     05BF  2DC5               	goto	l1112
   876     05C0                     u600:
   877     05C0                     l1110:
   878     05C0  3030               	movlw	48
   879     05C1  00BD               	movwf	_char_to_binary_string$94
   880     05C2  3000               	movlw	0
   881     05C3  00BE               	movwf	_char_to_binary_string$94+1
   882     05C4  2DC9               	goto	l1114
   883     05C5                     l1112:
   884     05C5  3031               	movlw	49
   885     05C6  00BD               	movwf	_char_to_binary_string$94
   886     05C7  3000               	movlw	0
   887     05C8  00BE               	movwf	_char_to_binary_string$94+1
   888     05C9                     l1114:
   889     05C9  1B43               	btfsc	char_to_binary_string@character,6
   890     05CA  2DCC               	goto	u611
   891     05CB  2DCD               	goto	u610
   892     05CC                     u611:
   893     05CC  2DD2               	goto	l1118
   894     05CD                     u610:
   895     05CD                     l1116:
   896     05CD  3030               	movlw	48
   897     05CE  00BF               	movwf	_char_to_binary_string$95
   898     05CF  3000               	movlw	0
   899     05D0  00C0               	movwf	_char_to_binary_string$95+1
   900     05D1  2DD6               	goto	l1120
   901     05D2                     l1118:
   902     05D2  3031               	movlw	49
   903     05D3  00BF               	movwf	_char_to_binary_string$95
   904     05D4  3000               	movlw	0
   905     05D5  00C0               	movwf	_char_to_binary_string$95+1
   906     05D6                     l1120:
   907     05D6  1BC3               	btfsc	char_to_binary_string@character,7
   908     05D7  2DD9               	goto	u621
   909     05D8  2DDA               	goto	u620
   910     05D9                     u621:
   911     05D9  2DDF               	goto	l1124
   912     05DA                     u620:
   913     05DA                     l1122:
   914     05DA  3030               	movlw	48
   915     05DB  00C1               	movwf	_char_to_binary_string$96
   916     05DC  3000               	movlw	0
   917     05DD  00C2               	movwf	_char_to_binary_string$96+1
   918     05DE  2DE3               	goto	l1126
   919     05DF                     l1124:
   920     05DF  3031               	movlw	49
   921     05E0  00C1               	movwf	_char_to_binary_string$96
   922     05E1  3000               	movlw	0
   923     05E2  00C2               	movwf	_char_to_binary_string$96+1
   924     05E3                     l1126:
   925     05E3  3048               	movlw	(low (char_to_binary_string@output| 0))& (0+255)
   926     05E4  00A0               	movwf	sprintf@sp
   927     05E5  3000               	movlw	0
   928     05E6  00A1               	movwf	sprintf@sp+1
   929     05E7  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   930     05E8  00A2               	movwf	sprintf@f
   931     05E9  0842               	movf	_char_to_binary_string$96+1,w
   932     05EA  00A4               	movwf	?_sprintf+4
   933     05EB  0841               	movf	_char_to_binary_string$96,w
   934     05EC  00A3               	movwf	?_sprintf+3
   935     05ED  0840               	movf	_char_to_binary_string$95+1,w
   936     05EE  00A6               	movwf	?_sprintf+6
   937     05EF  083F               	movf	_char_to_binary_string$95,w
   938     05F0  00A5               	movwf	?_sprintf+5
   939     05F1  083E               	movf	_char_to_binary_string$94+1,w
   940     05F2  00A8               	movwf	?_sprintf+8
   941     05F3  083D               	movf	_char_to_binary_string$94,w
   942     05F4  00A7               	movwf	?_sprintf+7
   943     05F5  083C               	movf	_char_to_binary_string$93+1,w
   944     05F6  00AA               	movwf	?_sprintf+10
   945     05F7  083B               	movf	_char_to_binary_string$93,w
   946     05F8  00A9               	movwf	?_sprintf+9
   947     05F9  083A               	movf	_char_to_binary_string$92+1,w
   948     05FA  00AC               	movwf	?_sprintf+12
   949     05FB  0839               	movf	_char_to_binary_string$92,w
   950     05FC  00AB               	movwf	?_sprintf+11
   951     05FD  0838               	movf	_char_to_binary_string$91+1,w
   952     05FE  00AE               	movwf	?_sprintf+14
   953     05FF  0837               	movf	_char_to_binary_string$91,w
   954     0600  00AD               	movwf	?_sprintf+13
   955     0601  0836               	movf	_char_to_binary_string$90+1,w
   956     0602  00B0               	movwf	?_sprintf+16
   957     0603  0835               	movf	_char_to_binary_string$90,w
   958     0604  00AF               	movwf	?_sprintf+15
   959     0605  0834               	movf	_char_to_binary_string$89+1,w
   960     0606  00B2               	movwf	?_sprintf+18
   961     0607  0833               	movf	_char_to_binary_string$89,w
   962     0608  00B1               	movwf	?_sprintf+17
   963     0609  120A  118A  2749  120A  118A  	fcall	_sprintf
   964     060E                     l1128:
   965                           
   966                           ;main.c: 41:     return output;
   967     060E  3048               	movlw	(low (char_to_binary_string@output| 0))& (0+255)
   968     060F                     l95:
   969     060F  0008               	return
   970     0610                     __end_of_char_to_binary_string:
   971                           
   972                           	psect	text2
   973     0749                     __ptext2:	
   974 ;; *************** function _sprintf *****************
   975 ;; Defined at:
   976 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;  sp              2    0[BANK0 ] PTR unsigned char 
   979 ;;		 -> main@buffer_116(64), main@buffer(64), char_to_binary_string@output(10), 
   980 ;;  f               1    2[BANK0 ] PTR const unsigned char 
   981 ;;		 -> STR_3(13), STR_2(8), STR_1(18), 
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  tmpval          4    0        struct .
   984 ;;  cp              2    3[COMMON] PTR const unsigned char 
   985 ;;		 -> STR_4(7), ?_sprintf(2), char_to_binary_string@output(10), 
   986 ;;  len             2    0        unsigned int 
   987 ;;  val             2    0        unsigned int 
   988 ;;  c               1    5[COMMON] unsigned char 
   989 ;;  ap              1    2[COMMON] PTR void [1]
   990 ;;		 -> ?_sprintf(2), 
   991 ;;  flag            1    0        unsigned char 
   992 ;;  prec            1    0        char 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  2    0[BANK0 ] int 
   995 ;; Registers used:
   996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1002 ;;      Params:         0      19       0       0       0
  1003 ;;      Locals:         4       0       0       0       0
  1004 ;;      Temps:          2       0       0       0       0
  1005 ;;      Totals:         6      19       0       0       0
  1006 ;;Total ram usage:       25 bytes
  1007 ;; Hardware stack levels used: 2
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_char_to_binary_string
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016     0749                     _sprintf:	
  1017                           ;psect for function _sprintf
  1018                           
  1019     0749                     l966:	
  1020                           ;incstack = 0
  1021                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1022                           
  1023                           
  1024                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1025     0749  3023               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  1026     074A  00F2               	movwf	sprintf@ap
  1027                           
  1028                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1029     074B  2FD7               	goto	l1002
  1030     074C                     l968:
  1031                           
  1032                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1033     074C  3025               	movlw	37
  1034     074D  0675               	xorwf	sprintf@c,w
  1035     074E  1903               	btfsc	3,2
  1036     074F  2F51               	goto	u351
  1037     0750  2F52               	goto	u350
  1038     0751                     u351:
  1039     0751  2F60               	goto	l974
  1040     0752                     u350:
  1041     0752                     l970:
  1042                           
  1043                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1044     0752  0820               	movf	sprintf@sp,w
  1045     0753  0084               	movwf	4
  1046     0754  1783               	bsf	3,7
  1047     0755  1C21               	btfss	sprintf@sp+1,0
  1048     0756  1383               	bcf	3,7
  1049     0757  0875               	movf	sprintf@c,w
  1050     0758  0080               	movwf	0
  1051     0759                     l972:
  1052     0759  3001               	movlw	1
  1053     075A  07A0               	addwf	sprintf@sp,f
  1054     075B  1803               	skipnc
  1055     075C  0AA1               	incf	sprintf@sp+1,f
  1056     075D  3000               	movlw	0
  1057     075E  07A1               	addwf	sprintf@sp+1,f
  1058                           
  1059                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1060     075F  2FD7               	goto	l1002
  1061     0760                     l974:
  1062                           
  1063                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1064     0760  2FBA               	goto	l1000
  1065     0761                     l976:
  1066                           
  1067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 760:     cp = (*(
      +                          const char * *)__va_arg((*(const char * **)ap), (const char *)0));
  1068     0761  0872               	movf	sprintf@ap,w
  1069     0762  0084               	movwf	4
  1070     0763  1383               	bcf	3,7	;select IRP bank0
  1071     0764  0800               	movf	0,w
  1072     0765  00F3               	movwf	sprintf@cp
  1073     0766  3000               	movlw	0
  1074     0767  00F4               	movwf	sprintf@cp+1
  1075     0768                     l978:
  1076     0768  3001               	movlw	1
  1077     0769  00F0               	movwf	??_sprintf
  1078     076A  0870               	movf	??_sprintf,w
  1079     076B  07F2               	addwf	sprintf@ap,f
  1080     076C                     l980:
  1081                           
  1082                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 766:    if(!cp)
  1083     076C  0873               	movf	sprintf@cp,w
  1084     076D  0474               	iorwf	sprintf@cp+1,w
  1085     076E  1D03               	btfss	3,2
  1086     076F  2F71               	goto	u361
  1087     0770  2F72               	goto	u360
  1088     0771                     u361:
  1089     0771  2F94               	goto	l205
  1090     0772                     u360:
  1091     0772                     l982:
  1092                           
  1093                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 767:     cp = "(n
      +                          ull)";
  1094     0772  3028               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1095     0773  00F3               	movwf	sprintf@cp
  1096     0774  3080               	movlw	128
  1097     0775  00F4               	movwf	sprintf@cp+1
  1098     0776  2F94               	goto	l205
  1099     0777                     l984:
  1100                           
  1101                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 804:     ((*sp++ 
      +                          = (*cp++)));
  1102     0777  0874               	movf	sprintf@cp+1,w
  1103     0778  00FF               	movwf	btemp+1
  1104     0779  0873               	movf	sprintf@cp,w
  1105     077A  0084               	movwf	4
  1106     077B  120A  118A  2003  120A  118A  	fcall	stringtab
  1107     0780  00F0               	movwf	??_sprintf
  1108     0781  0820               	movf	sprintf@sp,w
  1109     0782  0084               	movwf	4
  1110     0783  1783               	bsf	3,7
  1111     0784  1C21               	btfss	sprintf@sp+1,0
  1112     0785  1383               	bcf	3,7
  1113     0786  0870               	movf	??_sprintf,w
  1114     0787  0080               	movwf	0
  1115     0788                     l986:
  1116     0788  3001               	movlw	1
  1117     0789  07F3               	addwf	sprintf@cp,f
  1118     078A  1803               	skipnc
  1119     078B  0AF4               	incf	sprintf@cp+1,f
  1120     078C  3000               	movlw	0
  1121     078D  07F4               	addwf	sprintf@cp+1,f
  1122     078E                     l988:
  1123     078E  3001               	movlw	1
  1124     078F  07A0               	addwf	sprintf@sp,f
  1125     0790  1803               	skipnc
  1126     0791  0AA1               	incf	sprintf@sp+1,f
  1127     0792  3000               	movlw	0
  1128     0793  07A1               	addwf	sprintf@sp+1,f
  1129     0794                     l205:
  1130                           
  1131                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 803:    while(*cp
      +                          )
  1132     0794  0874               	movf	sprintf@cp+1,w
  1133     0795  00FF               	movwf	btemp+1
  1134     0796  0873               	movf	sprintf@cp,w
  1135     0797  0084               	movwf	4
  1136     0798  120A  118A  2003  120A  118A  	fcall	stringtab
  1137     079D  3A00               	xorlw	0
  1138     079E  1D03               	skipz
  1139     079F  2FA1               	goto	u371
  1140     07A0  2FA2               	goto	u370
  1141     07A1                     u371:
  1142     07A1  2F77               	goto	l984
  1143     07A2                     u370:
  1144     07A2  2FD7               	goto	l1002
  1145     07A3                     l990:
  1146                           
  1147                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 825:    c = (char
      +                          )(*(int *)__va_arg((*(int **)ap), (int)0));
  1148     07A3  0872               	movf	sprintf@ap,w
  1149     07A4  0084               	movwf	4
  1150     07A5  1383               	bcf	3,7	;select IRP bank0
  1151     07A6  0800               	movf	0,w
  1152     07A7  00F5               	movwf	sprintf@c
  1153     07A8                     l992:
  1154     07A8  3002               	movlw	2
  1155     07A9  00F0               	movwf	??_sprintf
  1156     07AA  0870               	movf	??_sprintf,w
  1157     07AB  07F2               	addwf	sprintf@ap,f
  1158     07AC                     l994:
  1159                           
  1160                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 835:    ((*sp++ =
      +                           (c)));
  1161     07AC  0820               	movf	sprintf@sp,w
  1162     07AD  0084               	movwf	4
  1163     07AE  1783               	bsf	3,7
  1164     07AF  1C21               	btfss	sprintf@sp+1,0
  1165     07B0  1383               	bcf	3,7
  1166     07B1  0875               	movf	sprintf@c,w
  1167     07B2  0080               	movwf	0
  1168     07B3                     l996:
  1169     07B3  3001               	movlw	1
  1170     07B4  07A0               	addwf	sprintf@sp,f
  1171     07B5  1803               	skipnc
  1172     07B6  0AA1               	incf	sprintf@sp+1,f
  1173     07B7  3000               	movlw	0
  1174     07B8  07A1               	addwf	sprintf@sp+1,f
  1175                           
  1176                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 836:    continue;
  1177     07B9  2FD7               	goto	l1002
  1178     07BA                     l1000:
  1179     07BA  3001               	movlw	1
  1180     07BB  07A2               	addwf	sprintf@f,f
  1181     07BC  30FF               	movlw	-1
  1182     07BD  0722               	addwf	sprintf@f,w
  1183     07BE  0084               	movwf	4
  1184     07BF  120A  118A  200D  120A  118A  	fcall	stringdir
  1185     07C4  00F5               	movwf	sprintf@c
  1186     07C5  00F0               	movwf	??_sprintf
  1187     07C6  01F1               	clrf	??_sprintf+1
  1188                           
  1189                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1190                           ; Switch size 1, requested type "simple"
  1191                           ; Number of cases is 1, Range of values is 0 to 0
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte            4     3 (average)
  1195                           ; direct_byte           11     8 (fixed)
  1196                           ; jumptable            260     6 (fixed)
  1197                           ;	Chosen strategy is simple_byte
  1198     07C7  0871               	movf	??_sprintf+1,w
  1199     07C8  3A00               	xorlw	0	; case 0
  1200     07C9  1903               	skipnz
  1201     07CA  2FCC               	goto	l1194
  1202     07CB  2FAC               	goto	l994
  1203     07CC                     l1194:
  1204                           
  1205                           ; Switch size 1, requested type "simple"
  1206                           ; Number of cases is 3, Range of values is 0 to 115
  1207                           ; switch strategies available:
  1208                           ; Name         Instructions Cycles
  1209                           ; simple_byte           10     6 (average)
  1210                           ; jumptable            260     6 (fixed)
  1211                           ;	Chosen strategy is simple_byte
  1212     07CC  0870               	movf	??_sprintf,w
  1213     07CD  3A00               	xorlw	0	; case 0
  1214     07CE  1903               	skipnz
  1215     07CF  2FE9               	goto	l1004
  1216     07D0  3A63               	xorlw	99	; case 99
  1217     07D1  1903               	skipnz
  1218     07D2  2FA3               	goto	l990
  1219     07D3  3A10               	xorlw	16	; case 115
  1220     07D4  1903               	skipnz
  1221     07D5  2F61               	goto	l976
  1222     07D6  2FAC               	goto	l994
  1223     07D7                     l1002:
  1224                           
  1225                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1226     07D7  3001               	movlw	1
  1227     07D8  1283               	bcf	3,5	;RP0=0, select bank0
  1228     07D9  1303               	bcf	3,6	;RP1=0, select bank0
  1229     07DA  07A2               	addwf	sprintf@f,f
  1230     07DB  30FF               	movlw	-1
  1231     07DC  0722               	addwf	sprintf@f,w
  1232     07DD  0084               	movwf	4
  1233     07DE  120A  118A  200D  120A  118A  	fcall	stringdir
  1234     07E3  00F5               	movwf	sprintf@c
  1235     07E4  0875               	movf	sprintf@c,w
  1236     07E5  1D03               	btfss	3,2
  1237     07E6  2FE8               	goto	u381
  1238     07E7  2FE9               	goto	u380
  1239     07E8                     u381:
  1240     07E8  2F4C               	goto	l968
  1241     07E9                     u380:
  1242     07E9                     l1004:
  1243                           
  1244                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1245     07E9  0820               	movf	sprintf@sp,w
  1246     07EA  0084               	movwf	4
  1247     07EB  1783               	bsf	3,7
  1248     07EC  1C21               	btfss	sprintf@sp+1,0
  1249     07ED  1383               	bcf	3,7
  1250     07EE  0180               	clrf	0
  1251     07EF                     l212:
  1252     07EF  0008               	return
  1253     07F0                     __end_of_sprintf:
  1254                           
  1255                           	psect	text3
  1256     04D6                     __ptext3:	
  1257 ;; *************** function _UART_write_text *****************
  1258 ;; Defined at:
  1259 ;;		line 41 in file "./uart.h"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;  text            2    1[COMMON] PTR unsigned char 
  1262 ;;		 -> main@buffer_116(64), main@buffer(64), 
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;  i               2    6[COMMON] int 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1269 ;; Tracked objects:
  1270 ;;		On entry : 0/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1274 ;;      Params:         2       0       0       0       0
  1275 ;;      Locals:         2       0       0       0       0
  1276 ;;      Temps:          3       0       0       0       0
  1277 ;;      Totals:         7       0       0       0       0
  1278 ;;Total ram usage:        7 bytes
  1279 ;; Hardware stack levels used: 1
  1280 ;; Hardware stack levels required when called: 1
  1281 ;; This function calls:
  1282 ;;		_UART_write
  1283 ;; This function is called by:
  1284 ;;		_main
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288     04D6                     _UART_write_text:	
  1289                           ;psect for function _UART_write_text
  1290                           
  1291     04D6                     l1070:	
  1292                           ;incstack = 0
  1293                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1294                           
  1295                           
  1296                           ;./uart.h: 41:  void UART_write_text(char *text);./uart.h: 42:  {;./uart.h: 43:   for (i
      +                          nt i = 0; text[i] != '\0'; i++)
  1297     04D6  01F6               	clrf	UART_write_text@i
  1298     04D7  01F7               	clrf	UART_write_text@i+1
  1299     04D8  2CF6               	goto	l1076
  1300     04D9                     l1072:
  1301                           
  1302                           ;./uart.h: 44:    UART_write(text[i]);
  1303     04D9  0876               	movf	UART_write_text@i,w
  1304     04DA  0771               	addwf	UART_write_text@text,w
  1305     04DB  00F4               	movwf	??_UART_write_text+1
  1306     04DC  0872               	movf	UART_write_text@text+1,w
  1307     04DD  00F3               	movwf	??_UART_write_text
  1308     04DE  1803               	skipnc
  1309     04DF  0AF3               	incf	??_UART_write_text,f
  1310     04E0  1FF6               	btfss	UART_write_text@i,7
  1311     04E1  2CE3               	goto	u520
  1312     04E2  03F3               	decf	??_UART_write_text,f
  1313     04E3                     u520:
  1314     04E3  0873               	movf	??_UART_write_text,w
  1315     04E4  00F5               	movwf	??_UART_write_text+2
  1316     04E5  0874               	movf	??_UART_write_text+1,w
  1317     04E6  0084               	movwf	4
  1318     04E7  1783               	bsf	3,7
  1319     04E8  1C75               	btfss	??_UART_write_text+2,0
  1320     04E9  1383               	bcf	3,7
  1321     04EA  0800               	movf	0,w
  1322     04EB  120A  118A  24CA  120A  118A  	fcall	_UART_write
  1323     04F0                     l1074:
  1324     04F0  3001               	movlw	1
  1325     04F1  07F6               	addwf	UART_write_text@i,f
  1326     04F2  1803               	skipnc
  1327     04F3  0AF7               	incf	UART_write_text@i+1,f
  1328     04F4  3000               	movlw	0
  1329     04F5  07F7               	addwf	UART_write_text@i+1,f
  1330     04F6                     l1076:
  1331     04F6  0876               	movf	UART_write_text@i,w
  1332     04F7  0771               	addwf	UART_write_text@text,w
  1333     04F8  00F4               	movwf	??_UART_write_text+1
  1334     04F9  0872               	movf	UART_write_text@text+1,w
  1335     04FA  00F3               	movwf	??_UART_write_text
  1336     04FB  1803               	skipnc
  1337     04FC  0AF3               	incf	??_UART_write_text,f
  1338     04FD  1FF6               	btfss	UART_write_text@i,7
  1339     04FE  2D00               	goto	u530
  1340     04FF  03F3               	decf	??_UART_write_text,f
  1341     0500                     u530:
  1342     0500  0873               	movf	??_UART_write_text,w
  1343     0501  00F5               	movwf	??_UART_write_text+2
  1344     0502  0874               	movf	??_UART_write_text+1,w
  1345     0503  0084               	movwf	4
  1346     0504  1783               	bsf	3,7
  1347     0505  1C75               	btfss	??_UART_write_text+2,0
  1348     0506  1383               	bcf	3,7
  1349     0507  0800               	movf	0,w
  1350     0508  1D03               	btfss	3,2
  1351     0509  2D0B               	goto	u541
  1352     050A  2D0C               	goto	u540
  1353     050B                     u541:
  1354     050B  2CD9               	goto	l1072
  1355     050C                     u540:
  1356     050C                     l49:
  1357     050C  0008               	return
  1358     050D                     __end_of_UART_write_text:
  1359                           
  1360                           	psect	text4
  1361     04CA                     __ptext4:	
  1362 ;; *************** function _UART_write *****************
  1363 ;; Defined at:
  1364 ;;		line 33 in file "./uart.h"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  data            1    wreg     unsigned char 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  data            1    0[COMMON] unsigned char 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      void 
  1371 ;; Registers used:
  1372 ;;		wreg
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1378 ;;      Params:         0       0       0       0       0
  1379 ;;      Locals:         1       0       0       0       0
  1380 ;;      Temps:          0       0       0       0       0
  1381 ;;      Totals:         1       0       0       0       0
  1382 ;;Total ram usage:        1 bytes
  1383 ;; Hardware stack levels used: 1
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_UART_write_text
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391     04CA                     _UART_write:	
  1392                           ;psect for function _UART_write
  1393                           
  1394                           
  1395                           ;incstack = 0
  1396                           ; Regs used in _UART_write: [wreg]
  1397                           ;UART_write@data stored from wreg
  1398     04CA  00F0               	movwf	UART_write@data
  1399     04CB                     l962:
  1400     04CB                     l40:	
  1401                           ;./uart.h: 36:    ;
  1402                           
  1403                           
  1404                           ;./uart.h: 35:   while (!TRMT)
  1405     04CB  1683               	bsf	3,5	;RP0=1, select bank1
  1406     04CC  1303               	bcf	3,6	;RP1=0, select bank1
  1407     04CD  1C98               	btfss	24,1	;volatile
  1408     04CE  2CD0               	goto	u341
  1409     04CF  2CD1               	goto	u340
  1410     04D0                     u341:
  1411     04D0  2CCB               	goto	l40
  1412     04D1                     u340:
  1413     04D1                     l964:
  1414                           
  1415                           ;./uart.h: 37:   TXREG = data;
  1416     04D1  0870               	movf	UART_write@data,w
  1417     04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1418     04D3  1303               	bcf	3,6	;RP1=0, select bank0
  1419     04D4  0099               	movwf	25	;volatile
  1420     04D5                     l43:
  1421     04D5  0008               	return
  1422     04D6                     __end_of_UART_write:
  1423                           
  1424                           	psect	text5
  1425     050D                     __ptext5:	
  1426 ;; *************** function _UART_init *****************
  1427 ;; Defined at:
  1428 ;;		line 19 in file "./uart.h"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  baudrate        4    6[BANK0 ] const long 
  1431 ;;  _XTAL_FREQ      4   10[BANK0 ] long 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;		None
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, status,2, status,0, pclath, cstack
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1443 ;;      Params:         0       8       0       0       0
  1444 ;;      Locals:         0       0       0       0       0
  1445 ;;      Temps:          0      12       0       0       0
  1446 ;;      Totals:         0      20       0       0       0
  1447 ;;Total ram usage:       20 bytes
  1448 ;; Hardware stack levels used: 1
  1449 ;; Hardware stack levels required when called: 1
  1450 ;; This function calls:
  1451 ;;		___aldiv
  1452 ;; This function is called by:
  1453 ;;		_main
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457     050D                     _UART_init:	
  1458                           ;psect for function _UART_init
  1459                           
  1460     050D                     l1054:	
  1461                           ;incstack = 0
  1462                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  1463                           
  1464                           
  1465                           ;./uart.h: 19:  void UART_init(const long int baudrate, long _XTAL_FREQ);./uart.h: 20:  
      +                          {;./uart.h: 21:   BRGH = 1;
  1466     050D  1683               	bsf	3,5	;RP0=1, select bank1
  1467     050E  1303               	bcf	3,6	;RP1=0, select bank1
  1468     050F  1518               	bsf	24,2	;volatile
  1469     0510                     l1056:
  1470                           
  1471                           ;./uart.h: 22:   SPBRG = (_XTAL_FREQ - baudrate * 16) / (baudrate * 16);
  1472     0510  1283               	bcf	3,5	;RP0=0, select bank0
  1473     0511  1303               	bcf	3,6	;RP1=0, select bank0
  1474     0512  0826               	movf	UART_init@baudrate,w
  1475     0513  00AE               	movwf	??_UART_init
  1476     0514  0827               	movf	UART_init@baudrate+1,w
  1477     0515  00AF               	movwf	??_UART_init+1
  1478     0516  0828               	movf	UART_init@baudrate+2,w
  1479     0517  00B0               	movwf	??_UART_init+2
  1480     0518  0829               	movf	UART_init@baudrate+3,w
  1481     0519  00B1               	movwf	??_UART_init+3
  1482     051A  3004               	movlw	4
  1483     051B                     u495:
  1484     051B  1003               	clrc
  1485     051C  0DAE               	rlf	??_UART_init,f
  1486     051D  0DAF               	rlf	??_UART_init+1,f
  1487     051E  0DB0               	rlf	??_UART_init+2,f
  1488     051F  0DB1               	rlf	??_UART_init+3,f
  1489     0520                     u490:
  1490     0520  3EFF               	addlw	-1
  1491     0521  1D03               	skipz
  1492     0522  2D1B               	goto	u495
  1493     0523  0831               	movf	??_UART_init+3,w
  1494     0524  00F3               	movwf	___aldiv@divisor+3
  1495     0525  0830               	movf	??_UART_init+2,w
  1496     0526  00F2               	movwf	___aldiv@divisor+2
  1497     0527  082F               	movf	??_UART_init+1,w
  1498     0528  00F1               	movwf	___aldiv@divisor+1
  1499     0529  082E               	movf	??_UART_init,w
  1500     052A  00F0               	movwf	___aldiv@divisor
  1501     052B  0826               	movf	UART_init@baudrate,w
  1502     052C  00B2               	movwf	??_UART_init+4
  1503     052D  0827               	movf	UART_init@baudrate+1,w
  1504     052E  00B3               	movwf	??_UART_init+5
  1505     052F  0828               	movf	UART_init@baudrate+2,w
  1506     0530  00B4               	movwf	??_UART_init+6
  1507     0531  0829               	movf	UART_init@baudrate+3,w
  1508     0532  00B5               	movwf	??_UART_init+7
  1509     0533  3004               	movlw	4
  1510     0534                     u505:
  1511     0534  1003               	clrc
  1512     0535  0DB2               	rlf	??_UART_init+4,f
  1513     0536  0DB3               	rlf	??_UART_init+5,f
  1514     0537  0DB4               	rlf	??_UART_init+6,f
  1515     0538  0DB5               	rlf	??_UART_init+7,f
  1516     0539                     u500:
  1517     0539  3EFF               	addlw	-1
  1518     053A  1D03               	skipz
  1519     053B  2D34               	goto	u505
  1520     053C  082A               	movf	UART_init@_XTAL_FREQ,w
  1521     053D  00B6               	movwf	??_UART_init+8
  1522     053E  082B               	movf	UART_init@_XTAL_FREQ+1,w
  1523     053F  00B7               	movwf	??_UART_init+9
  1524     0540  082C               	movf	UART_init@_XTAL_FREQ+2,w
  1525     0541  00B8               	movwf	??_UART_init+10
  1526     0542  082D               	movf	UART_init@_XTAL_FREQ+3,w
  1527     0543  00B9               	movwf	??_UART_init+11
  1528     0544  0832               	movf	??_UART_init+4,w
  1529     0545  02B6               	subwf	??_UART_init+8,f
  1530     0546  0833               	movf	??_UART_init+5,w
  1531     0547  1C03               	skipc
  1532     0548  0F33               	incfsz	??_UART_init+5,w
  1533     0549  2D4B               	goto	u511
  1534     054A  2D4C               	goto	u512
  1535     054B                     u511:
  1536     054B  02B7               	subwf	??_UART_init+9,f
  1537     054C                     u512:
  1538     054C  0834               	movf	??_UART_init+6,w
  1539     054D  1C03               	skipc
  1540     054E  0F34               	incfsz	??_UART_init+6,w
  1541     054F  2D51               	goto	u513
  1542     0550  2D52               	goto	u514
  1543     0551                     u513:
  1544     0551  02B8               	subwf	??_UART_init+10,f
  1545     0552                     u514:
  1546     0552  0835               	movf	??_UART_init+7,w
  1547     0553  1C03               	skipc
  1548     0554  0F35               	incfsz	??_UART_init+7,w
  1549     0555  2D57               	goto	u515
  1550     0556  2D58               	goto	u516
  1551     0557                     u515:
  1552     0557  02B9               	subwf	??_UART_init+11,f
  1553     0558                     u516:
  1554     0558  0839               	movf	??_UART_init+11,w
  1555     0559  00F7               	movwf	___aldiv@dividend+3
  1556     055A  0838               	movf	??_UART_init+10,w
  1557     055B  00F6               	movwf	___aldiv@dividend+2
  1558     055C  0837               	movf	??_UART_init+9,w
  1559     055D  00F5               	movwf	___aldiv@dividend+1
  1560     055E  0836               	movf	??_UART_init+8,w
  1561     055F  00F4               	movwf	___aldiv@dividend
  1562     0560  120A  118A  26AC  120A  118A  	fcall	___aldiv
  1563     0565  0870               	movf	?___aldiv,w
  1564     0566  1683               	bsf	3,5	;RP0=1, select bank1
  1565     0567  1303               	bcf	3,6	;RP1=0, select bank1
  1566     0568  0099               	movwf	25	;volatile
  1567     0569                     l1058:
  1568                           
  1569                           ;./uart.h: 23:   SYNC = 0;
  1570     0569  1218               	bcf	24,4	;volatile
  1571     056A                     l1060:
  1572                           
  1573                           ;./uart.h: 24:   SPEN = 1;
  1574     056A  1283               	bcf	3,5	;RP0=0, select bank0
  1575     056B  1303               	bcf	3,6	;RP1=0, select bank0
  1576     056C  1798               	bsf	24,7	;volatile
  1577     056D                     l1062:
  1578                           
  1579                           ;./uart.h: 25:   TRISC7 = 1;
  1580     056D  1683               	bsf	3,5	;RP0=1, select bank1
  1581     056E  1303               	bcf	3,6	;RP1=0, select bank1
  1582     056F  1787               	bsf	7,7	;volatile
  1583     0570                     l1064:
  1584                           
  1585                           ;./uart.h: 26:   TRISC6 = 1;
  1586     0570  1707               	bsf	7,6	;volatile
  1587     0571                     l1066:
  1588                           
  1589                           ;./uart.h: 27:   CREN = 1;
  1590     0571  1283               	bcf	3,5	;RP0=0, select bank0
  1591     0572  1303               	bcf	3,6	;RP1=0, select bank0
  1592     0573  1618               	bsf	24,4	;volatile
  1593     0574                     l1068:
  1594                           
  1595                           ;./uart.h: 28:   TXEN = 1;
  1596     0574  1683               	bsf	3,5	;RP0=1, select bank1
  1597     0575  1303               	bcf	3,6	;RP1=0, select bank1
  1598     0576  1698               	bsf	24,5	;volatile
  1599     0577                     l37:
  1600     0577  0008               	return
  1601     0578                     __end_of_UART_init:
  1602                           
  1603                           	psect	text6
  1604     06AC                     __ptext6:	
  1605 ;; *************** function ___aldiv *****************
  1606 ;; Defined at:
  1607 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  divisor         4    0[COMMON] long 
  1610 ;;  dividend        4    4[COMMON] long 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  quotient        4    2[BANK0 ] long 
  1613 ;;  sign            1    1[BANK0 ] unsigned char 
  1614 ;;  counter         1    0[BANK0 ] unsigned char 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  4    0[COMMON] long 
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, status,0
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         8       0       0       0       0
  1625 ;;      Locals:         0       6       0       0       0
  1626 ;;      Temps:          1       0       0       0       0
  1627 ;;      Totals:         9       6       0       0       0
  1628 ;;Total ram usage:       15 bytes
  1629 ;; Hardware stack levels used: 1
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		_UART_init
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637     06AC                     ___aldiv:	
  1638                           ;psect for function ___aldiv
  1639                           
  1640     06AC                     l1014:	
  1641                           ;incstack = 0
  1642                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1643                           
  1644     06AC  1283               	bcf	3,5	;RP0=0, select bank0
  1645     06AD  1303               	bcf	3,6	;RP1=0, select bank0
  1646     06AE  01A1               	clrf	___aldiv@sign
  1647     06AF                     l1016:
  1648     06AF  1FF3               	btfss	___aldiv@divisor+3,7
  1649     06B0  2EB2               	goto	u391
  1650     06B1  2EB3               	goto	u390
  1651     06B2                     u391:
  1652     06B2  2EC0               	goto	l281
  1653     06B3                     u390:
  1654     06B3                     l1018:
  1655     06B3  09F0               	comf	___aldiv@divisor,f
  1656     06B4  09F1               	comf	___aldiv@divisor+1,f
  1657     06B5  09F2               	comf	___aldiv@divisor+2,f
  1658     06B6  09F3               	comf	___aldiv@divisor+3,f
  1659     06B7  0AF0               	incf	___aldiv@divisor,f
  1660     06B8  1903               	skipnz
  1661     06B9  0AF1               	incf	___aldiv@divisor+1,f
  1662     06BA  1903               	skipnz
  1663     06BB  0AF2               	incf	___aldiv@divisor+2,f
  1664     06BC  1903               	skipnz
  1665     06BD  0AF3               	incf	___aldiv@divisor+3,f
  1666     06BE  01A1               	clrf	___aldiv@sign
  1667     06BF  0AA1               	incf	___aldiv@sign,f
  1668     06C0                     l281:
  1669     06C0  1FF7               	btfss	___aldiv@dividend+3,7
  1670     06C1  2EC3               	goto	u401
  1671     06C2  2EC4               	goto	u400
  1672     06C3                     u401:
  1673     06C3  2ED3               	goto	l1024
  1674     06C4                     u400:
  1675     06C4                     l1020:
  1676     06C4  09F4               	comf	___aldiv@dividend,f
  1677     06C5  09F5               	comf	___aldiv@dividend+1,f
  1678     06C6  09F6               	comf	___aldiv@dividend+2,f
  1679     06C7  09F7               	comf	___aldiv@dividend+3,f
  1680     06C8  0AF4               	incf	___aldiv@dividend,f
  1681     06C9  1903               	skipnz
  1682     06CA  0AF5               	incf	___aldiv@dividend+1,f
  1683     06CB  1903               	skipnz
  1684     06CC  0AF6               	incf	___aldiv@dividend+2,f
  1685     06CD  1903               	skipnz
  1686     06CE  0AF7               	incf	___aldiv@dividend+3,f
  1687     06CF                     l1022:
  1688     06CF  3001               	movlw	1
  1689     06D0  00F8               	movwf	??___aldiv
  1690     06D1  0878               	movf	??___aldiv,w
  1691     06D2  06A1               	xorwf	___aldiv@sign,f
  1692     06D3                     l1024:
  1693     06D3  3000               	movlw	0
  1694     06D4  00A5               	movwf	___aldiv@quotient+3
  1695     06D5  3000               	movlw	0
  1696     06D6  00A4               	movwf	___aldiv@quotient+2
  1697     06D7  3000               	movlw	0
  1698     06D8  00A3               	movwf	___aldiv@quotient+1
  1699     06D9  3000               	movlw	0
  1700     06DA  00A2               	movwf	___aldiv@quotient
  1701     06DB                     l1026:
  1702     06DB  0873               	movf	___aldiv@divisor+3,w
  1703     06DC  0472               	iorwf	___aldiv@divisor+2,w
  1704     06DD  0471               	iorwf	___aldiv@divisor+1,w
  1705     06DE  0470               	iorwf	___aldiv@divisor,w
  1706     06DF  1903               	skipnz
  1707     06E0  2EE2               	goto	u411
  1708     06E1  2EE3               	goto	u410
  1709     06E2                     u411:
  1710     06E2  2F30               	goto	l1046
  1711     06E3                     u410:
  1712     06E3                     l1028:
  1713     06E3  01A0               	clrf	___aldiv@counter
  1714     06E4  0AA0               	incf	___aldiv@counter,f
  1715     06E5  2EF3               	goto	l1032
  1716     06E6                     l1030:
  1717     06E6  3001               	movlw	1
  1718     06E7  00F8               	movwf	??___aldiv
  1719     06E8                     u425:
  1720     06E8  1003               	clrc
  1721     06E9  0DF0               	rlf	___aldiv@divisor,f
  1722     06EA  0DF1               	rlf	___aldiv@divisor+1,f
  1723     06EB  0DF2               	rlf	___aldiv@divisor+2,f
  1724     06EC  0DF3               	rlf	___aldiv@divisor+3,f
  1725     06ED  0BF8               	decfsz	??___aldiv,f
  1726     06EE  2EE8               	goto	u425
  1727     06EF  3001               	movlw	1
  1728     06F0  00F8               	movwf	??___aldiv
  1729     06F1  0878               	movf	??___aldiv,w
  1730     06F2  07A0               	addwf	___aldiv@counter,f
  1731     06F3                     l1032:
  1732     06F3  1FF3               	btfss	___aldiv@divisor+3,7
  1733     06F4  2EF6               	goto	u431
  1734     06F5  2EF7               	goto	u430
  1735     06F6                     u431:
  1736     06F6  2EE6               	goto	l1030
  1737     06F7                     u430:
  1738     06F7                     l1034:
  1739     06F7  3001               	movlw	1
  1740     06F8  00F8               	movwf	??___aldiv
  1741     06F9                     u445:
  1742     06F9  1003               	clrc
  1743     06FA  0DA2               	rlf	___aldiv@quotient,f
  1744     06FB  0DA3               	rlf	___aldiv@quotient+1,f
  1745     06FC  0DA4               	rlf	___aldiv@quotient+2,f
  1746     06FD  0DA5               	rlf	___aldiv@quotient+3,f
  1747     06FE  0BF8               	decfsz	??___aldiv,f
  1748     06FF  2EF9               	goto	u445
  1749     0700                     l1036:
  1750     0700  0873               	movf	___aldiv@divisor+3,w
  1751     0701  0277               	subwf	___aldiv@dividend+3,w
  1752     0702  1D03               	skipz
  1753     0703  2F0E               	goto	u455
  1754     0704  0872               	movf	___aldiv@divisor+2,w
  1755     0705  0276               	subwf	___aldiv@dividend+2,w
  1756     0706  1D03               	skipz
  1757     0707  2F0E               	goto	u455
  1758     0708  0871               	movf	___aldiv@divisor+1,w
  1759     0709  0275               	subwf	___aldiv@dividend+1,w
  1760     070A  1D03               	skipz
  1761     070B  2F0E               	goto	u455
  1762     070C  0870               	movf	___aldiv@divisor,w
  1763     070D  0274               	subwf	___aldiv@dividend,w
  1764     070E                     u455:
  1765     070E  1C03               	skipc
  1766     070F  2F11               	goto	u451
  1767     0710  2F12               	goto	u450
  1768     0711                     u451:
  1769     0711  2F21               	goto	l1042
  1770     0712                     u450:
  1771     0712                     l1038:
  1772     0712  0870               	movf	___aldiv@divisor,w
  1773     0713  02F4               	subwf	___aldiv@dividend,f
  1774     0714  0871               	movf	___aldiv@divisor+1,w
  1775     0715  1C03               	skipc
  1776     0716  0F71               	incfsz	___aldiv@divisor+1,w
  1777     0717  02F5               	subwf	___aldiv@dividend+1,f
  1778     0718  0872               	movf	___aldiv@divisor+2,w
  1779     0719  1C03               	skipc
  1780     071A  0F72               	incfsz	___aldiv@divisor+2,w
  1781     071B  02F6               	subwf	___aldiv@dividend+2,f
  1782     071C  0873               	movf	___aldiv@divisor+3,w
  1783     071D  1C03               	skipc
  1784     071E  0F73               	incfsz	___aldiv@divisor+3,w
  1785     071F  02F7               	subwf	___aldiv@dividend+3,f
  1786     0720                     l1040:
  1787     0720  1422               	bsf	___aldiv@quotient,0
  1788     0721                     l1042:
  1789     0721  3001               	movlw	1
  1790     0722                     u465:
  1791     0722  1003               	clrc
  1792     0723  0CF3               	rrf	___aldiv@divisor+3,f
  1793     0724  0CF2               	rrf	___aldiv@divisor+2,f
  1794     0725  0CF1               	rrf	___aldiv@divisor+1,f
  1795     0726  0CF0               	rrf	___aldiv@divisor,f
  1796     0727  3EFF               	addlw	-1
  1797     0728  1D03               	skipz
  1798     0729  2F22               	goto	u465
  1799     072A                     l1044:
  1800     072A  3001               	movlw	1
  1801     072B  02A0               	subwf	___aldiv@counter,f
  1802     072C  1D03               	btfss	3,2
  1803     072D  2F2F               	goto	u471
  1804     072E  2F30               	goto	u470
  1805     072F                     u471:
  1806     072F  2EF7               	goto	l1034
  1807     0730                     u470:
  1808     0730                     l1046:
  1809     0730  0821               	movf	___aldiv@sign,w
  1810     0731  1903               	btfsc	3,2
  1811     0732  2F34               	goto	u481
  1812     0733  2F35               	goto	u480
  1813     0734                     u481:
  1814     0734  2F40               	goto	l1050
  1815     0735                     u480:
  1816     0735                     l1048:
  1817     0735  09A2               	comf	___aldiv@quotient,f
  1818     0736  09A3               	comf	___aldiv@quotient+1,f
  1819     0737  09A4               	comf	___aldiv@quotient+2,f
  1820     0738  09A5               	comf	___aldiv@quotient+3,f
  1821     0739  0AA2               	incf	___aldiv@quotient,f
  1822     073A  1903               	skipnz
  1823     073B  0AA3               	incf	___aldiv@quotient+1,f
  1824     073C  1903               	skipnz
  1825     073D  0AA4               	incf	___aldiv@quotient+2,f
  1826     073E  1903               	skipnz
  1827     073F  0AA5               	incf	___aldiv@quotient+3,f
  1828     0740                     l1050:
  1829     0740  0825               	movf	___aldiv@quotient+3,w
  1830     0741  00F3               	movwf	?___aldiv+3
  1831     0742  0824               	movf	___aldiv@quotient+2,w
  1832     0743  00F2               	movwf	?___aldiv+2
  1833     0744  0823               	movf	___aldiv@quotient+1,w
  1834     0745  00F1               	movwf	?___aldiv+1
  1835     0746  0822               	movf	___aldiv@quotient,w
  1836     0747  00F0               	movwf	?___aldiv
  1837     0748                     l291:
  1838     0748  0008               	return
  1839     0749                     __end_of___aldiv:
  1840     007E                     btemp	set	126	;btemp
  1841     007E                     wtemp0	set	126
  1842                           
  1843                           	psect	config
  1844                           
  1845                           ;Config register CONFIG1 @ 0x2007
  1846                           ;	Oscillator Selection bits
  1847                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1848                           ;	Watchdog Timer Enable bit
  1849                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1850                           ;	Power-up Timer Enable bit
  1851                           ;	PWRTE = OFF, PWRT disabled
  1852                           ;	RE3/MCLR pin function select bit
  1853                           ;	MCLRE = 0x1, unprogrammed default
  1854                           ;	Code Protection bit
  1855                           ;	CP = OFF, Program memory code protection is disabled
  1856                           ;	Data Code Protection bit
  1857                           ;	CPD = OFF, Data memory code protection is disabled
  1858                           ;	Brown Out Reset Selection bits
  1859                           ;	BOREN = OFF, BOR disabled
  1860                           ;	Internal External Switchover bit
  1861                           ;	IESO = 0x1, unprogrammed default
  1862                           ;	Fail-Safe Clock Monitor Enabled bit
  1863                           ;	FCMEN = 0x1, unprogrammed default
  1864                           ;	Low Voltage Programming Enable bit
  1865                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1866                           ;	In-Circuit Debugger Mode bit
  1867                           ;	DEBUG = 0x1, unprogrammed default
  1868     2007                     	org	8199
  1869     2007  2CF2               	dw	11506
  1870                           
  1871                           ;Config register CONFIG2 @ 0x2008
  1872                           ;	Brown-out Reset Selection bit
  1873                           ;	BOR4V = 0x1, unprogrammed default
  1874                           ;	Flash Program Memory Self Write Enable bits
  1875                           ;	WRT = OFF, Write protection off
  1876     2008                     	org	8200
  1877     2008  3FFF               	dw	16383

Data Sizes:
    Strings     46
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     40      50
    BANK1            80     64      64
    BANK3            96     64      64
    BANK2            96      0       0

Pointer List with Targets:

    main$757	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_3(CODE[13]), STR_2(CODE[8]), STR_1(CODE[18]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_4(CODE[7]), ?_sprintf(BANK0[2]), char_to_binary_string@output(BANK0[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_116(BANK3[64]), main@buffer(BANK1[64]), char_to_binary_string@output(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__char_to_binary_string	PTR unsigned char  size(1) Largest target is 10
		 -> char_to_binary_string@output(BANK0[10]), 

    UART_write_text@text	PTR unsigned char  size(2) Largest target is 64
		 -> main@buffer_116(BANK3[64]), main@buffer(BANK1[64]), 


Critical Paths under _main in COMMON

    _char_to_binary_string->_sprintf
    _UART_write_text->_UART_write
    _UART_init->___aldiv

Critical Paths under _main in BANK0

    _main->_char_to_binary_string
    _char_to_binary_string->_sprintf
    _UART_init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               134   134      0    2767
                                              9 COMMON     2     2      0
                                             36 BANK0      4     4      0
                                              0 BANK1     64    64      0
                                              0 BANK3     64    64      0
                          _UART_init
                    _UART_write_text
              _char_to_binary_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _char_to_binary_string                               17    17      0    1028
                                             19 BANK0     17    17      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             35    16     19     660
                                              0 COMMON     6     6      0
                                              0 BANK0     19     0     19
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      7     5      2     186
                                              1 COMMON     7     5      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                           20    12      8     670
                                              6 BANK0     20    12      8
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_init
     ___aldiv
   _UART_write_text
     _UART_write
   _char_to_binary_string
     _sprintf
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      BD       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     28      32       5       62.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     40      40       7       80.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60     40      40       9       66.7%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      BD      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Apr 17 15:17:44 2023

                             pc 0002                              l40 04CB                              l43 04D5  
                            l37 0577                              l49 050C                              l95 060F  
                            fsr 0004                             l101 0644                             l212 07EF  
                           l205 0794                             l281 06C0                             l291 0748  
                           l962 04CB                             l970 0752                             l964 04D1  
                           l980 076C                             l972 0759                             l990 07A3  
                           l982 0772                             l974 0760                             l966 0749  
                           l992 07A8                             l984 0777                             l976 0761  
                           l968 074C                             l994 07AC                             l986 0788  
                           l978 0768                             l996 07B3                             l988 078E  
                           _RD4 0044                             u400 06C4                             u401 06C3  
                           u410 06E3                             u411 06E2                             u500 0539  
                           u340 04D1                             u341 04D0                             u430 06F7  
                           u350 0752                             u431 06F6                             u511 054B  
                           u351 0751                             u512 054C                             u520 04E3  
                           u360 0772                             u600 05C0                             u425 06E8  
                           u513 0551                             u505 0534                             u361 0771  
                           u601 05BF                             u450 0712                             u514 0552  
                           u530 0500                             u370 07A2                             u610 05CD  
                           u451 0711                             u515 0557                             u371 07A1  
                           u611 05CC                             u516 0558                             u540 050C  
                           u380 07E9                             u620 05DA                             u445 06F9  
                           u541 050B                             u381 07E8                             u621 05D9  
                           u470 0730                             u390 06B3                             u550 057F  
                           u630 064A                             u471 072F                             u455 070E  
                           u391 06B2                             u551 057E                             u631 0649  
                           u480 0735                             u560 058C                             u481 0734  
                           u465 0722                             u561 058B                             u490 0520  
                           u570 0599                             u650 0687                             u571 0598  
                           u651 0686                             u580 05A6                             u644 0662  
                           u581 05A5                             u645 0660                             u590 05B3  
                           u495 051B                             u591 05B2                             u655 0683  
                           u667 064E                             u677 066D                             fsr0 0004  
                           indf 0000                            l1000 07BA                            l1002 07D7  
                          l1020 06C4                            l1004 07E9                            l1100 05AB  
                          l1030 06E6                            l1022 06CF                            l1014 06AC  
                          l1110 05C0                            l1102 05AF                            l1040 0720  
                          l1032 06F3                            l1024 06D3                            l1016 06AF  
                          l1120 05D6                            l1112 05C5                            l1104 05B3  
                          l1050 0740                            l1042 0721                            l1034 06F7  
                          l1026 06DB                            l1018 06B3                            l1122 05DA  
                          l1114 05C9                            l1106 05B8                            l1044 072A  
                          l1036 0700                            l1028 06E3                            l1060 056A  
                          l1124 05DF                            l1116 05CD                            l1108 05BC  
                          l1140 0641                            l1132 0610                            l1038 0712  
                          l1046 0730                            l1062 056D                            l1054 050D  
                          l1070 04D6                            l1126 05E3                            l1118 05D2  
                          l1142 064A                            l1134 0614                            l1048 0735  
                          l1064 0570                            l1056 0510                            l1072 04D9  
                          l1128 060E                            l1080 057F                            l1160 0687  
                          l1152 0658                            l1144 0653                            l1136 062B  
                          l1066 0571                            l1058 0569                            l1074 04F0  
                          l1090 0595                            l1082 0584                            l1162 069F  
                          l1154 0669                            l1146 0656                            l1138 0638  
                          l1068 0574                            l1076 04F6                            l1092 0599  
                          l1084 0588                            l1156 0672                            l1094 059E  
                          l1086 058C                            l1078 057B                            l1158 067A  
                          l1096 05A2                            l1088 0591                            l1194 07CC  
                          l1098 05A6                            STR_1 0013                            STR_2 0032  
                          STR_3 0025                            STR_4 003A                            _BRGH 04C2  
                          _CREN 00C4                            _RCIF 0065                            _SPEN 00C7  
                          _TRMT 04C1                            _TXEN 04C5                            _SYNC 04C4  
                          _main 0610                            btemp 007E                            start 0000  
              UART_write_text@i 0076                 __end_of___aldiv 0749                           ?_main 0070  
                         _RCREG 001A         ??_char_to_binary_string 0076                           _SPBRG 0099  
                         _TXREG 0019                     ?_UART_write 0070                           main@i 0046  
                         pclath 000A                           status 0003                           wtemp0 007E  
               __end_of_sprintf 07F0                 __initialization 07F0                    __end_of_main 06AC  
                        ??_main 0079                          _TRISC6 043E                          _TRISD4 0444  
                        _TRISC7 043F                       ??___aldiv 0078               __end_of_UART_init 0578  
   char_to_binary_string@output 0048                 _UART_write_text 04D6                       ??_sprintf 0070  
       __end_of__initialization 07FC                  __pcstackCOMMON 0070                      __pbssBANK0 0048  
                main@buffer_116 0190                      __pmaintext 0610         __end_of_UART_write_text 050D  
 __end_of_char_to_binary_string 0610                    ??_UART_write 0070                      __stringtab 0003  
                       ___aldiv 06AC              __end_of_UART_write 04D6                         __ptext1 0578  
                       __ptext2 0749                         __ptext3 04D6                         __ptext4 04CA  
                       __ptext5 050D                         __ptext6 06AC                ___aldiv@dividend 0074  
                       _sprintf 0749            end_of_initialization 07FC             UART_init@_XTAL_FREQ 002A  
              ___aldiv@quotient 0022                ?_UART_write_text 0071                       _UART_init 050D  
                    main@buffer 00A0                      ?_UART_init 0026             start_initialization 07F0  
                     ___latbits 0002                   __pcstackBANK0 0020                   __pcstackBANK1 00A0  
                 __pcstackBANK3 0190             UART_write_text@text 0071        _char_to_binary_string$90 0035  
      _char_to_binary_string$91 0037        _char_to_binary_string$92 0039        _char_to_binary_string$93 003B  
      _char_to_binary_string$94 003D        _char_to_binary_string$95 003F        _char_to_binary_string$96 0041  
      _char_to_binary_string$89 0033                        ?___aldiv 0070                       __pstrings 0003  
                   ??_UART_init 002E                        ?_sprintf 0020           _char_to_binary_string 0578  
               ___aldiv@divisor 0070                 ___aldiv@counter 0020  char_to_binary_string@character 0043  
                   __stringbase 0012                  UART_write@data 0070              __end_of__stringtab 0013  
                      _main$757 0044          ?_char_to_binary_string 0070                        main@data 0045  
                     sprintf@ap 0072                       sprintf@cp 0073                       sprintf@sp 0020  
             UART_init@baudrate 0026                       stringcode 000D                      _OSCCONbits 008F  
                      sprintf@c 0075                        sprintf@f 0022                        stringdir 000D  
                      stringtab 0003                    ___aldiv@sign 0021                      _UART_write 04CA  
             ??_UART_write_text 0073  
