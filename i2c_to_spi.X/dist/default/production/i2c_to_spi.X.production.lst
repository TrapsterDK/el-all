

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Apr 21 10:34:21 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x5E,2
    16     0000                     
    17                           ; Version 2.40
    18                           ; Generated 04/07/2022 GMT
    19                           ; 
    20                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F675 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     000A                     	;# 
    59     000B                     	;# 
    60     000C                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0019                     	;# 
    66     001E                     	;# 
    67     001F                     	;# 
    68     0081                     	;# 
    69     0085                     	;# 
    70     008C                     	;# 
    71     008E                     	;# 
    72     0090                     	;# 
    73     0095                     	;# 
    74     0096                     	;# 
    75     0096                     	;# 
    76     0099                     	;# 
    77     009A                     	;# 
    78     009A                     	;# 
    79     009B                     	;# 
    80     009C                     	;# 
    81     009D                     	;# 
    82     009E                     	;# 
    83     009F                     	;# 
    84     0000                     	;# 
    85     0001                     	;# 
    86     0002                     	;# 
    87     0003                     	;# 
    88     0004                     	;# 
    89     0005                     	;# 
    90     000A                     	;# 
    91     000B                     	;# 
    92     000C                     	;# 
    93     000E                     	;# 
    94     000E                     	;# 
    95     000F                     	;# 
    96     0010                     	;# 
    97     0019                     	;# 
    98     001E                     	;# 
    99     001F                     	;# 
   100     0081                     	;# 
   101     0085                     	;# 
   102     008C                     	;# 
   103     008E                     	;# 
   104     0090                     	;# 
   105     0095                     	;# 
   106     0096                     	;# 
   107     0096                     	;# 
   108     0099                     	;# 
   109     009A                     	;# 
   110     009A                     	;# 
   111     009B                     	;# 
   112     009C                     	;# 
   113     009D                     	;# 
   114     009E                     	;# 
   115     009F                     	;# 
   116     0005                     _GPIO	set	5
   117     0019                     _CMCON	set	25
   118     001F                     _ADCON0	set	31
   119     000B                     _INTCONbits	set	11
   120     002B                     _GPIO3	set	43
   121     002C                     _GPIO4	set	44
   122     0029                     _GPIO1	set	41
   123     002A                     _GPIO2	set	42
   124     0028                     _GPIO0	set	40
   125     0081                     _OPTION_REGbits	set	129
   126     0085                     _TRISIO	set	133
   127     0099                     _VRCON	set	153
   128     009F                     _ANSEL	set	159
   129     042B                     _TRISIO3	set	1067
   130     042C                     _TRISIO4	set	1068
   131     0429                     _TRISIO1	set	1065
   132     042A                     _TRISIO2	set	1066
   133     0428                     _TRISIO0	set	1064
   134                           
   135                           	psect	cinit
   136     000C                     start_initialization:	
   137                           ; #config settings
   138                           
   139     000C                     __initialization:
   140     000C                     end_of_initialization:	
   141                           ;End of C runtime variable initialization code
   142                           
   143     000C                     __end_of__initialization:
   144     000C  0183               	clrf	3
   145     000D  2899               	ljmp	_main	;jump to C main() function
   146                           
   147                           	psect	cstackCOMMON
   148     0000                     __pcstackCOMMON:
   149     0000                     ??_SPI_init_master:
   150     0000                     ??_main:	
   151                           ; 1 bytes @ 0x0
   152                           
   153                           
   154                           	psect	cstackBANK0
   155     0020                     __pcstackBANK0:	
   156                           ; 1 bytes @ 0x0
   157                           
   158     0020                     ?_I2C_Write:
   159     0020                     ??_I2C_Write:	
   160                           ; 1 bytes @ 0x0
   161                           
   162     0020                     ?_I2C_Read:	
   163                           ; 1 bytes @ 0x0
   164                           
   165     0020                     ??_I2C_Read:	
   166                           ; 1 bytes @ 0x0
   167                           
   168     0020                     ?_SPI_init_master:	
   169                           ; 1 bytes @ 0x0
   170                           
   171     0020                     ?_SPI_write:	
   172                           ; 1 bytes @ 0x0
   173                           
   174     0020                     ??_SPI_write:	
   175                           ; 1 bytes @ 0x0
   176                           
   177     0020                     ?_ISR:	
   178                           ; 1 bytes @ 0x0
   179                           
   180     0020                     ?_main:	
   181                           ; 1 bytes @ 0x0
   182                           
   183                           
   184                           ; 1 bytes @ 0x0
   185     0020                     	ds	1
   186     0021                     I2C_Write@data:
   187     0021                     I2C_Read@ack:	
   188                           ; 1 bytes @ 0x1
   189                           
   190     0021                     SPI_write@data:	
   191                           ; 1 bytes @ 0x1
   192                           
   193                           
   194                           ; 1 bytes @ 0x1
   195     0021                     	ds	1
   196     0022                     I2C_Write@i:
   197     0022                     I2C_Read@data:	
   198                           ; 1 bytes @ 0x2
   199                           
   200     0022                     SPI_write@read:	
   201                           ; 1 bytes @ 0x2
   202                           
   203                           
   204                           ; 1 bytes @ 0x2
   205     0022                     	ds	1
   206     0023                     I2C_Read@i:
   207     0023                     SPI_write@i:	
   208                           ; 1 bytes @ 0x3
   209                           
   210                           
   211                           ; 1 bytes @ 0x3
   212     0023                     	ds	1
   213     0024                     ??_ISR:
   214                           
   215                           ; 1 bytes @ 0x4
   216     0024                     	ds	2
   217     0026                     ISR@data:
   218                           
   219                           ; 1 bytes @ 0x6
   220     0026                     	ds	1
   221     0027                     ISR@resp:
   222                           
   223                           ; 1 bytes @ 0x7
   224     0027                     	ds	1
   225                           
   226                           	psect	maintext
   227     0099                     __pmaintext:	
   228 ;;
   229 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   230 ;;
   231 ;; *************** function _main *****************
   232 ;; Defined at:
   233 ;;		line 32 in file "main.c"
   234 ;; Parameters:    Size  Location     Type
   235 ;;		None
   236 ;; Auto vars:     Size  Location     Type
   237 ;;		None
   238 ;; Return value:  Size  Location     Type
   239 ;;                  1    wreg      void 
   240 ;; Registers used:
   241 ;;		wreg, status,2, status,0, pclath, cstack
   242 ;; Tracked objects:
   243 ;;		On entry : B00/0
   244 ;;		On exit  : 0/0
   245 ;;		Unchanged: 0/0
   246 ;; Data sizes:     COMMON   BANK0
   247 ;;      Params:         0       0
   248 ;;      Locals:         0       0
   249 ;;      Temps:          0       0
   250 ;;      Totals:         0       0
   251 ;;Total ram usage:        0 bytes
   252 ;; Hardware stack levels required when called: 3
   253 ;; This function calls:
   254 ;;		_SPI_init_master
   255 ;; This function is called by:
   256 ;;		Startup code after reset
   257 ;; This function uses a non-reentrant model
   258 ;;
   259                           
   260     0099                     _main:	
   261                           ;psect for function _main
   262                           
   263     0099                     l889:	
   264                           ;incstack = 0
   265                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   266                           
   267                           
   268                           ;main.c: 34:     ANSEL = 0;
   269     0099  1683               	bsf	3,5	;RP0=1, select bank1
   270     009A  019F               	clrf	31	;volatile
   271                           
   272                           ;main.c: 35:     ADCON0 = 0;
   273     009B  1283               	bcf	3,5	;RP0=0, select bank0
   274     009C  019F               	clrf	31	;volatile
   275     009D                     l891:
   276                           
   277                           ;main.c: 36:     CMCON = 0x07;
   278     009D  3007               	movlw	7
   279     009E  0099               	movwf	25	;volatile
   280     009F                     l893:
   281                           
   282                           ;main.c: 37:     VRCON = 0;
   283     009F  1683               	bsf	3,5	;RP0=1, select bank1
   284     00A0  0199               	clrf	25	;volatile
   285     00A1                     l895:
   286                           
   287                           ;main.c: 39:     TRISIO = 0;
   288     00A1  0185               	clrf	5	;volatile
   289     00A2                     l897:
   290                           
   291                           ;main.c: 40:     GPIO = 0;
   292     00A2  1283               	bcf	3,5	;RP0=0, select bank0
   293     00A3  0185               	clrf	5	;volatile
   294     00A4                     l899:
   295                           
   296                           ;main.c: 42:     SPI_init_master();
   297     00A4  20AA               	fcall	_SPI_init_master
   298     00A5                     l901:
   299                           
   300                           ;main.c: 44:     INTCONbits.GPIE = 1;
   301     00A5  158B               	bsf	11,3	;volatile
   302     00A6                     l903:
   303                           
   304                           ;main.c: 45:     OPTION_REGbits.INTEDG = 0;
   305     00A6  1683               	bsf	3,5	;RP0=1, select bank1
   306     00A7  1301               	bcf	1,6	;volatile
   307     00A8                     l88:	
   308                           ;main.c: 47:     while (1)
   309                           
   310     00A8                     l89:	
   311                           ;main.c: 48:     {;main.c: 49:     }
   312                           
   313     00A8  28A8               	goto	l88
   314     00A9  280B               	ljmp	start
   315     00AA                     __end_of_main:
   316                           
   317                           	psect	text1
   318     00AA                     __ptext1:	
   319 ;; *************** function _SPI_init_master *****************
   320 ;; Defined at:
   321 ;;		line 28 in file "./softwarespi.h"
   322 ;; Parameters:    Size  Location     Type
   323 ;;		None
   324 ;; Auto vars:     Size  Location     Type
   325 ;;		None
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		None
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMMON   BANK0
   335 ;;      Params:         0       0
   336 ;;      Locals:         0       0
   337 ;;      Temps:          0       0
   338 ;;      Totals:         0       0
   339 ;;Total ram usage:        0 bytes
   340 ;; Hardware stack levels used: 1
   341 ;; Hardware stack levels required when called: 2
   342 ;; This function calls:
   343 ;;		Nothing
   344 ;; This function is called by:
   345 ;;		_main
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349     00AA                     _SPI_init_master:	
   350                           ;psect for function _SPI_init_master
   351                           
   352     00AA                     l859:	
   353                           ;incstack = 0
   354                           ; Regs used in _SPI_init_master: []
   355                           
   356                           
   357                           ;./softwarespi.h: 30:         TRISIO1 = 0;
   358     00AA  1683               	bsf	3,5	;RP0=1, select bank1
   359     00AB  1085               	bcf	5,1	;volatile
   360                           
   361                           ;./softwarespi.h: 31:         TRISIO4 = 0;
   362     00AC  1205               	bcf	5,4	;volatile
   363                           
   364                           ;./softwarespi.h: 32:         TRISIO3 = 1;
   365     00AD  1585               	bsf	5,3	;volatile
   366                           
   367                           ;./softwarespi.h: 35:         GPIO1 = 0;
   368     00AE  1283               	bcf	3,5	;RP0=0, select bank0
   369     00AF  1085               	bcf	5,1	;volatile
   370                           
   371                           ;./softwarespi.h: 36:         GPIO4 = 0;
   372     00B0  1205               	bcf	5,4	;volatile
   373     00B1                     l70:
   374     00B1  0008               	return
   375     00B2                     __end_of_SPI_init_master:
   376                           
   377                           	psect	text2
   378     0082                     __ptext2:	
   379 ;; *************** function _ISR *****************
   380 ;; Defined at:
   381 ;;		line 15 in file "main.c"
   382 ;; Parameters:    Size  Location     Type
   383 ;;		None
   384 ;; Auto vars:     Size  Location     Type
   385 ;;  resp            1    7[BANK0 ] unsigned char 
   386 ;;  data            1    6[BANK0 ] unsigned char 
   387 ;; Return value:  Size  Location     Type
   388 ;;                  1    wreg      void 
   389 ;; Registers used:
   390 ;;		wreg, status,2, status,0, pclath, cstack
   391 ;; Tracked objects:
   392 ;;		On entry : 0/0
   393 ;;		On exit  : 0/0
   394 ;;		Unchanged: 0/0
   395 ;; Data sizes:     COMMON   BANK0
   396 ;;      Params:         0       0
   397 ;;      Locals:         0       2
   398 ;;      Temps:          0       2
   399 ;;      Totals:         0       4
   400 ;;Total ram usage:        4 bytes
   401 ;; Hardware stack levels used: 1
   402 ;; Hardware stack levels required when called: 1
   403 ;; This function calls:
   404 ;;		_I2C_Read
   405 ;;		_I2C_Write
   406 ;;		_SPI_write
   407 ;; This function is called by:
   408 ;;		Interrupt level 1
   409 ;; This function uses a non-reentrant model
   410 ;;
   411                           
   412     0082                     _ISR:	
   413                           ;psect for function _ISR
   414                           
   415     0082                     i1l883:
   416                           
   417                           ;main.c: 17:     if (INTCONbits.GPIF)
   418     0082  1C0B               	btfss	11,0	;volatile
   419     0083  2885               	goto	u16_21
   420     0084  2886               	goto	u16_20
   421     0085                     u16_21:
   422     0085  2891               	goto	i1l83
   423     0086                     u16_20:
   424     0086                     i1l885:
   425                           
   426                           ;main.c: 18:     {;main.c: 20:         uint8_t data = I2C_Read(0);
   427     0086  3000               	movlw	0
   428     0087  200E               	fcall	_I2C_Read
   429     0088  1283               	bcf	3,5	;RP0=0, select bank0
   430     0089  00A6               	movwf	ISR@data
   431                           
   432                           ;main.c: 23:         uint8_t resp = SPI_write(data);
   433     008A  0826               	movf	ISR@data,w
   434     008B  2039               	fcall	_SPI_write
   435     008C  1283               	bcf	3,5	;RP0=0, select bank0
   436     008D  00A7               	movwf	ISR@resp
   437                           
   438                           ;main.c: 26:         I2C_Write(resp);
   439     008E  0827               	movf	ISR@resp,w
   440     008F  205F               	fcall	_I2C_Write
   441     0090                     i1l887:
   442                           
   443                           ;main.c: 28:         INTCONbits.GPIF = 0;
   444     0090  100B               	bcf	11,0	;volatile
   445     0091                     i1l83:
   446     0091  1283               	bcf	3,5	;RP0=0, select bank0
   447     0092  0825               	movf	??_ISR+1,w
   448     0093  008A               	movwf	10
   449     0094  0E24               	swapf	??_ISR,w
   450     0095  0083               	movwf	3
   451     0096  0EDE               	swapf	btemp,f
   452     0097  0E5E               	swapf	btemp,w
   453     0098  0009               	retfie
   454     0099                     __end_of_ISR:
   455                           
   456                           	psect	intentry
   457     0004                     __pintentry:	
   458                           ;incstack = 0
   459                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
   460                           
   461     0004                     interrupt_function:
   462     005E                     saved_w	set	btemp
   463     0004  00DE               	movwf	btemp
   464     0005  0E03               	swapf	3,w
   465     0006  1283               	bcf	3,5	;RP0=0, select bank0
   466     0007  00A4               	movwf	??_ISR
   467     0008  080A               	movf	10,w
   468     0009  00A5               	movwf	??_ISR+1
   469     000A  2882               	ljmp	_ISR
   470                           
   471                           	psect	text3
   472     0039                     __ptext3:	
   473 ;; *************** function _SPI_write *****************
   474 ;; Defined at:
   475 ;;		line 39 in file "./softwarespi.h"
   476 ;; Parameters:    Size  Location     Type
   477 ;;  data            1    wreg     unsigned char 
   478 ;; Auto vars:     Size  Location     Type
   479 ;;  data            1    1[BANK0 ] unsigned char 
   480 ;;  i               1    3[BANK0 ] unsigned char 
   481 ;;  read            1    2[BANK0 ] unsigned char 
   482 ;; Return value:  Size  Location     Type
   483 ;;                  1    wreg      unsigned char 
   484 ;; Registers used:
   485 ;;		wreg, status,2, status,0
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMMON   BANK0
   491 ;;      Params:         0       0
   492 ;;      Locals:         0       3
   493 ;;      Temps:          0       1
   494 ;;      Totals:         0       4
   495 ;;Total ram usage:        4 bytes
   496 ;; Hardware stack levels used: 1
   497 ;; This function calls:
   498 ;;		Nothing
   499 ;; This function is called by:
   500 ;;		_ISR
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504     0039                     _SPI_write:	
   505                           ;psect for function _SPI_write
   506                           
   507                           
   508                           ;incstack = 0
   509                           ; Regs used in _SPI_write: [wreg+status,2+status,0]
   510                           ;SPI_write@data stored from wreg
   511     0039  1283               	bcf	3,5	;RP0=0, select bank0
   512     003A  00A1               	movwf	SPI_write@data
   513     003B                     i1l861:
   514                           
   515                           ;./softwarespi.h: 40:         uint8_t read = 0;
   516     003B  01A2               	clrf	SPI_write@read
   517     003C                     i1l863:
   518                           
   519                           ;./softwarespi.h: 41:         GPIO1 = 0;
   520     003C  1085               	bcf	5,1	;volatile
   521                           
   522                           ;./softwarespi.h: 44:         for(uint8_t i = 0; i < 8; i++){
   523     003D  01A3               	clrf	SPI_write@i
   524     003E                     i1l73:
   525                           
   526                           ;./softwarespi.h: 45:             if(data & 0x80){
   527     003E  1FA1               	btfss	SPI_write@data,7
   528     003F  2841               	goto	u14_21
   529     0040  2842               	goto	u14_20
   530     0041                     u14_21:
   531     0041  2844               	goto	i1l75
   532     0042                     u14_20:
   533     0042                     i1l869:
   534                           
   535                           ;./softwarespi.h: 46:                 GPIO4 = 1;
   536     0042  1605               	bsf	5,4	;volatile
   537                           
   538                           ;./softwarespi.h: 47:             }else{
   539     0043  2845               	goto	i1l76
   540     0044                     i1l75:
   541                           
   542                           ;./softwarespi.h: 48:                 GPIO4 = 0;
   543     0044  1205               	bcf	5,4	;volatile
   544     0045                     i1l76:	
   545                           ;./softwarespi.h: 49:             }
   546                           
   547                           
   548                           ;./softwarespi.h: 50:             GPIO1 = 1;
   549     0045  1485               	bsf	5,1	;volatile
   550                           
   551                           ;./softwarespi.h: 51:             GPIO1 = 0;
   552     0046  1085               	bcf	5,1	;volatile
   553     0047                     i1l871:
   554                           
   555                           ;./softwarespi.h: 53:             read <<= 1;
   556     0047  1003               	clrc
   557     0048  0DA2               	rlf	SPI_write@read,f
   558     0049                     i1l873:
   559                           
   560                           ;./softwarespi.h: 54:             read |= GPIO3;
   561     0049  3000               	movlw	0
   562     004A  1985               	btfsc	5,3	;volatile
   563     004B  3001               	movlw	1
   564     004C  00A0               	movwf	??_SPI_write
   565     004D  0820               	movf	??_SPI_write,w
   566     004E  04A2               	iorwf	SPI_write@read,f
   567     004F                     i1l875:
   568                           
   569                           ;./softwarespi.h: 55:             data <<= 1;
   570     004F  1003               	clrc
   571     0050  0DA1               	rlf	SPI_write@data,f
   572                           
   573                           ;./softwarespi.h: 56:         }
   574     0051  3001               	movlw	1
   575     0052  00A0               	movwf	??_SPI_write
   576     0053  0820               	movf	??_SPI_write,w
   577     0054  07A3               	addwf	SPI_write@i,f
   578     0055                     i1l877:
   579     0055  3008               	movlw	8
   580     0056  0223               	subwf	SPI_write@i,w
   581     0057  1C03               	skipc
   582     0058  285A               	goto	u15_21
   583     0059  285B               	goto	u15_20
   584     005A                     u15_21:
   585     005A  283E               	goto	i1l73
   586     005B                     u15_20:
   587     005B                     i1l879:
   588                           
   589                           ;./softwarespi.h: 57:         read >>= 1;
   590     005B  1003               	clrc
   591     005C  0CA2               	rrf	SPI_write@read,f
   592                           
   593                           ;./softwarespi.h: 59:         return read;
   594     005D  0822               	movf	SPI_write@read,w
   595     005E                     i1l77:
   596     005E  0008               	return
   597     005F                     __end_of_SPI_write:
   598                           
   599                           	psect	text4
   600     005F                     __ptext4:	
   601 ;; *************** function _I2C_Write *****************
   602 ;; Defined at:
   603 ;;		line 30 in file "./softwarei2c.h"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  data            1    wreg     unsigned char 
   606 ;; Auto vars:     Size  Location     Type
   607 ;;  data            1    1[BANK0 ] unsigned char 
   608 ;;  i               1    2[BANK0 ] unsigned char 
   609 ;; Return value:  Size  Location     Type
   610 ;;                  1    wreg      unsigned char 
   611 ;; Registers used:
   612 ;;		wreg, status,2, status,0
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMMON   BANK0
   618 ;;      Params:         0       0
   619 ;;      Locals:         0       2
   620 ;;      Temps:          0       1
   621 ;;      Totals:         0       3
   622 ;;Total ram usage:        3 bytes
   623 ;; Hardware stack levels used: 1
   624 ;; This function calls:
   625 ;;		Nothing
   626 ;; This function is called by:
   627 ;;		_ISR
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631     005F                     _I2C_Write:	
   632                           ;psect for function _I2C_Write
   633                           
   634                           
   635                           ;incstack = 0
   636                           ; Regs used in _I2C_Write: [wreg+status,2+status,0]
   637                           ;I2C_Write@data stored from wreg
   638     005F  1283               	bcf	3,5	;RP0=0, select bank0
   639     0060  00A1               	movwf	I2C_Write@data
   640     0061                     i1l799:
   641                           
   642                           ;./softwarei2c.h: 30:     uint8_t I2C_Write(uint8_t data);./softwarei2c.h: 31:     {;./s
      +                          oftwarei2c.h: 32:         uint8_t i;;./softwarei2c.h: 33:         for (i = 0; i < 8; i++
      +                          )
   643     0061  01A2               	clrf	I2C_Write@i
   644     0062                     i1l41:
   645                           
   646                           ;./softwarei2c.h: 34:         {;./softwarei2c.h: 35:             if (data & 0x80)
   647     0062  1FA1               	btfss	I2C_Write@data,7
   648     0063  2865               	goto	u9_21
   649     0064  2866               	goto	u9_20
   650     0065                     u9_21:
   651     0065  2868               	goto	i1l43
   652     0066                     u9_20:
   653     0066                     i1l805:
   654                           
   655                           ;./softwarei2c.h: 36:                 GPIO0 = 1;
   656     0066  1405               	bsf	5,0	;volatile
   657     0067  2869               	goto	i1l807
   658     0068                     i1l43:	
   659                           ;./softwarei2c.h: 37:             else
   660                           
   661                           
   662                           ;./softwarei2c.h: 38:                 GPIO0 = 0;
   663     0068  1005               	bcf	5,0	;volatile
   664     0069                     i1l807:
   665                           
   666                           ;./softwarei2c.h: 39:             data <<= 1;
   667     0069  1003               	clrc
   668     006A  0DA1               	rlf	I2C_Write@data,f
   669     006B                     i1l809:
   670                           
   671                           ;./softwarei2c.h: 40:             GPIO2 = 1;
   672     006B  1505               	bsf	5,2	;volatile
   673     006C                     i1l811:
   674                           
   675                           ;./softwarei2c.h: 41:             _delay((unsigned long)((1)*(4000000UL/4000000.0)));
   676     006C  0000               	nop
   677     006D                     i1l813:
   678                           
   679                           ;./softwarei2c.h: 42:             GPIO2 = 0;
   680     006D  1283               	bcf	3,5	;RP0=0, select bank0
   681     006E  1105               	bcf	5,2	;volatile
   682     006F                     i1l815:
   683                           
   684                           ;./softwarei2c.h: 43:             _delay((unsigned long)((1)*(4000000UL/4000000.0)));
   685     006F  0000               	nop
   686     0070                     i1l817:
   687                           
   688                           ;./softwarei2c.h: 44:         }
   689     0070  3001               	movlw	1
   690     0071  1283               	bcf	3,5	;RP0=0, select bank0
   691     0072  00A0               	movwf	??_I2C_Write
   692     0073  0820               	movf	??_I2C_Write,w
   693     0074  07A2               	addwf	I2C_Write@i,f
   694     0075                     i1l819:
   695     0075  3008               	movlw	8
   696     0076  0222               	subwf	I2C_Write@i,w
   697     0077  1C03               	skipc
   698     0078  287A               	goto	u10_21
   699     0079  287B               	goto	u10_20
   700     007A                     u10_21:
   701     007A  2862               	goto	i1l41
   702     007B                     u10_20:
   703     007B                     i1l42:
   704                           
   705                           ;./softwarei2c.h: 45:         GPIO0 = 1;
   706     007B  1405               	bsf	5,0	;volatile
   707                           
   708                           ;./softwarei2c.h: 46:         GPIO2 = 1;
   709     007C  1505               	bsf	5,2	;volatile
   710                           
   711                           ;./softwarei2c.h: 47:         _delay((unsigned long)((1)*(4000000UL/4000000.0)));
   712     007D  0000               	nop
   713     007E                     i1l821:
   714     007E                     i1l823:
   715                           
   716                           ;./softwarei2c.h: 49:         GPIO2 = 0;
   717     007E  1283               	bcf	3,5	;RP0=0, select bank0
   718     007F  1105               	bcf	5,2	;volatile
   719     0080                     i1l825:
   720                           
   721                           ;./softwarei2c.h: 50:         _delay((unsigned long)((1)*(4000000UL/4000000.0)));
   722     0080  0000               	nop
   723     0081                     i1l45:
   724     0081  0008               	return
   725     0082                     __end_of_I2C_Write:
   726                           
   727                           	psect	text5
   728     000E                     __ptext5:	
   729 ;; *************** function _I2C_Read *****************
   730 ;; Defined at:
   731 ;;		line 54 in file "./softwarei2c.h"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  ack             1    wreg     unsigned char 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  ack             1    1[BANK0 ] unsigned char 
   736 ;;  i               1    3[BANK0 ] unsigned char 
   737 ;;  data            1    2[BANK0 ] unsigned char 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      unsigned char 
   740 ;; Registers used:
   741 ;;		wreg, status,2, status,0
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMMON   BANK0
   747 ;;      Params:         0       0
   748 ;;      Locals:         0       3
   749 ;;      Temps:          0       1
   750 ;;      Totals:         0       4
   751 ;;Total ram usage:        4 bytes
   752 ;; Hardware stack levels used: 1
   753 ;; This function calls:
   754 ;;		Nothing
   755 ;; This function is called by:
   756 ;;		_ISR
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760     000E                     _I2C_Read:	
   761                           ;psect for function _I2C_Read
   762                           
   763                           
   764                           ;incstack = 0
   765                           ; Regs used in _I2C_Read: [wreg+status,2+status,0]
   766                           ;I2C_Read@ack stored from wreg
   767     000E  1283               	bcf	3,5	;RP0=0, select bank0
   768     000F  00A1               	movwf	I2C_Read@ack
   769     0010                     i1l829:
   770                           
   771                           ;./softwarei2c.h: 54:     uint8_t I2C_Read(uint8_t ack);./softwarei2c.h: 55:     {;./sof
      +                          twarei2c.h: 56:         uint8_t i, data = 0;
   772     0010  01A2               	clrf	I2C_Read@data
   773     0011                     i1l831:
   774                           
   775                           ;./softwarei2c.h: 57:         GPIO0 = 1;
   776     0011  1405               	bsf	5,0	;volatile
   777                           
   778                           ;./softwarei2c.h: 58:         for (i = 0; i < 8; i++)
   779     0012  01A3               	clrf	I2C_Read@i
   780     0013                     i1l837:
   781                           
   782                           ;./softwarei2c.h: 59:         {;./softwarei2c.h: 60:             data <<= 1;
   783     0013  1003               	clrc
   784     0014  0DA2               	rlf	I2C_Read@data,f
   785     0015                     i1l839:
   786                           
   787                           ;./softwarei2c.h: 61:             GPIO2 = 1;
   788     0015  1505               	bsf	5,2	;volatile
   789     0016                     i1l841:
   790                           
   791                           ;./softwarei2c.h: 62:             _delay((unsigned long)((1)*(4000000UL/4000000.0)));
   792     0016  0000               	nop
   793     0017                     i1l843:
   794                           
   795                           ;./softwarei2c.h: 63:             if (GPIO0)
   796     0017  1283               	bcf	3,5	;RP0=0, select bank0
   797     0018  1C05               	btfss	5,0	;volatile
   798     0019  281B               	goto	u11_21
   799     001A  281C               	goto	u11_20
   800     001B                     u11_21:
   801     001B  281D               	goto	i1l50
   802     001C                     u11_20:
   803     001C                     i1l845:
   804                           
   805                           ;./softwarei2c.h: 64:                 data |= 1;
   806     001C  1422               	bsf	I2C_Read@data,0
   807     001D                     i1l50:
   808                           
   809                           ;./softwarei2c.h: 65:             GPIO2 = 0;
   810     001D  1105               	bcf	5,2	;volatile
   811                           
   812                           ;./softwarei2c.h: 66:             _delay((unsigned long)((1)*(4000000UL/4000000.0)));
   813     001E  0000               	nop
   814     001F                     i1l847:
   815                           
   816                           ;./softwarei2c.h: 67:         }
   817     001F  3001               	movlw	1
   818     0020  1283               	bcf	3,5	;RP0=0, select bank0
   819     0021  00A0               	movwf	??_I2C_Read
   820     0022  0820               	movf	??_I2C_Read,w
   821     0023  07A3               	addwf	I2C_Read@i,f
   822     0024                     i1l849:
   823     0024  3008               	movlw	8
   824     0025  0223               	subwf	I2C_Read@i,w
   825     0026  1C03               	skipc
   826     0027  2829               	goto	u12_21
   827     0028  282A               	goto	u12_20
   828     0029                     u12_21:
   829     0029  2813               	goto	i1l837
   830     002A                     u12_20:
   831     002A                     i1l851:
   832                           
   833                           ;./softwarei2c.h: 68:         if (ack)
   834     002A  0821               	movf	I2C_Read@ack,w
   835     002B  1903               	btfsc	3,2
   836     002C  282E               	goto	u13_21
   837     002D  282F               	goto	u13_20
   838     002E                     u13_21:
   839     002E  2830               	goto	i1l51
   840     002F                     u13_20:
   841     002F                     i1l853:
   842                           
   843                           ;./softwarei2c.h: 69:             GPIO0 = 0;
   844     002F  1005               	bcf	5,0	;volatile
   845     0030                     i1l51:
   846                           
   847                           ;./softwarei2c.h: 70:         GPIO2 = 1;
   848     0030  1505               	bsf	5,2	;volatile
   849                           
   850                           ;./softwarei2c.h: 71:         _delay((unsigned long)((1)*(4000000UL/4000000.0)));
   851     0031  0000               	nop
   852                           
   853                           ;./softwarei2c.h: 72:         GPIO2 = 0;
   854     0032  1283               	bcf	3,5	;RP0=0, select bank0
   855     0033  1105               	bcf	5,2	;volatile
   856                           
   857                           ;./softwarei2c.h: 73:         _delay((unsigned long)((1)*(4000000UL/4000000.0)));
   858     0034  0000               	nop
   859                           
   860                           ;./softwarei2c.h: 74:         GPIO0 = 1;
   861     0035  1283               	bcf	3,5	;RP0=0, select bank0
   862     0036  1405               	bsf	5,0	;volatile
   863     0037                     i1l855:
   864                           
   865                           ;./softwarei2c.h: 75:         return data;
   866     0037  0822               	movf	I2C_Read@data,w
   867     0038                     i1l52:
   868     0038  0008               	return
   869     0039                     __end_of_I2C_Read:
   870     005E                     btemp	set	94	;btemp
   871     005E                     wtemp0	set	94
   872                           
   873                           	psect	config
   874                           
   875                           ;Config register CONFIG @ 0x2007
   876                           ;	Oscillator Selection bits
   877                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
   878                           ;	Watchdog Timer Enable bit
   879                           ;	WDTE = OFF, WDT disabled
   880                           ;	Power-Up Timer Enable bit
   881                           ;	PWRTE = ON, PWRT enabled
   882                           ;	GP3/MCLR pin function select
   883                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
   884                           ;	Brown-out Detect Enable bit
   885                           ;	BOREN = ON, BOD enabled
   886                           ;	Code Protection bit
   887                           ;	CP = OFF, Program Memory code protection is disabled
   888                           ;	Data Code Protection bit
   889                           ;	CPD = OFF, Data memory code protection is disabled
   890     2007                     	org	8199
   891     2007  31C4               	dw	12740

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      8       8

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_I2C_Read
    _ISR->_SPI_write

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                    _SPI_init_master
 ---------------------------------------------------------------------------------
 (1) _SPI_init_master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0     310
                                              4 BANK0      4     4      0
                           _I2C_Read
                          _I2C_Write
                          _SPI_write
 ---------------------------------------------------------------------------------
 (3) _SPI_write                                            4     4      0      95
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            3     3      0      76
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             4     4      0      93
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init_master

 _ISR (ROOT)
   _I2C_Read
   _I2C_Write
   _SPI_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      8       8       4       12.9%
ABS                  0      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Apr 21 10:34:21 2023

                     l70 00B1                       l88 00A8                       l89 00A8  
                    l901 00A5                      l903 00A6                      l859 00AA  
                    l891 009D                      l893 009F                      l895 00A1  
                    l897 00A2                      l889 0099                      l899 00A4  
                    _ISR 0082                     ?_ISR 0020                     _GPIO 0005  
                   i1l41 0062                     i1l50 001D                     i1l42 007B  
                   i1l51 0030                     i1l43 0068                     i1l52 0038  
                   i1l45 0081                     i1l73 003E                     i1l75 0044  
                   i1l83 0091                     i1l76 0045                     i1l77 005E  
                   u9_20 0066                     u9_21 0065                     _main 0099  
       __end_of_I2C_Read 0039                     btemp 005E                     start 000B  
                  ??_ISR 0024                    ?_main 0020                    _CMCON 0019  
                  _ANSEL 009F                    _GPIO0 0028                    _GPIO1 0029  
                  _GPIO2 002A                    _GPIO3 002B                    _GPIO4 002C  
                  i1l811 006C                    i1l821 007E                    i1l813 006D  
                  i1l805 0066                    i1l831 0011                    i1l823 007E  
                  i1l815 006F                    i1l807 0069                    i1l841 0016  
                  i1l825 0080                    i1l817 0070                    i1l809 006B  
                  i1l851 002A                    i1l843 0017                    i1l819 0075  
                  i1l853 002F                    i1l845 001C                    i1l837 0013  
                  i1l829 0010                    i1l861 003B                    i1l855 0037  
                  i1l847 001F                    i1l839 0015                    i1l871 0047  
                  i1l863 003C                    i1l849 0024                    i1l873 0049  
                  i1l875 004F                    i1l883 0082                    i1l877 0055  
                  i1l869 0042                    i1l885 0086                    i1l799 0061  
                  i1l879 005B                    i1l887 0090                    u10_20 007B  
                  u10_21 007A                    u11_20 001C                    u11_21 001B  
                  u12_20 002A                    u12_21 0029                    u13_20 002F  
                  u13_21 002E                    u14_20 0042                    u14_21 0041  
                  u15_20 005B                    u15_21 005A                    u16_20 0086  
                  u16_21 0085                    _VRCON 0099        __end_of_I2C_Write 0082  
                  pclath 000A                    status 0003                    wtemp0 005E  
        __initialization 000C             __end_of_main 00AA                   ??_main 0000  
              I2C_Read@i 0023                   _ADCON0 001F                   _TRISIO 0085  
              ?_I2C_Read 0020                   saved_w 005E        __end_of_SPI_write 005F  
__end_of__initialization 000C           __pcstackCOMMON 0000           _OPTION_REGbits 0081  
             ??_I2C_Read 0020        ??_SPI_init_master 0000                  ISR@data 0026  
                ISR@resp 0027               __pmaintext 0099             I2C_Read@data 0022  
             __pintentry 0004               I2C_Write@i 0022                  _TRISIO0 0428  
                _TRISIO1 0429                  _TRISIO2 042A                  _TRISIO3 042B  
                _TRISIO4 042C                _I2C_Write 005F                  __ptext1 00AA  
                __ptext2 0082                  __ptext3 0039                  __ptext4 005F  
                __ptext5 000E     end_of_initialization 000C               ?_I2C_Write 0020  
              _SPI_write 0039          _SPI_init_master 00AA      start_initialization 000C  
            __end_of_ISR 0099               ?_SPI_write 0020              ??_I2C_Write 0020  
              ___latbits 0000            __pcstackBANK0 0020  __end_of_SPI_init_master 00B2  
            I2C_Read@ack 0021            SPI_write@data 0021            SPI_write@read 0022  
               _I2C_Read 000E              ??_SPI_write 0020        interrupt_function 0004  
       ?_SPI_init_master 0020            I2C_Write@data 0021               SPI_write@i 0023  
             _INTCONbits 000B                 intlevel1 0000  
