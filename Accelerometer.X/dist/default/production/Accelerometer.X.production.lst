

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Mar 31 12:45:59 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x5E,2
    12     0000                     
    13                           ; Version 2.40
    14                           ; Generated 04/07/2022 GMT
    15                           ; 
    16                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC12F675 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48     0000                     	;# 
    49     0001                     	;# 
    50     0002                     	;# 
    51     0003                     	;# 
    52     0004                     	;# 
    53     0005                     	;# 
    54     000A                     	;# 
    55     000B                     	;# 
    56     000C                     	;# 
    57     000E                     	;# 
    58     000E                     	;# 
    59     000F                     	;# 
    60     0010                     	;# 
    61     0019                     	;# 
    62     001E                     	;# 
    63     001F                     	;# 
    64     0081                     	;# 
    65     0085                     	;# 
    66     008C                     	;# 
    67     008E                     	;# 
    68     0090                     	;# 
    69     0095                     	;# 
    70     0096                     	;# 
    71     0096                     	;# 
    72     0099                     	;# 
    73     009A                     	;# 
    74     009A                     	;# 
    75     009B                     	;# 
    76     009C                     	;# 
    77     009D                     	;# 
    78     009E                     	;# 
    79     009F                     	;# 
    80     0000                     	;# 
    81     0001                     	;# 
    82     0002                     	;# 
    83     0003                     	;# 
    84     0004                     	;# 
    85     0005                     	;# 
    86     000A                     	;# 
    87     000B                     	;# 
    88     000C                     	;# 
    89     000E                     	;# 
    90     000E                     	;# 
    91     000F                     	;# 
    92     0010                     	;# 
    93     0019                     	;# 
    94     001E                     	;# 
    95     001F                     	;# 
    96     0081                     	;# 
    97     0085                     	;# 
    98     008C                     	;# 
    99     008E                     	;# 
   100     0090                     	;# 
   101     0095                     	;# 
   102     0096                     	;# 
   103     0096                     	;# 
   104     0099                     	;# 
   105     009A                     	;# 
   106     009A                     	;# 
   107     009B                     	;# 
   108     009C                     	;# 
   109     009D                     	;# 
   110     009E                     	;# 
   111     009F                     	;# 
   112     0019                     _CMCON	set	25
   113     001E                     _ADRESH	set	30
   114     001F                     _ADCON0	set	31
   115     002C                     _GP4	set	44
   116     00F9                     _GO_DONE	set	249
   117     0085                     _TRISIO	set	133
   118     0099                     _VRCON	set	153
   119     009F                     _ANSEL	set	159
   120                           
   121                           	psect	cinit
   122     03FD                     start_initialization:	
   123                           ; #config settings
   124                           
   125     03FD                     __initialization:
   126     03FD                     end_of_initialization:	
   127                           ;End of C runtime variable initialization code
   128                           
   129     03FD                     __end_of__initialization:
   130     03FD  0183               	clrf	3
   131     03FE  2B9E               	ljmp	_main	;jump to C main() function
   132                           
   133                           	psect	cstackCOMMON
   134     0000                     __pcstackCOMMON:
   135     0000                     ??_ADC_Init:
   136     0000                     ??_ADC_Read:	
   137                           ; 1 bytes @ 0x0
   138                           
   139                           
   140                           	psect	cstackBANK0
   141     0020                     __pcstackBANK0:	
   142                           ; 1 bytes @ 0x0
   143                           
   144     0020                     ?_ADC_Init:
   145     0020                     ?_ADC_Read:	
   146                           ; 1 bytes @ 0x0
   147                           
   148     0020                     ?_main:	
   149                           ; 1 bytes @ 0x0
   150                           
   151     0020                     ??_main:	
   152                           ; 1 bytes @ 0x0
   153                           
   154                           
   155                           ; 1 bytes @ 0x0
   156     0020                     	ds	2
   157     0022                     main@read:
   158                           
   159                           ; 1 bytes @ 0x2
   160     0022                     	ds	1
   161     0023                     main@i:
   162                           
   163                           ; 2 bytes @ 0x3
   164     0023                     	ds	2
   165     0025                     main@avg:
   166                           
   167                           ; 1 bytes @ 0x5
   168     0025                     	ds	1
   169                           
   170                           	psect	maintext
   171     039E                     __pmaintext:	
   172 ;;
   173 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   174 ;;
   175 ;; *************** function _main *****************
   176 ;; Defined at:
   177 ;;		line 26 in file "newmain.c"
   178 ;; Parameters:    Size  Location     Type
   179 ;;		None
   180 ;; Auto vars:     Size  Location     Type
   181 ;;  read            1    2[BANK0 ] unsigned char 
   182 ;;  i               2    3[BANK0 ] int 
   183 ;;  avg             1    5[BANK0 ] unsigned char 
   184 ;; Return value:  Size  Location     Type
   185 ;;                  1    wreg      void 
   186 ;; Registers used:
   187 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   188 ;; Tracked objects:
   189 ;;		On entry : B00/0
   190 ;;		On exit  : 0/0
   191 ;;		Unchanged: 0/0
   192 ;; Data sizes:     COMMON   BANK0
   193 ;;      Params:         0       0
   194 ;;      Locals:         0       4
   195 ;;      Temps:          0       2
   196 ;;      Totals:         0       6
   197 ;;Total ram usage:        6 bytes
   198 ;; Hardware stack levels required when called: 1
   199 ;; This function calls:
   200 ;;		_ADC_Init
   201 ;;		_ADC_Read
   202 ;; This function is called by:
   203 ;;		Startup code after reset
   204 ;; This function uses a non-reentrant model
   205 ;;
   206                           
   207     039E                     _main:	
   208                           ;psect for function _main
   209                           
   210     039E                     l689:	
   211                           ;incstack = 0
   212                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   213                           
   214                           
   215                           ;newmain.c: 27:     ANSEL = 0;
   216     039E  1683               	bsf	3,5	;RP0=1, select bank1
   217     039F  019F               	clrf	31	;volatile
   218                           
   219                           ;newmain.c: 28:     ADCON0 = 0;
   220     03A0  1283               	bcf	3,5	;RP0=0, select bank0
   221     03A1  019F               	clrf	31	;volatile
   222     03A2                     l691:
   223                           
   224                           ;newmain.c: 29:     CMCON = 0x07;
   225     03A2  3007               	movlw	7
   226     03A3  0099               	movwf	25	;volatile
   227     03A4                     l693:
   228                           
   229                           ;newmain.c: 30:     VRCON = 0;
   230     03A4  1683               	bsf	3,5	;RP0=1, select bank1
   231     03A5  0199               	clrf	25	;volatile
   232                           
   233                           ;newmain.c: 32:     TRISIO = 0b00000100;
   234     03A6  3004               	movlw	4
   235     03A7  0085               	movwf	5	;volatile
   236     03A8                     l695:
   237                           
   238                           ;newmain.c: 33:     ADC_Init();
   239     03A8  2392               	fcall	_ADC_Init
   240     03A9                     l697:
   241                           
   242                           ;newmain.c: 35:     _delay((unsigned long)((10)*(4000000UL/4000.0)));
   243     03A9  300D               	movlw	13
   244     03AA  1283               	bcf	3,5	;RP0=0, select bank0
   245     03AB  00A1               	movwf	??_main+1
   246     03AC  30FB               	movlw	251
   247     03AD  00A0               	movwf	??_main
   248     03AE                     u97:
   249     03AE  0BA0               	decfsz	??_main,f
   250     03AF  2BAE               	goto	u97
   251     03B0  0BA1               	decfsz	??_main+1,f
   252     03B1  2BAE               	goto	u97
   253     03B2  2BB3               	nop2
   254     03B3                     l699:
   255                           
   256                           ;newmain.c: 37:     uint8_t avg = 0;
   257     03B3  1283               	bcf	3,5	;RP0=0, select bank0
   258     03B4  01A5               	clrf	main@avg
   259     03B5                     l701:
   260                           
   261                           ;newmain.c: 40:     for (int i = 0; i<400; i++){
   262     03B5  01A3               	clrf	main@i
   263     03B6  01A4               	clrf	main@i+1
   264     03B7                     l707:
   265                           
   266                           ;newmain.c: 41:         uint8_t read = ADC_Read();
   267     03B7  2396               	fcall	_ADC_Read
   268     03B8  1283               	bcf	3,5	;RP0=0, select bank0
   269     03B9  00A2               	movwf	main@read
   270     03BA                     l709:
   271                           
   272                           ;newmain.c: 42:         if (read > avg) {
   273     03BA  0822               	movf	main@read,w
   274     03BB  0225               	subwf	main@avg,w
   275     03BC  1803               	skipnc
   276     03BD  2BBF               	goto	u61
   277     03BE  2BC0               	goto	u60
   278     03BF                     u61:
   279     03BF  2BC5               	goto	l713
   280     03C0                     u60:
   281     03C0                     l711:
   282                           
   283                           ;newmain.c: 43:             avg++;
   284     03C0  3001               	movlw	1
   285     03C1  00A0               	movwf	??_main
   286     03C2  0820               	movf	??_main,w
   287     03C3  07A5               	addwf	main@avg,f
   288                           
   289                           ;newmain.c: 44:         }else{
   290     03C4  2BC7               	goto	l715
   291     03C5                     l713:
   292                           
   293                           ;newmain.c: 45:             avg--;
   294     03C5  3001               	movlw	1
   295     03C6  02A5               	subwf	main@avg,f
   296     03C7                     l715:
   297                           
   298                           ;newmain.c: 47:         _delay((unsigned long)((5)*(4000000UL/4000.0)));
   299     03C7  3007               	movlw	7
   300     03C8  00A1               	movwf	??_main+1
   301     03C9  307D               	movlw	125
   302     03CA  00A0               	movwf	??_main
   303     03CB                     u107:
   304     03CB  0BA0               	decfsz	??_main,f
   305     03CC  2BCB               	goto	u107
   306     03CD  0BA1               	decfsz	??_main+1,f
   307     03CE  2BCB               	goto	u107
   308     03CF                     l717:
   309                           
   310                           ;newmain.c: 48:     }
   311     03CF  3001               	movlw	1
   312     03D0  1283               	bcf	3,5	;RP0=0, select bank0
   313     03D1  07A3               	addwf	main@i,f
   314     03D2  1803               	skipnc
   315     03D3  0AA4               	incf	main@i+1,f
   316     03D4  3000               	movlw	0
   317     03D5  07A4               	addwf	main@i+1,f
   318     03D6                     l719:
   319     03D6  0824               	movf	main@i+1,w
   320     03D7  3A80               	xorlw	128
   321     03D8  00DF               	movwf	btemp+1
   322     03D9  3081               	movlw	129
   323     03DA  025F               	subwf	btemp+1,w
   324     03DB  1D03               	skipz
   325     03DC  2BDF               	goto	u75
   326     03DD  3090               	movlw	144
   327     03DE  0223               	subwf	main@i,w
   328     03DF                     u75:
   329     03DF  1C03               	skipc
   330     03E0  2BE2               	goto	u71
   331     03E1  2BE3               	goto	u70
   332     03E2                     u71:
   333     03E2  2BB7               	goto	l707
   334     03E3                     u70:
   335     03E3                     l721:
   336                           
   337                           ;newmain.c: 50:     avg+=2;
   338     03E3  3002               	movlw	2
   339     03E4  1283               	bcf	3,5	;RP0=0, select bank0
   340     03E5  00A0               	movwf	??_main
   341     03E6  0820               	movf	??_main,w
   342     03E7  07A5               	addwf	main@avg,f
   343     03E8                     l723:
   344                           
   345                           ;newmain.c: 53:         if(ADC_Read()> avg){
   346     03E8  2396               	fcall	_ADC_Read
   347     03E9  1283               	bcf	3,5	;RP0=0, select bank0
   348     03EA  0225               	subwf	main@avg,w
   349     03EB  1803               	skipnc
   350     03EC  2BEE               	goto	u81
   351     03ED  2BEF               	goto	u80
   352     03EE                     u81:
   353     03EE  2BF1               	goto	l37
   354     03EF                     u80:
   355     03EF                     l725:
   356                           
   357                           ;newmain.c: 54:             GP4 = 1;
   358     03EF  1605               	bsf	5,4	;volatile
   359                           
   360                           ;newmain.c: 55:         }
   361     03F0  2BF2               	goto	l727
   362     03F1                     l37:	
   363                           ;newmain.c: 56:         else{
   364                           
   365                           
   366                           ;newmain.c: 57:             GP4 = 0;
   367     03F1  1205               	bcf	5,4	;volatile
   368     03F2                     l727:
   369                           
   370                           ;newmain.c: 59:         _delay((unsigned long)((100)*(4000000UL/4000.0)));
   371     03F2  3082               	movlw	130
   372     03F3  00A1               	movwf	??_main+1
   373     03F4  30DD               	movlw	221
   374     03F5  00A0               	movwf	??_main
   375     03F6                     u117:
   376     03F6  0BA0               	decfsz	??_main,f
   377     03F7  2BF6               	goto	u117
   378     03F8  0BA1               	decfsz	??_main+1,f
   379     03F9  2BF6               	goto	u117
   380     03FA  2BFB               	nop2
   381     03FB  2BE8               	goto	l723
   382     03FC  2800               	ljmp	start
   383     03FD                     __end_of_main:
   384                           
   385                           	psect	text1
   386     0396                     __ptext1:	
   387 ;; *************** function _ADC_Read *****************
   388 ;; Defined at:
   389 ;;		line 18 in file "newmain.c"
   390 ;; Parameters:    Size  Location     Type
   391 ;;		None
   392 ;; Auto vars:     Size  Location     Type
   393 ;;		None
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      unsigned char 
   396 ;; Registers used:
   397 ;;		wreg
   398 ;; Tracked objects:
   399 ;;		On entry : 0/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMMON   BANK0
   403 ;;      Params:         0       0
   404 ;;      Locals:         0       0
   405 ;;      Temps:          0       0
   406 ;;      Totals:         0       0
   407 ;;Total ram usage:        0 bytes
   408 ;; Hardware stack levels used: 1
   409 ;; This function calls:
   410 ;;		Nothing
   411 ;; This function is called by:
   412 ;;		_main
   413 ;; This function uses a non-reentrant model
   414 ;;
   415                           
   416     0396                     _ADC_Read:	
   417                           ;psect for function _ADC_Read
   418                           
   419     0396                     l683:	
   420                           ;incstack = 0
   421                           ; Regs used in _ADC_Read: [wreg]
   422                           
   423                           
   424                           ;newmain.c: 20:     GO_DONE = 1;
   425     0396  1283               	bcf	3,5	;RP0=0, select bank0
   426     0397  149F               	bsf	31,1	;volatile
   427     0398                     l24:	
   428                           ;newmain.c: 21:     while(GO_DONE == 1);
   429                           
   430     0398  189F               	btfsc	31,1	;volatile
   431     0399  2B9B               	goto	u51
   432     039A  2B9C               	goto	u50
   433     039B                     u51:
   434     039B  2B98               	goto	l24
   435     039C                     u50:
   436     039C                     l685:
   437                           
   438                           ;newmain.c: 22:     return(ADRESH);
   439     039C  081E               	movf	30,w	;volatile
   440     039D                     l27:
   441     039D  0008               	return
   442     039E                     __end_of_ADC_Read:
   443                           
   444                           	psect	text2
   445     0392                     __ptext2:	
   446 ;; *************** function _ADC_Init *****************
   447 ;; Defined at:
   448 ;;		line 12 in file "newmain.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;		None
   451 ;; Auto vars:     Size  Location     Type
   452 ;;		None
   453 ;; Return value:  Size  Location     Type
   454 ;;                  1    wreg      void 
   455 ;; Registers used:
   456 ;;		wreg
   457 ;; Tracked objects:
   458 ;;		On entry : 0/0
   459 ;;		On exit  : 0/0
   460 ;;		Unchanged: 0/0
   461 ;; Data sizes:     COMMON   BANK0
   462 ;;      Params:         0       0
   463 ;;      Locals:         0       0
   464 ;;      Temps:          0       0
   465 ;;      Totals:         0       0
   466 ;;Total ram usage:        0 bytes
   467 ;; Hardware stack levels used: 1
   468 ;; This function calls:
   469 ;;		Nothing
   470 ;; This function is called by:
   471 ;;		_main
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475     0392                     _ADC_Init:	
   476                           ;psect for function _ADC_Init
   477                           
   478     0392                     l681:	
   479                           ;incstack = 0
   480                           ; Regs used in _ADC_Init: [wreg]
   481                           
   482                           
   483                           ;newmain.c: 14:    ADCON0 = 0b00001001;
   484     0392  3009               	movlw	9
   485     0393  1283               	bcf	3,5	;RP0=0, select bank0
   486     0394  009F               	movwf	31	;volatile
   487     0395                     l21:
   488     0395  0008               	return
   489     0396                     __end_of_ADC_Init:
   490     005E                     btemp	set	94	;btemp
   491     005E                     wtemp0	set	94
   492                           
   493                           	psect	config
   494                           
   495                           ;Config register CONFIG @ 0x2007
   496                           ;	Oscillator Selection bits
   497                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
   498                           ;	Watchdog Timer Enable bit
   499                           ;	WDTE = OFF, WDT disabled
   500                           ;	Power-Up Timer Enable bit
   501                           ;	PWRTE = ON, PWRT enabled
   502                           ;	GP3/MCLR pin function select
   503                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
   504                           ;	Brown-out Detect Enable bit
   505                           ;	BOREN = ON, BOD enabled
   506                           ;	Code Protection bit
   507                           ;	CP = OFF, Program Memory code protection is disabled
   508                           ;	Data Code Protection bit
   509                           ;	CPD = OFF, Data memory code protection is disabled
   510     2007                     	org	8199
   511     2007  31C4               	dw	12740

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      6       6

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     117
                                              0 BANK0      6     6      0
                           _ADC_Init
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      6       6       4        9.7%
ABS                  0      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Mar 31 12:45:59 2023

                     l21 0395                       l24 0398                       l27 039D  
                     l37 03F1                       u50 039C                       u51 039B  
                     u60 03C0                       u61 03BF                       u70 03E3  
                     u71 03E2                       u80 03EF                       u81 03EE  
                     u75 03DF                       u97 03AE                      l701 03B5  
                    l711 03C0                      l721 03E3                      l713 03C5  
                    l723 03E8                      l715 03C7                      l707 03B7  
                    l725 03EF                      l717 03CF                      l709 03BA  
                    l727 03F2                      l719 03D6                      l681 0392  
                    l683 0396                      l691 03A2                      l685 039C  
                    l693 03A4                      l695 03A8                      l697 03A9  
                    l689 039E                      l699 03B3                      _GP4 002C  
                    u107 03CB                      u117 03F6                     _main 039E  
                   btemp 005E         __end_of_ADC_Init 0396         __end_of_ADC_Read 039E  
                   start 0000                    ?_main 0020                    _CMCON 0019  
                  _ANSEL 009F                    _VRCON 0099                    main@i 0023  
                  status 0003                    wtemp0 005E          __initialization 03FD  
           __end_of_main 03FD                   ??_main 0020                   _ADCON0 001F  
                 _ADRESH 001E                   _TRISIO 0085                ?_ADC_Init 0020  
              ?_ADC_Read 0020  __end_of__initialization 03FD           __pcstackCOMMON 0000  
             ??_ADC_Init 0000               ??_ADC_Read 0000               __pmaintext 039E  
                _GO_DONE 00F9                  __ptext1 0396                  __ptext2 0392  
                main@avg 0025     end_of_initialization 03FD      start_initialization 03FD  
              ___latbits 0000            __pcstackBANK0 0020                 _ADC_Init 0392  
               _ADC_Read 0396                 main@read 0022  
